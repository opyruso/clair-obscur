var MUIDataGrid = (() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn2, res) => function __init() {
    return fn2 && (res = (0, fn2[__getOwnPropNames(fn2)[0]])(fn2 = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from2, except, desc) => {
    if (from2 && typeof from2 === "object" || typeof from2 === "function") {
      for (let key of __getOwnPropNames(from2))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from2[key], enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports, module) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.3.1";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            // Used to reproduce behavior of `batchedUpdates` in legacy mode.
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn(format) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            /**
             * Checks whether or not this composite component is mounted.
             * @param {ReactClass} publicInstance The instance we want to test.
             * @return {boolean} True if mounted, false otherwise.
             * @protected
             * @final
             */
            isMounted: function(publicInstance) {
              return false;
            },
            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            /**
             * Replaces all of the state. Always use this or `setState` to mutate state.
             * You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} completeState Next state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            /**
             * Sets a subset of the state. This only exists because _pendingState is
             * internal. This provides a merging strategy that is not available to deep
             * properties which is confusing. TODO: Expose pendingState or don't use it
             * during the merge.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} partialState Next partial state to be merged with state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} Name of the calling function in the public API.
             * @internal
             */
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign2 = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component.prototype.isReactComponent = {};
          Component.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          assign2(pureComponentPrototype, Component.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement5(type, config, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              self = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps2 = type.defaultProps;
              for (propName in defaultProps2) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps2[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement21(element, config, children) {
            if (element === null || element === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
            var propName;
            var props = assign2({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              var defaultProps2;
              if (element.type && element.type.defaultProps) {
                defaultProps2 = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps2 !== void 0) {
                    props[propName] = defaultProps2[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self, source, owner, props);
          }
          function isValidElement13(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match2) {
              return escaperLookup[match2];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index) {
            if (typeof element === "object" && element !== null && element.key != null) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape("" + element.key);
            }
            return index.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                  return c;
                });
              } else if (mappedChild != null) {
                if (isValidElement13(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                      // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                      // eslint-disable-next-line react-internal/safe-string-coercion
                      escapeUserProvidedKey("" + mappedChild.key) + "/"
                    ) : "") + childKey
                  );
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray(children)) {
              for (var i = 0; i < children.length; i++) {
                child = children[i];
                nextName = nextNamePrefix + getElementKey(child, i);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n = 0;
            mapChildren(children, function() {
              n++;
            });
            return n;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement13(children)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children;
          }
          function createContext13(defaultValue) {
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              // As a workaround to support multiple concurrent renderers, we categorize
              // some renderers as primary and others as secondary. We only expect
              // there to be two concurrent renderers at most: React Native (primary) and
              // Fabric (secondary); React DOM (primary) and React ART (secondary).
              // Secondary renderers store their context values on separate fields.
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              // Used to track how many concurrent renderers this context currently
              // supports within in a single renderer. Such as parallel server rendering.
              _threadCount: 0,
              // These are circular
              Provider: null,
              Consumer: null,
              // Add these to use same hidden class in VM as ServerContext
              _defaultValue: null,
              _globalName: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              // We use these fields to store the result.
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps2;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps2;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps2 = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef99(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!render.name && !render.displayName) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo9(type, compare) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!type.name && !type.displayName) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext17(Context) {
            var dispatcher = resolveDispatcher();
            {
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context);
          }
          function useState45(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef78(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect63(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useInsertionEffect3(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create, deps);
          }
          function useLayoutEffect11(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback79(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo35(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle10(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue2(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId2() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign2({}, props, {
                    value: prevLog
                  }),
                  info: assign2({}, props, {
                    value: prevInfo
                  }),
                  warn: assign2({}, props, {
                    value: prevWarn
                  }),
                  error: assign2({}, props, {
                    value: prevError
                  }),
                  group: assign2({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign2({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign2({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match2 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn2, construct) {
            if (!fn2 || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn2);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn2, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn2.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn2();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn2.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn2.displayName);
                          }
                          {
                            if (typeof fn2 === "function") {
                              componentFrameCache.set(fn2, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn2 ? fn2.displayName || fn2.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn2 === "function") {
                componentFrameCache.set(fn2, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn2, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn2, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values3, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node2, parentType) {
            if (typeof node2 !== "object") {
              return;
            }
            if (isArray(node2)) {
              for (var i = 0; i < node2.length; i++) {
                var child = node2[i];
                if (isValidElement13(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement13(node2)) {
              if (node2._store) {
                node2._store.validated = true;
              }
            } else if (node2) {
              var iteratorFn = getIteratorFn(node2);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node2.entries) {
                  var iterator = iteratorFn.call(node2);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement13(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement5.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement21.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module && module[requireString];
                enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error2) {
                popActScope(prevActScopeDepth);
                throw error2;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                      } else {
                        resolve(returnValue2);
                      }
                    }, function(error2) {
                      popActScope(prevActScopeDepth);
                      reject(error2);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                      } else {
                        resolve(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve, reject) {
                      resolve(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    }
                  });
                } catch (error2) {
                  reject(error2);
                }
              } else {
                resolve(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i = 0;
                try {
                  for (; i < queue.length; i++) {
                    var callback = queue[i];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error2) {
                  queue = queue.slice(i + 1);
                  throw error2;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children9 = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports.Children = Children9;
          exports.Component = Component;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.Profiler = REACT_PROFILER_TYPE;
          exports.PureComponent = PureComponent;
          exports.StrictMode = REACT_STRICT_MODE_TYPE;
          exports.Suspense = REACT_SUSPENSE_TYPE;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.act = act;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext13;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef;
          exports.forwardRef = forwardRef99;
          exports.isValidElement = isValidElement13;
          exports.lazy = lazy;
          exports.memo = memo9;
          exports.startTransition = startTransition;
          exports.unstable_act = act;
          exports.useCallback = useCallback79;
          exports.useContext = useContext17;
          exports.useDebugValue = useDebugValue2;
          exports.useDeferredValue = useDeferredValue;
          exports.useEffect = useEffect63;
          exports.useId = useId2;
          exports.useImperativeHandle = useImperativeHandle10;
          exports.useInsertionEffect = useInsertionEffect3;
          exports.useLayoutEffect = useLayoutEffect11;
          exports.useMemo = useMemo35;
          exports.useReducer = useReducer;
          exports.useRef = useRef78;
          exports.useState = useState45;
          exports.useSyncExternalStore = useSyncExternalStore;
          exports.useTransition = useTransition;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/@babel/runtime/helpers/esm/extends.js
  function _extends() {
    return _extends = Object.assign ? Object.assign.bind() : function(n) {
      for (var e = 1; e < arguments.length; e++) {
        var t = arguments[e];
        for (var r2 in t) ({}).hasOwnProperty.call(t, r2) && (n[r2] = t[r2]);
      }
      return n;
    }, _extends.apply(null, arguments);
  }
  var init_extends = __esm({
    "node_modules/@babel/runtime/helpers/esm/extends.js"() {
    }
  });

  // node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    "node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType(type) {
            return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
            type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment22 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal3 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement2(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment4(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment22;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal3;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement2;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment4;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/prop-types/node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "node_modules/prop-types/node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development();
      }
    }
  });

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "node_modules/object-assign/index.js"(exports, module) {
      "use strict";
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i = 0; i < 10; i++) {
            test2["_" + String.fromCharCode(i)] = i;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      module.exports = shouldUseNative() ? Object.assign : function(target, source) {
        var from2;
        var to = toObject(target);
        var symbols;
        for (var s = 1; s < arguments.length; s++) {
          from2 = Object(arguments[s]);
          for (var key in from2) {
            if (hasOwnProperty.call(from2, key)) {
              to[key] = from2[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from2);
            for (var i = 0; i < symbols.length; i++) {
              if (propIsEnumerable.call(from2, symbols[i])) {
                to[symbols[i]] = from2[symbols[i]];
              }
            }
          }
        }
        return to;
      };
    }
  });

  // node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret = __commonJS({
    "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
      "use strict";
      var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      module.exports = ReactPropTypesSecret;
    }
  });

  // node_modules/prop-types/lib/has.js
  var require_has = __commonJS({
    "node_modules/prop-types/lib/has.js"(exports, module) {
      module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
    }
  });

  // node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes = __commonJS({
    "node_modules/prop-types/checkPropTypes.js"(exports, module) {
      "use strict";
      var printWarning = function() {
      };
      if (true) {
        ReactPropTypesSecret = require_ReactPropTypesSecret();
        loggedTypeFailures = {};
        has = require_has();
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      var ReactPropTypesSecret;
      var loggedTypeFailures;
      var has;
      function checkPropTypes(typeSpecs, values3, location, componentName, getStack) {
        if (true) {
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error(
                    (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                  );
                  err.name = "Invariant Violation";
                  throw err;
                }
                error = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location, null, ReactPropTypesSecret);
              } catch (ex) {
                error = ex;
              }
              if (error && !(error instanceof Error)) {
                printWarning(
                  (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
                );
              }
              if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                loggedTypeFailures[error.message] = true;
                var stack = getStack ? getStack() : "";
                printWarning(
                  "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
                );
              }
            }
          }
        }
      }
      checkPropTypes.resetWarningCache = function() {
        if (true) {
          loggedTypeFailures = {};
        }
      };
      module.exports = checkPropTypes;
    }
  });

  // node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers = __commonJS({
    "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
      "use strict";
      var ReactIs = require_react_is();
      var assign2 = require_object_assign();
      var ReactPropTypesSecret = require_ReactPropTypesSecret();
      var has = require_has();
      var checkPropTypes = require_checkPropTypes();
      var printWarning = function() {
      };
      if (true) {
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      function emptyFunctionThatReturnsNull() {
        return null;
      }
      module.exports = function(isValidElement13, throwOnDirectAccess) {
        var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
          if (typeof iteratorFn === "function") {
            return iteratorFn;
          }
        }
        var ANONYMOUS = "<<anonymous>>";
        var ReactPropTypes = {
          array: createPrimitiveTypeChecker("array"),
          bigint: createPrimitiveTypeChecker("bigint"),
          bool: createPrimitiveTypeChecker("boolean"),
          func: createPrimitiveTypeChecker("function"),
          number: createPrimitiveTypeChecker("number"),
          object: createPrimitiveTypeChecker("object"),
          string: createPrimitiveTypeChecker("string"),
          symbol: createPrimitiveTypeChecker("symbol"),
          any: createAnyTypeChecker(),
          arrayOf: createArrayOfTypeChecker,
          element: createElementTypeChecker(),
          elementType: createElementTypeTypeChecker(),
          instanceOf: createInstanceTypeChecker,
          node: createNodeChecker(),
          objectOf: createObjectOfTypeChecker,
          oneOf: createEnumTypeChecker,
          oneOfType: createUnionTypeChecker,
          shape: createShapeTypeChecker,
          exact: createStrictShapeTypeChecker
        };
        function is2(x, y) {
          if (x === y) {
            return x !== 0 || 1 / x === 1 / y;
          } else {
            return x !== x && y !== y;
          }
        }
        function PropTypeError(message, data) {
          this.message = message;
          this.data = data && typeof data === "object" ? data : {};
          this.stack = "";
        }
        PropTypeError.prototype = Error.prototype;
        function createChainableTypeChecker(validate) {
          if (true) {
            var manualPropTypeCallCache = {};
            var manualPropTypeWarningCount = 0;
          }
          function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
              if (throwOnDirectAccess) {
                var err = new Error(
                  "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
                );
                err.name = "Invariant Violation";
                throw err;
              } else if (typeof console !== "undefined") {
                var cacheKey = componentName + ":" + propName;
                if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
                manualPropTypeWarningCount < 3) {
                  printWarning(
                    "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                  );
                  manualPropTypeCallCache[cacheKey] = true;
                  manualPropTypeWarningCount++;
                }
              }
            }
            if (props[propName] == null) {
              if (isRequired) {
                if (props[propName] === null) {
                  return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                }
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
              }
              return null;
            } else {
              return validate(props, propName, componentName, location, propFullName);
            }
          }
          var chainedCheckType = checkType.bind(null, false);
          chainedCheckType.isRequired = checkType.bind(null, true);
          return chainedCheckType;
        }
        function createPrimitiveTypeChecker(expectedType) {
          function validate(props, propName, componentName, location, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
              var preciseType = getPreciseType(propValue);
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
                { expectedType }
              );
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createAnyTypeChecker() {
          return createChainableTypeChecker(emptyFunctionThatReturnsNull);
        }
        function createArrayOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
            }
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
            }
            for (var i = 0; i < propValue.length; i++) {
              var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!isValidElement13(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!ReactIs.isValidElementType(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createInstanceTypeChecker(expectedClass) {
          function validate(props, propName, componentName, location, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
              var expectedClassName = expectedClass.name || ANONYMOUS;
              var actualClassName = getClassName(props[propName]);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createEnumTypeChecker(expectedValues) {
          if (!Array.isArray(expectedValues)) {
            if (true) {
              if (arguments.length > 1) {
                printWarning(
                  "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
                );
              } else {
                printWarning("Invalid argument supplied to oneOf, expected an array.");
              }
            }
            return emptyFunctionThatReturnsNull;
          }
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            for (var i = 0; i < expectedValues.length; i++) {
              if (is2(propValue, expectedValues[i])) {
                return null;
              }
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
              var type = getPreciseType(value);
              if (type === "symbol") {
                return String(value);
              }
              return value;
            });
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createObjectOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
            }
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
            }
            for (var key in propValue) {
              if (has(propValue, key)) {
                var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
                if (error instanceof Error) {
                  return error;
                }
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createUnionTypeChecker(arrayOfTypeCheckers) {
          if (!Array.isArray(arrayOfTypeCheckers)) {
            true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
            return emptyFunctionThatReturnsNull;
          }
          for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
            var checker = arrayOfTypeCheckers[i];
            if (typeof checker !== "function") {
              printWarning(
                "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
              );
              return emptyFunctionThatReturnsNull;
            }
          }
          function validate(props, propName, componentName, location, propFullName) {
            var expectedTypes = [];
            for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
              var checker2 = arrayOfTypeCheckers[i2];
              var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
              if (checkerResult == null) {
                return null;
              }
              if (checkerResult.data && has(checkerResult.data, "expectedType")) {
                expectedTypes.push(checkerResult.data.expectedType);
              }
            }
            var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createNodeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            if (!isNode(props[propName])) {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function invalidValidatorError(componentName, location, propFullName, key, type) {
          return new PropTypeError(
            (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
          );
        }
        function createShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            for (var key in shapeTypes) {
              var checker = shapeTypes[key];
              if (typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
              }
              var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createStrictShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            var allKeys = assign2({}, props[propName], shapeTypes);
            for (var key in allKeys) {
              var checker = shapeTypes[key];
              if (has(shapeTypes, key) && typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
              }
              if (!checker) {
                return new PropTypeError(
                  "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
                );
              }
              var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function isNode(propValue) {
          switch (typeof propValue) {
            case "number":
            case "string":
            case "undefined":
              return true;
            case "boolean":
              return !propValue;
            case "object":
              if (Array.isArray(propValue)) {
                return propValue.every(isNode);
              }
              if (propValue === null || isValidElement13(propValue)) {
                return true;
              }
              var iteratorFn = getIteratorFn(propValue);
              if (iteratorFn) {
                var iterator = iteratorFn.call(propValue);
                var step;
                if (iteratorFn !== propValue.entries) {
                  while (!(step = iterator.next()).done) {
                    if (!isNode(step.value)) {
                      return false;
                    }
                  }
                } else {
                  while (!(step = iterator.next()).done) {
                    var entry = step.value;
                    if (entry) {
                      if (!isNode(entry[1])) {
                        return false;
                      }
                    }
                  }
                }
              } else {
                return false;
              }
              return true;
            default:
              return false;
          }
        }
        function isSymbol(propType, propValue) {
          if (propType === "symbol") {
            return true;
          }
          if (!propValue) {
            return false;
          }
          if (propValue["@@toStringTag"] === "Symbol") {
            return true;
          }
          if (typeof Symbol === "function" && propValue instanceof Symbol) {
            return true;
          }
          return false;
        }
        function getPropType(propValue) {
          var propType = typeof propValue;
          if (Array.isArray(propValue)) {
            return "array";
          }
          if (propValue instanceof RegExp) {
            return "object";
          }
          if (isSymbol(propType, propValue)) {
            return "symbol";
          }
          return propType;
        }
        function getPreciseType(propValue) {
          if (typeof propValue === "undefined" || propValue === null) {
            return "" + propValue;
          }
          var propType = getPropType(propValue);
          if (propType === "object") {
            if (propValue instanceof Date) {
              return "date";
            } else if (propValue instanceof RegExp) {
              return "regexp";
            }
          }
          return propType;
        }
        function getPostfixForTypeWarning(value) {
          var type = getPreciseType(value);
          switch (type) {
            case "array":
            case "object":
              return "an " + type;
            case "boolean":
            case "date":
            case "regexp":
              return "a " + type;
            default:
              return type;
          }
        }
        function getClassName(propValue) {
          if (!propValue.constructor || !propValue.constructor.name) {
            return ANONYMOUS;
          }
          return propValue.constructor.name;
        }
        ReactPropTypes.checkPropTypes = checkPropTypes;
        ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
      };
    }
  });

  // node_modules/prop-types/index.js
  var require_prop_types = __commonJS({
    "node_modules/prop-types/index.js"(exports, module) {
      if (true) {
        ReactIs = require_react_is();
        throwOnDirectAccess = true;
        module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
      } else {
        module.exports = null();
      }
      var ReactIs;
      var throwOnDirectAccess;
    }
  });

  // node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development2 = __commonJS({
    "node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      (function() {
        function typeOf(object) {
          if ("object" === typeof object && null !== object) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                switch (object = object.type, object) {
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                  case REACT_SUSPENSE_LIST_TYPE:
                  case REACT_VIEW_TRANSITION_TYPE:
                    return object;
                  default:
                    switch (object = object && object.$$typeof, object) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                        return object;
                      case REACT_CONSUMER_TYPE:
                        return object;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
        }
        var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        Symbol.for("react.provider");
        var REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_VIEW_TRANSITION_TYPE = Symbol.for("react.view_transition"), REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference");
        exports.ContextConsumer = REACT_CONSUMER_TYPE;
        exports.ContextProvider = REACT_CONTEXT_TYPE;
        exports.Element = REACT_ELEMENT_TYPE;
        exports.ForwardRef = REACT_FORWARD_REF_TYPE;
        exports.Fragment = REACT_FRAGMENT_TYPE;
        exports.Lazy = REACT_LAZY_TYPE;
        exports.Memo = REACT_MEMO_TYPE;
        exports.Portal = REACT_PORTAL_TYPE;
        exports.Profiler = REACT_PROFILER_TYPE;
        exports.StrictMode = REACT_STRICT_MODE_TYPE;
        exports.Suspense = REACT_SUSPENSE_TYPE;
        exports.SuspenseList = REACT_SUSPENSE_LIST_TYPE;
        exports.isContextConsumer = function(object) {
          return typeOf(object) === REACT_CONSUMER_TYPE;
        };
        exports.isContextProvider = function(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        };
        exports.isElement = function(object) {
          return "object" === typeof object && null !== object && object.$$typeof === REACT_ELEMENT_TYPE;
        };
        exports.isForwardRef = function(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        };
        exports.isFragment = function(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        };
        exports.isLazy = function(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        };
        exports.isMemo = function(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        };
        exports.isPortal = function(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        };
        exports.isProfiler = function(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        };
        exports.isStrictMode = function(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        };
        exports.isSuspense = function(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        };
        exports.isSuspenseList = function(object) {
          return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
        };
        exports.isValidElementType = function(type) {
          return "string" === typeof type || "function" === typeof type || type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || "object" === typeof type && null !== type && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_CONSUMER_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_CLIENT_REFERENCE || void 0 !== type.getModuleId) ? true : false;
        };
        exports.typeOf = typeOf;
      })();
    }
  });

  // node_modules/react-is/index.js
  var require_react_is2 = __commonJS({
    "node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development2();
      }
    }
  });

  // node_modules/@babel/runtime/helpers/interopRequireDefault.js
  var require_interopRequireDefault = __commonJS({
    "node_modules/@babel/runtime/helpers/interopRequireDefault.js"(exports, module) {
      function _interopRequireDefault(e) {
        return e && e.__esModule ? e : {
          "default": e
        };
      }
      module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@mui/utils/formatMuiErrorMessage/formatMuiErrorMessage.js
  var require_formatMuiErrorMessage = __commonJS({
    "node_modules/@mui/utils/formatMuiErrorMessage/formatMuiErrorMessage.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = formatMuiErrorMessage;
      function formatMuiErrorMessage(code) {
        let url = "https://mui.com/production-error/?code=" + code;
        for (let i = 1; i < arguments.length; i += 1) {
          url += "&args[]=" + encodeURIComponent(arguments[i]);
        }
        return "Minified MUI error #" + code + "; visit " + url + " for the full message.";
      }
    }
  });

  // node_modules/@mui/utils/formatMuiErrorMessage/index.js
  var require_formatMuiErrorMessage2 = __commonJS({
    "node_modules/@mui/utils/formatMuiErrorMessage/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _formatMuiErrorMessage.default;
        }
      });
      var _formatMuiErrorMessage = _interopRequireDefault(require_formatMuiErrorMessage());
    }
  });

  // node_modules/@emotion/sheet/dist/emotion-sheet.esm.js
  function sheetForTag(tag) {
    if (tag.sheet) {
      return tag.sheet;
    }
    for (var i = 0; i < document.styleSheets.length; i++) {
      if (document.styleSheets[i].ownerNode === tag) {
        return document.styleSheets[i];
      }
    }
    return void 0;
  }
  function createStyleElement(options) {
    var tag = document.createElement("style");
    tag.setAttribute("data-emotion", options.key);
    if (options.nonce !== void 0) {
      tag.setAttribute("nonce", options.nonce);
    }
    tag.appendChild(document.createTextNode(""));
    tag.setAttribute("data-s", "");
    return tag;
  }
  var isDevelopment, StyleSheet;
  var init_emotion_sheet_esm = __esm({
    "node_modules/@emotion/sheet/dist/emotion-sheet.esm.js"() {
      isDevelopment = false;
      StyleSheet = /* @__PURE__ */ function() {
        function StyleSheet2(options) {
          var _this = this;
          this._insertTag = function(tag) {
            var before;
            if (_this.tags.length === 0) {
              if (_this.insertionPoint) {
                before = _this.insertionPoint.nextSibling;
              } else if (_this.prepend) {
                before = _this.container.firstChild;
              } else {
                before = _this.before;
              }
            } else {
              before = _this.tags[_this.tags.length - 1].nextSibling;
            }
            _this.container.insertBefore(tag, before);
            _this.tags.push(tag);
          };
          this.isSpeedy = options.speedy === void 0 ? !isDevelopment : options.speedy;
          this.tags = [];
          this.ctr = 0;
          this.nonce = options.nonce;
          this.key = options.key;
          this.container = options.container;
          this.prepend = options.prepend;
          this.insertionPoint = options.insertionPoint;
          this.before = null;
        }
        var _proto = StyleSheet2.prototype;
        _proto.hydrate = function hydrate(nodes) {
          nodes.forEach(this._insertTag);
        };
        _proto.insert = function insert(rule) {
          if (this.ctr % (this.isSpeedy ? 65e3 : 1) === 0) {
            this._insertTag(createStyleElement(this));
          }
          var tag = this.tags[this.tags.length - 1];
          if (this.isSpeedy) {
            var sheet = sheetForTag(tag);
            try {
              sheet.insertRule(rule, sheet.cssRules.length);
            } catch (e) {
            }
          } else {
            tag.appendChild(document.createTextNode(rule));
          }
          this.ctr++;
        };
        _proto.flush = function flush() {
          this.tags.forEach(function(tag) {
            var _tag$parentNode;
            return (_tag$parentNode = tag.parentNode) == null ? void 0 : _tag$parentNode.removeChild(tag);
          });
          this.tags = [];
          this.ctr = 0;
        };
        return StyleSheet2;
      }();
    }
  });

  // node_modules/stylis/src/Enum.js
  var MS, MOZ, WEBKIT, COMMENT, RULESET, DECLARATION, IMPORT, KEYFRAMES, LAYER;
  var init_Enum = __esm({
    "node_modules/stylis/src/Enum.js"() {
      MS = "-ms-";
      MOZ = "-moz-";
      WEBKIT = "-webkit-";
      COMMENT = "comm";
      RULESET = "rule";
      DECLARATION = "decl";
      IMPORT = "@import";
      KEYFRAMES = "@keyframes";
      LAYER = "@layer";
    }
  });

  // node_modules/stylis/src/Utility.js
  function hash(value, length2) {
    return charat(value, 0) ^ 45 ? (((length2 << 2 ^ charat(value, 0)) << 2 ^ charat(value, 1)) << 2 ^ charat(value, 2)) << 2 ^ charat(value, 3) : 0;
  }
  function trim(value) {
    return value.trim();
  }
  function match(value, pattern) {
    return (value = pattern.exec(value)) ? value[0] : value;
  }
  function replace(value, pattern, replacement) {
    return value.replace(pattern, replacement);
  }
  function indexof(value, search) {
    return value.indexOf(search);
  }
  function charat(value, index) {
    return value.charCodeAt(index) | 0;
  }
  function substr(value, begin, end2) {
    return value.slice(begin, end2);
  }
  function strlen(value) {
    return value.length;
  }
  function sizeof(value) {
    return value.length;
  }
  function append(value, array) {
    return array.push(value), value;
  }
  function combine(array, callback) {
    return array.map(callback).join("");
  }
  var abs, from, assign;
  var init_Utility = __esm({
    "node_modules/stylis/src/Utility.js"() {
      abs = Math.abs;
      from = String.fromCharCode;
      assign = Object.assign;
    }
  });

  // node_modules/stylis/src/Tokenizer.js
  function node(value, root, parent, type, props, children, length2) {
    return { value, root, parent, type, props, children, line, column, length: length2, return: "" };
  }
  function copy(root, props) {
    return assign(node("", null, null, "", null, null, 0), root, { length: -root.length }, props);
  }
  function char() {
    return character;
  }
  function prev() {
    character = position > 0 ? charat(characters, --position) : 0;
    if (column--, character === 10)
      column = 1, line--;
    return character;
  }
  function next() {
    character = position < length ? charat(characters, position++) : 0;
    if (column++, character === 10)
      column = 1, line++;
    return character;
  }
  function peek() {
    return charat(characters, position);
  }
  function caret() {
    return position;
  }
  function slice(begin, end2) {
    return substr(characters, begin, end2);
  }
  function token(type) {
    switch (type) {
      // \0 \t \n \r \s whitespace token
      case 0:
      case 9:
      case 10:
      case 13:
      case 32:
        return 5;
      // ! + , / > @ ~ isolate token
      case 33:
      case 43:
      case 44:
      case 47:
      case 62:
      case 64:
      case 126:
      // ; { } breakpoint token
      case 59:
      case 123:
      case 125:
        return 4;
      // : accompanied token
      case 58:
        return 3;
      // " ' ( [ opening delimit token
      case 34:
      case 39:
      case 40:
      case 91:
        return 2;
      // ) ] closing delimit token
      case 41:
      case 93:
        return 1;
    }
    return 0;
  }
  function alloc(value) {
    return line = column = 1, length = strlen(characters = value), position = 0, [];
  }
  function dealloc(value) {
    return characters = "", value;
  }
  function delimit(type) {
    return trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
  }
  function whitespace(type) {
    while (character = peek())
      if (character < 33)
        next();
      else
        break;
    return token(type) > 2 || token(character) > 3 ? "" : " ";
  }
  function escaping(index, count) {
    while (--count && next())
      if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97)
        break;
    return slice(index, caret() + (count < 6 && peek() == 32 && next() == 32));
  }
  function delimiter(type) {
    while (next())
      switch (character) {
        // ] ) " '
        case type:
          return position;
        // " '
        case 34:
        case 39:
          if (type !== 34 && type !== 39)
            delimiter(character);
          break;
        // (
        case 40:
          if (type === 41)
            delimiter(type);
          break;
        // \
        case 92:
          next();
          break;
      }
    return position;
  }
  function commenter(type, index) {
    while (next())
      if (type + character === 47 + 10)
        break;
      else if (type + character === 42 + 42 && peek() === 47)
        break;
    return "/*" + slice(index, position - 1) + "*" + from(type === 47 ? type : next());
  }
  function identifier(index) {
    while (!token(peek()))
      next();
    return slice(index, position);
  }
  var line, column, length, position, character, characters;
  var init_Tokenizer = __esm({
    "node_modules/stylis/src/Tokenizer.js"() {
      init_Utility();
      line = 1;
      column = 1;
      length = 0;
      position = 0;
      character = 0;
      characters = "";
    }
  });

  // node_modules/stylis/src/Parser.js
  function compile(value) {
    return dealloc(parse("", null, null, null, [""], value = alloc(value), 0, [0], value));
  }
  function parse(value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
    var index = 0;
    var offset2 = 0;
    var length2 = pseudo;
    var atrule = 0;
    var property = 0;
    var previous = 0;
    var variable = 1;
    var scanning = 1;
    var ampersand = 1;
    var character2 = 0;
    var type = "";
    var props = rules;
    var children = rulesets;
    var reference2 = rule;
    var characters2 = type;
    while (scanning)
      switch (previous = character2, character2 = next()) {
        // (
        case 40:
          if (previous != 108 && charat(characters2, length2 - 1) == 58) {
            if (indexof(characters2 += replace(delimit(character2), "&", "&\f"), "&\f") != -1)
              ampersand = -1;
            break;
          }
        // " ' [
        case 34:
        case 39:
        case 91:
          characters2 += delimit(character2);
          break;
        // \t \n \r \s
        case 9:
        case 10:
        case 13:
        case 32:
          characters2 += whitespace(previous);
          break;
        // \
        case 92:
          characters2 += escaping(caret() - 1, 7);
          continue;
        // /
        case 47:
          switch (peek()) {
            case 42:
            case 47:
              append(comment(commenter(next(), caret()), root, parent), declarations);
              break;
            default:
              characters2 += "/";
          }
          break;
        // {
        case 123 * variable:
          points[index++] = strlen(characters2) * ampersand;
        // } ; \0
        case 125 * variable:
        case 59:
        case 0:
          switch (character2) {
            // \0 }
            case 0:
            case 125:
              scanning = 0;
            // ;
            case 59 + offset2:
              if (ampersand == -1) characters2 = replace(characters2, /\f/g, "");
              if (property > 0 && strlen(characters2) - length2)
                append(property > 32 ? declaration(characters2 + ";", rule, parent, length2 - 1) : declaration(replace(characters2, " ", "") + ";", rule, parent, length2 - 2), declarations);
              break;
            // @ ;
            case 59:
              characters2 += ";";
            // { rule/at-rule
            default:
              append(reference2 = ruleset(characters2, root, parent, index, offset2, rules, points, type, props = [], children = [], length2), rulesets);
              if (character2 === 123)
                if (offset2 === 0)
                  parse(characters2, root, reference2, reference2, props, rulesets, length2, points, children);
                else
                  switch (atrule === 99 && charat(characters2, 3) === 110 ? 100 : atrule) {
                    // d l m s
                    case 100:
                    case 108:
                    case 109:
                    case 115:
                      parse(value, reference2, reference2, rule && append(ruleset(value, reference2, reference2, 0, 0, rules, points, type, rules, props = [], length2), children), rules, children, length2, points, rule ? props : children);
                      break;
                    default:
                      parse(characters2, reference2, reference2, reference2, [""], children, 0, points, children);
                  }
          }
          index = offset2 = property = 0, variable = ampersand = 1, type = characters2 = "", length2 = pseudo;
          break;
        // :
        case 58:
          length2 = 1 + strlen(characters2), property = previous;
        default:
          if (variable < 1) {
            if (character2 == 123)
              --variable;
            else if (character2 == 125 && variable++ == 0 && prev() == 125)
              continue;
          }
          switch (characters2 += from(character2), character2 * variable) {
            // &
            case 38:
              ampersand = offset2 > 0 ? 1 : (characters2 += "\f", -1);
              break;
            // ,
            case 44:
              points[index++] = (strlen(characters2) - 1) * ampersand, ampersand = 1;
              break;
            // @
            case 64:
              if (peek() === 45)
                characters2 += delimit(next());
              atrule = peek(), offset2 = length2 = strlen(type = characters2 += identifier(caret())), character2++;
              break;
            // -
            case 45:
              if (previous === 45 && strlen(characters2) == 2)
                variable = 0;
          }
      }
    return rulesets;
  }
  function ruleset(value, root, parent, index, offset2, rules, points, type, props, children, length2) {
    var post = offset2 - 1;
    var rule = offset2 === 0 ? rules : [""];
    var size = sizeof(rule);
    for (var i = 0, j = 0, k = 0; i < index; ++i)
      for (var x = 0, y = substr(value, post + 1, post = abs(j = points[i])), z = value; x < size; ++x)
        if (z = trim(j > 0 ? rule[x] + " " + y : replace(y, /&\f/g, rule[x])))
          props[k++] = z;
    return node(value, root, parent, offset2 === 0 ? RULESET : type, props, children, length2);
  }
  function comment(value, root, parent) {
    return node(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0);
  }
  function declaration(value, root, parent, length2) {
    return node(value, root, parent, DECLARATION, substr(value, 0, length2), substr(value, length2 + 1, -1), length2);
  }
  var init_Parser = __esm({
    "node_modules/stylis/src/Parser.js"() {
      init_Enum();
      init_Utility();
      init_Tokenizer();
    }
  });

  // node_modules/stylis/src/Prefixer.js
  var init_Prefixer = __esm({
    "node_modules/stylis/src/Prefixer.js"() {
    }
  });

  // node_modules/stylis/src/Serializer.js
  function serialize(children, callback) {
    var output = "";
    var length2 = sizeof(children);
    for (var i = 0; i < length2; i++)
      output += callback(children[i], i, children, callback) || "";
    return output;
  }
  function stringify(element, index, children, callback) {
    switch (element.type) {
      case LAYER:
        if (element.children.length) break;
      case IMPORT:
      case DECLARATION:
        return element.return = element.return || element.value;
      case COMMENT:
        return "";
      case KEYFRAMES:
        return element.return = element.value + "{" + serialize(element.children, callback) + "}";
      case RULESET:
        element.value = element.props.join(",");
    }
    return strlen(children = serialize(element.children, callback)) ? element.return = element.value + "{" + children + "}" : "";
  }
  var init_Serializer = __esm({
    "node_modules/stylis/src/Serializer.js"() {
      init_Enum();
      init_Utility();
    }
  });

  // node_modules/stylis/src/Middleware.js
  function middleware(collection) {
    var length2 = sizeof(collection);
    return function(element, index, children, callback) {
      var output = "";
      for (var i = 0; i < length2; i++)
        output += collection[i](element, index, children, callback) || "";
      return output;
    };
  }
  function rulesheet(callback) {
    return function(element) {
      if (!element.root) {
        if (element = element.return)
          callback(element);
      }
    };
  }
  var init_Middleware = __esm({
    "node_modules/stylis/src/Middleware.js"() {
      init_Utility();
    }
  });

  // node_modules/stylis/index.js
  var init_stylis = __esm({
    "node_modules/stylis/index.js"() {
      init_Enum();
      init_Utility();
      init_Parser();
      init_Prefixer();
      init_Tokenizer();
      init_Serializer();
      init_Middleware();
    }
  });

  // node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.esm.js
  var weakMemoize;
  var init_emotion_weak_memoize_esm = __esm({
    "node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.esm.js"() {
      weakMemoize = function weakMemoize2(func) {
        var cache = /* @__PURE__ */ new WeakMap();
        return function(arg) {
          if (cache.has(arg)) {
            return cache.get(arg);
          }
          var ret = func(arg);
          cache.set(arg, ret);
          return ret;
        };
      };
    }
  });

  // node_modules/@emotion/memoize/dist/emotion-memoize.esm.js
  function memoize(fn2) {
    var cache = /* @__PURE__ */ Object.create(null);
    return function(arg) {
      if (cache[arg] === void 0) cache[arg] = fn2(arg);
      return cache[arg];
    };
  }
  var init_emotion_memoize_esm = __esm({
    "node_modules/@emotion/memoize/dist/emotion-memoize.esm.js"() {
    }
  });

  // node_modules/@emotion/cache/dist/emotion-cache.browser.esm.js
  var emotion_cache_browser_esm_exports = {};
  __export(emotion_cache_browser_esm_exports, {
    default: () => createCache
  });
  function prefix(value, length2) {
    switch (hash(value, length2)) {
      // color-adjust
      case 5103:
        return WEBKIT + "print-" + value + value;
      // animation, animation-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function)
      case 5737:
      case 4201:
      case 3177:
      case 3433:
      case 1641:
      case 4457:
      case 2921:
      // text-decoration, filter, clip-path, backface-visibility, column, box-decoration-break
      case 5572:
      case 6356:
      case 5844:
      case 3191:
      case 6645:
      case 3005:
      // mask, mask-image, mask-(mode|clip|size), mask-(repeat|origin), mask-position, mask-composite,
      case 6391:
      case 5879:
      case 5623:
      case 6135:
      case 4599:
      case 4855:
      // background-clip, columns, column-(count|fill|gap|rule|rule-color|rule-style|rule-width|span|width)
      case 4215:
      case 6389:
      case 5109:
      case 5365:
      case 5621:
      case 3829:
        return WEBKIT + value + value;
      // appearance, user-select, transform, hyphens, text-size-adjust
      case 5349:
      case 4246:
      case 4810:
      case 6968:
      case 2756:
        return WEBKIT + value + MOZ + value + MS + value + value;
      // flex, flex-direction
      case 6828:
      case 4268:
        return WEBKIT + value + MS + value + value;
      // order
      case 6165:
        return WEBKIT + value + MS + "flex-" + value + value;
      // align-items
      case 5187:
        return WEBKIT + value + replace(value, /(\w+).+(:[^]+)/, WEBKIT + "box-$1$2" + MS + "flex-$1$2") + value;
      // align-self
      case 5443:
        return WEBKIT + value + MS + "flex-item-" + replace(value, /flex-|-self/, "") + value;
      // align-content
      case 4675:
        return WEBKIT + value + MS + "flex-line-pack" + replace(value, /align-content|flex-|-self/, "") + value;
      // flex-shrink
      case 5548:
        return WEBKIT + value + MS + replace(value, "shrink", "negative") + value;
      // flex-basis
      case 5292:
        return WEBKIT + value + MS + replace(value, "basis", "preferred-size") + value;
      // flex-grow
      case 6060:
        return WEBKIT + "box-" + replace(value, "-grow", "") + WEBKIT + value + MS + replace(value, "grow", "positive") + value;
      // transition
      case 4554:
        return WEBKIT + replace(value, /([^-])(transform)/g, "$1" + WEBKIT + "$2") + value;
      // cursor
      case 6187:
        return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + "$1"), /(image-set)/, WEBKIT + "$1"), value, "") + value;
      // background, background-image
      case 5495:
      case 3959:
        return replace(value, /(image-set\([^]*)/, WEBKIT + "$1$`$1");
      // justify-content
      case 4968:
        return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + "box-pack:$3" + MS + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + WEBKIT + value + value;
      // (margin|padding)-inline-(start|end)
      case 4095:
      case 3583:
      case 4068:
      case 2532:
        return replace(value, /(.+)-inline(.+)/, WEBKIT + "$1$2") + value;
      // (min|max)?(width|height|inline-size|block-size)
      case 8116:
      case 7059:
      case 5753:
      case 5535:
      case 5445:
      case 5701:
      case 4933:
      case 4677:
      case 5533:
      case 5789:
      case 5021:
      case 4765:
        if (strlen(value) - 1 - length2 > 6) switch (charat(value, length2 + 1)) {
          // (m)ax-content, (m)in-content
          case 109:
            if (charat(value, length2 + 4) !== 45) break;
          // (f)ill-available, (f)it-content
          case 102:
            return replace(value, /(.+:)(.+)-([^]+)/, "$1" + WEBKIT + "$2-$3$1" + MOZ + (charat(value, length2 + 3) == 108 ? "$3" : "$2-$3")) + value;
          // (s)tretch
          case 115:
            return ~indexof(value, "stretch") ? prefix(replace(value, "stretch", "fill-available"), length2) + value : value;
        }
        break;
      // position: sticky
      case 4949:
        if (charat(value, length2 + 1) !== 115) break;
      // display: (flex|inline-flex)
      case 6444:
        switch (charat(value, strlen(value) - 3 - (~indexof(value, "!important") && 10))) {
          // stic(k)y
          case 107:
            return replace(value, ":", ":" + WEBKIT) + value;
          // (inline-)?fl(e)x
          case 101:
            return replace(value, /(.+:)([^;!]+)(;|!.+)?/, "$1" + WEBKIT + (charat(value, 14) === 45 ? "inline-" : "") + "box$3$1" + WEBKIT + "$2$3$1" + MS + "$2box$3") + value;
        }
        break;
      // writing-mode
      case 5936:
        switch (charat(value, length2 + 11)) {
          // vertical-l(r)
          case 114:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb") + value;
          // vertical-r(l)
          case 108:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb-rl") + value;
          // horizontal(-)tb
          case 45:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "lr") + value;
        }
        return WEBKIT + value + MS + value + value;
    }
    return value;
  }
  var identifierWithPointTracking, toRules, getRules, fixedElements, compat, removeLabel, prefixer, defaultStylisPlugins, createCache;
  var init_emotion_cache_browser_esm = __esm({
    "node_modules/@emotion/cache/dist/emotion-cache.browser.esm.js"() {
      init_emotion_sheet_esm();
      init_stylis();
      init_emotion_weak_memoize_esm();
      init_emotion_memoize_esm();
      identifierWithPointTracking = function identifierWithPointTracking2(begin, points, index) {
        var previous = 0;
        var character2 = 0;
        while (true) {
          previous = character2;
          character2 = peek();
          if (previous === 38 && character2 === 12) {
            points[index] = 1;
          }
          if (token(character2)) {
            break;
          }
          next();
        }
        return slice(begin, position);
      };
      toRules = function toRules2(parsed, points) {
        var index = -1;
        var character2 = 44;
        do {
          switch (token(character2)) {
            case 0:
              if (character2 === 38 && peek() === 12) {
                points[index] = 1;
              }
              parsed[index] += identifierWithPointTracking(position - 1, points, index);
              break;
            case 2:
              parsed[index] += delimit(character2);
              break;
            case 4:
              if (character2 === 44) {
                parsed[++index] = peek() === 58 ? "&\f" : "";
                points[index] = parsed[index].length;
                break;
              }
            // fallthrough
            default:
              parsed[index] += from(character2);
          }
        } while (character2 = next());
        return parsed;
      };
      getRules = function getRules2(value, points) {
        return dealloc(toRules(alloc(value), points));
      };
      fixedElements = /* @__PURE__ */ new WeakMap();
      compat = function compat2(element) {
        if (element.type !== "rule" || !element.parent || // positive .length indicates that this rule contains pseudo
        // negative .length indicates that this rule has been already prefixed
        element.length < 1) {
          return;
        }
        var value = element.value;
        var parent = element.parent;
        var isImplicitRule = element.column === parent.column && element.line === parent.line;
        while (parent.type !== "rule") {
          parent = parent.parent;
          if (!parent) return;
        }
        if (element.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent)) {
          return;
        }
        if (isImplicitRule) {
          return;
        }
        fixedElements.set(element, true);
        var points = [];
        var rules = getRules(value, points);
        var parentRules = parent.props;
        for (var i = 0, k = 0; i < rules.length; i++) {
          for (var j = 0; j < parentRules.length; j++, k++) {
            element.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
          }
        }
      };
      removeLabel = function removeLabel2(element) {
        if (element.type === "decl") {
          var value = element.value;
          if (
            // charcode for l
            value.charCodeAt(0) === 108 && // charcode for b
            value.charCodeAt(2) === 98
          ) {
            element["return"] = "";
            element.value = "";
          }
        }
      };
      prefixer = function prefixer2(element, index, children, callback) {
        if (element.length > -1) {
          if (!element["return"]) switch (element.type) {
            case DECLARATION:
              element["return"] = prefix(element.value, element.length);
              break;
            case KEYFRAMES:
              return serialize([copy(element, {
                value: replace(element.value, "@", "@" + WEBKIT)
              })], callback);
            case RULESET:
              if (element.length) return combine(element.props, function(value) {
                switch (match(value, /(::plac\w+|:read-\w+)/)) {
                  // :read-(only|write)
                  case ":read-only":
                  case ":read-write":
                    return serialize([copy(element, {
                      props: [replace(value, /:(read-\w+)/, ":" + MOZ + "$1")]
                    })], callback);
                  // :placeholder
                  case "::placeholder":
                    return serialize([copy(element, {
                      props: [replace(value, /:(plac\w+)/, ":" + WEBKIT + "input-$1")]
                    }), copy(element, {
                      props: [replace(value, /:(plac\w+)/, ":" + MOZ + "$1")]
                    }), copy(element, {
                      props: [replace(value, /:(plac\w+)/, MS + "input-$1")]
                    })], callback);
                }
                return "";
              });
          }
        }
      };
      defaultStylisPlugins = [prefixer];
      createCache = function createCache2(options) {
        var key = options.key;
        if (key === "css") {
          var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])");
          Array.prototype.forEach.call(ssrStyles, function(node2) {
            var dataEmotionAttribute = node2.getAttribute("data-emotion");
            if (dataEmotionAttribute.indexOf(" ") === -1) {
              return;
            }
            document.head.appendChild(node2);
            node2.setAttribute("data-s", "");
          });
        }
        var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
        var inserted = {};
        var container;
        var nodesToHydrate = [];
        {
          container = options.container || document.head;
          Array.prototype.forEach.call(
            // this means we will ignore elements which don't have a space in them which
            // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
            document.querySelectorAll('style[data-emotion^="' + key + ' "]'),
            function(node2) {
              var attrib = node2.getAttribute("data-emotion").split(" ");
              for (var i = 1; i < attrib.length; i++) {
                inserted[attrib[i]] = true;
              }
              nodesToHydrate.push(node2);
            }
          );
        }
        var _insert;
        var omnipresentPlugins = [compat, removeLabel];
        {
          var currentSheet;
          var finalizingPlugins = [stringify, rulesheet(function(rule) {
            currentSheet.insert(rule);
          })];
          var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
          var stylis = function stylis2(styles4) {
            return serialize(compile(styles4), serializer);
          };
          _insert = function insert(selector, serialized, sheet, shouldCache) {
            currentSheet = sheet;
            stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
            if (shouldCache) {
              cache.inserted[serialized.name] = true;
            }
          };
        }
        var cache = {
          key,
          sheet: new StyleSheet({
            key,
            container,
            nonce: options.nonce,
            speedy: options.speedy,
            prepend: options.prepend,
            insertionPoint: options.insertionPoint
          }),
          nonce: options.nonce,
          inserted,
          registered: {},
          insert: _insert
        };
        cache.sheet.hydrate(nodesToHydrate);
        return cache;
      };
    }
  });

  // node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development3 = __commonJS({
    "node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType(type) {
            return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
            type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment22 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal3 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement2(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment4(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment22;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal3;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement2;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment4;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/hoist-non-react-statics/node_modules/react-is/index.js
  var require_react_is3 = __commonJS({
    "node_modules/hoist-non-react-statics/node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development3();
      }
    }
  });

  // node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
  var require_hoist_non_react_statics_cjs = __commonJS({
    "node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"(exports, module) {
      "use strict";
      var reactIs = require_react_is3();
      var REACT_STATICS = {
        childContextTypes: true,
        contextType: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        getDerivedStateFromError: true,
        getDerivedStateFromProps: true,
        mixins: true,
        propTypes: true,
        type: true
      };
      var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        callee: true,
        arguments: true,
        arity: true
      };
      var FORWARD_REF_STATICS = {
        "$$typeof": true,
        render: true,
        defaultProps: true,
        displayName: true,
        propTypes: true
      };
      var MEMO_STATICS = {
        "$$typeof": true,
        compare: true,
        defaultProps: true,
        displayName: true,
        propTypes: true,
        type: true
      };
      var TYPE_STATICS = {};
      TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
      TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
      function getStatics(component) {
        if (reactIs.isMemo(component)) {
          return MEMO_STATICS;
        }
        return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
      }
      var defineProperty = Object.defineProperty;
      var getOwnPropertyNames = Object.getOwnPropertyNames;
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var getPrototypeOf = Object.getPrototypeOf;
      var objectPrototype = Object.prototype;
      function hoistNonReactStatics2(targetComponent, sourceComponent, blacklist) {
        if (typeof sourceComponent !== "string") {
          if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
              hoistNonReactStatics2(targetComponent, inheritedComponent, blacklist);
            }
          }
          var keys = getOwnPropertyNames(sourceComponent);
          if (getOwnPropertySymbols) {
            keys = keys.concat(getOwnPropertySymbols(sourceComponent));
          }
          var targetStatics = getStatics(targetComponent);
          var sourceStatics = getStatics(sourceComponent);
          for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
              var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
              try {
                defineProperty(targetComponent, key, descriptor);
              } catch (e) {
              }
            }
          }
        }
        return targetComponent;
      }
      module.exports = hoistNonReactStatics2;
    }
  });

  // node_modules/@emotion/react/_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js
  var import_hoist_non_react_statics, hoistNonReactStatics;
  var init_emotion_react_isolated_hnrs_browser_esm = __esm({
    "node_modules/@emotion/react/_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js"() {
      import_hoist_non_react_statics = __toESM(require_hoist_non_react_statics_cjs());
      hoistNonReactStatics = function(targetComponent, sourceComponent) {
        return (0, import_hoist_non_react_statics.default)(targetComponent, sourceComponent);
      };
    }
  });

  // node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js
  function getRegisteredStyles(registered, registeredStyles, classNames) {
    var rawClassName = "";
    classNames.split(" ").forEach(function(className) {
      if (registered[className] !== void 0) {
        registeredStyles.push(registered[className] + ";");
      } else if (className) {
        rawClassName += className + " ";
      }
    });
    return rawClassName;
  }
  var isBrowser, registerStyles, insertStyles;
  var init_emotion_utils_browser_esm = __esm({
    "node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js"() {
      isBrowser = true;
      registerStyles = function registerStyles2(cache, serialized, isStringTag2) {
        var className = cache.key + "-" + serialized.name;
        if (
          // we only need to add the styles to the registered cache if the
          // class name could be used further down
          // the tree but if it's a string tag, we know it won't
          // so we don't have to add it to registered cache.
          // this improves memory usage since we can avoid storing the whole style string
          (isStringTag2 === false || // we need to always store it if we're in compat mode and
          // in node since emotion-server relies on whether a style is in
          // the registered cache to know whether a style is global or not
          // also, note that this check will be dead code eliminated in the browser
          isBrowser === false) && cache.registered[className] === void 0
        ) {
          cache.registered[className] = serialized.styles;
        }
      };
      insertStyles = function insertStyles2(cache, serialized, isStringTag2) {
        registerStyles(cache, serialized, isStringTag2);
        var className = cache.key + "-" + serialized.name;
        if (cache.inserted[serialized.name] === void 0) {
          var current = serialized;
          do {
            cache.insert(serialized === current ? "." + className : "", current, cache.sheet, true);
            current = current.next;
          } while (current !== void 0);
        }
      };
    }
  });

  // node_modules/@emotion/hash/dist/emotion-hash.esm.js
  function murmur2(str) {
    var h = 0;
    var k, i = 0, len = str.length;
    for (; len >= 4; ++i, len -= 4) {
      k = str.charCodeAt(i) & 255 | (str.charCodeAt(++i) & 255) << 8 | (str.charCodeAt(++i) & 255) << 16 | (str.charCodeAt(++i) & 255) << 24;
      k = /* Math.imul(k, m): */
      (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16);
      k ^= /* k >>> r: */
      k >>> 24;
      h = /* Math.imul(k, m): */
      (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16) ^ /* Math.imul(h, m): */
      (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    }
    switch (len) {
      case 3:
        h ^= (str.charCodeAt(i + 2) & 255) << 16;
      case 2:
        h ^= (str.charCodeAt(i + 1) & 255) << 8;
      case 1:
        h ^= str.charCodeAt(i) & 255;
        h = /* Math.imul(h, m): */
        (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    }
    h ^= h >>> 13;
    h = /* Math.imul(h, m): */
    (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    return ((h ^ h >>> 15) >>> 0).toString(36);
  }
  var init_emotion_hash_esm = __esm({
    "node_modules/@emotion/hash/dist/emotion-hash.esm.js"() {
    }
  });

  // node_modules/@emotion/unitless/dist/emotion-unitless.esm.js
  var unitlessKeys;
  var init_emotion_unitless_esm = __esm({
    "node_modules/@emotion/unitless/dist/emotion-unitless.esm.js"() {
      unitlessKeys = {
        animationIterationCount: 1,
        aspectRatio: 1,
        borderImageOutset: 1,
        borderImageSlice: 1,
        borderImageWidth: 1,
        boxFlex: 1,
        boxFlexGroup: 1,
        boxOrdinalGroup: 1,
        columnCount: 1,
        columns: 1,
        flex: 1,
        flexGrow: 1,
        flexPositive: 1,
        flexShrink: 1,
        flexNegative: 1,
        flexOrder: 1,
        gridRow: 1,
        gridRowEnd: 1,
        gridRowSpan: 1,
        gridRowStart: 1,
        gridColumn: 1,
        gridColumnEnd: 1,
        gridColumnSpan: 1,
        gridColumnStart: 1,
        msGridRow: 1,
        msGridRowSpan: 1,
        msGridColumn: 1,
        msGridColumnSpan: 1,
        fontWeight: 1,
        lineHeight: 1,
        opacity: 1,
        order: 1,
        orphans: 1,
        scale: 1,
        tabSize: 1,
        widows: 1,
        zIndex: 1,
        zoom: 1,
        WebkitLineClamp: 1,
        // SVG-related properties
        fillOpacity: 1,
        floodOpacity: 1,
        stopOpacity: 1,
        strokeDasharray: 1,
        strokeDashoffset: 1,
        strokeMiterlimit: 1,
        strokeOpacity: 1,
        strokeWidth: 1
      };
    }
  });

  // node_modules/@emotion/serialize/dist/emotion-serialize.esm.js
  var emotion_serialize_esm_exports = {};
  __export(emotion_serialize_esm_exports, {
    serializeStyles: () => serializeStyles
  });
  function handleInterpolation(mergedProps, registered, interpolation) {
    if (interpolation == null) {
      return "";
    }
    var componentSelector = interpolation;
    if (componentSelector.__emotion_styles !== void 0) {
      return componentSelector;
    }
    switch (typeof interpolation) {
      case "boolean": {
        return "";
      }
      case "object": {
        var keyframes3 = interpolation;
        if (keyframes3.anim === 1) {
          cursor = {
            name: keyframes3.name,
            styles: keyframes3.styles,
            next: cursor
          };
          return keyframes3.name;
        }
        var serializedStyles = interpolation;
        if (serializedStyles.styles !== void 0) {
          var next2 = serializedStyles.next;
          if (next2 !== void 0) {
            while (next2 !== void 0) {
              cursor = {
                name: next2.name,
                styles: next2.styles,
                next: cursor
              };
              next2 = next2.next;
            }
          }
          var styles4 = serializedStyles.styles + ";";
          return styles4;
        }
        return createStringFromObject(mergedProps, registered, interpolation);
      }
      case "function": {
        if (mergedProps !== void 0) {
          var previousCursor = cursor;
          var result = interpolation(mergedProps);
          cursor = previousCursor;
          return handleInterpolation(mergedProps, registered, result);
        }
        break;
      }
    }
    var asString = interpolation;
    if (registered == null) {
      return asString;
    }
    var cached = registered[asString];
    return cached !== void 0 ? cached : asString;
  }
  function createStringFromObject(mergedProps, registered, obj) {
    var string = "";
    if (Array.isArray(obj)) {
      for (var i = 0; i < obj.length; i++) {
        string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
      }
    } else {
      for (var key in obj) {
        var value = obj[key];
        if (typeof value !== "object") {
          var asString = value;
          if (registered != null && registered[asString] !== void 0) {
            string += key + "{" + registered[asString] + "}";
          } else if (isProcessableValue(asString)) {
            string += processStyleName(key) + ":" + processStyleValue(key, asString) + ";";
          }
        } else {
          if (key === "NO_COMPONENT_SELECTOR" && isDevelopment2) {
            throw new Error(noComponentSelectorMessage);
          }
          if (Array.isArray(value) && typeof value[0] === "string" && (registered == null || registered[value[0]] === void 0)) {
            for (var _i = 0; _i < value.length; _i++) {
              if (isProcessableValue(value[_i])) {
                string += processStyleName(key) + ":" + processStyleValue(key, value[_i]) + ";";
              }
            }
          } else {
            var interpolated = handleInterpolation(mergedProps, registered, value);
            switch (key) {
              case "animation":
              case "animationName": {
                string += processStyleName(key) + ":" + interpolated + ";";
                break;
              }
              default: {
                string += key + "{" + interpolated + "}";
              }
            }
          }
        }
      }
    }
    return string;
  }
  function serializeStyles(args, registered, mergedProps) {
    if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && args[0].styles !== void 0) {
      return args[0];
    }
    var stringMode = true;
    var styles4 = "";
    cursor = void 0;
    var strings = args[0];
    if (strings == null || strings.raw === void 0) {
      stringMode = false;
      styles4 += handleInterpolation(mergedProps, registered, strings);
    } else {
      var asTemplateStringsArr = strings;
      styles4 += asTemplateStringsArr[0];
    }
    for (var i = 1; i < args.length; i++) {
      styles4 += handleInterpolation(mergedProps, registered, args[i]);
      if (stringMode) {
        var templateStringsArr = strings;
        styles4 += templateStringsArr[i];
      }
    }
    labelPattern.lastIndex = 0;
    var identifierName = "";
    var match2;
    while ((match2 = labelPattern.exec(styles4)) !== null) {
      identifierName += "-" + match2[1];
    }
    var name = murmur2(styles4) + identifierName;
    return {
      name,
      styles: styles4,
      next: cursor
    };
  }
  var isDevelopment2, hyphenateRegex, animationRegex, isCustomProperty, isProcessableValue, processStyleName, processStyleValue, noComponentSelectorMessage, labelPattern, cursor;
  var init_emotion_serialize_esm = __esm({
    "node_modules/@emotion/serialize/dist/emotion-serialize.esm.js"() {
      init_emotion_hash_esm();
      init_emotion_unitless_esm();
      init_emotion_memoize_esm();
      isDevelopment2 = false;
      hyphenateRegex = /[A-Z]|^ms/g;
      animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
      isCustomProperty = function isCustomProperty2(property) {
        return property.charCodeAt(1) === 45;
      };
      isProcessableValue = function isProcessableValue2(value) {
        return value != null && typeof value !== "boolean";
      };
      processStyleName = /* @__PURE__ */ memoize(function(styleName) {
        return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, "-$&").toLowerCase();
      });
      processStyleValue = function processStyleValue2(key, value) {
        switch (key) {
          case "animation":
          case "animationName": {
            if (typeof value === "string") {
              return value.replace(animationRegex, function(match2, p1, p2) {
                cursor = {
                  name: p1,
                  styles: p2,
                  next: cursor
                };
                return p1;
              });
            }
          }
        }
        if (unitlessKeys[key] !== 1 && !isCustomProperty(key) && typeof value === "number" && value !== 0) {
          return value + "px";
        }
        return value;
      };
      noComponentSelectorMessage = "Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";
      labelPattern = /label:\s*([^\s;{]+)\s*(;|$)/g;
    }
  });

  // node_modules/@emotion/use-insertion-effect-with-fallbacks/dist/emotion-use-insertion-effect-with-fallbacks.browser.esm.js
  var React21, syncFallback, useInsertionEffect2, useInsertionEffectAlwaysWithSyncFallback, useInsertionEffectWithLayoutFallback;
  var init_emotion_use_insertion_effect_with_fallbacks_browser_esm = __esm({
    "node_modules/@emotion/use-insertion-effect-with-fallbacks/dist/emotion-use-insertion-effect-with-fallbacks.browser.esm.js"() {
      React21 = __toESM(require_react());
      syncFallback = function syncFallback2(create) {
        return create();
      };
      useInsertionEffect2 = React21["useInsertionEffect"] ? React21["useInsertionEffect"] : false;
      useInsertionEffectAlwaysWithSyncFallback = useInsertionEffect2 || syncFallback;
      useInsertionEffectWithLayoutFallback = useInsertionEffect2 || React21.useLayoutEffect;
    }
  });

  // node_modules/@emotion/react/dist/emotion-element-f0de968e.browser.esm.js
  function withTheme(Component) {
    var componentName = Component.displayName || Component.name || "Component";
    var WithTheme = /* @__PURE__ */ React22.forwardRef(function render(props, ref) {
      var theme = React22.useContext(ThemeContext);
      return /* @__PURE__ */ React22.createElement(Component, _extends({
        theme,
        ref
      }, props));
    });
    WithTheme.displayName = "WithTheme(" + componentName + ")";
    return hoistNonReactStatics(WithTheme, Component);
  }
  var React22, import_react, isDevelopment3, EmotionCacheContext, CacheProvider, __unsafe_useEmotionCache, withEmotionCache, ThemeContext, useTheme, getTheme, createCacheWithTheme, ThemeProvider, hasOwn, typePropName, createEmotionProps, Insertion, Emotion, Emotion$1;
  var init_emotion_element_f0de968e_browser_esm = __esm({
    "node_modules/@emotion/react/dist/emotion-element-f0de968e.browser.esm.js"() {
      React22 = __toESM(require_react());
      import_react = __toESM(require_react());
      init_emotion_cache_browser_esm();
      init_extends();
      init_emotion_weak_memoize_esm();
      init_emotion_react_isolated_hnrs_browser_esm();
      init_emotion_utils_browser_esm();
      init_emotion_serialize_esm();
      init_emotion_use_insertion_effect_with_fallbacks_browser_esm();
      isDevelopment3 = false;
      EmotionCacheContext = /* @__PURE__ */ React22.createContext(
        // we're doing this to avoid preconstruct's dead code elimination in this one case
        // because this module is primarily intended for the browser and node
        // but it's also required in react native and similar environments sometimes
        // and we could have a special build just for that
        // but this is much easier and the native packages
        // might use a different theme context in the future anyway
        typeof HTMLElement !== "undefined" ? /* @__PURE__ */ createCache({
          key: "css"
        }) : null
      );
      CacheProvider = EmotionCacheContext.Provider;
      __unsafe_useEmotionCache = function useEmotionCache() {
        return (0, import_react.useContext)(EmotionCacheContext);
      };
      withEmotionCache = function withEmotionCache2(func) {
        return /* @__PURE__ */ (0, import_react.forwardRef)(function(props, ref) {
          var cache = (0, import_react.useContext)(EmotionCacheContext);
          return func(props, cache, ref);
        });
      };
      ThemeContext = /* @__PURE__ */ React22.createContext({});
      useTheme = function useTheme2() {
        return React22.useContext(ThemeContext);
      };
      getTheme = function getTheme2(outerTheme, theme) {
        if (typeof theme === "function") {
          var mergedTheme = theme(outerTheme);
          return mergedTheme;
        }
        return _extends({}, outerTheme, theme);
      };
      createCacheWithTheme = /* @__PURE__ */ weakMemoize(function(outerTheme) {
        return weakMemoize(function(theme) {
          return getTheme(outerTheme, theme);
        });
      });
      ThemeProvider = function ThemeProvider2(props) {
        var theme = React22.useContext(ThemeContext);
        if (props.theme !== theme) {
          theme = createCacheWithTheme(theme)(props.theme);
        }
        return /* @__PURE__ */ React22.createElement(ThemeContext.Provider, {
          value: theme
        }, props.children);
      };
      hasOwn = {}.hasOwnProperty;
      typePropName = "__EMOTION_TYPE_PLEASE_DO_NOT_USE__";
      createEmotionProps = function createEmotionProps2(type, props) {
        var newProps = {};
        for (var _key in props) {
          if (hasOwn.call(props, _key)) {
            newProps[_key] = props[_key];
          }
        }
        newProps[typePropName] = type;
        return newProps;
      };
      Insertion = function Insertion2(_ref) {
        var cache = _ref.cache, serialized = _ref.serialized, isStringTag2 = _ref.isStringTag;
        registerStyles(cache, serialized, isStringTag2);
        useInsertionEffectAlwaysWithSyncFallback(function() {
          return insertStyles(cache, serialized, isStringTag2);
        });
        return null;
      };
      Emotion = /* @__PURE__ */ withEmotionCache(function(props, cache, ref) {
        var cssProp = props.css;
        if (typeof cssProp === "string" && cache.registered[cssProp] !== void 0) {
          cssProp = cache.registered[cssProp];
        }
        var WrappedComponent = props[typePropName];
        var registeredStyles = [cssProp];
        var className = "";
        if (typeof props.className === "string") {
          className = getRegisteredStyles(cache.registered, registeredStyles, props.className);
        } else if (props.className != null) {
          className = props.className + " ";
        }
        var serialized = serializeStyles(registeredStyles, void 0, React22.useContext(ThemeContext));
        className += cache.key + "-" + serialized.name;
        var newProps = {};
        for (var _key2 in props) {
          if (hasOwn.call(props, _key2) && _key2 !== "css" && _key2 !== typePropName && !isDevelopment3) {
            newProps[_key2] = props[_key2];
          }
        }
        newProps.className = className;
        if (ref) {
          newProps.ref = ref;
        }
        return /* @__PURE__ */ React22.createElement(React22.Fragment, null, /* @__PURE__ */ React22.createElement(Insertion, {
          cache,
          serialized,
          isStringTag: typeof WrappedComponent === "string"
        }), /* @__PURE__ */ React22.createElement(WrappedComponent, newProps));
      });
      Emotion$1 = Emotion;
    }
  });

  // node_modules/@emotion/react/dist/emotion-react.browser.esm.js
  var emotion_react_browser_esm_exports = {};
  __export(emotion_react_browser_esm_exports, {
    CacheProvider: () => CacheProvider,
    ClassNames: () => ClassNames,
    Global: () => Global,
    ThemeContext: () => ThemeContext,
    ThemeProvider: () => ThemeProvider,
    __unsafe_useEmotionCache: () => __unsafe_useEmotionCache,
    createElement: () => jsx,
    css: () => css,
    jsx: () => jsx,
    keyframes: () => keyframes,
    useTheme: () => useTheme,
    withEmotionCache: () => withEmotionCache,
    withTheme: () => withTheme
  });
  function css() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return serializeStyles(args);
  }
  function keyframes() {
    var insertable = css.apply(void 0, arguments);
    var name = "animation-" + insertable.name;
    return {
      name,
      styles: "@keyframes " + name + "{" + insertable.styles + "}",
      anim: 1,
      toString: function toString() {
        return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
      }
    };
  }
  function merge(registered, css3, className) {
    var registeredStyles = [];
    var rawClassName = getRegisteredStyles(registered, registeredStyles, className);
    if (registeredStyles.length < 2) {
      return className;
    }
    return rawClassName + css3(registeredStyles);
  }
  var React23, import_hoist_non_react_statics2, jsx, Global, classnames, Insertion3, ClassNames;
  var init_emotion_react_browser_esm = __esm({
    "node_modules/@emotion/react/dist/emotion-react.browser.esm.js"() {
      init_emotion_element_f0de968e_browser_esm();
      init_emotion_element_f0de968e_browser_esm();
      React23 = __toESM(require_react());
      init_emotion_utils_browser_esm();
      init_emotion_use_insertion_effect_with_fallbacks_browser_esm();
      init_emotion_serialize_esm();
      init_emotion_cache_browser_esm();
      init_extends();
      init_emotion_weak_memoize_esm();
      import_hoist_non_react_statics2 = __toESM(require_hoist_non_react_statics_cjs());
      jsx = function jsx2(type, props) {
        var args = arguments;
        if (props == null || !hasOwn.call(props, "css")) {
          return React23.createElement.apply(void 0, args);
        }
        var argsLength = args.length;
        var createElementArgArray = new Array(argsLength);
        createElementArgArray[0] = Emotion$1;
        createElementArgArray[1] = createEmotionProps(type, props);
        for (var i = 2; i < argsLength; i++) {
          createElementArgArray[i] = args[i];
        }
        return React23.createElement.apply(null, createElementArgArray);
      };
      (function(_jsx159) {
        var JSX;
        /* @__PURE__ */ (function(_JSX) {
        })(JSX || (JSX = _jsx159.JSX || (_jsx159.JSX = {})));
      })(jsx || (jsx = {}));
      Global = /* @__PURE__ */ withEmotionCache(function(props, cache) {
        var styles4 = props.styles;
        var serialized = serializeStyles([styles4], void 0, React23.useContext(ThemeContext));
        var sheetRef = React23.useRef();
        useInsertionEffectWithLayoutFallback(function() {
          var key = cache.key + "-global";
          var sheet = new cache.sheet.constructor({
            key,
            nonce: cache.sheet.nonce,
            container: cache.sheet.container,
            speedy: cache.sheet.isSpeedy
          });
          var rehydrating = false;
          var node2 = document.querySelector('style[data-emotion="' + key + " " + serialized.name + '"]');
          if (cache.sheet.tags.length) {
            sheet.before = cache.sheet.tags[0];
          }
          if (node2 !== null) {
            rehydrating = true;
            node2.setAttribute("data-emotion", key);
            sheet.hydrate([node2]);
          }
          sheetRef.current = [sheet, rehydrating];
          return function() {
            sheet.flush();
          };
        }, [cache]);
        useInsertionEffectWithLayoutFallback(function() {
          var sheetRefCurrent = sheetRef.current;
          var sheet = sheetRefCurrent[0], rehydrating = sheetRefCurrent[1];
          if (rehydrating) {
            sheetRefCurrent[1] = false;
            return;
          }
          if (serialized.next !== void 0) {
            insertStyles(cache, serialized.next, true);
          }
          if (sheet.tags.length) {
            var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
            sheet.before = element;
            sheet.flush();
          }
          cache.insert("", serialized, sheet, false);
        }, [cache, serialized.name]);
        return null;
      });
      classnames = function classnames2(args) {
        var len = args.length;
        var i = 0;
        var cls = "";
        for (; i < len; i++) {
          var arg = args[i];
          if (arg == null) continue;
          var toAdd = void 0;
          switch (typeof arg) {
            case "boolean":
              break;
            case "object": {
              if (Array.isArray(arg)) {
                toAdd = classnames2(arg);
              } else {
                toAdd = "";
                for (var k in arg) {
                  if (arg[k] && k) {
                    toAdd && (toAdd += " ");
                    toAdd += k;
                  }
                }
              }
              break;
            }
            default: {
              toAdd = arg;
            }
          }
          if (toAdd) {
            cls && (cls += " ");
            cls += toAdd;
          }
        }
        return cls;
      };
      Insertion3 = function Insertion4(_ref) {
        var cache = _ref.cache, serializedArr = _ref.serializedArr;
        useInsertionEffectAlwaysWithSyncFallback(function() {
          for (var i = 0; i < serializedArr.length; i++) {
            insertStyles(cache, serializedArr[i], false);
          }
        });
        return null;
      };
      ClassNames = /* @__PURE__ */ withEmotionCache(function(props, cache) {
        var hasRendered = false;
        var serializedArr = [];
        var css3 = function css4() {
          if (hasRendered && isDevelopment3) {
            throw new Error("css can only be used during render");
          }
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          var serialized = serializeStyles(args, cache.registered);
          serializedArr.push(serialized);
          registerStyles(cache, serialized, false);
          return cache.key + "-" + serialized.name;
        };
        var cx = function cx2() {
          if (hasRendered && isDevelopment3) {
            throw new Error("cx can only be used during render");
          }
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          return merge(cache.registered, css3, classnames(args));
        };
        var content = {
          css: css3,
          cx,
          theme: React23.useContext(ThemeContext)
        };
        var ele = props.children(content);
        hasRendered = true;
        return /* @__PURE__ */ React23.createElement(React23.Fragment, null, /* @__PURE__ */ React23.createElement(Insertion3, {
          cache,
          serializedArr
        }), ele);
      });
    }
  });

  // node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js
  var reactPropsRegex, isPropValid;
  var init_emotion_is_prop_valid_esm = __esm({
    "node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js"() {
      init_emotion_memoize_esm();
      reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|disableRemotePlayback|download|draggable|encType|enterKeyHint|fetchpriority|fetchPriority|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
      isPropValid = /* @__PURE__ */ memoize(
        function(prop) {
          return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
        }
        /* Z+1 */
      );
    }
  });

  // node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js
  var React24, isDevelopment4, testOmitPropsOnStringTag, testOmitPropsOnComponent, getDefaultShouldForwardProp, composeShouldForwardProps, Insertion5, createStyled;
  var init_emotion_styled_base_browser_esm = __esm({
    "node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js"() {
      init_extends();
      init_emotion_react_browser_esm();
      init_emotion_serialize_esm();
      init_emotion_use_insertion_effect_with_fallbacks_browser_esm();
      init_emotion_utils_browser_esm();
      React24 = __toESM(require_react());
      init_emotion_is_prop_valid_esm();
      isDevelopment4 = false;
      testOmitPropsOnStringTag = isPropValid;
      testOmitPropsOnComponent = function testOmitPropsOnComponent2(key) {
        return key !== "theme";
      };
      getDefaultShouldForwardProp = function getDefaultShouldForwardProp2(tag) {
        return typeof tag === "string" && // 96 is one less than the char code
        // for "a" so this is checking that
        // it's a lowercase character
        tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
      };
      composeShouldForwardProps = function composeShouldForwardProps2(tag, options, isReal) {
        var shouldForwardProp2;
        if (options) {
          var optionsShouldForwardProp = options.shouldForwardProp;
          shouldForwardProp2 = tag.__emotion_forwardProp && optionsShouldForwardProp ? function(propName) {
            return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
          } : optionsShouldForwardProp;
        }
        if (typeof shouldForwardProp2 !== "function" && isReal) {
          shouldForwardProp2 = tag.__emotion_forwardProp;
        }
        return shouldForwardProp2;
      };
      Insertion5 = function Insertion6(_ref) {
        var cache = _ref.cache, serialized = _ref.serialized, isStringTag2 = _ref.isStringTag;
        registerStyles(cache, serialized, isStringTag2);
        useInsertionEffectAlwaysWithSyncFallback(function() {
          return insertStyles(cache, serialized, isStringTag2);
        });
        return null;
      };
      createStyled = function createStyled2(tag, options) {
        var isReal = tag.__emotion_real === tag;
        var baseTag = isReal && tag.__emotion_base || tag;
        var identifierName;
        var targetClassName;
        if (options !== void 0) {
          identifierName = options.label;
          targetClassName = options.target;
        }
        var shouldForwardProp2 = composeShouldForwardProps(tag, options, isReal);
        var defaultShouldForwardProp = shouldForwardProp2 || getDefaultShouldForwardProp(baseTag);
        var shouldUseAs = !defaultShouldForwardProp("as");
        return function() {
          var args = arguments;
          var styles4 = isReal && tag.__emotion_styles !== void 0 ? tag.__emotion_styles.slice(0) : [];
          if (identifierName !== void 0) {
            styles4.push("label:" + identifierName + ";");
          }
          if (args[0] == null || args[0].raw === void 0) {
            styles4.push.apply(styles4, args);
          } else {
            var templateStringsArr = args[0];
            styles4.push(templateStringsArr[0]);
            var len = args.length;
            var i = 1;
            for (; i < len; i++) {
              styles4.push(args[i], templateStringsArr[i]);
            }
          }
          var Styled = withEmotionCache(function(props, cache, ref) {
            var FinalTag = shouldUseAs && props.as || baseTag;
            var className = "";
            var classInterpolations = [];
            var mergedProps = props;
            if (props.theme == null) {
              mergedProps = {};
              for (var key in props) {
                mergedProps[key] = props[key];
              }
              mergedProps.theme = React24.useContext(ThemeContext);
            }
            if (typeof props.className === "string") {
              className = getRegisteredStyles(cache.registered, classInterpolations, props.className);
            } else if (props.className != null) {
              className = props.className + " ";
            }
            var serialized = serializeStyles(styles4.concat(classInterpolations), cache.registered, mergedProps);
            className += cache.key + "-" + serialized.name;
            if (targetClassName !== void 0) {
              className += " " + targetClassName;
            }
            var finalShouldForwardProp = shouldUseAs && shouldForwardProp2 === void 0 ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;
            var newProps = {};
            for (var _key in props) {
              if (shouldUseAs && _key === "as") continue;
              if (finalShouldForwardProp(_key)) {
                newProps[_key] = props[_key];
              }
            }
            newProps.className = className;
            if (ref) {
              newProps.ref = ref;
            }
            return /* @__PURE__ */ React24.createElement(React24.Fragment, null, /* @__PURE__ */ React24.createElement(Insertion5, {
              cache,
              serialized,
              isStringTag: typeof FinalTag === "string"
            }), /* @__PURE__ */ React24.createElement(FinalTag, newProps));
          });
          Styled.displayName = identifierName !== void 0 ? identifierName : "Styled(" + (typeof baseTag === "string" ? baseTag : baseTag.displayName || baseTag.name || "Component") + ")";
          Styled.defaultProps = tag.defaultProps;
          Styled.__emotion_real = Styled;
          Styled.__emotion_base = baseTag;
          Styled.__emotion_styles = styles4;
          Styled.__emotion_forwardProp = shouldForwardProp2;
          Object.defineProperty(Styled, "toString", {
            value: function value() {
              if (targetClassName === void 0 && isDevelopment4) {
                return "NO_COMPONENT_SELECTOR";
              }
              return "." + targetClassName;
            }
          });
          Styled.withComponent = function(nextTag, nextOptions) {
            var newStyled = createStyled2(nextTag, _extends({}, options, nextOptions, {
              shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
            }));
            return newStyled.apply(void 0, styles4);
          };
          return Styled;
        };
      };
    }
  });

  // node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js
  var emotion_styled_browser_esm_exports = {};
  __export(emotion_styled_browser_esm_exports, {
    default: () => styled
  });
  var import_react3, tags, styled;
  var init_emotion_styled_browser_esm = __esm({
    "node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js"() {
      init_emotion_styled_base_browser_esm();
      init_extends();
      init_emotion_serialize_esm();
      init_emotion_use_insertion_effect_with_fallbacks_browser_esm();
      init_emotion_utils_browser_esm();
      import_react3 = __toESM(require_react());
      init_emotion_is_prop_valid_esm();
      tags = [
        "a",
        "abbr",
        "address",
        "area",
        "article",
        "aside",
        "audio",
        "b",
        "base",
        "bdi",
        "bdo",
        "big",
        "blockquote",
        "body",
        "br",
        "button",
        "canvas",
        "caption",
        "cite",
        "code",
        "col",
        "colgroup",
        "data",
        "datalist",
        "dd",
        "del",
        "details",
        "dfn",
        "dialog",
        "div",
        "dl",
        "dt",
        "em",
        "embed",
        "fieldset",
        "figcaption",
        "figure",
        "footer",
        "form",
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6",
        "head",
        "header",
        "hgroup",
        "hr",
        "html",
        "i",
        "iframe",
        "img",
        "input",
        "ins",
        "kbd",
        "keygen",
        "label",
        "legend",
        "li",
        "link",
        "main",
        "map",
        "mark",
        "marquee",
        "menu",
        "menuitem",
        "meta",
        "meter",
        "nav",
        "noscript",
        "object",
        "ol",
        "optgroup",
        "option",
        "output",
        "p",
        "param",
        "picture",
        "pre",
        "progress",
        "q",
        "rp",
        "rt",
        "ruby",
        "s",
        "samp",
        "script",
        "section",
        "select",
        "small",
        "source",
        "span",
        "strong",
        "style",
        "sub",
        "summary",
        "sup",
        "table",
        "tbody",
        "td",
        "textarea",
        "tfoot",
        "th",
        "thead",
        "time",
        "title",
        "tr",
        "track",
        "u",
        "ul",
        "var",
        "video",
        "wbr",
        // SVG
        "circle",
        "clipPath",
        "defs",
        "ellipse",
        "foreignObject",
        "g",
        "image",
        "line",
        "linearGradient",
        "mask",
        "path",
        "pattern",
        "polygon",
        "polyline",
        "radialGradient",
        "rect",
        "stop",
        "svg",
        "text",
        "tspan"
      ];
      styled = createStyled.bind(null);
      tags.forEach(function(tagName) {
        styled[tagName] = styled(tagName);
      });
    }
  });

  // node_modules/react/cjs/react-jsx-runtime.development.js
  var require_react_jsx_runtime_development = __commonJS({
    "node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React242 = require_react();
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactSharedInternals = React242.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var assign2 = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign2({}, props, {
                    value: prevLog
                  }),
                  info: assign2({}, props, {
                    value: prevInfo
                  }),
                  warn: assign2({}, props, {
                    value: prevWarn
                  }),
                  error: assign2({}, props, {
                    value: prevError
                  }),
                  group: assign2({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign2({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign2({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match2 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn2, construct) {
            if (!fn2 || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn2);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn2, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn2.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn2();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn2.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn2.displayName);
                          }
                          {
                            if (typeof fn2 === "function") {
                              componentFrameCache.set(fn2, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn2 ? fn2.displayName || fn2.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn2 === "function") {
                componentFrameCache.set(fn2, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn2, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn2, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values3, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown;
          var specialPropRefWarningShown;
          var didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function warnIfStringRefCannotBeAutoConverted(config, self) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          function defineKeyPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingKey = function() {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingKey.isReactWarning = true;
              Object.defineProperty(props, "key", {
                get: warnAboutAccessingKey,
                configurable: true
              });
            }
          }
          function defineRefPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingRef = function() {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingRef.isReactWarning = true;
              Object.defineProperty(props, "ref", {
                get: warnAboutAccessingRef,
                configurable: true
              });
            }
          }
          var ReactElement = function(type, key, ref, self, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function jsxDEV(type, config, maybeKey, source, self) {
            {
              var propName;
              var props = {};
              var key = null;
              var ref = null;
              if (maybeKey !== void 0) {
                {
                  checkKeyStringCoercion(maybeKey);
                }
                key = "" + maybeKey;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config, self);
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
              if (type && type.defaultProps) {
                var defaultProps2 = type.defaultProps;
                for (propName in defaultProps2) {
                  if (props[propName] === void 0) {
                    props[propName] = defaultProps2[propName];
                  }
                }
              }
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
              return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function isValidElement13(object) {
            {
              return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
            }
          }
          function getDeclarationErrorAddendum() {
            {
              if (ReactCurrentOwner$1.current) {
                var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
                if (name) {
                  return "\n\nCheck the render method of `" + name + "`.";
                }
              }
              return "";
            }
          }
          function getSourceInfoErrorAddendum(source) {
            {
              if (source !== void 0) {
                var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                var lineNumber = source.lineNumber;
                return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
              }
              return "";
            }
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            {
              var info = getDeclarationErrorAddendum();
              if (!info) {
                var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                if (parentName) {
                  info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                }
              }
              return info;
            }
          }
          function validateExplicitKey(element, parentType) {
            {
              if (!element._store || element._store.validated || element.key != null) {
                return;
              }
              element._store.validated = true;
              var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
              var childOwner = "";
              if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
                childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
              }
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node2, parentType) {
            {
              if (typeof node2 !== "object") {
                return;
              }
              if (isArray(node2)) {
                for (var i = 0; i < node2.length; i++) {
                  var child = node2[i];
                  if (isValidElement13(child)) {
                    validateExplicitKey(child, parentType);
                  }
                }
              } else if (isValidElement13(node2)) {
                if (node2._store) {
                  node2._store.validated = true;
                }
              } else if (node2) {
                var iteratorFn = getIteratorFn(node2);
                if (typeof iteratorFn === "function") {
                  if (iteratorFn !== node2.entries) {
                    var iterator = iteratorFn.call(node2);
                    var step;
                    while (!(step = iterator.next()).done) {
                      if (isValidElement13(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          var didWarnAboutKeySpread = {};
          function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
            {
              var validType = isValidElementType(type);
              if (!validType) {
                var info = "";
                if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                  info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var sourceInfo = getSourceInfoErrorAddendum(source);
                if (sourceInfo) {
                  info += sourceInfo;
                } else {
                  info += getDeclarationErrorAddendum();
                }
                var typeString;
                if (type === null) {
                  typeString = "null";
                } else if (isArray(type)) {
                  typeString = "array";
                } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                  typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                  info = " Did you accidentally export a JSX literal instead of a component?";
                } else {
                  typeString = typeof type;
                }
                error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
              var element = jsxDEV(type, props, key, source, self);
              if (element == null) {
                return element;
              }
              if (validType) {
                var children = props.children;
                if (children !== void 0) {
                  if (isStaticChildren) {
                    if (isArray(children)) {
                      for (var i = 0; i < children.length; i++) {
                        validateChildKeys(children[i], type);
                      }
                      if (Object.freeze) {
                        Object.freeze(children);
                      }
                    } else {
                      error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                    }
                  } else {
                    validateChildKeys(children, type);
                  }
                }
              }
              {
                if (hasOwnProperty.call(props, "key")) {
                  var componentName = getComponentNameFromType(type);
                  var keys = Object.keys(props).filter(function(k) {
                    return k !== "key";
                  });
                  var beforeExample = keys.length > 0 ? "{key: someKey, " + keys.join(": ..., ") + ": ...}" : "{key: someKey}";
                  if (!didWarnAboutKeySpread[componentName + beforeExample]) {
                    var afterExample = keys.length > 0 ? "{" + keys.join(": ..., ") + ": ...}" : "{}";
                    error('A props object containing a "key" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);
                    didWarnAboutKeySpread[componentName + beforeExample] = true;
                  }
                }
              }
              if (type === REACT_FRAGMENT_TYPE) {
                validateFragmentProps(element);
              } else {
                validatePropTypes(element);
              }
              return element;
            }
          }
          function jsxWithValidationStatic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, true);
            }
          }
          function jsxWithValidationDynamic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, false);
            }
          }
          var jsx3 = jsxWithValidationDynamic;
          var jsxs = jsxWithValidationStatic;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.jsx = jsx3;
          exports.jsxs = jsxs;
        })();
      }
    }
  });

  // node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS({
    "node_modules/react/jsx-runtime.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_jsx_runtime_development();
      }
    }
  });

  // node_modules/@mui/styled-engine/node/StyledEngineProvider/StyledEngineProvider.js
  var require_StyledEngineProvider = __commonJS({
    "node_modules/@mui/styled-engine/node/StyledEngineProvider/StyledEngineProvider.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = StyledEngineProvider2;
      var React242 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _react2 = (init_emotion_react_browser_esm(), __toCommonJS(emotion_react_browser_esm_exports));
      var _cache = _interopRequireDefault((init_emotion_cache_browser_esm(), __toCommonJS(emotion_cache_browser_esm_exports)));
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(e) {
        if ("function" != typeof WeakMap) return null;
        var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e2) {
          return e2 ? t : r2;
        })(e);
      }
      function _interopRequireWildcard(e, r2) {
        if (!r2 && e && e.__esModule) return e;
        if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
        var t = _getRequireWildcardCache(r2);
        if (t && t.has(e)) return t.get(e);
        var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
          var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
          i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
        }
        return n.default = e, t && t.set(e, n), n;
      }
      function getCache(injectFirst, enableCssLayer) {
        const emotionCache = (0, _cache.default)({
          key: "css",
          prepend: injectFirst
        });
        if (enableCssLayer) {
          const prevInsert = emotionCache.insert;
          emotionCache.insert = (...args) => {
            if (!args[1].styles.match(/^@layer\s+[^{]*$/)) {
              args[1].styles = `@layer mui {${args[1].styles}}`;
            }
            return prevInsert(...args);
          };
        }
        return emotionCache;
      }
      var cacheMap = /* @__PURE__ */ new Map();
      function StyledEngineProvider2(props) {
        const {
          injectFirst,
          enableCssLayer,
          children
        } = props;
        const cache = React242.useMemo(() => {
          const cacheKey = `${injectFirst}-${enableCssLayer}`;
          if (typeof document === "object" && cacheMap.has(cacheKey)) {
            return cacheMap.get(cacheKey);
          }
          const fresh = getCache(injectFirst, enableCssLayer);
          cacheMap.set(cacheKey, fresh);
          return fresh;
        }, [injectFirst, enableCssLayer]);
        if (injectFirst || enableCssLayer) {
          return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_react2.CacheProvider, {
            value: cache,
            children
          });
        }
        return children;
      }
      true ? StyledEngineProvider2.propTypes = {
        /**
         * Your component tree.
         */
        children: _propTypes.default.node,
        /**
         * If true, MUI styles are wrapped in CSS `@layer mui` rule.
         * It helps to override MUI styles when using CSS Modules, Tailwind CSS, plain CSS, or any other styling solution.
         */
        enableCssLayer: _propTypes.default.bool,
        /**
         * By default, the styles are injected last in the <head> element of the page.
         * As a result, they gain more specificity than any other style sheet.
         * If you want to override MUI's styles, set this prop.
         */
        injectFirst: _propTypes.default.bool
      } : void 0;
    }
  });

  // node_modules/@mui/styled-engine/node/StyledEngineProvider/index.js
  var require_StyledEngineProvider2 = __commonJS({
    "node_modules/@mui/styled-engine/node/StyledEngineProvider/index.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _StyledEngineProvider.default;
        }
      });
      var _StyledEngineProvider = _interopRequireDefault(require_StyledEngineProvider());
    }
  });

  // node_modules/@mui/styled-engine/node/GlobalStyles/GlobalStyles.js
  var require_GlobalStyles = __commonJS({
    "node_modules/@mui/styled-engine/node/GlobalStyles/GlobalStyles.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = GlobalStyles3;
      var React242 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _react2 = (init_emotion_react_browser_esm(), __toCommonJS(emotion_react_browser_esm_exports));
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(e) {
        if ("function" != typeof WeakMap) return null;
        var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e2) {
          return e2 ? t : r2;
        })(e);
      }
      function _interopRequireWildcard(e, r2) {
        if (!r2 && e && e.__esModule) return e;
        if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
        var t = _getRequireWildcardCache(r2);
        if (t && t.has(e)) return t.get(e);
        var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
          var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
          i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
        }
        return n.default = e, t && t.set(e, n), n;
      }
      function isEmpty4(obj) {
        return obj === void 0 || obj === null || Object.keys(obj).length === 0;
      }
      function GlobalStyles3(props) {
        const {
          styles: styles4,
          defaultTheme: defaultTheme4 = {}
        } = props;
        const globalStyles = typeof styles4 === "function" ? (themeInput) => styles4(isEmpty4(themeInput) ? defaultTheme4 : themeInput) : styles4;
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_react2.Global, {
          styles: globalStyles
        });
      }
      true ? GlobalStyles3.propTypes = {
        defaultTheme: _propTypes.default.object,
        styles: _propTypes.default.oneOfType([_propTypes.default.array, _propTypes.default.string, _propTypes.default.object, _propTypes.default.func])
      } : void 0;
    }
  });

  // node_modules/@mui/styled-engine/node/GlobalStyles/index.js
  var require_GlobalStyles2 = __commonJS({
    "node_modules/@mui/styled-engine/node/GlobalStyles/index.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _GlobalStyles.default;
        }
      });
      var _GlobalStyles = _interopRequireDefault(require_GlobalStyles());
    }
  });

  // node_modules/@mui/styled-engine/node/index.js
  var require_node = __commonJS({
    "node_modules/@mui/styled-engine/node/index.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "GlobalStyles", {
        enumerable: true,
        get: function() {
          return _GlobalStyles.default;
        }
      });
      Object.defineProperty(exports, "StyledEngineProvider", {
        enumerable: true,
        get: function() {
          return _StyledEngineProvider.default;
        }
      });
      Object.defineProperty(exports, "ThemeContext", {
        enumerable: true,
        get: function() {
          return _react.ThemeContext;
        }
      });
      Object.defineProperty(exports, "css", {
        enumerable: true,
        get: function() {
          return _react.css;
        }
      });
      exports.default = styled5;
      exports.internal_processStyles = void 0;
      exports.internal_serializeStyles = internal_serializeStyles;
      Object.defineProperty(exports, "keyframes", {
        enumerable: true,
        get: function() {
          return _react.keyframes;
        }
      });
      var _styled = _interopRequireDefault((init_emotion_styled_browser_esm(), __toCommonJS(emotion_styled_browser_esm_exports)));
      var _serialize = (init_emotion_serialize_esm(), __toCommonJS(emotion_serialize_esm_exports));
      var _react = (init_emotion_react_browser_esm(), __toCommonJS(emotion_react_browser_esm_exports));
      var _StyledEngineProvider = _interopRequireDefault(require_StyledEngineProvider2());
      var _GlobalStyles = _interopRequireDefault(require_GlobalStyles2());
      function styled5(tag, options) {
        const stylesFactory = (0, _styled.default)(tag, options);
        if (true) {
          return (...styles4) => {
            const component = typeof tag === "string" ? `"${tag}"` : "component";
            if (styles4.length === 0) {
              console.error([`MUI: Seems like you called \`styled(${component})()\` without a \`style\` argument.`, 'You must provide a `styles` argument: `styled("div")(styleYouForgotToPass)`.'].join("\n"));
            } else if (styles4.some((style4) => style4 === void 0)) {
              console.error(`MUI: the styled(${component})(...args) API requires all its args to be defined.`);
            }
            return stylesFactory(...styles4);
          };
        }
        return stylesFactory;
      }
      var internal_processStyles = (tag, processor) => {
        if (Array.isArray(tag.__emotion_styles)) {
          tag.__emotion_styles = processor(tag.__emotion_styles);
        }
      };
      exports.internal_processStyles = internal_processStyles;
      var wrapper = [];
      function internal_serializeStyles(styles4) {
        wrapper[0] = styles4;
        return (0, _serialize.serializeStyles)(wrapper);
      }
    }
  });

  // node_modules/@babel/runtime/helpers/extends.js
  var require_extends = __commonJS({
    "node_modules/@babel/runtime/helpers/extends.js"(exports, module) {
      function _extends2() {
        return module.exports = _extends2 = Object.assign ? Object.assign.bind() : function(n) {
          for (var e = 1; e < arguments.length; e++) {
            var t = arguments[e];
            for (var r2 in t) ({}).hasOwnProperty.call(t, r2) && (n[r2] = t[r2]);
          }
          return n;
        }, module.exports.__esModule = true, module.exports["default"] = module.exports, _extends2.apply(null, arguments);
      }
      module.exports = _extends2, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@mui/utils/deepmerge/deepmerge.js
  var require_deepmerge = __commonJS({
    "node_modules/@mui/utils/deepmerge/deepmerge.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = deepmerge11;
      exports.isPlainObject = isPlainObject3;
      var _extends2 = _interopRequireDefault(require_extends());
      var React242 = _interopRequireWildcard(require_react());
      function _getRequireWildcardCache(e) {
        if ("function" != typeof WeakMap) return null;
        var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e2) {
          return e2 ? t : r2;
        })(e);
      }
      function _interopRequireWildcard(e, r2) {
        if (!r2 && e && e.__esModule) return e;
        if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
        var t = _getRequireWildcardCache(r2);
        if (t && t.has(e)) return t.get(e);
        var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
          var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
          i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
        }
        return n.default = e, t && t.set(e, n), n;
      }
      function isPlainObject3(item) {
        if (typeof item !== "object" || item === null) {
          return false;
        }
        const prototype = Object.getPrototypeOf(item);
        return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in item) && !(Symbol.iterator in item);
      }
      function deepClone2(source) {
        if (/* @__PURE__ */ React242.isValidElement(source) || !isPlainObject3(source)) {
          return source;
        }
        const output = {};
        Object.keys(source).forEach((key) => {
          output[key] = deepClone2(source[key]);
        });
        return output;
      }
      function deepmerge11(target, source, options = {
        clone: true
      }) {
        const output = options.clone ? (0, _extends2.default)({}, target) : target;
        if (isPlainObject3(target) && isPlainObject3(source)) {
          Object.keys(source).forEach((key) => {
            if (/* @__PURE__ */ React242.isValidElement(source[key])) {
              output[key] = source[key];
            } else if (isPlainObject3(source[key]) && // Avoid prototype pollution
            Object.prototype.hasOwnProperty.call(target, key) && isPlainObject3(target[key])) {
              output[key] = deepmerge11(target[key], source[key], options);
            } else if (options.clone) {
              output[key] = isPlainObject3(source[key]) ? deepClone2(source[key]) : source[key];
            } else {
              output[key] = source[key];
            }
          });
        }
        return output;
      }
    }
  });

  // node_modules/@mui/utils/deepmerge/index.js
  var require_deepmerge2 = __commonJS({
    "node_modules/@mui/utils/deepmerge/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {};
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _deepmerge.default;
        }
      });
      var _deepmerge = _interopRequireWildcard(require_deepmerge());
      Object.keys(_deepmerge).forEach(function(key) {
        if (key === "default" || key === "__esModule") return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
        if (key in exports && exports[key] === _deepmerge[key]) return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _deepmerge[key];
          }
        });
      });
      function _getRequireWildcardCache(e) {
        if ("function" != typeof WeakMap) return null;
        var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e2) {
          return e2 ? t : r2;
        })(e);
      }
      function _interopRequireWildcard(e, r2) {
        if (!r2 && e && e.__esModule) return e;
        if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
        var t = _getRequireWildcardCache(r2);
        if (t && t.has(e)) return t.get(e);
        var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
          var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
          i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
        }
        return n.default = e, t && t.set(e, n), n;
      }
    }
  });

  // node_modules/@mui/utils/capitalize/capitalize.js
  var require_capitalize = __commonJS({
    "node_modules/@mui/utils/capitalize/capitalize.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = capitalize6;
      var _formatMuiErrorMessage2 = _interopRequireDefault(require_formatMuiErrorMessage2());
      function capitalize6(string) {
        if (typeof string !== "string") {
          throw new Error(true ? `MUI: \`capitalize(string)\` expects a string argument.` : (0, _formatMuiErrorMessage2.default)(7));
        }
        return string.charAt(0).toUpperCase() + string.slice(1);
      }
    }
  });

  // node_modules/@mui/utils/capitalize/index.js
  var require_capitalize2 = __commonJS({
    "node_modules/@mui/utils/capitalize/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _capitalize.default;
        }
      });
      var _capitalize = _interopRequireDefault(require_capitalize());
    }
  });

  // node_modules/@mui/utils/getDisplayName/getDisplayName.js
  var require_getDisplayName = __commonJS({
    "node_modules/@mui/utils/getDisplayName/getDisplayName.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = getDisplayName2;
      exports.getFunctionName = getFunctionName;
      var _reactIs = require_react_is2();
      var fnNameMatchRegex = /^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;
      function getFunctionName(fn2) {
        const match2 = `${fn2}`.match(fnNameMatchRegex);
        const name = match2 && match2[1];
        return name || "";
      }
      function getFunctionComponentName(Component, fallback = "") {
        return Component.displayName || Component.name || getFunctionName(Component) || fallback;
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        const functionName = getFunctionComponentName(innerType);
        return outerType.displayName || (functionName !== "" ? `${wrapperName}(${functionName})` : wrapperName);
      }
      function getDisplayName2(Component) {
        if (Component == null) {
          return void 0;
        }
        if (typeof Component === "string") {
          return Component;
        }
        if (typeof Component === "function") {
          return getFunctionComponentName(Component, "Component");
        }
        if (typeof Component === "object") {
          switch (Component.$$typeof) {
            case _reactIs.ForwardRef:
              return getWrappedName(Component, Component.render, "ForwardRef");
            case _reactIs.Memo:
              return getWrappedName(Component, Component.type, "memo");
            default:
              return void 0;
          }
        }
        return void 0;
      }
    }
  });

  // node_modules/@mui/utils/getDisplayName/index.js
  var require_getDisplayName2 = __commonJS({
    "node_modules/@mui/utils/getDisplayName/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {};
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _getDisplayName.default;
        }
      });
      var _getDisplayName = _interopRequireWildcard(require_getDisplayName());
      Object.keys(_getDisplayName).forEach(function(key) {
        if (key === "default" || key === "__esModule") return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
        if (key in exports && exports[key] === _getDisplayName[key]) return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _getDisplayName[key];
          }
        });
      });
      function _getRequireWildcardCache(e) {
        if ("function" != typeof WeakMap) return null;
        var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e2) {
          return e2 ? t : r2;
        })(e);
      }
      function _interopRequireWildcard(e, r2) {
        if (!r2 && e && e.__esModule) return e;
        if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
        var t = _getRequireWildcardCache(r2);
        if (t && t.has(e)) return t.get(e);
        var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
          var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
          i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
        }
        return n.default = e, t && t.set(e, n), n;
      }
    }
  });

  // node_modules/@mui/utils/clamp/clamp.js
  var require_clamp = __commonJS({
    "node_modules/@mui/utils/clamp/clamp.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      function clamp3(val, min2 = Number.MIN_SAFE_INTEGER, max2 = Number.MAX_SAFE_INTEGER) {
        return Math.max(min2, Math.min(val, max2));
      }
      var _default = exports.default = clamp3;
    }
  });

  // node_modules/@mui/utils/clamp/index.js
  var require_clamp2 = __commonJS({
    "node_modules/@mui/utils/clamp/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _clamp.default;
        }
      });
      var _clamp = _interopRequireDefault(require_clamp());
    }
  });

  // node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js
  var require_objectWithoutPropertiesLoose = __commonJS({
    "node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js"(exports, module) {
      function _objectWithoutPropertiesLoose2(r2, e) {
        if (null == r2) return {};
        var t = {};
        for (var n in r2) if ({}.hasOwnProperty.call(r2, n)) {
          if (-1 !== e.indexOf(n)) continue;
          t[n] = r2[n];
        }
        return t;
      }
      module.exports = _objectWithoutPropertiesLoose2, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@mui/system/createTheme/createBreakpoints.js
  var require_createBreakpoints = __commonJS({
    "node_modules/@mui/system/createTheme/createBreakpoints.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.breakpointKeys = void 0;
      exports.default = createBreakpoints2;
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _extends2 = _interopRequireDefault(require_extends());
      var _excluded130 = ["values", "unit", "step"];
      var breakpointKeys = exports.breakpointKeys = ["xs", "sm", "md", "lg", "xl"];
      var sortBreakpointsValues2 = (values3) => {
        const breakpointsAsArray = Object.keys(values3).map((key) => ({
          key,
          val: values3[key]
        })) || [];
        breakpointsAsArray.sort((breakpoint1, breakpoint2) => breakpoint1.val - breakpoint2.val);
        return breakpointsAsArray.reduce((acc, obj) => {
          return (0, _extends2.default)({}, acc, {
            [obj.key]: obj.val
          });
        }, {});
      };
      function createBreakpoints2(breakpoints) {
        const {
          // The breakpoint **start** at this value.
          // For instance with the first breakpoint xs: [xs, sm).
          values: values3 = {
            xs: 0,
            // phone
            sm: 600,
            // tablet
            md: 900,
            // small laptop
            lg: 1200,
            // desktop
            xl: 1536
            // large screen
          },
          unit = "px",
          step = 5
        } = breakpoints, other = (0, _objectWithoutPropertiesLoose2.default)(breakpoints, _excluded130);
        const sortedValues = sortBreakpointsValues2(values3);
        const keys = Object.keys(sortedValues);
        function up(key) {
          const value = typeof values3[key] === "number" ? values3[key] : key;
          return `@media (min-width:${value}${unit})`;
        }
        function down(key) {
          const value = typeof values3[key] === "number" ? values3[key] : key;
          return `@media (max-width:${value - step / 100}${unit})`;
        }
        function between(start2, end2) {
          const endIndex = keys.indexOf(end2);
          return `@media (min-width:${typeof values3[start2] === "number" ? values3[start2] : start2}${unit}) and (max-width:${(endIndex !== -1 && typeof values3[keys[endIndex]] === "number" ? values3[keys[endIndex]] : end2) - step / 100}${unit})`;
        }
        function only(key) {
          if (keys.indexOf(key) + 1 < keys.length) {
            return between(key, keys[keys.indexOf(key) + 1]);
          }
          return up(key);
        }
        function not(key) {
          const keyIndex = keys.indexOf(key);
          if (keyIndex === 0) {
            return up(keys[1]);
          }
          if (keyIndex === keys.length - 1) {
            return down(keys[keyIndex]);
          }
          return between(key, keys[keys.indexOf(key) + 1]).replace("@media", "@media not all and");
        }
        return (0, _extends2.default)({
          keys,
          values: sortedValues,
          up,
          down,
          between,
          only,
          not,
          unit
        }, other);
      }
    }
  });

  // node_modules/@mui/system/createTheme/shape.js
  var require_shape = __commonJS({
    "node_modules/@mui/system/createTheme/shape.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var shape2 = {
        borderRadius: 4
      };
      var _default = exports.default = shape2;
    }
  });

  // node_modules/@mui/system/responsivePropType.js
  var require_responsivePropType = __commonJS({
    "node_modules/@mui/system/responsivePropType.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      var responsivePropType2 = true ? _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string, _propTypes.default.object, _propTypes.default.array]) : {};
      var _default = exports.default = responsivePropType2;
    }
  });

  // node_modules/@mui/system/merge.js
  var require_merge = __commonJS({
    "node_modules/@mui/system/merge.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _deepmerge = _interopRequireDefault(require_deepmerge2());
      function merge3(acc, item) {
        if (!item) {
          return acc;
        }
        return (0, _deepmerge.default)(acc, item, {
          clone: false
          // No need to clone deep, it's way faster.
        });
      }
      var _default = exports.default = merge3;
    }
  });

  // node_modules/@mui/system/breakpoints.js
  var require_breakpoints = __commonJS({
    "node_modules/@mui/system/breakpoints.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.computeBreakpointsBase = computeBreakpointsBase2;
      exports.createEmptyBreakpointObject = createEmptyBreakpointObject2;
      exports.default = void 0;
      exports.handleBreakpoints = handleBreakpoints2;
      exports.mergeBreakpointsInOrder = mergeBreakpointsInOrder2;
      exports.removeUnusedBreakpoints = removeUnusedBreakpoints2;
      exports.resolveBreakpointValues = resolveBreakpointValues2;
      exports.values = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _deepmerge = _interopRequireDefault(require_deepmerge2());
      var _merge = _interopRequireDefault(require_merge());
      var values3 = exports.values = {
        xs: 0,
        // phone
        sm: 600,
        // tablet
        md: 900,
        // small laptop
        lg: 1200,
        // desktop
        xl: 1536
        // large screen
      };
      var defaultBreakpoints2 = {
        // Sorted ASC by size. That's important.
        // It can't be configured as it's used statically for propTypes.
        keys: ["xs", "sm", "md", "lg", "xl"],
        up: (key) => `@media (min-width:${values3[key]}px)`
      };
      function handleBreakpoints2(props, propValue, styleFromPropValue) {
        const theme = props.theme || {};
        if (Array.isArray(propValue)) {
          const themeBreakpoints = theme.breakpoints || defaultBreakpoints2;
          return propValue.reduce((acc, item, index) => {
            acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
            return acc;
          }, {});
        }
        if (typeof propValue === "object") {
          const themeBreakpoints = theme.breakpoints || defaultBreakpoints2;
          return Object.keys(propValue).reduce((acc, breakpoint) => {
            if (Object.keys(themeBreakpoints.values || values3).indexOf(breakpoint) !== -1) {
              const mediaKey = themeBreakpoints.up(breakpoint);
              acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
            } else {
              const cssKey = breakpoint;
              acc[cssKey] = propValue[cssKey];
            }
            return acc;
          }, {});
        }
        const output = styleFromPropValue(propValue);
        return output;
      }
      function breakpoints(styleFunction) {
        const newStyleFunction = (props) => {
          const theme = props.theme || {};
          const base = styleFunction(props);
          const themeBreakpoints = theme.breakpoints || defaultBreakpoints2;
          const extended = themeBreakpoints.keys.reduce((acc, key) => {
            if (props[key]) {
              acc = acc || {};
              acc[themeBreakpoints.up(key)] = styleFunction((0, _extends2.default)({
                theme
              }, props[key]));
            }
            return acc;
          }, null);
          return (0, _merge.default)(base, extended);
        };
        newStyleFunction.propTypes = true ? (0, _extends2.default)({}, styleFunction.propTypes, {
          xs: _propTypes.default.object,
          sm: _propTypes.default.object,
          md: _propTypes.default.object,
          lg: _propTypes.default.object,
          xl: _propTypes.default.object
        }) : {};
        newStyleFunction.filterProps = ["xs", "sm", "md", "lg", "xl", ...styleFunction.filterProps];
        return newStyleFunction;
      }
      function createEmptyBreakpointObject2(breakpointsInput = {}) {
        var _breakpointsInput$key;
        const breakpointsInOrder = (_breakpointsInput$key = breakpointsInput.keys) == null ? void 0 : _breakpointsInput$key.reduce((acc, key) => {
          const breakpointStyleKey = breakpointsInput.up(key);
          acc[breakpointStyleKey] = {};
          return acc;
        }, {});
        return breakpointsInOrder || {};
      }
      function removeUnusedBreakpoints2(breakpointKeys, style4) {
        return breakpointKeys.reduce((acc, key) => {
          const breakpointOutput = acc[key];
          const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;
          if (isBreakpointUnused) {
            delete acc[key];
          }
          return acc;
        }, style4);
      }
      function mergeBreakpointsInOrder2(breakpointsInput, ...styles4) {
        const emptyBreakpoints = createEmptyBreakpointObject2(breakpointsInput);
        const mergedOutput = [emptyBreakpoints, ...styles4].reduce((prev2, next2) => (0, _deepmerge.default)(prev2, next2), {});
        return removeUnusedBreakpoints2(Object.keys(emptyBreakpoints), mergedOutput);
      }
      function computeBreakpointsBase2(breakpointValues, themeBreakpoints) {
        if (typeof breakpointValues !== "object") {
          return {};
        }
        const base = {};
        const breakpointsKeys = Object.keys(themeBreakpoints);
        if (Array.isArray(breakpointValues)) {
          breakpointsKeys.forEach((breakpoint, i) => {
            if (i < breakpointValues.length) {
              base[breakpoint] = true;
            }
          });
        } else {
          breakpointsKeys.forEach((breakpoint) => {
            if (breakpointValues[breakpoint] != null) {
              base[breakpoint] = true;
            }
          });
        }
        return base;
      }
      function resolveBreakpointValues2({
        values: breakpointValues,
        breakpoints: themeBreakpoints,
        base: customBase
      }) {
        const base = customBase || computeBreakpointsBase2(breakpointValues, themeBreakpoints);
        const keys = Object.keys(base);
        if (keys.length === 0) {
          return breakpointValues;
        }
        let previous;
        return keys.reduce((acc, breakpoint, i) => {
          if (Array.isArray(breakpointValues)) {
            acc[breakpoint] = breakpointValues[i] != null ? breakpointValues[i] : breakpointValues[previous];
            previous = i;
          } else if (typeof breakpointValues === "object") {
            acc[breakpoint] = breakpointValues[breakpoint] != null ? breakpointValues[breakpoint] : breakpointValues[previous];
            previous = breakpoint;
          } else {
            acc[breakpoint] = breakpointValues;
          }
          return acc;
        }, {});
      }
      var _default = exports.default = breakpoints;
    }
  });

  // node_modules/@mui/system/style.js
  var require_style = __commonJS({
    "node_modules/@mui/system/style.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getPath = getPath2;
      exports.getStyleValue = getStyleValue3;
      var _capitalize = _interopRequireDefault(require_capitalize2());
      var _responsivePropType = _interopRequireDefault(require_responsivePropType());
      var _breakpoints = require_breakpoints();
      function getPath2(obj, path, checkVars = true) {
        if (!path || typeof path !== "string") {
          return null;
        }
        if (obj && obj.vars && checkVars) {
          const val = `vars.${path}`.split(".").reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);
          if (val != null) {
            return val;
          }
        }
        return path.split(".").reduce((acc, item) => {
          if (acc && acc[item] != null) {
            return acc[item];
          }
          return null;
        }, obj);
      }
      function getStyleValue3(themeMapping, transform, propValueFinal, userValue = propValueFinal) {
        let value;
        if (typeof themeMapping === "function") {
          value = themeMapping(propValueFinal);
        } else if (Array.isArray(themeMapping)) {
          value = themeMapping[propValueFinal] || userValue;
        } else {
          value = getPath2(themeMapping, propValueFinal) || userValue;
        }
        if (transform) {
          value = transform(value, userValue, themeMapping);
        }
        return value;
      }
      function style4(options) {
        const {
          prop,
          cssProperty = options.prop,
          themeKey,
          transform
        } = options;
        const fn2 = (props) => {
          if (props[prop] == null) {
            return null;
          }
          const propValue = props[prop];
          const theme = props.theme;
          const themeMapping = getPath2(theme, themeKey) || {};
          const styleFromPropValue = (propValueFinal) => {
            let value = getStyleValue3(themeMapping, transform, propValueFinal);
            if (propValueFinal === value && typeof propValueFinal === "string") {
              value = getStyleValue3(themeMapping, transform, `${prop}${propValueFinal === "default" ? "" : (0, _capitalize.default)(propValueFinal)}`, propValueFinal);
            }
            if (cssProperty === false) {
              return value;
            }
            return {
              [cssProperty]: value
            };
          };
          return (0, _breakpoints.handleBreakpoints)(props, propValue, styleFromPropValue);
        };
        fn2.propTypes = true ? {
          [prop]: _responsivePropType.default
        } : {};
        fn2.filterProps = [prop];
        return fn2;
      }
      var _default = exports.default = style4;
    }
  });

  // node_modules/@mui/system/memoize.js
  var require_memoize = __commonJS({
    "node_modules/@mui/system/memoize.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = memoize3;
      function memoize3(fn2) {
        const cache = {};
        return (arg) => {
          if (cache[arg] === void 0) {
            cache[arg] = fn2(arg);
          }
          return cache[arg];
        };
      }
    }
  });

  // node_modules/@mui/system/spacing.js
  var require_spacing = __commonJS({
    "node_modules/@mui/system/spacing.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.createUnarySpacing = createUnarySpacing2;
      exports.createUnaryUnit = createUnaryUnit2;
      exports.default = void 0;
      exports.getStyleFromPropValue = getStyleFromPropValue2;
      exports.getValue = getValue2;
      exports.margin = margin2;
      exports.marginKeys = void 0;
      exports.padding = padding2;
      exports.paddingKeys = void 0;
      var _responsivePropType = _interopRequireDefault(require_responsivePropType());
      var _breakpoints = require_breakpoints();
      var _style = require_style();
      var _merge = _interopRequireDefault(require_merge());
      var _memoize = _interopRequireDefault(require_memoize());
      var properties2 = {
        m: "margin",
        p: "padding"
      };
      var directions2 = {
        t: "Top",
        r: "Right",
        b: "Bottom",
        l: "Left",
        x: ["Left", "Right"],
        y: ["Top", "Bottom"]
      };
      var aliases2 = {
        marginX: "mx",
        marginY: "my",
        paddingX: "px",
        paddingY: "py"
      };
      var getCssProperties2 = (0, _memoize.default)((prop) => {
        if (prop.length > 2) {
          if (aliases2[prop]) {
            prop = aliases2[prop];
          } else {
            return [prop];
          }
        }
        const [a, b] = prop.split("");
        const property = properties2[a];
        const direction = directions2[b] || "";
        return Array.isArray(direction) ? direction.map((dir) => property + dir) : [property + direction];
      });
      var marginKeys2 = exports.marginKeys = ["m", "mt", "mr", "mb", "ml", "mx", "my", "margin", "marginTop", "marginRight", "marginBottom", "marginLeft", "marginX", "marginY", "marginInline", "marginInlineStart", "marginInlineEnd", "marginBlock", "marginBlockStart", "marginBlockEnd"];
      var paddingKeys2 = exports.paddingKeys = ["p", "pt", "pr", "pb", "pl", "px", "py", "padding", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "paddingX", "paddingY", "paddingInline", "paddingInlineStart", "paddingInlineEnd", "paddingBlock", "paddingBlockStart", "paddingBlockEnd"];
      var spacingKeys2 = [...marginKeys2, ...paddingKeys2];
      function createUnaryUnit2(theme, themeKey, defaultValue, propName) {
        var _getPath;
        const themeSpacing = (_getPath = (0, _style.getPath)(theme, themeKey, false)) != null ? _getPath : defaultValue;
        if (typeof themeSpacing === "number") {
          return (abs2) => {
            if (typeof abs2 === "string") {
              return abs2;
            }
            if (true) {
              if (typeof abs2 !== "number") {
                console.error(`MUI: Expected ${propName} argument to be a number or a string, got ${abs2}.`);
              }
            }
            return themeSpacing * abs2;
          };
        }
        if (Array.isArray(themeSpacing)) {
          return (abs2) => {
            if (typeof abs2 === "string") {
              return abs2;
            }
            if (true) {
              if (!Number.isInteger(abs2)) {
                console.error([`MUI: The \`theme.${themeKey}\` array type cannot be combined with non integer values.You should either use an integer value that can be used as index, or define the \`theme.${themeKey}\` as a number.`].join("\n"));
              } else if (abs2 > themeSpacing.length - 1) {
                console.error([`MUI: The value provided (${abs2}) overflows.`, `The supported values are: ${JSON.stringify(themeSpacing)}.`, `${abs2} > ${themeSpacing.length - 1}, you need to add the missing values.`].join("\n"));
              }
            }
            return themeSpacing[abs2];
          };
        }
        if (typeof themeSpacing === "function") {
          return themeSpacing;
        }
        if (true) {
          console.error([`MUI: The \`theme.${themeKey}\` value (${themeSpacing}) is invalid.`, "It should be a number, an array or a function."].join("\n"));
        }
        return () => void 0;
      }
      function createUnarySpacing2(theme) {
        return createUnaryUnit2(theme, "spacing", 8, "spacing");
      }
      function getValue2(transformer, propValue) {
        if (typeof propValue === "string" || propValue == null) {
          return propValue;
        }
        const abs2 = Math.abs(propValue);
        const transformed = transformer(abs2);
        if (propValue >= 0) {
          return transformed;
        }
        if (typeof transformed === "number") {
          return -transformed;
        }
        return `-${transformed}`;
      }
      function getStyleFromPropValue2(cssProperties, transformer) {
        return (propValue) => cssProperties.reduce((acc, cssProperty) => {
          acc[cssProperty] = getValue2(transformer, propValue);
          return acc;
        }, {});
      }
      function resolveCssProperty2(props, keys, prop, transformer) {
        if (keys.indexOf(prop) === -1) {
          return null;
        }
        const cssProperties = getCssProperties2(prop);
        const styleFromPropValue = getStyleFromPropValue2(cssProperties, transformer);
        const propValue = props[prop];
        return (0, _breakpoints.handleBreakpoints)(props, propValue, styleFromPropValue);
      }
      function style4(props, keys) {
        const transformer = createUnarySpacing2(props.theme);
        return Object.keys(props).map((prop) => resolveCssProperty2(props, keys, prop, transformer)).reduce(_merge.default, {});
      }
      function margin2(props) {
        return style4(props, marginKeys2);
      }
      margin2.propTypes = true ? marginKeys2.reduce((obj, key) => {
        obj[key] = _responsivePropType.default;
        return obj;
      }, {}) : {};
      margin2.filterProps = marginKeys2;
      function padding2(props) {
        return style4(props, paddingKeys2);
      }
      padding2.propTypes = true ? paddingKeys2.reduce((obj, key) => {
        obj[key] = _responsivePropType.default;
        return obj;
      }, {}) : {};
      padding2.filterProps = paddingKeys2;
      function spacing2(props) {
        return style4(props, spacingKeys2);
      }
      spacing2.propTypes = true ? spacingKeys2.reduce((obj, key) => {
        obj[key] = _responsivePropType.default;
        return obj;
      }, {}) : {};
      spacing2.filterProps = spacingKeys2;
      var _default = exports.default = spacing2;
    }
  });

  // node_modules/@mui/system/createTheme/createSpacing.js
  var require_createSpacing = __commonJS({
    "node_modules/@mui/system/createTheme/createSpacing.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createSpacing2;
      var _spacing = require_spacing();
      function createSpacing2(spacingInput = 8) {
        if (spacingInput.mui) {
          return spacingInput;
        }
        const transform = (0, _spacing.createUnarySpacing)({
          spacing: spacingInput
        });
        const spacing2 = (...argsInput) => {
          if (true) {
            if (!(argsInput.length <= 4)) {
              console.error(`MUI: Too many arguments provided, expected between 0 and 4, got ${argsInput.length}`);
            }
          }
          const args = argsInput.length === 0 ? [1] : argsInput;
          return args.map((argument) => {
            const output = transform(argument);
            return typeof output === "number" ? `${output}px` : output;
          }).join(" ");
        };
        spacing2.mui = true;
        return spacing2;
      }
    }
  });

  // node_modules/@mui/system/compose.js
  var require_compose = __commonJS({
    "node_modules/@mui/system/compose.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _merge = _interopRequireDefault(require_merge());
      function compose2(...styles4) {
        const handlers = styles4.reduce((acc, style4) => {
          style4.filterProps.forEach((prop) => {
            acc[prop] = style4;
          });
          return acc;
        }, {});
        const fn2 = (props) => {
          return Object.keys(props).reduce((acc, prop) => {
            if (handlers[prop]) {
              return (0, _merge.default)(acc, handlers[prop](props));
            }
            return acc;
          }, {});
        };
        fn2.propTypes = true ? styles4.reduce((acc, style4) => Object.assign(acc, style4.propTypes), {}) : {};
        fn2.filterProps = styles4.reduce((acc, style4) => acc.concat(style4.filterProps), []);
        return fn2;
      }
      var _default = exports.default = compose2;
    }
  });

  // node_modules/@mui/system/borders.js
  var require_borders = __commonJS({
    "node_modules/@mui/system/borders.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.borderTopColor = exports.borderTop = exports.borderRightColor = exports.borderRight = exports.borderRadius = exports.borderLeftColor = exports.borderLeft = exports.borderColor = exports.borderBottomColor = exports.borderBottom = exports.border = void 0;
      exports.borderTransform = borderTransform2;
      exports.outlineColor = exports.outline = exports.default = void 0;
      var _responsivePropType = _interopRequireDefault(require_responsivePropType());
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      var _spacing = require_spacing();
      var _breakpoints = require_breakpoints();
      function borderTransform2(value) {
        if (typeof value !== "number") {
          return value;
        }
        return `${value}px solid`;
      }
      function createBorderStyle2(prop, transform) {
        return (0, _style.default)({
          prop,
          themeKey: "borders",
          transform
        });
      }
      var border2 = exports.border = createBorderStyle2("border", borderTransform2);
      var borderTop2 = exports.borderTop = createBorderStyle2("borderTop", borderTransform2);
      var borderRight2 = exports.borderRight = createBorderStyle2("borderRight", borderTransform2);
      var borderBottom2 = exports.borderBottom = createBorderStyle2("borderBottom", borderTransform2);
      var borderLeft2 = exports.borderLeft = createBorderStyle2("borderLeft", borderTransform2);
      var borderColor2 = exports.borderColor = createBorderStyle2("borderColor");
      var borderTopColor2 = exports.borderTopColor = createBorderStyle2("borderTopColor");
      var borderRightColor2 = exports.borderRightColor = createBorderStyle2("borderRightColor");
      var borderBottomColor2 = exports.borderBottomColor = createBorderStyle2("borderBottomColor");
      var borderLeftColor2 = exports.borderLeftColor = createBorderStyle2("borderLeftColor");
      var outline2 = exports.outline = createBorderStyle2("outline", borderTransform2);
      var outlineColor2 = exports.outlineColor = createBorderStyle2("outlineColor");
      var borderRadius2 = (props) => {
        if (props.borderRadius !== void 0 && props.borderRadius !== null) {
          const transformer = (0, _spacing.createUnaryUnit)(props.theme, "shape.borderRadius", 4, "borderRadius");
          const styleFromPropValue = (propValue) => ({
            borderRadius: (0, _spacing.getValue)(transformer, propValue)
          });
          return (0, _breakpoints.handleBreakpoints)(props, props.borderRadius, styleFromPropValue);
        }
        return null;
      };
      exports.borderRadius = borderRadius2;
      borderRadius2.propTypes = true ? {
        borderRadius: _responsivePropType.default
      } : {};
      borderRadius2.filterProps = ["borderRadius"];
      var borders2 = (0, _compose.default)(border2, borderTop2, borderRight2, borderBottom2, borderLeft2, borderColor2, borderTopColor2, borderRightColor2, borderBottomColor2, borderLeftColor2, borderRadius2, outline2, outlineColor2);
      var _default = exports.default = borders2;
    }
  });

  // node_modules/@mui/system/cssGrid.js
  var require_cssGrid = __commonJS({
    "node_modules/@mui/system/cssGrid.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.rowGap = exports.gridTemplateRows = exports.gridTemplateColumns = exports.gridTemplateAreas = exports.gridRow = exports.gridColumn = exports.gridAutoRows = exports.gridAutoFlow = exports.gridAutoColumns = exports.gridArea = exports.gap = exports.default = exports.columnGap = void 0;
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      var _spacing = require_spacing();
      var _breakpoints = require_breakpoints();
      var _responsivePropType = _interopRequireDefault(require_responsivePropType());
      var gap2 = (props) => {
        if (props.gap !== void 0 && props.gap !== null) {
          const transformer = (0, _spacing.createUnaryUnit)(props.theme, "spacing", 8, "gap");
          const styleFromPropValue = (propValue) => ({
            gap: (0, _spacing.getValue)(transformer, propValue)
          });
          return (0, _breakpoints.handleBreakpoints)(props, props.gap, styleFromPropValue);
        }
        return null;
      };
      exports.gap = gap2;
      gap2.propTypes = true ? {
        gap: _responsivePropType.default
      } : {};
      gap2.filterProps = ["gap"];
      var columnGap2 = (props) => {
        if (props.columnGap !== void 0 && props.columnGap !== null) {
          const transformer = (0, _spacing.createUnaryUnit)(props.theme, "spacing", 8, "columnGap");
          const styleFromPropValue = (propValue) => ({
            columnGap: (0, _spacing.getValue)(transformer, propValue)
          });
          return (0, _breakpoints.handleBreakpoints)(props, props.columnGap, styleFromPropValue);
        }
        return null;
      };
      exports.columnGap = columnGap2;
      columnGap2.propTypes = true ? {
        columnGap: _responsivePropType.default
      } : {};
      columnGap2.filterProps = ["columnGap"];
      var rowGap2 = (props) => {
        if (props.rowGap !== void 0 && props.rowGap !== null) {
          const transformer = (0, _spacing.createUnaryUnit)(props.theme, "spacing", 8, "rowGap");
          const styleFromPropValue = (propValue) => ({
            rowGap: (0, _spacing.getValue)(transformer, propValue)
          });
          return (0, _breakpoints.handleBreakpoints)(props, props.rowGap, styleFromPropValue);
        }
        return null;
      };
      exports.rowGap = rowGap2;
      rowGap2.propTypes = true ? {
        rowGap: _responsivePropType.default
      } : {};
      rowGap2.filterProps = ["rowGap"];
      var gridColumn2 = exports.gridColumn = (0, _style.default)({
        prop: "gridColumn"
      });
      var gridRow2 = exports.gridRow = (0, _style.default)({
        prop: "gridRow"
      });
      var gridAutoFlow2 = exports.gridAutoFlow = (0, _style.default)({
        prop: "gridAutoFlow"
      });
      var gridAutoColumns2 = exports.gridAutoColumns = (0, _style.default)({
        prop: "gridAutoColumns"
      });
      var gridAutoRows2 = exports.gridAutoRows = (0, _style.default)({
        prop: "gridAutoRows"
      });
      var gridTemplateColumns2 = exports.gridTemplateColumns = (0, _style.default)({
        prop: "gridTemplateColumns"
      });
      var gridTemplateRows2 = exports.gridTemplateRows = (0, _style.default)({
        prop: "gridTemplateRows"
      });
      var gridTemplateAreas2 = exports.gridTemplateAreas = (0, _style.default)({
        prop: "gridTemplateAreas"
      });
      var gridArea2 = exports.gridArea = (0, _style.default)({
        prop: "gridArea"
      });
      var grid2 = (0, _compose.default)(gap2, columnGap2, rowGap2, gridColumn2, gridRow2, gridAutoFlow2, gridAutoColumns2, gridAutoRows2, gridTemplateColumns2, gridTemplateRows2, gridTemplateAreas2, gridArea2);
      var _default = exports.default = grid2;
    }
  });

  // node_modules/@mui/system/palette.js
  var require_palette = __commonJS({
    "node_modules/@mui/system/palette.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exports.color = exports.bgcolor = exports.backgroundColor = void 0;
      exports.paletteTransform = paletteTransform2;
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      function paletteTransform2(value, userValue) {
        if (userValue === "grey") {
          return userValue;
        }
        return value;
      }
      var color2 = exports.color = (0, _style.default)({
        prop: "color",
        themeKey: "palette",
        transform: paletteTransform2
      });
      var bgcolor2 = exports.bgcolor = (0, _style.default)({
        prop: "bgcolor",
        cssProperty: "backgroundColor",
        themeKey: "palette",
        transform: paletteTransform2
      });
      var backgroundColor2 = exports.backgroundColor = (0, _style.default)({
        prop: "backgroundColor",
        themeKey: "palette",
        transform: paletteTransform2
      });
      var palette2 = (0, _compose.default)(color2, bgcolor2, backgroundColor2);
      var _default = exports.default = palette2;
    }
  });

  // node_modules/@mui/system/sizing.js
  var require_sizing = __commonJS({
    "node_modules/@mui/system/sizing.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.sizeWidth = exports.sizeHeight = exports.minWidth = exports.minHeight = exports.maxWidth = exports.maxHeight = exports.height = exports.default = exports.boxSizing = void 0;
      exports.sizingTransform = sizingTransform2;
      exports.width = void 0;
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      var _breakpoints = require_breakpoints();
      function sizingTransform2(value) {
        return value <= 1 && value !== 0 ? `${value * 100}%` : value;
      }
      var width2 = exports.width = (0, _style.default)({
        prop: "width",
        transform: sizingTransform2
      });
      var maxWidth2 = (props) => {
        if (props.maxWidth !== void 0 && props.maxWidth !== null) {
          const styleFromPropValue = (propValue) => {
            var _props$theme, _props$theme2;
            const breakpoint = ((_props$theme = props.theme) == null || (_props$theme = _props$theme.breakpoints) == null || (_props$theme = _props$theme.values) == null ? void 0 : _props$theme[propValue]) || _breakpoints.values[propValue];
            if (!breakpoint) {
              return {
                maxWidth: sizingTransform2(propValue)
              };
            }
            if (((_props$theme2 = props.theme) == null || (_props$theme2 = _props$theme2.breakpoints) == null ? void 0 : _props$theme2.unit) !== "px") {
              return {
                maxWidth: `${breakpoint}${props.theme.breakpoints.unit}`
              };
            }
            return {
              maxWidth: breakpoint
            };
          };
          return (0, _breakpoints.handleBreakpoints)(props, props.maxWidth, styleFromPropValue);
        }
        return null;
      };
      exports.maxWidth = maxWidth2;
      maxWidth2.filterProps = ["maxWidth"];
      var minWidth2 = exports.minWidth = (0, _style.default)({
        prop: "minWidth",
        transform: sizingTransform2
      });
      var height2 = exports.height = (0, _style.default)({
        prop: "height",
        transform: sizingTransform2
      });
      var maxHeight2 = exports.maxHeight = (0, _style.default)({
        prop: "maxHeight",
        transform: sizingTransform2
      });
      var minHeight2 = exports.minHeight = (0, _style.default)({
        prop: "minHeight",
        transform: sizingTransform2
      });
      var sizeWidth2 = exports.sizeWidth = (0, _style.default)({
        prop: "size",
        cssProperty: "width",
        transform: sizingTransform2
      });
      var sizeHeight2 = exports.sizeHeight = (0, _style.default)({
        prop: "size",
        cssProperty: "height",
        transform: sizingTransform2
      });
      var boxSizing2 = exports.boxSizing = (0, _style.default)({
        prop: "boxSizing"
      });
      var sizing2 = (0, _compose.default)(width2, maxWidth2, minWidth2, height2, maxHeight2, minHeight2, boxSizing2);
      var _default = exports.default = sizing2;
    }
  });

  // node_modules/@mui/system/styleFunctionSx/defaultSxConfig.js
  var require_defaultSxConfig = __commonJS({
    "node_modules/@mui/system/styleFunctionSx/defaultSxConfig.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _spacing = require_spacing();
      var _borders = require_borders();
      var _cssGrid = require_cssGrid();
      var _palette = require_palette();
      var _sizing = require_sizing();
      var defaultSxConfig3 = {
        // borders
        border: {
          themeKey: "borders",
          transform: _borders.borderTransform
        },
        borderTop: {
          themeKey: "borders",
          transform: _borders.borderTransform
        },
        borderRight: {
          themeKey: "borders",
          transform: _borders.borderTransform
        },
        borderBottom: {
          themeKey: "borders",
          transform: _borders.borderTransform
        },
        borderLeft: {
          themeKey: "borders",
          transform: _borders.borderTransform
        },
        borderColor: {
          themeKey: "palette"
        },
        borderTopColor: {
          themeKey: "palette"
        },
        borderRightColor: {
          themeKey: "palette"
        },
        borderBottomColor: {
          themeKey: "palette"
        },
        borderLeftColor: {
          themeKey: "palette"
        },
        outline: {
          themeKey: "borders",
          transform: _borders.borderTransform
        },
        outlineColor: {
          themeKey: "palette"
        },
        borderRadius: {
          themeKey: "shape.borderRadius",
          style: _borders.borderRadius
        },
        // palette
        color: {
          themeKey: "palette",
          transform: _palette.paletteTransform
        },
        bgcolor: {
          themeKey: "palette",
          cssProperty: "backgroundColor",
          transform: _palette.paletteTransform
        },
        backgroundColor: {
          themeKey: "palette",
          transform: _palette.paletteTransform
        },
        // spacing
        p: {
          style: _spacing.padding
        },
        pt: {
          style: _spacing.padding
        },
        pr: {
          style: _spacing.padding
        },
        pb: {
          style: _spacing.padding
        },
        pl: {
          style: _spacing.padding
        },
        px: {
          style: _spacing.padding
        },
        py: {
          style: _spacing.padding
        },
        padding: {
          style: _spacing.padding
        },
        paddingTop: {
          style: _spacing.padding
        },
        paddingRight: {
          style: _spacing.padding
        },
        paddingBottom: {
          style: _spacing.padding
        },
        paddingLeft: {
          style: _spacing.padding
        },
        paddingX: {
          style: _spacing.padding
        },
        paddingY: {
          style: _spacing.padding
        },
        paddingInline: {
          style: _spacing.padding
        },
        paddingInlineStart: {
          style: _spacing.padding
        },
        paddingInlineEnd: {
          style: _spacing.padding
        },
        paddingBlock: {
          style: _spacing.padding
        },
        paddingBlockStart: {
          style: _spacing.padding
        },
        paddingBlockEnd: {
          style: _spacing.padding
        },
        m: {
          style: _spacing.margin
        },
        mt: {
          style: _spacing.margin
        },
        mr: {
          style: _spacing.margin
        },
        mb: {
          style: _spacing.margin
        },
        ml: {
          style: _spacing.margin
        },
        mx: {
          style: _spacing.margin
        },
        my: {
          style: _spacing.margin
        },
        margin: {
          style: _spacing.margin
        },
        marginTop: {
          style: _spacing.margin
        },
        marginRight: {
          style: _spacing.margin
        },
        marginBottom: {
          style: _spacing.margin
        },
        marginLeft: {
          style: _spacing.margin
        },
        marginX: {
          style: _spacing.margin
        },
        marginY: {
          style: _spacing.margin
        },
        marginInline: {
          style: _spacing.margin
        },
        marginInlineStart: {
          style: _spacing.margin
        },
        marginInlineEnd: {
          style: _spacing.margin
        },
        marginBlock: {
          style: _spacing.margin
        },
        marginBlockStart: {
          style: _spacing.margin
        },
        marginBlockEnd: {
          style: _spacing.margin
        },
        // display
        displayPrint: {
          cssProperty: false,
          transform: (value) => ({
            "@media print": {
              display: value
            }
          })
        },
        display: {},
        overflow: {},
        textOverflow: {},
        visibility: {},
        whiteSpace: {},
        // flexbox
        flexBasis: {},
        flexDirection: {},
        flexWrap: {},
        justifyContent: {},
        alignItems: {},
        alignContent: {},
        order: {},
        flex: {},
        flexGrow: {},
        flexShrink: {},
        alignSelf: {},
        justifyItems: {},
        justifySelf: {},
        // grid
        gap: {
          style: _cssGrid.gap
        },
        rowGap: {
          style: _cssGrid.rowGap
        },
        columnGap: {
          style: _cssGrid.columnGap
        },
        gridColumn: {},
        gridRow: {},
        gridAutoFlow: {},
        gridAutoColumns: {},
        gridAutoRows: {},
        gridTemplateColumns: {},
        gridTemplateRows: {},
        gridTemplateAreas: {},
        gridArea: {},
        // positions
        position: {},
        zIndex: {
          themeKey: "zIndex"
        },
        top: {},
        right: {},
        bottom: {},
        left: {},
        // shadows
        boxShadow: {
          themeKey: "shadows"
        },
        // sizing
        width: {
          transform: _sizing.sizingTransform
        },
        maxWidth: {
          style: _sizing.maxWidth
        },
        minWidth: {
          transform: _sizing.sizingTransform
        },
        height: {
          transform: _sizing.sizingTransform
        },
        maxHeight: {
          transform: _sizing.sizingTransform
        },
        minHeight: {
          transform: _sizing.sizingTransform
        },
        boxSizing: {},
        // typography
        fontFamily: {
          themeKey: "typography"
        },
        fontSize: {
          themeKey: "typography"
        },
        fontStyle: {
          themeKey: "typography"
        },
        fontWeight: {
          themeKey: "typography"
        },
        letterSpacing: {},
        textTransform: {},
        lineHeight: {},
        textAlign: {},
        typography: {
          cssProperty: false,
          themeKey: "typography"
        }
      };
      var _default = exports.default = defaultSxConfig3;
    }
  });

  // node_modules/@mui/system/styleFunctionSx/styleFunctionSx.js
  var require_styleFunctionSx = __commonJS({
    "node_modules/@mui/system/styleFunctionSx/styleFunctionSx.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.unstable_createStyleFunctionSx = unstable_createStyleFunctionSx2;
      var _capitalize = _interopRequireDefault(require_capitalize2());
      var _merge = _interopRequireDefault(require_merge());
      var _style = require_style();
      var _breakpoints = require_breakpoints();
      var _defaultSxConfig = _interopRequireDefault(require_defaultSxConfig());
      function objectsHaveSameKeys2(...objects) {
        const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);
        const union = new Set(allKeys);
        return objects.every((object) => union.size === Object.keys(object).length);
      }
      function callIfFn2(maybeFn, arg) {
        return typeof maybeFn === "function" ? maybeFn(arg) : maybeFn;
      }
      function unstable_createStyleFunctionSx2() {
        function getThemeValue(prop, val, theme, config) {
          const props = {
            [prop]: val,
            theme
          };
          const options = config[prop];
          if (!options) {
            return {
              [prop]: val
            };
          }
          const {
            cssProperty = prop,
            themeKey,
            transform,
            style: style4
          } = options;
          if (val == null) {
            return null;
          }
          if (themeKey === "typography" && val === "inherit") {
            return {
              [prop]: val
            };
          }
          const themeMapping = (0, _style.getPath)(theme, themeKey) || {};
          if (style4) {
            return style4(props);
          }
          const styleFromPropValue = (propValueFinal) => {
            let value = (0, _style.getStyleValue)(themeMapping, transform, propValueFinal);
            if (propValueFinal === value && typeof propValueFinal === "string") {
              value = (0, _style.getStyleValue)(themeMapping, transform, `${prop}${propValueFinal === "default" ? "" : (0, _capitalize.default)(propValueFinal)}`, propValueFinal);
            }
            if (cssProperty === false) {
              return value;
            }
            return {
              [cssProperty]: value
            };
          };
          return (0, _breakpoints.handleBreakpoints)(props, val, styleFromPropValue);
        }
        function styleFunctionSx4(props) {
          var _theme$unstable_sxCon;
          const {
            sx,
            theme = {},
            nested
          } = props || {};
          if (!sx) {
            return null;
          }
          const config = (_theme$unstable_sxCon = theme.unstable_sxConfig) != null ? _theme$unstable_sxCon : _defaultSxConfig.default;
          function traverse(sxInput) {
            let sxObject = sxInput;
            if (typeof sxInput === "function") {
              sxObject = sxInput(theme);
            } else if (typeof sxInput !== "object") {
              return sxInput;
            }
            if (!sxObject) {
              return null;
            }
            const emptyBreakpoints = (0, _breakpoints.createEmptyBreakpointObject)(theme.breakpoints);
            const breakpointsKeys = Object.keys(emptyBreakpoints);
            let css3 = emptyBreakpoints;
            Object.keys(sxObject).forEach((styleKey) => {
              const value = callIfFn2(sxObject[styleKey], theme);
              if (value !== null && value !== void 0) {
                if (typeof value === "object") {
                  if (config[styleKey]) {
                    css3 = (0, _merge.default)(css3, getThemeValue(styleKey, value, theme, config));
                  } else {
                    const breakpointsValues = (0, _breakpoints.handleBreakpoints)({
                      theme
                    }, value, (x) => ({
                      [styleKey]: x
                    }));
                    if (objectsHaveSameKeys2(breakpointsValues, value)) {
                      css3[styleKey] = styleFunctionSx4({
                        sx: value,
                        theme,
                        nested: true
                      });
                    } else {
                      css3 = (0, _merge.default)(css3, breakpointsValues);
                    }
                  }
                } else {
                  css3 = (0, _merge.default)(css3, getThemeValue(styleKey, value, theme, config));
                }
              }
            });
            if (!nested && theme.modularCssLayers) {
              return {
                "@layer sx": (0, _breakpoints.removeUnusedBreakpoints)(breakpointsKeys, css3)
              };
            }
            return (0, _breakpoints.removeUnusedBreakpoints)(breakpointsKeys, css3);
          }
          return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);
        }
        return styleFunctionSx4;
      }
      var styleFunctionSx3 = unstable_createStyleFunctionSx2();
      styleFunctionSx3.filterProps = ["sx"];
      var _default = exports.default = styleFunctionSx3;
    }
  });

  // node_modules/@mui/system/createTheme/applyStyles.js
  var require_applyStyles = __commonJS({
    "node_modules/@mui/system/createTheme/applyStyles.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = applyStyles3;
      function applyStyles3(key, styles4) {
        const theme = this;
        if (theme.vars && typeof theme.getColorSchemeSelector === "function") {
          const selector = theme.getColorSchemeSelector(key).replace(/(\[[^\]]+\])/, "*:where($1)");
          return {
            [selector]: styles4
          };
        }
        if (theme.palette.mode === key) {
          return styles4;
        }
        return {};
      }
    }
  });

  // node_modules/@mui/system/createTheme/createTheme.js
  var require_createTheme = __commonJS({
    "node_modules/@mui/system/createTheme/createTheme.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _deepmerge = _interopRequireDefault(require_deepmerge2());
      var _createBreakpoints = _interopRequireDefault(require_createBreakpoints());
      var _shape = _interopRequireDefault(require_shape());
      var _createSpacing = _interopRequireDefault(require_createSpacing());
      var _styleFunctionSx = _interopRequireDefault(require_styleFunctionSx());
      var _defaultSxConfig = _interopRequireDefault(require_defaultSxConfig());
      var _applyStyles = _interopRequireDefault(require_applyStyles());
      var _excluded130 = ["breakpoints", "palette", "spacing", "shape"];
      function createTheme3(options = {}, ...args) {
        const {
          breakpoints: breakpointsInput = {},
          palette: paletteInput = {},
          spacing: spacingInput,
          shape: shapeInput = {}
        } = options, other = (0, _objectWithoutPropertiesLoose2.default)(options, _excluded130);
        const breakpoints = (0, _createBreakpoints.default)(breakpointsInput);
        const spacing2 = (0, _createSpacing.default)(spacingInput);
        let muiTheme = (0, _deepmerge.default)({
          breakpoints,
          direction: "ltr",
          components: {},
          // Inject component definitions.
          palette: (0, _extends2.default)({
            mode: "light"
          }, paletteInput),
          spacing: spacing2,
          shape: (0, _extends2.default)({}, _shape.default, shapeInput)
        }, other);
        muiTheme.applyStyles = _applyStyles.default;
        muiTheme = args.reduce((acc, argument) => (0, _deepmerge.default)(acc, argument), muiTheme);
        muiTheme.unstable_sxConfig = (0, _extends2.default)({}, _defaultSxConfig.default, other == null ? void 0 : other.unstable_sxConfig);
        muiTheme.unstable_sx = function sx(props) {
          return (0, _styleFunctionSx.default)({
            sx: props,
            theme: this
          });
        };
        return muiTheme;
      }
      var _default = exports.default = createTheme3;
    }
  });

  // node_modules/@mui/system/createTheme/index.js
  var require_createTheme2 = __commonJS({
    "node_modules/@mui/system/createTheme/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _createTheme.default;
        }
      });
      Object.defineProperty(exports, "private_createBreakpoints", {
        enumerable: true,
        get: function() {
          return _createBreakpoints.default;
        }
      });
      Object.defineProperty(exports, "unstable_applyStyles", {
        enumerable: true,
        get: function() {
          return _applyStyles.default;
        }
      });
      var _createTheme = _interopRequireDefault(require_createTheme());
      var _createBreakpoints = _interopRequireDefault(require_createBreakpoints());
      var _applyStyles = _interopRequireDefault(require_applyStyles());
    }
  });

  // node_modules/@mui/system/styleFunctionSx/extendSxProp.js
  var require_extendSxProp = __commonJS({
    "node_modules/@mui/system/styleFunctionSx/extendSxProp.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = extendSxProp3;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _deepmerge = require_deepmerge2();
      var _defaultSxConfig = _interopRequireDefault(require_defaultSxConfig());
      var _excluded130 = ["sx"];
      var splitProps2 = (props) => {
        var _props$theme$unstable, _props$theme;
        const result = {
          systemProps: {},
          otherProps: {}
        };
        const config = (_props$theme$unstable = props == null || (_props$theme = props.theme) == null ? void 0 : _props$theme.unstable_sxConfig) != null ? _props$theme$unstable : _defaultSxConfig.default;
        Object.keys(props).forEach((prop) => {
          if (config[prop]) {
            result.systemProps[prop] = props[prop];
          } else {
            result.otherProps[prop] = props[prop];
          }
        });
        return result;
      };
      function extendSxProp3(props) {
        const {
          sx: inSx
        } = props, other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded130);
        const {
          systemProps,
          otherProps
        } = splitProps2(other);
        let finalSx;
        if (Array.isArray(inSx)) {
          finalSx = [systemProps, ...inSx];
        } else if (typeof inSx === "function") {
          finalSx = (...args) => {
            const result = inSx(...args);
            if (!(0, _deepmerge.isPlainObject)(result)) {
              return systemProps;
            }
            return (0, _extends2.default)({}, systemProps, result);
          };
        } else {
          finalSx = (0, _extends2.default)({}, systemProps, inSx);
        }
        return (0, _extends2.default)({}, otherProps, {
          sx: finalSx
        });
      }
    }
  });

  // node_modules/@mui/system/styleFunctionSx/index.js
  var require_styleFunctionSx2 = __commonJS({
    "node_modules/@mui/system/styleFunctionSx/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _styleFunctionSx.default;
        }
      });
      Object.defineProperty(exports, "extendSxProp", {
        enumerable: true,
        get: function() {
          return _extendSxProp.default;
        }
      });
      Object.defineProperty(exports, "unstable_createStyleFunctionSx", {
        enumerable: true,
        get: function() {
          return _styleFunctionSx.unstable_createStyleFunctionSx;
        }
      });
      Object.defineProperty(exports, "unstable_defaultSxConfig", {
        enumerable: true,
        get: function() {
          return _defaultSxConfig.default;
        }
      });
      var _styleFunctionSx = _interopRequireWildcard(require_styleFunctionSx());
      var _extendSxProp = _interopRequireDefault(require_extendSxProp());
      var _defaultSxConfig = _interopRequireDefault(require_defaultSxConfig());
      function _getRequireWildcardCache(e) {
        if ("function" != typeof WeakMap) return null;
        var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e2) {
          return e2 ? t : r2;
        })(e);
      }
      function _interopRequireWildcard(e, r2) {
        if (!r2 && e && e.__esModule) return e;
        if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
        var t = _getRequireWildcardCache(r2);
        if (t && t.has(e)) return t.get(e);
        var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
          var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
          i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
        }
        return n.default = e, t && t.set(e, n), n;
      }
    }
  });

  // node_modules/@mui/system/createStyled.js
  var require_createStyled = __commonJS({
    "node_modules/@mui/system/createStyled.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createStyled5;
      exports.shouldForwardProp = shouldForwardProp2;
      exports.systemDefaultTheme = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _styledEngine = _interopRequireWildcard(require_node());
      var _deepmerge = require_deepmerge2();
      var _capitalize = _interopRequireDefault(require_capitalize2());
      var _getDisplayName = _interopRequireDefault(require_getDisplayName2());
      var _createTheme = _interopRequireDefault(require_createTheme2());
      var _styleFunctionSx = _interopRequireDefault(require_styleFunctionSx2());
      var _excluded130 = ["ownerState"];
      var _excluded220 = ["variants"];
      var _excluded313 = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"];
      function _getRequireWildcardCache(e) {
        if ("function" != typeof WeakMap) return null;
        var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e2) {
          return e2 ? t : r2;
        })(e);
      }
      function _interopRequireWildcard(e, r2) {
        if (!r2 && e && e.__esModule) return e;
        if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
        var t = _getRequireWildcardCache(r2);
        if (t && t.has(e)) return t.get(e);
        var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
          var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
          i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
        }
        return n.default = e, t && t.set(e, n), n;
      }
      function isEmpty4(obj) {
        return Object.keys(obj).length === 0;
      }
      function isStringTag2(tag) {
        return typeof tag === "string" && // 96 is one less than the char code
        // for "a" so this is checking that
        // it's a lowercase character
        tag.charCodeAt(0) > 96;
      }
      function shouldForwardProp2(prop) {
        return prop !== "ownerState" && prop !== "theme" && prop !== "sx" && prop !== "as";
      }
      function shallowLayer2(serialized, layerName) {
        if (layerName && serialized && typeof serialized === "object" && serialized.styles && !serialized.styles.startsWith("@layer")) {
          serialized.styles = `@layer ${layerName}{${String(serialized.styles)}}`;
        }
        return serialized;
      }
      var systemDefaultTheme3 = exports.systemDefaultTheme = (0, _createTheme.default)();
      var lowercaseFirstLetter2 = (string) => {
        if (!string) {
          return string;
        }
        return string.charAt(0).toLowerCase() + string.slice(1);
      };
      function resolveTheme2({
        defaultTheme: defaultTheme4,
        theme,
        themeId
      }) {
        return isEmpty4(theme) ? defaultTheme4 : theme[themeId] || theme;
      }
      function defaultOverridesResolver2(slot) {
        if (!slot) {
          return null;
        }
        return (props, styles4) => styles4[slot];
      }
      function processStyleArg2(callableStyle, _ref, layerName) {
        let {
          ownerState
        } = _ref, props = (0, _objectWithoutPropertiesLoose2.default)(_ref, _excluded130);
        const resolvedStylesArg = typeof callableStyle === "function" ? callableStyle((0, _extends2.default)({
          ownerState
        }, props)) : callableStyle;
        if (Array.isArray(resolvedStylesArg)) {
          return resolvedStylesArg.flatMap((resolvedStyle) => processStyleArg2(resolvedStyle, (0, _extends2.default)({
            ownerState
          }, props), layerName));
        }
        if (!!resolvedStylesArg && typeof resolvedStylesArg === "object" && Array.isArray(resolvedStylesArg.variants)) {
          const {
            variants = []
          } = resolvedStylesArg, otherStyles = (0, _objectWithoutPropertiesLoose2.default)(resolvedStylesArg, _excluded220);
          let result = otherStyles;
          variants.forEach((variant) => {
            let isMatch = true;
            if (typeof variant.props === "function") {
              isMatch = variant.props((0, _extends2.default)({
                ownerState
              }, props, ownerState));
            } else {
              Object.keys(variant.props).forEach((key) => {
                if ((ownerState == null ? void 0 : ownerState[key]) !== variant.props[key] && props[key] !== variant.props[key]) {
                  isMatch = false;
                }
              });
            }
            if (isMatch) {
              if (!Array.isArray(result)) {
                result = [result];
              }
              const variantStyle = typeof variant.style === "function" ? variant.style((0, _extends2.default)({
                ownerState
              }, props, ownerState)) : variant.style;
              result.push(layerName ? shallowLayer2((0, _styledEngine.internal_serializeStyles)(variantStyle), layerName) : variantStyle);
            }
          });
          return result;
        }
        return layerName ? shallowLayer2((0, _styledEngine.internal_serializeStyles)(resolvedStylesArg), layerName) : resolvedStylesArg;
      }
      function createStyled5(input = {}) {
        const {
          themeId,
          defaultTheme: defaultTheme4 = systemDefaultTheme3,
          rootShouldForwardProp: rootShouldForwardProp2 = shouldForwardProp2,
          slotShouldForwardProp: slotShouldForwardProp2 = shouldForwardProp2
        } = input;
        const systemSx = (props) => {
          return (0, _styleFunctionSx.default)((0, _extends2.default)({}, props, {
            theme: resolveTheme2((0, _extends2.default)({}, props, {
              defaultTheme: defaultTheme4,
              themeId
            }))
          }));
        };
        systemSx.__mui_systemSx = true;
        return (tag, inputOptions = {}) => {
          (0, _styledEngine.internal_processStyles)(tag, (styles4) => styles4.filter((style4) => !(style4 != null && style4.__mui_systemSx)));
          const {
            name: componentName,
            slot: componentSlot,
            skipVariantsResolver: inputSkipVariantsResolver,
            skipSx: inputSkipSx,
            // TODO v6: remove `lowercaseFirstLetter()` in the next major release
            // For more details: https://github.com/mui/material-ui/pull/37908
            overridesResolver: overridesResolver3 = defaultOverridesResolver2(lowercaseFirstLetter2(componentSlot))
          } = inputOptions, options = (0, _objectWithoutPropertiesLoose2.default)(inputOptions, _excluded313);
          const layerName = componentName && componentName.startsWith("Mui") || !!componentSlot ? "components" : "custom";
          const skipVariantsResolver = inputSkipVariantsResolver !== void 0 ? inputSkipVariantsResolver : (
            // TODO v6: remove `Root` in the next major release
            // For more details: https://github.com/mui/material-ui/pull/37908
            componentSlot && componentSlot !== "Root" && componentSlot !== "root" || false
          );
          const skipSx = inputSkipSx || false;
          let label;
          if (true) {
            if (componentName) {
              label = `${componentName}-${lowercaseFirstLetter2(componentSlot || "Root")}`;
            }
          }
          let shouldForwardPropOption = shouldForwardProp2;
          if (componentSlot === "Root" || componentSlot === "root") {
            shouldForwardPropOption = rootShouldForwardProp2;
          } else if (componentSlot) {
            shouldForwardPropOption = slotShouldForwardProp2;
          } else if (isStringTag2(tag)) {
            shouldForwardPropOption = void 0;
          }
          const defaultStyledResolver = (0, _styledEngine.default)(tag, (0, _extends2.default)({
            shouldForwardProp: shouldForwardPropOption,
            label
          }, options));
          const transformStyleArg = (stylesArg) => {
            if (typeof stylesArg === "function" && stylesArg.__emotion_real !== stylesArg || (0, _deepmerge.isPlainObject)(stylesArg)) {
              return (props) => {
                const theme = resolveTheme2({
                  theme: props.theme,
                  defaultTheme: defaultTheme4,
                  themeId
                });
                return processStyleArg2(stylesArg, (0, _extends2.default)({}, props, {
                  theme
                }), theme.modularCssLayers ? layerName : void 0);
              };
            }
            return stylesArg;
          };
          const muiStyledResolver = (styleArg, ...expressions) => {
            let transformedStyleArg = transformStyleArg(styleArg);
            const expressionsWithDefaultTheme = expressions ? expressions.map(transformStyleArg) : [];
            if (componentName && overridesResolver3) {
              expressionsWithDefaultTheme.push((props) => {
                const theme = resolveTheme2((0, _extends2.default)({}, props, {
                  defaultTheme: defaultTheme4,
                  themeId
                }));
                if (!theme.components || !theme.components[componentName] || !theme.components[componentName].styleOverrides) {
                  return null;
                }
                const styleOverrides = theme.components[componentName].styleOverrides;
                const resolvedStyleOverrides = {};
                Object.entries(styleOverrides).forEach(([slotKey, slotStyle]) => {
                  resolvedStyleOverrides[slotKey] = processStyleArg2(slotStyle, (0, _extends2.default)({}, props, {
                    theme
                  }), theme.modularCssLayers ? "theme" : void 0);
                });
                return overridesResolver3(props, resolvedStyleOverrides);
              });
            }
            if (componentName && !skipVariantsResolver) {
              expressionsWithDefaultTheme.push((props) => {
                var _theme$components;
                const theme = resolveTheme2((0, _extends2.default)({}, props, {
                  defaultTheme: defaultTheme4,
                  themeId
                }));
                const themeVariants = theme == null || (_theme$components = theme.components) == null || (_theme$components = _theme$components[componentName]) == null ? void 0 : _theme$components.variants;
                return processStyleArg2({
                  variants: themeVariants
                }, (0, _extends2.default)({}, props, {
                  theme
                }), theme.modularCssLayers ? "theme" : void 0);
              });
            }
            if (!skipSx) {
              expressionsWithDefaultTheme.push(systemSx);
            }
            const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;
            if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
              const placeholders = new Array(numOfCustomFnsApplied).fill("");
              transformedStyleArg = [...styleArg, ...placeholders];
              transformedStyleArg.raw = [...styleArg.raw, ...placeholders];
            }
            const Component = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);
            if (true) {
              let displayName;
              if (componentName) {
                displayName = `${componentName}${(0, _capitalize.default)(componentSlot || "")}`;
              }
              if (displayName === void 0) {
                displayName = `Styled(${(0, _getDisplayName.default)(tag)})`;
              }
              Component.displayName = displayName;
            }
            if (tag.muiName) {
              Component.muiName = tag.muiName;
            }
            return Component;
          };
          if (defaultStyledResolver.withConfig) {
            muiStyledResolver.withConfig = defaultStyledResolver.withConfig;
          }
          return muiStyledResolver;
        };
      }
    }
  });

  // node_modules/@mui/system/colorManipulator.js
  var require_colorManipulator = __commonJS({
    "node_modules/@mui/system/colorManipulator.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.alpha = alpha13;
      exports.blend = blend;
      exports.colorChannel = void 0;
      exports.darken = darken5;
      exports.decomposeColor = decomposeColor2;
      exports.emphasize = emphasize2;
      exports.getContrastRatio = getContrastRatio3;
      exports.getLuminance = getLuminance2;
      exports.hexToRgb = hexToRgb2;
      exports.hslToRgb = hslToRgb2;
      exports.lighten = lighten5;
      exports.private_safeAlpha = private_safeAlpha;
      exports.private_safeColorChannel = void 0;
      exports.private_safeDarken = private_safeDarken;
      exports.private_safeEmphasize = private_safeEmphasize;
      exports.private_safeLighten = private_safeLighten;
      exports.recomposeColor = recomposeColor2;
      exports.rgbToHex = rgbToHex2;
      var _formatMuiErrorMessage2 = _interopRequireDefault(require_formatMuiErrorMessage2());
      var _clamp = _interopRequireDefault(require_clamp2());
      function clampWrapper2(value, min2 = 0, max2 = 1) {
        if (true) {
          if (value < min2 || value > max2) {
            console.error(`MUI: The value provided ${value} is out of range [${min2}, ${max2}].`);
          }
        }
        return (0, _clamp.default)(value, min2, max2);
      }
      function hexToRgb2(color2) {
        color2 = color2.slice(1);
        const re = new RegExp(`.{1,${color2.length >= 6 ? 2 : 1}}`, "g");
        let colors = color2.match(re);
        if (colors && colors[0].length === 1) {
          colors = colors.map((n) => n + n);
        }
        return colors ? `rgb${colors.length === 4 ? "a" : ""}(${colors.map((n, index) => {
          return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1e3) / 1e3;
        }).join(", ")})` : "";
      }
      function intToHex(int) {
        const hex = int.toString(16);
        return hex.length === 1 ? `0${hex}` : hex;
      }
      function decomposeColor2(color2) {
        if (color2.type) {
          return color2;
        }
        if (color2.charAt(0) === "#") {
          return decomposeColor2(hexToRgb2(color2));
        }
        const marker = color2.indexOf("(");
        const type = color2.substring(0, marker);
        if (["rgb", "rgba", "hsl", "hsla", "color"].indexOf(type) === -1) {
          throw new Error(true ? `MUI: Unsupported \`${color2}\` color.
The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : (0, _formatMuiErrorMessage2.default)(9, color2));
        }
        let values3 = color2.substring(marker + 1, color2.length - 1);
        let colorSpace;
        if (type === "color") {
          values3 = values3.split(" ");
          colorSpace = values3.shift();
          if (values3.length === 4 && values3[3].charAt(0) === "/") {
            values3[3] = values3[3].slice(1);
          }
          if (["srgb", "display-p3", "a98-rgb", "prophoto-rgb", "rec-2020"].indexOf(colorSpace) === -1) {
            throw new Error(true ? `MUI: unsupported \`${colorSpace}\` color space.
The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : (0, _formatMuiErrorMessage2.default)(10, colorSpace));
          }
        } else {
          values3 = values3.split(",");
        }
        values3 = values3.map((value) => parseFloat(value));
        return {
          type,
          values: values3,
          colorSpace
        };
      }
      var colorChannel = (color2) => {
        const decomposedColor = decomposeColor2(color2);
        return decomposedColor.values.slice(0, 3).map((val, idx) => decomposedColor.type.indexOf("hsl") !== -1 && idx !== 0 ? `${val}%` : val).join(" ");
      };
      exports.colorChannel = colorChannel;
      var private_safeColorChannel = (color2, warning) => {
        try {
          return colorChannel(color2);
        } catch (error) {
          if (warning && true) {
            console.warn(warning);
          }
          return color2;
        }
      };
      exports.private_safeColorChannel = private_safeColorChannel;
      function recomposeColor2(color2) {
        const {
          type,
          colorSpace
        } = color2;
        let {
          values: values3
        } = color2;
        if (type.indexOf("rgb") !== -1) {
          values3 = values3.map((n, i) => i < 3 ? parseInt(n, 10) : n);
        } else if (type.indexOf("hsl") !== -1) {
          values3[1] = `${values3[1]}%`;
          values3[2] = `${values3[2]}%`;
        }
        if (type.indexOf("color") !== -1) {
          values3 = `${colorSpace} ${values3.join(" ")}`;
        } else {
          values3 = `${values3.join(", ")}`;
        }
        return `${type}(${values3})`;
      }
      function rgbToHex2(color2) {
        if (color2.indexOf("#") === 0) {
          return color2;
        }
        const {
          values: values3
        } = decomposeColor2(color2);
        return `#${values3.map((n, i) => intToHex(i === 3 ? Math.round(255 * n) : n)).join("")}`;
      }
      function hslToRgb2(color2) {
        color2 = decomposeColor2(color2);
        const {
          values: values3
        } = color2;
        const h = values3[0];
        const s = values3[1] / 100;
        const l = values3[2] / 100;
        const a = s * Math.min(l, 1 - l);
        const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
        let type = "rgb";
        const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];
        if (color2.type === "hsla") {
          type += "a";
          rgb.push(values3[3]);
        }
        return recomposeColor2({
          type,
          values: rgb
        });
      }
      function getLuminance2(color2) {
        color2 = decomposeColor2(color2);
        let rgb = color2.type === "hsl" || color2.type === "hsla" ? decomposeColor2(hslToRgb2(color2)).values : color2.values;
        rgb = rgb.map((val) => {
          if (color2.type !== "color") {
            val /= 255;
          }
          return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;
        });
        return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
      }
      function getContrastRatio3(foreground, background) {
        const lumA = getLuminance2(foreground);
        const lumB = getLuminance2(background);
        return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
      }
      function alpha13(color2, value) {
        color2 = decomposeColor2(color2);
        value = clampWrapper2(value);
        if (color2.type === "rgb" || color2.type === "hsl") {
          color2.type += "a";
        }
        if (color2.type === "color") {
          color2.values[3] = `/${value}`;
        } else {
          color2.values[3] = value;
        }
        return recomposeColor2(color2);
      }
      function private_safeAlpha(color2, value, warning) {
        try {
          return alpha13(color2, value);
        } catch (error) {
          if (warning && true) {
            console.warn(warning);
          }
          return color2;
        }
      }
      function darken5(color2, coefficient) {
        color2 = decomposeColor2(color2);
        coefficient = clampWrapper2(coefficient);
        if (color2.type.indexOf("hsl") !== -1) {
          color2.values[2] *= 1 - coefficient;
        } else if (color2.type.indexOf("rgb") !== -1 || color2.type.indexOf("color") !== -1) {
          for (let i = 0; i < 3; i += 1) {
            color2.values[i] *= 1 - coefficient;
          }
        }
        return recomposeColor2(color2);
      }
      function private_safeDarken(color2, coefficient, warning) {
        try {
          return darken5(color2, coefficient);
        } catch (error) {
          if (warning && true) {
            console.warn(warning);
          }
          return color2;
        }
      }
      function lighten5(color2, coefficient) {
        color2 = decomposeColor2(color2);
        coefficient = clampWrapper2(coefficient);
        if (color2.type.indexOf("hsl") !== -1) {
          color2.values[2] += (100 - color2.values[2]) * coefficient;
        } else if (color2.type.indexOf("rgb") !== -1) {
          for (let i = 0; i < 3; i += 1) {
            color2.values[i] += (255 - color2.values[i]) * coefficient;
          }
        } else if (color2.type.indexOf("color") !== -1) {
          for (let i = 0; i < 3; i += 1) {
            color2.values[i] += (1 - color2.values[i]) * coefficient;
          }
        }
        return recomposeColor2(color2);
      }
      function private_safeLighten(color2, coefficient, warning) {
        try {
          return lighten5(color2, coefficient);
        } catch (error) {
          if (warning && true) {
            console.warn(warning);
          }
          return color2;
        }
      }
      function emphasize2(color2, coefficient = 0.15) {
        return getLuminance2(color2) > 0.5 ? darken5(color2, coefficient) : lighten5(color2, coefficient);
      }
      function private_safeEmphasize(color2, coefficient, warning) {
        try {
          return emphasize2(color2, coefficient);
        } catch (error) {
          if (warning && true) {
            console.warn(warning);
          }
          return color2;
        }
      }
      function blend(background, overlay, opacity, gamma = 1) {
        const blendChannel = (b, o) => Math.round((b ** (1 / gamma) * (1 - opacity) + o ** (1 / gamma) * opacity) ** gamma);
        const backgroundColor2 = decomposeColor2(background);
        const overlayColor = decomposeColor2(overlay);
        const rgb = [blendChannel(backgroundColor2.values[0], overlayColor.values[0]), blendChannel(backgroundColor2.values[1], overlayColor.values[1]), blendChannel(backgroundColor2.values[2], overlayColor.values[2])];
        return recomposeColor2({
          type: "rgb",
          values: rgb
        });
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push(heap, node2) {
            var index = heap.length;
            heap.push(node2);
            siftUp(heap, node2, index);
          }
          function peek2(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first = heap[0];
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          }
          function siftUp(heap, node2, i) {
            var index = i;
            while (index > 0) {
              var parentIndex = index - 1 >>> 1;
              var parent = heap[parentIndex];
              if (compare(parent, node2) > 0) {
                heap[parentIndex] = node2;
                heap[index] = parent;
                index = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node2, i) {
            var index = i;
            var length2 = heap.length;
            var halfLength = length2 >>> 1;
            while (index < halfLength) {
              var leftIndex = (index + 1) * 2 - 1;
              var left2 = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right2 = heap[rightIndex];
              if (compare(left2, node2) < 0) {
                if (rightIndex < length2 && compare(right2, left2) < 0) {
                  heap[index] = right2;
                  heap[rightIndex] = node2;
                  index = rightIndex;
                } else {
                  heap[index] = left2;
                  heap[leftIndex] = node2;
                  index = leftIndex;
                }
              } else if (rightIndex < length2 && compare(right2, node2) < 0) {
                heap[index] = right2;
                heap[rightIndex] = node2;
                index = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a, b) {
            var diff = a.sortIndex - b.sortIndex;
            return diff !== 0 ? diff : a.id - b.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime) {
            var timer = peek2(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek2(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek2(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek2(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek2(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek2(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek2(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek2(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime2;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime2 = currentTime + delay;
              } else {
                startTime2 = currentTime;
              }
            } else {
              startTime2 = currentTime;
            }
            var timeout2;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout2 = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout2 = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout2 = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout2 = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout2 = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout2;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime) {
              newTask.sortIndex = startTime2;
              push(timerQueue, newTask);
              if (peek2(taskQueue) === null && newTask === peek2(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek2(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now();
              startTime = currentTime;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports.unstable_now());
            }, ms);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_forceFrameRate = forceFrameRate;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_shouldYield = shouldYieldToHost;
          exports.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React242 = require_react();
          var Scheduler = require_scheduler();
          var ReactSharedInternals = React242.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn(format) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment22 = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = true;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i = 0; i < dependencies.length; i++) {
              allNativeEvents.add(dependencies[i]);
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkPropStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              // $FlowIssue symbol is perfectly valid here
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix3 = name.toLowerCase().slice(0, 5);
                  return prefix3 !== "data-" && prefix3 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties2.hasOwnProperty(name) ? properties2[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties2 = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            // TODO: This prevents the assignment of defaultValue to regular
            // elements (not just inputs). Now that ReactDOMInput assigns to the
            // defaultValue property -- do we need this?
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(
              name,
              RESERVED,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties2[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            // Note: there is a special case that prevents it from being written to the DOM
            // on the client side because the browsers are inconsistent. Instead we call focus().
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            // Microdata
            "itemScope"
          ].forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "checked",
            // Note: `option.selected` is not updated if `select.multiple` is
            // disabled with `removeAttribute`. We have special logic for handling this.
            "multiple",
            "muted",
            "selected"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              true,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "capture",
            "download"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(
              name,
              OVERLOADED_BOOLEAN,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(
              name,
              POSITIVE_NUMERIC,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(
              name,
              NUMERIC,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize6 = function(token2) {
            return token2[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize6);
            properties2[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize6);
            properties2[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize6);
            properties2[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              // sanitizeURL
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties2[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties2[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            // mustUseProperty
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            // sanitizeURL
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties2[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              true,
              // sanitizeURL
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node2, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node2[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node2.hasAttribute(attributeName)) {
                    var value = node2.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node2.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node2.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node2.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node2, name, expected, isCustomComponentTag) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (!node2.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node2.getAttribute(name);
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node2, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node2.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value, name);
                  }
                  node2.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node2[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node2[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node2.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node2.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node2.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign2 = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign2({}, props, {
                    value: prevLog
                  }),
                  info: assign2({}, props, {
                    value: prevInfo
                  }),
                  warn: assign2({}, props, {
                    value: prevWarn
                  }),
                  error: assign2({}, props, {
                    value: prevError
                  }),
                  group: assign2({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign2({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign2({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match2 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn2, construct) {
            if (!fn2 || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn2);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn2, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn2.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn2();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn2.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn2.displayName);
                          }
                          {
                            if (typeof fn2 === "function") {
                              componentFrameCache.set(fn2, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn2 ? fn2.displayName || fn2.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn2 === "function") {
                componentFrameCache.set(fn2, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn2, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn2, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node2 = workInProgress2;
              do {
                info += describeFiber(node2);
                node2 = node2.return;
              } while (node2);
              return info;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName$1(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag, type = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context = type;
                return getContextName$1(context) + ".Consumer";
              case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef:
                return getWrappedName$1(type, type.render, "ForwardRef");
              case Fragment22:
                return "Fragment";
              case HostComponent:
                return type;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type);
              case Mode:
                if (type === REACT_STRICT_MODE_TYPE) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              // The display name for this tags come from the user-provided type:
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type === "function") {
                  return type.displayName || type.name || null;
                }
                if (typeof type === "string") {
                  return type;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function getCurrentFiber() {
            {
              return current;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value);
                }
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node2) {
            return node2._valueTracker;
          }
          function detachTracker(node2) {
            node2._valueTracker = null;
          }
          function getValueFromNode(node2) {
            var value = "";
            if (!node2) {
              return value;
            }
            if (isCheckable(node2)) {
              value = node2.checked ? "true" : "false";
            } else {
              value = node2.value;
            }
            return value;
          }
          function trackValueOnNode(node2) {
            var valueField = isCheckable(node2) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node2.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node2[valueField]);
            }
            var currentValue = "" + node2[valueField];
            if (node2.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get2 = descriptor.get, set2 = descriptor.set;
            Object.defineProperty(node2, valueField, {
              configurable: true,
              get: function() {
                return get2.call(this);
              },
              set: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
                set2.call(this, value);
              }
            });
            Object.defineProperty(node2, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node2);
                delete node2[valueField];
              }
            };
            return tracker;
          }
          function track(node2) {
            if (getTracker(node2)) {
              return;
            }
            node2._valueTracker = trackValueOnNode(node2);
          }
          function updateValueIfChanged(node2) {
            if (!node2) {
              return false;
            }
            var tracker = getTracker(node2);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node2);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node2 = element;
            var checked = props.checked;
            var hostProps = assign2({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node2._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node2 = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node2._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node2 = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node2, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node2 = element;
            {
              var controlled = isControlled(props);
              if (!node2._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node2._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node2.value === "" || // We explicitly want to coerce to number here if possible.
                // eslint-disable-next-line
                node2.value != value) {
                  node2.value = toString(value);
                }
              } else if (node2.value !== toString(value)) {
                node2.value = toString(value);
              }
            } else if (type === "submit" || type === "reset") {
              node2.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node2, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node2, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node2.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node2 = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString(node2._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node2.value) {
                    node2.value = initialValue;
                  }
                }
              }
              {
                node2.defaultValue = initialValue;
              }
            }
            var name = node2.name;
            if (name !== "") {
              node2.name = "";
            }
            {
              node2.defaultChecked = !node2.defaultChecked;
              node2.defaultChecked = !!node2._wrapperState.initialChecked;
            }
            if (name !== "") {
              node2.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node2 = element;
            updateWrapper(node2, props);
            updateNamedCousins(node2, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name, "name");
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i = 0; i < group.length; i++) {
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node2, type, value) {
            if (
              // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
              type !== "number" || getActiveElement(node2.ownerDocument) !== node2
            ) {
              if (value == null) {
                node2.defaultValue = toString(node2._wrapperState.initialValue);
              } else if (node2.defaultValue !== toString(value)) {
                node2.defaultValue = toString(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React242.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString(getToStringValue(props.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i = 0; i < valuePropNames.length; i++) {
                var propName = valuePropNames[i];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node2, multiple, propValue, setDefaultSelected) {
            var options2 = node2.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i = 0; i < selectedValues.length; i++) {
                selectedValue["$" + selectedValues[i]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$1(element, props) {
            return assign2({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node2 = element;
            {
              checkSelectPropTypes(props);
            }
            node2._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node2 = element;
            node2.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node2, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node2 = element;
            var wasMultiple = node2._wrapperState.wasMultiple;
            node2._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node2, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node2, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node2 = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element, props) {
            var node2 = element;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign2({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString(node2._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node2 = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray(children)) {
                    if (children.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node2._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node2 = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString(value);
              if (newValue !== node2.value) {
                node2.value = newValue;
              }
              if (props.defaultValue == null && node2.defaultValue !== newValue) {
                node2.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node2.defaultValue = toString(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node2 = element;
            var textContent = node2.textContent;
            if (textContent === node2._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node2.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node2, html) {
            if (node2.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node2)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node2.firstChild) {
                  node2.removeChild(node2.firstChild);
                }
                while (svgNode.firstChild) {
                  node2.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node2.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node2, text) {
            if (text) {
              var firstChild = node2.firstChild;
              if (firstChild && firstChild === node2.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node2.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related properties
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix3, key) {
            return prefix3 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix3) {
              isUnitlessNumber[prefixKey(prefix3, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty3) {
            var isEmpty4 = value == null || typeof value === "boolean" || value === "";
            if (isEmpty4) {
              return "";
            }
            if (!isCustomProperty3 && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            {
              checkCSSPropertyStringCoercion(value, name);
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string) {
              return string.replace(hyphenPattern, function(_4, character2) {
                return character2.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error(
                "Unsupported style property %s. Did you mean %s?",
                name,
                // As Andi Smith suggests
                // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                // is converted to lowercase `ms`.
                camelize(name.replace(msPattern$1, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles4) {
            {
              var serialized = "";
              var delimiter2 = "";
              for (var styleName in styles4) {
                if (!styles4.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles4[styleName];
                if (styleValue != null) {
                  var isCustomProperty3 = styleName.indexOf("--") === 0;
                  serialized += delimiter2 + (isCustomProperty3 ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty3);
                  delimiter2 = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node2, styles4) {
            var style5 = node2.style;
            for (var styleName in styles4) {
              if (!styles4.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty3 = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty3) {
                  warnValidStyle$1(styleName, styles4[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles4[styleName], isCustomProperty3);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty3) {
                style5.setProperty(styleName, styleValue);
              } else {
                style5[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles4) {
            var expanded = {};
            for (var key in styles4) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i = 0; i < longhands.length; i++) {
                expanded[longhands[i]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
            // NOTE: menuitem's close tag should be omitted, but that causes problems.
          };
          var voidElementTags = assign2({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              // These are reserved SVG and MathML elements.
              // We don't mind this list too much because we expect it to never grow.
              // The alternative is to track the namespace in a few places which is convoluted.
              // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            // HTML
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            // SVG
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            // state
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            // state
            "aria-hidden": 0,
            // state
            "aria-invalid": 0,
            // state
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            // Widget Attributes
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            // Live Region Attributes
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            // Drag-and-Drop Attributes
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            // Relationship Attributes
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn2, bookkeeping) {
            return fn2(bookkeeping);
          };
          var flushSyncImpl = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn2, a, b) {
            if (isInsideEventHandler) {
              return fn2(a, b);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn2, a, b);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl = _flushSyncImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (listener && typeof listener !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = (
            /*                      */
            0
          );
          var PerformedWork = (
            /*                */
            1
          );
          var Placement = (
            /*                    */
            2
          );
          var Update = (
            /*                       */
            4
          );
          var ChildDeletion = (
            /*                */
            16
          );
          var ContentReset = (
            /*                 */
            32
          );
          var Callback = (
            /*                     */
            64
          );
          var DidCapture = (
            /*                   */
            128
          );
          var ForceClientRender = (
            /*            */
            256
          );
          var Ref = (
            /*                          */
            512
          );
          var Snapshot = (
            /*                     */
            1024
          );
          var Passive = (
            /*                      */
            2048
          );
          var Hydrating = (
            /*                    */
            4096
          );
          var Visibility = (
            /*                   */
            8192
          );
          var StoreConsistency = (
            /*             */
            16384
          );
          var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
          var HostEffectMask = (
            /*               */
            32767
          );
          var Incomplete = (
            /*                   */
            32768
          );
          var ShouldCapture = (
            /*                */
            65536
          );
          var ForceUpdateForLegacySuspense = (
            /* */
            131072
          );
          var Forked = (
            /*                       */
            1048576
          );
          var RefStatic = (
            /*                    */
            2097152
          );
          var LayoutStatic = (
            /*                 */
            4194304
          );
          var PassiveStatic = (
            /*                */
            8388608
          );
          var MountLayoutDev = (
            /*               */
            16777216
          );
          var MountPassiveDev = (
            /*              */
            33554432
          );
          var BeforeMutationMask = (
            // TODO: Remove Update flag from before mutation phase by re-landing Visibility
            // flag logic (see #20043)
            Update | Snapshot | 0
          );
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node2 = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node2;
              do {
                node2 = nextNode;
                if ((node2.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node2.return;
                }
                nextNode = node2.return;
              } while (nextNode);
            } else {
              while (node2.return) {
                node2 = node2.return;
              }
            }
            if (node2.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a = fiber;
            var b = alternate;
            while (true) {
              var parentA = a.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a = b = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a.return !== b.return) {
                a = parentA;
                b = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentA;
                    b = parentB;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentA;
                    a = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a) {
                      didFindChild = true;
                      a = parentB;
                      b = parentA;
                      break;
                    }
                    if (_child === b) {
                      didFindChild = true;
                      b = parentB;
                      a = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a.alternate !== b) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a.stateNode.current === a) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node2) {
            if (node2.tag === HostComponent || node2.tag === HostText) {
              return node2;
            }
            var child = node2.child;
            while (child !== null) {
              var match2 = findCurrentHostFiberImpl(child);
              if (match2 !== null) {
                return match2;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node2) {
            if (node2.tag === HostComponent || node2.tag === HostText) {
              return node2;
            }
            var child = node2.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match2 = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match2 !== null) {
                  return match2;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler.unstable_scheduleCallback;
          var cancelCallback = Scheduler.unstable_cancelCallback;
          var shouldYield = Scheduler.unstable_shouldYield;
          var requestPaint = Scheduler.unstable_requestPaint;
          var now = Scheduler.unstable_now;
          var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
          var NormalPriority = Scheduler.unstable_NormalPriority;
          var LowPriority = Scheduler.unstable_LowPriority;
          var IdlePriority = Scheduler.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign2({}, internals, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root2, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root2, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root2, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root2.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root2) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root2);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index2 = 0; index2 < TotalLanes; index2++) {
                var label = getLabelForLane(lane);
                map.set(lane, label);
                lane *= 2;
              }
              return map;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = (
            /*                         */
            0
          );
          var ConcurrentMode = (
            /*                 */
            1
          );
          var ProfileMode = (
            /*                    */
            2
          );
          var StrictLegacyMode = (
            /*               */
            8
          );
          var StrictEffectsMode = (
            /*              */
            16
          );
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x) {
            var asUint = x >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = (
            /*                        */
            0
          );
          var NoLane = (
            /*                          */
            0
          );
          var SyncLane = (
            /*                        */
            1
          );
          var InputContinuousHydrationLane = (
            /*    */
            2
          );
          var InputContinuousLane = (
            /*             */
            4
          );
          var DefaultHydrationLane = (
            /*            */
            8
          );
          var DefaultLane = (
            /*                     */
            16
          );
          var TransitionHydrationLane = (
            /*                */
            32
          );
          var TransitionLanes = (
            /*                       */
            4194240
          );
          var TransitionLane1 = (
            /*                        */
            64
          );
          var TransitionLane2 = (
            /*                        */
            128
          );
          var TransitionLane3 = (
            /*                        */
            256
          );
          var TransitionLane4 = (
            /*                        */
            512
          );
          var TransitionLane5 = (
            /*                        */
            1024
          );
          var TransitionLane6 = (
            /*                        */
            2048
          );
          var TransitionLane7 = (
            /*                        */
            4096
          );
          var TransitionLane8 = (
            /*                        */
            8192
          );
          var TransitionLane9 = (
            /*                        */
            16384
          );
          var TransitionLane10 = (
            /*                       */
            32768
          );
          var TransitionLane11 = (
            /*                       */
            65536
          );
          var TransitionLane12 = (
            /*                       */
            131072
          );
          var TransitionLane13 = (
            /*                       */
            262144
          );
          var TransitionLane14 = (
            /*                       */
            524288
          );
          var TransitionLane15 = (
            /*                       */
            1048576
          );
          var TransitionLane16 = (
            /*                       */
            2097152
          );
          var RetryLanes = (
            /*                            */
            130023424
          );
          var RetryLane1 = (
            /*                             */
            4194304
          );
          var RetryLane2 = (
            /*                             */
            8388608
          );
          var RetryLane3 = (
            /*                             */
            16777216
          );
          var RetryLane4 = (
            /*                             */
            33554432
          );
          var RetryLane5 = (
            /*                             */
            67108864
          );
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = (
            /*          */
            134217728
          );
          var NonIdleLanes = (
            /*                          */
            268435455
          );
          var IdleHydrationLane = (
            /*               */
            268435456
          );
          var IdleLane = (
            /*                        */
            536870912
          );
          var OffscreenLane = (
            /*                   */
            1073741824
          );
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root2, wipLanes) {
            var pendingLanes = root2.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
            // bother waiting until the root is complete.
            (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (
                // Tests whether the next lane is equal or lower priority than the wip
                // one. This works because the bits decrease in priority as you go left.
                nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
                // only difference between default updates and transition updates is that
                // default updates do not support refresh transitions.
                nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
              ) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root2.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root2.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index2 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index2;
                nextLanes |= entanglements[index2];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root2, lanes) {
            var eventTimes = root2.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var eventTime = eventTimes[index2];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root2, currentTime) {
            var pendingLanes = root2.pendingLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var expirationTime = expirationTimes[index2];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index2] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root2.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root2) {
            return getHighestPriorityLanes(root2.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root2) {
            var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root2, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root2, lanes) {
            return (lanes & root2.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a, b) {
            return (a & b) !== NoLanes;
          }
          function isSubsetOfLanes(set2, subset) {
            return (set2 & subset) === subset;
          }
          function mergeLanes(a, b) {
            return a | b;
          }
          function removeLanes(set2, subset) {
            return set2 & ~subset;
          }
          function intersectLanes(a, b) {
            return a & b;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a, b) {
            return a !== NoLane && a < b ? a : b;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i = 0; i < TotalLanes; i++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root2, updateLane, eventTime) {
            root2.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root2.suspendedLanes = NoLanes;
              root2.pingedLanes = NoLanes;
            }
            var eventTimes = root2.eventTimes;
            var index2 = laneToIndex(updateLane);
            eventTimes[index2] = eventTime;
          }
          function markRootSuspended(root2, suspendedLanes) {
            root2.suspendedLanes |= suspendedLanes;
            root2.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root2, pingedLanes, eventTime) {
            root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root2, remainingLanes) {
            var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
            root2.pendingLanes = remainingLanes;
            root2.suspendedLanes = NoLanes;
            root2.pingedLanes = NoLanes;
            root2.expiredLanes &= remainingLanes;
            root2.mutableReadLanes &= remainingLanes;
            root2.entangledLanes &= remainingLanes;
            var entanglements = root2.entanglements;
            var eventTimes = root2.eventTimes;
            var expirationTimes = root2.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] = NoLanes;
              eventTimes[index2] = NoTimestamp;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root2, entangledLanes) {
            var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
            var entanglements = root2.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              if (
                // Is this one of the newly entangled lanes?
                lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
                entanglements[index2] & entangledLanes
              ) {
                entanglements[index2] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root2, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root2, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root2, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            var memoizedUpdaters = root2.memoizedUpdaters;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root2, lanes) {
            {
              return null;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority(priority, fn2) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn2();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a, b) {
            return a !== 0 && a < b ? a : b;
          }
          function lowerEventPriority(a, b) {
            return a === 0 || a > b ? a : b;
          }
          function isHigherEventPriority(a, b) {
            return a !== 0 && a < b;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root2) {
            var currentState = root2.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn2) {
            _attemptSynchronousHydration = fn2;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn2) {
            attemptContinuousHydration = fn2;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn2) {
            attemptHydrationAtCurrentPriority = fn2;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn2) {
            getCurrentUpdatePriority$1 = fn2;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn2) {
            attemptHydrationAtPriority = fn2;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            // Intentionally camelCase
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target,
              priority: updatePriority
            };
            var i = 0;
            for (; i < queuedExplicitHydrationTargets.length; i++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
            if (i === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i = 1; i < queuedDiscreteEvents.length; i++) {
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled2() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              // Used by SimpleEventPlugin:
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              // Used by polyfills:
              // eslint-disable-next-line no-fallthrough
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              // Only enableCreateEventHandleAPI:
              // eslint-disable-next-line no-fallthrough
              case "beforeblur":
              case "afterblur":
              // Not used by React but could be by user code:
              // eslint-disable-next-line no-fallthrough
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              // Not used by React but could be by user code:
              // eslint-disable-next-line no-fallthrough
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive2) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive: passive2
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive2) {
            target.addEventListener(eventType, listener, {
              passive: passive2
            });
            return listener;
          }
          var root = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start2;
            var startValue = startText;
            var startLength = startValue.length;
            var end2;
            var endValue = getText();
            var endLength = endValue.length;
            for (start2 = 0; start2 < startLength; start2++) {
              if (startValue[start2] !== endValue[start2]) {
                break;
              }
            }
            var minEnd = startLength - start2;
            for (end2 = 1; end2 <= minEnd; end2++) {
              if (startValue[startLength - end2] !== endValue[endLength - end2]) {
                break;
              }
            }
            var sliceTail = end2 > 1 ? 1 - end2 : void 0;
            fallbackText = endValue.slice(start2, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root) {
              return root.value;
            }
            return root.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize = Interface[_propName];
                if (normalize) {
                  this[_propName] = normalize(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign2(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              /**
               * We release all dispatched `SyntheticEvent`s after each event loop, adding
               * them back into the pool. This allows a way to hold onto a reference that
               * won't be added back into the pool.
               */
              persist: function() {
              },
              /**
               * Checks if this event should be released back into the pool.
               *
               * @return {boolean} True if this should not be released, false otherwise.
               */
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign2({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = assign2({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign2({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign2({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign2({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign2({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign2({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign2({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            // Legacy Interface
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign2({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign2({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign2({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign2({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : (
                // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                "wheelDeltaX" in event ? -event.wheelDeltaX : 0
              );
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : (
                // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                "wheelDeltaY" in event ? -event.wheelDeltaY : (
                  // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                  "wheelDelta" in event ? -event.wheelDelta : 0
                )
              );
            },
            deltaZ: 0,
            // Browsers without "deltaMode" is reporting in raw wheel delta where one
            // notch on the scroll is always +/- 120, roughly equivalent to pixels.
            // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
            // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
            !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node2) {
            var state = node2._wrapperState;
            if (!state || !state.controlled || node2.type !== "number") {
              return;
            }
            {
              setDefaultValue(node2, "number", node2.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from2;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from2 = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from2 = null;
              to = targetInst;
            }
            if (from2 === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from2 == null ? win : getNodeFromInstance(from2);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from2, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from2, to);
          }
          function is2(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is2;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i = 0; i < keysA.length; i++) {
              var currentKey = keysA[i];
              if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node2) {
            while (node2 && node2.firstChild) {
              node2 = node2.firstChild;
            }
            return node2;
          }
          function getSiblingNode(node2) {
            while (node2) {
              if (node2.nextSibling) {
                return node2.nextSibling;
              }
              node2 = node2.parentNode;
            }
          }
          function getNodeForCharacterOffset(root2, offset2) {
            var node2 = getLeafNode(root2);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node2) {
              if (node2.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node2.textContent.length;
                if (nodeStart <= offset2 && nodeEnd >= offset2) {
                  return {
                    node: node2,
                    offset: offset2 - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node2 = getLeafNode(getSiblingNode(node2));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument2 = outerNode.ownerDocument;
            var win = ownerDocument2 && ownerDocument2.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length2 = 0;
            var start2 = -1;
            var end2 = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node2 = outerNode;
            var parentNode = null;
            outer: while (true) {
              var next2 = null;
              while (true) {
                if (node2 === anchorNode && (anchorOffset === 0 || node2.nodeType === TEXT_NODE)) {
                  start2 = length2 + anchorOffset;
                }
                if (node2 === focusNode && (focusOffset === 0 || node2.nodeType === TEXT_NODE)) {
                  end2 = length2 + focusOffset;
                }
                if (node2.nodeType === TEXT_NODE) {
                  length2 += node2.nodeValue.length;
                }
                if ((next2 = node2.firstChild) === null) {
                  break;
                }
                parentNode = node2;
                node2 = next2;
              }
              while (true) {
                if (node2 === outerNode) {
                  break outer;
                }
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                  start2 = length2;
                }
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                  end2 = length2;
                }
                if ((next2 = node2.nextSibling) !== null) {
                  break;
                }
                node2 = parentNode;
                parentNode = node2.parentNode;
              }
              node2 = next2;
            }
            if (start2 === -1 || end2 === -1) {
              return null;
            }
            return {
              start: start2,
              end: end2
            };
          }
          function setOffsets(node2, offsets) {
            var doc = node2.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length2 = node2.textContent.length;
            var start2 = Math.min(offsets.start, length2);
            var end2 = offsets.end === void 0 ? start2 : Math.min(offsets.end, length2);
            if (!selection.extend && start2 > end2) {
              var temp = end2;
              end2 = start2;
              start2 = temp;
            }
            var startMarker = getNodeForCharacterOffset(node2, start2);
            var endMarker = getNodeForCharacterOffset(node2, end2);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start2 > end2) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node2) {
            return node2 && node2.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node2) {
            return node2 && node2.ownerDocument && containsNode(node2.ownerDocument.documentElement, node2);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection2(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i = 0; i < ancestors.length; i++) {
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection2(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start2 = offsets.start;
            var end2 = offsets.end;
            if (end2 === void 0) {
              end2 = start2;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start2;
              input.selectionEnd = Math.min(end2, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node2) {
            if ("selectionStart" in node2 && hasSelectionCapabilities(node2)) {
              return {
                start: node2.selectionStart,
                end: node2.selectionEnd
              };
            } else {
              var win = node2.ownerDocument && node2.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              // Track the input node that has focus.
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              // Don't fire the event while the user is dragging. This matches the
              // semantics of the native select event.
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              // Chrome and IE fire non-standard event when selection is changed (and
              // sometimes when it hasn't). IE's event fires out of order with respect
              // to key and input events on deletion, so we discard it.
              //
              // Firefox doesn't support selectionchange, so check selection status
              // after each key entry. The selection changes after keydown and before
              // keyup, but we check on keydown as well in the case of holding down a
              // key, when multiple keydown events are fired but only one keyup is.
              // This is also our approach for IE handling, for the reason above.
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              // falls through
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style4 = {};
          if (canUseDOM) {
            style4 = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style4) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i = 0; i < simpleEventPluginEvents.length; i++) {
              var eventName = simpleEventPluginEvents[i];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              /* falls through */
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              /* falls through */
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              // TODO: Disabled elements should not respond to mouse events
              /* falls through */
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
              // nonDelegatedEvents list in DOMPluginEventSystem.
              // Then we can remove this special list.
              // This is a breaking change that can wait until React 18.
              domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i = dispatchListeners.length - 1; i >= 0; i--) {
                var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i = 0; i < dispatchQueue.length; i++) {
              var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument2 = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument2 !== null) {
                if (!ownerDocument2[listeningMarker]) {
                  ownerDocument2[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument2);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node2 = targetInst;
                mainLoop: while (true) {
                  if (node2 === null) {
                    return;
                  }
                  var nodeTag = node2.tag;
                  if (nodeTag === HostRoot || nodeTag === HostPortal) {
                    var container = node2.stateNode.containerInfo;
                    if (isMatchingRootContainer(container, targetContainerNode)) {
                      break;
                    }
                    if (nodeTag === HostPortal) {
                      var grandNode = node2.return;
                      while (grandNode !== null) {
                        var grandTag = grandNode.tag;
                        if (grandTag === HostRoot || grandTag === HostPortal) {
                          var grandContainer = grandNode.stateNode.containerInfo;
                          if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                            return;
                          }
                        }
                        grandNode = grandNode.return;
                      }
                    }
                    while (container !== null) {
                      var parentNode = getClosestInstanceFromNode(container);
                      if (parentNode === null) {
                        return;
                      }
                      var parentTag = parentNode.tag;
                      if (parentTag === HostComponent || parentTag === HostText) {
                        node2 = ancestorInst = parentNode;
                        continue mainLoop;
                      }
                      container = container.parentNode;
                    }
                  }
                  node2 = node2.return;
                }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common2, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common2) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common2) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from2, to) {
            var common2 = from2 && to ? getLowestCommonAncestor(from2, to) : null;
            if (from2 !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from2, common2, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common2, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              // There are working polyfills for <dialog>. Let people use it.
              dialog: true,
              // Electron ships a custom <webview> tag to display external web content in
              // an isolated frame and process.
              // This tag is not present in non Electron environments such as JSDom which
              // is often used for testing purposes.
              // @see https://electronjs.org/docs/api/webview-tag
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop3() {
          }
          function trapClickOnNonInteractiveElement(node2) {
            node2.onclick = noop3;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
              else if (propKey === AUTOFOCUS) ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i = 0; i < updatePayload.length; i += 2) {
              var propKey = updatePayload[i];
              var propValue = updatePayload[i + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement5(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument2 = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument2.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument2.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument2.createElement(type);
                if (type === "select") {
                  var node2 = domElement;
                  if (props.multiple) {
                    node2.multiple = true;
                  } else if (props.size) {
                    node2.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument2.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
              else if (propKey === AUTOFOCUS) ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  // Controlled attributes are not validated
                  // TODO: Only ignore them on controlled tags.
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
              typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true) ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === "value" || propKey === "checked" || propKey === "selected") ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
                ) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
              // TODO: Distinguish by namespace here -- for <title>, including it here
              // errs on the side of fewer warnings
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = assign2({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
                // but
                case "option":
                  return tag === "#text";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
                // No special behavior since these rules fall back to "in body" mode for
                // all except special table nodes which cause bad parsing behavior anyway.
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
                case "colgroup":
                  return tag === "col" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root2 = rootContainerInstance.documentElement;
                namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled2();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement5(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error2) {
            setTimeout(function() {
              throw error2;
            });
          }
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node2 = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node2.nextSibling;
              parentInstance.removeChild(node2);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node2 = nextNode;
            } while (node2);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
            if (container.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container.parentNode, suspenseInstance);
            } else if (container.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container, suspenseInstance);
            }
            retryIfBlockedOn(container);
          }
          function hideInstance(instance) {
            instance = instance;
            var style5 = instance.style;
            if (typeof style5.setProperty === "function") {
              style5.setProperty("display", "none", "important");
            } else {
              style5.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              if (container.documentElement) {
                container.removeChild(container.documentElement);
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getSuspenseInstanceFallbackErrorDetails(instance) {
            var dataset = instance.nextSibling && instance.nextSibling.dataset;
            var digest, message, stack;
            if (dataset) {
              digest = dataset.dgst;
              {
                message = dataset.msg;
                stack = dataset.stck;
              }
            }
            {
              return {
                message,
                digest,
                stack
              };
            }
          }
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          function getNextHydratable(node2) {
            for (; node2 != null; node2 = node2.nextSibling) {
              var nodeType = node2.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node2.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node2;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node2 = suspenseInstance.nextSibling;
            var depth = 0;
            while (node2) {
              if (node2.nodeType === COMMENT_NODE) {
                var data = node2.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node2);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node2 = node2.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node2 = targetInstance.previousSibling;
            var depth = 0;
            while (node2) {
              if (node2.nodeType === COMMENT_NODE) {
                var data = node2.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node2;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node2 = node2.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE) ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE) ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE) ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) warnForInsertedHydratedElement(parentNode, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) warnForInsertedHydratedText(parentNode, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type);
              }
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text);
              }
            }
          }
          function errorHydratingContainer(parentContainer) {
            {
              error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node2) {
            delete node2[internalInstanceKey];
            delete node2[internalPropsKey];
            delete node2[internalEventHandlersKey];
            delete node2[internalEventHandlerListenersKey];
            delete node2[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node2) {
            node2[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node2) {
            node2[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node2) {
            node2[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node2) {
            return !!node2[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node2) {
            var inst = node2[internalInstanceKey] || node2[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node2) {
            return node2[internalPropsKey] || null;
          }
          function updateFiberProps(node2, props) {
            node2[internalPropsKey] = props;
          }
          function getEventListenerSet(node2) {
            var elementListenerSet = node2[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node2[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values3, location, componentName, element) {
            {
              var has2 = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor2, fiber) {
            if (index < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor2.current = valueStack[index];
            valueStack[index] = null;
            {
              fiberStack[index] = null;
            }
            index--;
          }
          function push(cursor2, value, fiber) {
            index++;
            valueStack[index] = cursor2.current;
            {
              fiberStack[index] = fiber;
            }
            cursor2.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return assign2({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node2 = fiber;
              do {
                switch (node2.tag) {
                  case HostRoot:
                    return node2.stateNode.context;
                  case ClassComponent: {
                    var Component = node2.type;
                    if (isContextProvider(Component)) {
                      return node2.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node2 = node2.return;
              } while (node2 !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error2;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id.toString(32) + overflow;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index2) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index2 + 1;
            var length2 = getBitLength(totalChildren) + baseLength;
            if (length2 > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id;
              treeContextOverflow = overflow;
            } else {
              var newBits = slot << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length2 | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number) {
            return 32 - clz32(number);
          }
          function getLeadingBit(id) {
            return 1 << getBitLength(id) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          function didSuspendOrErrorWhileHydratingDEV() {
            {
              return didSuspendOrErrorDEV;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(
                    returnFiber.type,
                    returnFiber.memoizedProps,
                    returnFiber.stateNode,
                    instance,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
                }
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _type,
                        _props,
                        // TODO: Delete this argument when we remove the legacy root API.
                        isConcurrentMode
                      );
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _text,
                        // TODO: Delete this argument when we remove the legacy root API.
                        _isConcurrentMode
                      );
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null) switch (fiber.tag) {
                    case HostComponent:
                      var _type2 = fiber.type;
                      var _props2 = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                      break;
                    case HostText:
                      var _text2 = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                      break;
                  }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(
                      parentContainer,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode2
                    );
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error2) {
            if (hydrationErrors === null) {
              hydrationErrors = [error2];
            } else {
              hydrationErrors.push(error2);
            }
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node2 = fiber;
              while (node2 !== null) {
                if (node2.mode & StrictLegacyMode) {
                  maybeStrictRoot = node2;
                }
                node2 = node2.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set2) {
              var array = [];
              set2.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
              instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function isReactClass(type) {
            return type.prototype && type.prototype.isReactComponent;
          }
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
                // because these cannot be automatically converted to an arrow function
                // using a codemod. Therefore, we don't have to warn about string refs again.
                !(element._owner && element._self && element._owner.stateNode !== element._self) && // Will already throw with "Function components cannot have string refs"
                !(element._owner && element._owner.tag !== ClassComponent) && // Will already warn with "Function components cannot be given refs"
                !(typeof element.type === "function" && !isReactClass(element.type)) && // Will already throw with "Element ref was specified as a string (someStringRef) but no owner was set"
                element._owner) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = resolvedInst.refs;
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init = lazyType._init;
            return init(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
              }
              if (current2 !== null) {
                if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
                isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
                // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment22) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return createChild(returnFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                  case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init = child._init;
                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i = 0; i < newChildren.length; i++) {
                  var child = newChildren[i];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
                newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  var elementType = element.type;
                  if (elementType === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment22) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                    isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                    // We need to do this after the Hot Reloading check above,
                    // because hot reloading has different semantics than prod because
                    // it doesn't resuspend. So we can't let the call below suspend.
                    typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element.props);
                      _existing.ref = coerceRef(returnFiber, child, element);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
                }
                if (isArray(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (current2 !== null && workInProgress2.child !== current2.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context, nextValue) {
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context, providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            {
              {
                context._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
            var node2 = parent;
            while (node2 !== null) {
              var alternate = node2.alternate;
              if (!isSubsetOfLanes(node2.childLanes, renderLanes2)) {
                node2.childLanes = mergeLanes(node2.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node2 === propagationRoot) {
                break;
              }
              node2 = node2.return;
            }
            {
              if (node2 !== propagationRoot) {
                error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update = createUpdate(NoTimestamp, lane);
                      update.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null) ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update.next = update;
                        } else {
                          update.next = pending.next;
                          pending.next = update;
                        }
                        sharedQueue.pending = update;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value = context._currentValue;
            if (lastFullyObservedContext === context) ;
            else {
              var contextItem = {
                context,
                memoizedValue: value,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value;
          }
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue) {
            if (concurrentQueues === null) {
              concurrentQueues = [queue];
            } else {
              concurrentQueues.push(queue);
            }
          }
          function finishQueueingConcurrentUpdates() {
            if (concurrentQueues !== null) {
              for (var i = 0; i < concurrentQueues.length; i++) {
                var queue = concurrentQueues[i];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
          }
          function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node2 = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node2 = parent;
              parent = parent.return;
            }
            if (node2.tag === HostRoot) {
              var root2 = node2.stateNode;
              return root2;
            } else {
              return null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return null;
            }
            var sharedQueue = updateQueue.shared;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }
              sharedQueue.pending = update;
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else {
              return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
            }
          }
          function entangleTransitions(root2, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              // Intentional fallthrough
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign2({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null && // If the update was already committed, we should not queue its
                  // callback again.
                  update.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i = 0; i < effects.length; i++) {
                var effect4 = effects[i];
                var callback = effect4.callback;
                if (callback !== null) {
                  effect4.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c) {
            if (c === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          function findFirstSuspended(row) {
            var node2 = row;
            while (node2 !== null) {
              if (node2.tag === SuspenseComponent) {
                var state = node2.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node2;
                  }
                }
              } else if (node2.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
              // keep track of whether it suspended or not.
              node2.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node2.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node2;
                }
              } else if (node2.child !== null) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === row) {
                return null;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === row) {
                  return null;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
            return null;
          }
          var NoFlags$1 = (
            /*   */
            0
          );
          var HasEffect = (
            /* */
            1
          );
          var Insertion7 = (
            /*  */
            2
          );
          var Layout = (
            /*    */
            4
          );
          var Passive$1 = (
            /*   */
            8
          );
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i = 0; i < workInProgressSources.length; i++) {
              var mutableSource = workInProgressSources[i];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root2, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version2 = getVersion(mutableSource._source);
            if (root2.mutableSourceEagerHydrationData == null) {
              root2.mutableSourceEagerHydrationData = [mutableSource, version2];
            } else {
              root2.mutableSourceEagerHydrationData.push(mutableSource, version2);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
              if (objectIs(nextDeps[i], prevDeps[i])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
              // and creates false positives. To make this work in legacy mode, we'd
              // need to mark fibers that commit in an incomplete state, somehow. For
              // now I'll disable the warning that most of the bugs that would trigger
              // it are either exclusive to concurrent mode or exist in both.
              (current2.mode & ConcurrentMode) !== NoMode) {
                error("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init !== void 0) {
              initialState = init(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      action: update.action,
                      hasEagerState: update.hasEagerState,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.hasEagerState) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot
            };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
            // checking whether we scheduled a subscription effect above.
            workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check = {
              getSnapshot,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check];
              } else {
                stores.push(check);
              }
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst, subscribe) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error2) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create, destroy, deps) {
            var effect4 = {
              tag,
              create,
              destroy,
              deps,
              // Circular
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect4.next = effect4;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect4.next = effect4;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect4;
                effect4.next = firstEffect;
                componentUpdateQueue.lastEffect = effect4;
              }
            }
            return effect4;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = {
                current: initialValue
              };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
          }
          function mountEffect(create, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
            }
          }
          function updateEffect(create, deps) {
            return updateEffectImpl(Passive, Passive$1, create, deps);
          }
          function mountInsertionEffect(create, deps) {
            return mountEffectImpl(Update, Insertion7, create, deps);
          }
          function updateInsertionEffect(create, deps) {
            return updateEffectImpl(Update, Insertion7, create, deps);
          }
          function mountLayoutEffect(create, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, create, deps);
          }
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout, create, deps);
          }
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value;
            return value;
          }
          function updateDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
          function rerenderDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value;
              return value;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs(value, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value;
              return value;
            }
          }
          function startTransition(setPending, callback, options2) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
            var start2 = startTransition.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start2;
            return [isPending, start2];
          }
          function updateTransition() {
            var _updateState = updateState(), isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start2 = hook.memoizedState;
            return [isPending, start2];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start2 = hook.memoizedState;
            return [isPending, start2];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root2 = getWorkInProgressRoot();
            var identifierPrefix = root2.identifierPrefix;
            var id;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id += "H" + localId.toString(32);
              }
              id += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id;
            return id;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id = hook.memoizedState;
            return id;
          }
          function dispatchReducerAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.hasEagerState = true;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue, update) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
          }
          function entangleTransitionUpdate(root2, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    root2.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    if (root2 !== null) {
                      root2.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function resolveDefaultProps(Component, baseProps) {
            if (Component && Component.defaultProps) {
              var props = assign2({}, baseProps);
              var defaultProps2 = Component.defaultProps;
              for (var propName in defaultProps2) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps2[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var fakeInternalInstance = {};
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          var didWarnAboutLegacyContext$1;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            didWarnAboutLegacyContext$1 = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign2({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (ctor.childContextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
                // this one.
                (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                  didWarnAboutLegacyContext$1.add(ctor);
                  error("%s uses the legacy childContextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() instead\n\n.Learn more about this warning here: https://reactjs.org/link/legacy-context", name);
                }
                if (ctor.contextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
                // this one.
                (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                  didWarnAboutLegacyContext$1.add(ctor);
                  error("%s uses the legacy contextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() with static contextType instead.\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", name);
                }
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = (
                  // Allow null for conditional declaration
                  contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
                );
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props, context);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props, context);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = {};
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
            // both before and after `shouldComponentUpdate` has been called. Not ideal,
            // but I'm loath to refactor this function. This only happens for memoized
            // components so it's not that common.
            enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function createCapturedValueAtFiber(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source),
              digest: null
            };
          }
          function createCapturedValue(value, digest, stack) {
            return {
              value,
              source: null,
              stack: stack != null ? stack : null,
              digest: digest != null ? digest : null
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentNameFromFiber(source) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e) {
              setTimeout(function() {
                throw e;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update;
          }
          function attachPingListener(root2, wakeable, lanes) {
            var pingCache = root2.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root2.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root2, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = /* @__PURE__ */ new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node2 = returnFiber;
            do {
              if (node2.tag === SuspenseComponent && shouldCaptureSuspense(node2)) {
                return node2;
              }
              node2 = node2.return;
            } while (node2 !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(NoTimestamp, SyncLane);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update, SyncLane);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root2, rootRenderLanes);
              }
            }
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root2, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                  queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                  return;
                }
              }
            }
            value = createCapturedValueAtFiber(value, sourceFiber);
            renderDidError(value);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          var didWarnAboutDefaultPropsOnFunctionComponent;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
            didWarnAboutDefaultPropsOnFunctionComponent = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var render2 = Component.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            if (current2 === null) {
              var type = Component.type;
              if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
              Component.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(type)
                  );
                }
                if (Component.defaultProps !== void 0) {
                  var componentName = getComponentNameFromType(type) || "Unknown";
                  if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                    error("%s: Support for defaultProps will be removed from memo components in a future major release. Use JavaScript default parameters instead.", componentName);
                    didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
                  }
                }
              }
              var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(_type)
                );
              }
            }
            var currentChild = current2.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      // Resolved (SimpleMemoComponent has no defaultProps)
                      "prop",
                      getComponentNameFromType(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
              workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
              constructClassInstance(workInProgress2, Component, nextProps);
              mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root2 = workInProgress2.stateNode;
            if (root2.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
            } else if (root2.context) {
              pushTopLevelContextObject(workInProgress2, root2.context, false);
            }
            pushHostContainer(workInProgress2, root2.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current2 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var root2 = workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
              };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node2 = child;
                while (node2) {
                  node2.flags = node2.flags & ~Placement | Hydrating;
                  node2 = node2.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component = init(payload);
            workInProgress2.type = Component;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
            var resolvedProps = resolveDefaultProps(Component, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component);
                  workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
                }
                child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component = resolveClassForHotReloading(Component);
                }
                child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
                }
                child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(Component)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component,
                  resolveDefaultProps(Component.type, resolvedProps),
                  // The inner type can have defaults too
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component.prototype && typeof Component.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (
              // Run these checks in production only if the flag is off.
              // Eventually we'll delete this branch altogether.
              typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
            ) {
              {
                var _componentName2 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component) {
            {
              if (Component) {
                if (Component.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (Component.defaultProps !== void 0) {
                var componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                  error("%s: Support for defaultProps will be removed from function components in a future major release. Use JavaScript default parameters instead.", componentName);
                  didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
                }
              }
              if (typeof Component.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component.contextType === "object" && Component.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache(),
              transitions: null
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool,
              transitions: prevOffscreenState.transitions
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                }
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if (
              // In legacy mode, we commit the primary tree as if it successfully
              // completed, even though it's in an inconsistent state.
              (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
              // already cloned. In legacy mode, the only case where this isn't true is
              // when DevTools forces us to display a fallback; we skip the first render
              // pass entirely and go straight to rendering the fallback. (In Concurrent
              // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
              // only codepath.)
              workInProgress2.child !== currentPrimaryChildFragment
            ) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
            if (!didSuspend) {
              warnIfHydrating();
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                return retrySuspenseComponentWithoutHydrating(
                  current2,
                  workInProgress2,
                  renderLanes2,
                  // TODO: When we delete legacy mode, we should make this error argument
                  // required — every concurrent mode path that causes hydration to
                  // de-opt to client rendering should have an error message.
                  null
                );
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest, message, stack;
                {
                  var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                  digest = _getSuspenseInstanceF.digest;
                  message = _getSuspenseInstanceF.message;
                  stack = _getSuspenseInstanceF.stack;
                }
                var error2;
                if (message) {
                  error2 = new Error(message);
                } else {
                  error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                }
                var capturedValue = createCapturedValue(error2, digest, stack);
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
              }
              var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
              if (didReceiveUpdate || hasContextChanged2) {
                var root2 = getWorkInProgressRoot();
                if (root2 !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
                  if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    suspenseState.retryLane = attemptHydrationAtLane;
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root2, current2, attemptHydrationAtLane, eventTime);
                  }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress2.flags |= DidCapture;
                workInProgress2.child = current2.child;
                var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
              } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current2.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment4 = workInProgress2.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node2 = firstChild;
            while (node2 !== null) {
              if (node2.tag === SuspenseComponent) {
                var state = node2.memoizedState;
                if (state !== null) {
                  scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
                }
              } else if (node2.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
              } else if (node2.child !== null) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === workInProgress2) {
                return;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === workInProgress2) {
                  return;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index2) {
            {
              var isAnArray = isArray(childSlot);
              var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable) {
                var type = isAnArray ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (isArray(children)) {
                  for (var i = 0; i < children.length; i++) {
                    if (!validateSuspenseListNestedChild(children[i], i)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    tail,
                    lastContentRow,
                    tailMode
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    // isBackwards
                    _tail,
                    null,
                    // last
                    tailMode
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    null,
                    // tail
                    null,
                    // last
                    void 0
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
            }
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current2];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current2);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current2, renderLanes2) {
            var updateLanes = current2.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                var root2 = workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context = workInProgress2.type._context;
                pushProvider(workInProgress2, context, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state = workInProgress2.memoizedState;
                if (state !== null) {
                  if (state.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
              workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
                // may not be work scheduled on `current`, so we check for this flag.
                (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                }
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
              }
              case FunctionComponent: {
                var Component = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, Component, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment22:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node2 = workInProgress2.child;
              while (node2 !== null) {
                if (node2.tag === HostComponent || node2.tag === HostText) {
                  appendInitialChild(parent, node2.stateNode);
                } else if (node2.tag === HostPortal) ;
                else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === workInProgress2) {
                  return;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === workInProgress2) {
                    return;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            };
            updateHostContainer = function(current2, workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress2);
            if (nextState !== null && nextState.dehydrated !== null) {
              if (current2 === null) {
                if (!wasHydrated) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              }
            } else {
              upgradeHydrationErrorsToRecoverable();
              return true;
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment22:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current2 !== null) {
                      var prevState = current2.memoizedState;
                      if (
                        // Check if this is a client root
                        !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                        (workInProgress2.flags & ForceClientRender) !== NoFlags
                      ) {
                        workInProgress2.flags |= Snapshot;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress2.flags & ShouldCapture) {
                      return workInProgress2;
                    } else {
                      return null;
                    }
                  }
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current2, workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (
                      // The time it took to render last row is greater than the remaining
                      // time we have to render. So rendering one more row would likely
                      // exceed it.
                      now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                    ) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next2 = renderState.tail;
                  renderState.rendering = next2;
                  renderState.tail = next2.sibling;
                  renderState.renderingStartTime = now();
                  next2.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next2;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current2 !== null) {
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                  !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current2, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                var root2 = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                var root2 = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error2) {
            {
              invokeGuardedCallback(null, function() {
                throw error2;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              instance.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout, current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current2, instance);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyAttachRef(current2, nearestMountedAncestor) {
            try {
              commitAttachRef(current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyDetachRef(current2, nearestMountedAncestor) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current2);
                    }
                  } else {
                    retVal = ref(null);
                  }
                } catch (error2) {
                  captureCommitPhaseError(current2, nearestMountedAncestor, error2);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root2, firstChild) {
            focusedInstanceHandle = prepareForCommit(root2.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root2 = finishedWork.stateNode;
                    clearContainer(root2.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect4 = firstEffect;
              do {
                if ((effect4.tag & flags) === flags) {
                  var destroy = effect4.destroy;
                  effect4.destroy = void 0;
                  if (destroy !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion7) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                    {
                      if ((flags & Insertion7) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect4 = effect4.next;
              } while (effect4 !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect4 = firstEffect;
              do {
                if ((effect4.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create = effect4.create;
                  {
                    if ((flags & Insertion7) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect4.destroy = create();
                  {
                    if ((flags & Insertion7) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy = effect4.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var hookName = void 0;
                      if ((effect4.tag & Layout) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect4.tag & Insertion7) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect4 = effect4.next;
              } while (effect4 !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer: while (parentFiber !== null) {
                      switch (parentFiber.tag) {
                        case HostRoot:
                          var root2 = parentFiber.stateNode;
                          root2.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                        case Profiler:
                          var parentStateNode = parentFiber.stateNode;
                          parentStateNode.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                      }
                      parentFiber = parentFiber.return;
                    }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current2 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                        var prevState = current2.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current2 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current2 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer: while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root2 = parentFiber.stateNode;
                            root2.effectDuration += effectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.effectDuration += effectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node2) {
            switch (node2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (node2.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
                  } finally {
                    recordLayoutEffectDuration(node2);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node2.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node2, node2.return, instance);
                }
                safelyAttachRef(node2, node2.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node2, node2.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            var hostSubtreeRoot = null;
            {
              var node2 = finishedWork;
              while (true) {
                if (node2.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node2;
                    try {
                      var instance = node2.stateNode;
                      if (isHidden) {
                        hideInstance(instance);
                      } else {
                        unhideInstance(node2.stateNode, node2.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if (node2.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node2.stateNode;
                      if (isHidden) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node2.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if ((node2.tag === OffscreenComponent || node2.tag === LegacyHiddenComponent) && node2.memoizedState !== null && node2 !== finishedWork) ;
                else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === finishedWork) {
                  return;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node2) {
                    hostSubtreeRoot = null;
                  }
                  node2 = node2.return;
                }
                if (hostSubtreeRoot === node2) {
                  hostSubtreeRoot = null;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal = ref(instanceToUse);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node2 = fiber;
            siblings: while (true) {
              while (node2.sibling === null) {
                if (node2.return === null || isHostParent(node2.return)) {
                  return null;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
              while (node2.tag !== HostComponent && node2.tag !== HostText && node2.tag !== DehydratedFragment) {
                if (node2.flags & Placement) {
                  continue siblings;
                }
                if (node2.child === null || node2.tag === HostPortal) {
                  continue siblings;
                } else {
                  node2.child.return = node2;
                  node2 = node2.child;
                }
              }
              if (!(node2.flags & Placement)) {
                return node2.stateNode;
              }
            }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              // eslint-disable-next-line-no-fallthrough
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node2, before, parent) {
            var tag = node2.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node2.stateNode;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal) ;
            else {
              var child = node2.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node2, before, parent) {
            var tag = node2.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node2.stateNode;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal) ;
            else {
              var child = node2.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root2, returnFiber, deletedFiber) {
            {
              var parent = returnFiber;
              findParent: while (parent !== null) {
                switch (parent.tag) {
                  case HostComponent: {
                    hostParent = parent.stateNode;
                    hostParentIsContainer = false;
                    break findParent;
                  }
                  case HostRoot: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                  case HostPortal: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                }
                parent = parent.return;
              }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
            var child = parent.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              // eslint-disable-next-line-no-fallthrough
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect4 = firstEffect;
                      do {
                        var _effect = effect4, destroy = _effect.destroy, tag = _effect.tag;
                        if (destroy !== void 0) {
                          if ((tag & Insertion7) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          } else if ((tag & Layout) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect4 = effect4.next;
                      } while (effect4 !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (
                  // TODO: Remove this dead flag
                  deletedFiber.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          function commitSuspenseCallback(finishedWork) {
            var newState = finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function commitMutationEffects(root2, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root2);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i = 0; i < deletions.length; i++) {
                var childToDelete = deletions[i];
                try {
                  commitDeletionEffects(root2, parentFiber, childToDelete);
                } catch (error2) {
                  captureCommitPhaseError(childToDelete, parentFiber, error2);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root2);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion7 | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion7 | HasEffect, finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                      resetTextContent(instance);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                      var type = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current2 !== null ? current2.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current2 !== null) {
                      var prevRootState = current2.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root2.containerInfo);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden = newState !== null;
                  offscreenInstance.isHidden = isHidden;
                  if (isHidden) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current2 !== null && current2.memoizedState !== null;
                if (
                  // TODO: Remove this dead flag
                  finishedWork.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  _offscreenInstance.isHidden = _isHidden;
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          function commitLayoutEffects(finishedWork, root2, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root2, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                } else {
                  var current2 = fiber.alternate;
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(
                      child,
                      // New root; bubble back up to here and stop.
                      root2,
                      committedLanes
                    );
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current2 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root2, current2, fiber, committedLanes);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden = fiber.memoizedState !== null;
                  if (isHidden) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i = 0; i < deletions.length; i++) {
                    var fiberToDelete = deletions[i];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (current2.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                  recordPassiveEffectDuration(current2);
                } else {
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                }
              }
            }
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            COMPONENT_TYPE = symbolFor("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor("selector.role");
            TEST_NAME_TYPE = symbolFor("selector.test_id");
            TEXT_TYPE = symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = (
            /*             */
            0
          );
          var BatchedContext = (
            /*               */
            1
          );
          var RenderContext = (
            /*                */
            2
          );
          var CommitContext = (
            /*                */
            4
          );
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition = ReactCurrentBatchConfig$3.transition;
                if (!transition._updatedFibers) {
                  transition._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error("useInsertionEffect must not schedule updates.");
              }
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root2, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root2, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root2 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root2, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root2, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
            var current2 = root2.current;
            current2.lanes = lane;
            markRootUpdated(root2, lane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
          }
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            return (
              // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
              // decided not to enable it.
              (executionContext & RenderContext) !== NoContext
            );
          }
          function ensureRootIsScheduled(root2, currentTime) {
            var existingCallbackNode = root2.callbackNode;
            markStarvedLanesAsExpired(root2, currentTime);
            var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root2.callbackNode = null;
              root2.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root2.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
            // Scheduler task, rather than an `act` task, cancel it and re-scheduled
            // on the `act` queue.
            !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root2.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask(function() {
                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
            }
            root2.callbackPriority = newCallbackPriority;
            root2.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root2, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root2.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root2.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root2, NoLanes);
                markRootSuspended$1(root2, lanes);
                ensureRootIsScheduled(root2, now());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root2, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root2, lanes);
                var finishedWork = root2.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root2, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root2, NoLanes);
                    markRootSuspended$1(root2, lanes);
                    ensureRootIsScheduled(root2, now());
                    throw _fatalError;
                  }
                }
                root2.finishedWork = finishedWork;
                root2.finishedLanes = lanes;
                finishConcurrentRender(root2, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root2, now());
            if (root2.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root2);
            }
            return null;
          }
          function recoverFromConcurrentError(root2, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root2)) {
              var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root2.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root2, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
            }
          }
          function finishConcurrentRender(root2, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              // Flow knows about invariant, so it complains if I add a break
              // statement, but eslint doesn't know about invariant, so it complains
              // if I do. eslint-disable-next-line no-fallthrough
              case RootErrored: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root2, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root2.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root2, suspendedLanes);
                      break;
                    }
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node2 = finishedWork;
            while (true) {
              if (node2.flags & StoreConsistency) {
                var updateQueue = node2.updateQueue;
                if (updateQueue !== null) {
                  var checks = updateQueue.stores;
                  if (checks !== null) {
                    for (var i = 0; i < checks.length; i++) {
                      var check = checks[i];
                      var getSnapshot = check.getSnapshot;
                      var renderedValue = check.value;
                      try {
                        if (!objectIs(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error2) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node2.child;
              if (node2.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node2;
                node2 = child;
                continue;
              }
              if (node2 === finishedWork) {
                return true;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === finishedWork) {
                  return true;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root2, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root2, suspendedLanes);
          }
          function performSyncWorkOnRoot(root2) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root2, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root2, now());
              return null;
            }
            var exitStatus = renderRootSync(root2, lanes);
            if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root2.current.alternate;
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root2, now());
            return null;
          }
          function flushRoot(root2, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root2, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root2, now());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn2, a) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn2(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn2, a, b, c, d) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn2(a, b, c, d);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync3(fn2) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn2) {
                return fn2();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root2, lanes) {
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            var timeoutHandle = root2.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root2.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current2 = interruptedWork.alternate;
                unwindInterruptedWork(current2, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root2;
            var rootWorkInProgress = createWorkInProgress(root2.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError(root2, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error2) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error2];
            } else {
              workInProgressRootConcurrentErrors.push(error2);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next2;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next2 === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next2;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next2 = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next2 = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next2 = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next2 !== null) {
                  workInProgress = next2;
                  return;
                }
              } else {
                var _next = unwindWork(current2, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root2, recoverableErrors, transitions) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root2.finishedWork;
            var lanes = root2.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            if (finishedWork === root2.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root2.callbackNode = null;
            root2.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root2, remainingLanes);
            if (root2 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root2, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root2, finishedWork, lanes);
              resetAfterCommit(root2.containerInfo);
              root2.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root2, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root2.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root2;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root2.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root2.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root2.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root2, now());
            if (recoverableErrors !== null) {
              var onRecoverableError = root2.onRecoverableError;
              for (var i = 0; i < recoverableErrors.length; i++) {
                var recoverableError = recoverableErrors[i];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                  componentStack,
                  digest
                });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root2.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root2 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root2;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root2 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root2.current);
            commitPassiveMountEffects(root2, root2.current, lanes, transitions);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i = 0; i < profilerEffects.length; i++) {
                var _fiber = profilerEffects[i];
                commitPassiveEffectDurations(root2, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root2.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root2 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root2;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root2);
            {
              var stateNode = root2.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root2 = enqueueUpdate(rootFiber, update, SyncLane);
            var eventTime = requestEventTime();
            if (root2 !== null) {
              markRootUpdated(root2, SyncLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root2 = enqueueUpdate(fiber, update, SyncLane);
                  var eventTime = requestEventTime();
                  if (root2 !== null) {
                    markRootUpdated(root2, SyncLane, eventTime);
                    ensureRootIsScheduled(root2, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root2, wakeable, pingedLanes) {
            var pingCache = root2.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root2, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root2);
            if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root2, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root2 !== null) {
              markRootUpdated(root2, retryLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current2 = firstChild;
              var subtreeRoot = null;
              while (current2 !== null) {
                var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                  current2 = current2.child;
                } else {
                  if ((current2.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current2);
                  }
                  if (current2.sibling !== null) {
                    current2 = current2.sibling;
                  } else {
                    current2 = subtreeRoot = current2.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current2, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root2, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root2.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root2, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
            {
              if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root2, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync3(function() {
                scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root2, element) {
            {
              if (root2.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync3(function() {
                updateContainer(element, root2, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (_root !== null) {
                  scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
                }
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root2, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node2 = fiber;
              while (true) {
                switch (node2.tag) {
                  case HostComponent:
                    hostInstances.add(node2.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node2.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node2.stateNode.containerInfo);
                    return;
                }
                if (node2.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node2 = node2.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node2 = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node2.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node2.stateNode);
                } else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === fiber) {
                  return foundHostInstances;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === fiber) {
                    return foundHostInstances;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component) {
            if (typeof Component === "function") {
              return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
            } else if (Component !== void 0 && Component !== null) {
              var $$typeof = Component.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current2.flags & StaticMask;
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode;
              if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                {
                  mode |= StrictEffectsMode;
                }
              }
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag: switch (type) {
                case REACT_FRAGMENT_TYPE:
                  return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                case REACT_STRICT_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= StrictLegacyMode;
                  if ((mode & ConcurrentMode) !== NoMode) {
                    mode |= StrictEffectsMode;
                  }
                  break;
                case REACT_PROFILER_TYPE:
                  return createFiberFromProfiler(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_TYPE:
                  return createFiberFromSuspense(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_LIST_TYPE:
                  return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                case REACT_OFFSCREEN_TYPE:
                  return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                case REACT_LEGACY_HIDDEN_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_SCOPE_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_CACHE_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_TRACING_MARKER_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_DEBUG_TRACING_MODE_TYPE:
                // eslint-disable-next-line no-fallthrough
                default: {
                  if (typeof type === "object" && type !== null) {
                    switch (type.$$typeof) {
                      case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                      case REACT_CONTEXT_TYPE:
                        fiberTag = ContextConsumer;
                        break getTag;
                      case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        {
                          resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        }
                        break getTag;
                      case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                      case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                    }
                  }
                  var info = "";
                  {
                    if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                      info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                    }
                    var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                    if (ownerName) {
                      info += "\n\nCheck the render method of `" + ownerName + "`.";
                    }
                  }
                  throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                }
              }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment22, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = {
              isHidden: false
            };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              // Used by persistent updates
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.subtreeFlags = source.subtreeFlags;
            target.deletions = source.deletions;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root2.current = uninitializedFiber;
            uninitializedFiber.stateNode = root2;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate2,
                cache: null,
                // not enabled yet
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root2;
          }
          var ReactVersion = "18.3.1";
          function createPortal2(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key);
            }
            return {
              // This tag allow us to uniquely identify this as a React Portal
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component = fiber.type;
              if (isContextProvider(Component)) {
                return processChildContext(fiber, Component, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys = Object.keys(component).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = true;
            var root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root2.context = getContextForSubtree(null);
            var current2 = root2.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current2);
            var update = createUpdate(eventTime, lane);
            update.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current2, update, lane);
            scheduleInitialHydrationOnRoot(root2, lane, eventTime);
            return root2;
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(current$1, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, current$1, lane, eventTime);
              entangleTransitions(root2, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot: {
                var root2 = fiber.stateNode;
                if (isRootDehydrated(root2)) {
                  var lanes = getHighestPriorityPendingLanes(root2);
                  flushRoot(root2, lanes);
                }
                break;
              }
              case SuspenseComponent: {
                flushSync3(function() {
                  var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root3 !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
                  }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
              }
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = SelectiveHydrationLane;
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = requestUpdateLane(fiber);
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index2) {
              var key = path[index2];
              var updated = isArray(obj) ? obj.slice() : assign2({}, obj);
              if (index2 + 1 === path.length) {
                if (isArray(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
              var oldKey = oldPath[index2];
              var updated = isArray(obj) ? obj.slice() : assign2({}, obj);
              if (index2 + 1 === oldPath.length) {
                var newKey = newPath[index2];
                updated[newKey] = updated[oldKey];
                if (isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  // $FlowFixMe number or string is fine here
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index2 + 1
                );
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i = 0; i < newPath.length - 1; i++) {
                  if (oldPath[i] !== newPath[i]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index2, value) {
              if (index2 >= path.length) {
                return value;
              }
              var key = path[index2];
              var updated = isArray(obj) ? obj.slice() : assign2({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path, value) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            scheduleUpdate = function(fiber) {
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              // React Refresh
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              // Enables DevTools to append owner stacks to error messages in DEV mode.
              getCurrentFiber: getCurrentFiberForDevTools,
              // Enables DevTools to detect reconciler version rather than renderer version
              // which may not match for third party renderers.
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? (
            // In modern browsers, reportError will dispatch an error event,
            // emulating an uncaught JavaScript error.
            reportError
          ) : function(error2) {
            console["error"](error2);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
            var root2 = this._internalRoot;
            if (root2 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container = root2.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root2.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root2, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root2 = this._internalRoot;
            if (root2 !== null) {
              this._internalRoot = null;
              var container = root2.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync3(function() {
                updateContainer(null, root2, null, null);
              });
              unmarkContainerAsRoot(container);
            }
          };
          function createRoot(container, options2) {
            if (!isValidContainer(container)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options2 !== null && options2 !== void 0) {
              {
                if (options2.hydrate) {
                  warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                    error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
              if (options2.transitionCallbacks !== void 0) {
                transitionCallbacks = options2.transitionCallbacks;
              }
            }
            var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root2);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target) {
            if (target) {
              queueExplicitHydrationTarget(target);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot(container, initialChildren, options2) {
            if (!isValidContainer(container)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            {
              if (initialChildren === void 0) {
                error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options2 != null ? options2 : null;
            var mutableSources = options2 != null && options2.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options2 !== null && options2 !== void 0) {
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
            }
            var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            listenToAllSupportedEvents(container);
            if (mutableSources) {
              for (var i = 0; i < mutableSources.length; i++) {
                var mutableSource = mutableSources[i];
                registerMutableSourceForHydration(root2, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root2);
          }
          function isValidContainer(node2) {
            return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node2) {
            return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || node2.nodeType === COMMENT_NODE && node2.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container) {
            {
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container)) {
                if (container._reactRootContainer) {
                  error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              var root2 = createHydrationContainer(
                initialChildren,
                callback,
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = root2;
              markContainerAsRoot(root2.current, container);
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync3();
              return root2;
            } else {
              var rootSibling;
              while (rootSibling = container.lastChild) {
                container.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(_root);
                  _originalCallback.call(instance);
                };
              }
              var _root = createContainer(
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = _root;
              markContainerAsRoot(_root.current, container);
              var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync3(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
              });
              return _root;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container._reactRootContainer;
            var root2;
            if (!maybeRoot) {
              root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
            } else {
              root2 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              updateContainer(children, root2, parentComponent, callback);
            }
            return getPublicRootInstance(root2);
          }
          var didWarnAboutFindDOMNode = false;
          function findDOMNode(componentOrElement) {
            {
              if (!didWarnAboutFindDOMNode) {
                didWarnAboutFindDOMNode = true;
                error("findDOMNode is deprecated and will be removed in the next major release. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node");
              }
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            {
              error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render(element, container, callback) {
            {
              error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            {
              error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          var didWarnAboutUnmountComponentAtNode = false;
          function unmountComponentAtNode(container) {
            {
              if (!didWarnAboutUnmountComponentAtNode) {
                didWarnAboutUnmountComponentAtNode = true;
                error("unmountComponentAtNode is deprecated and will be removed in the next major release. Switch to the createRoot API. Learn more: https://reactjs.org/link/switch-to-createroot");
              }
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync3(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority);
          {
            if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
            Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
            Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync3);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal2(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          var Internals = {
            usingClientEntryPoint: false,
            // Keep in sync with ReactTestUtils.js.
            // This is an array for better minification.
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot(container, options2);
          }
          function hydrateRoot$1(container, initialChildren, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot(container, initialChildren, options2);
          }
          function flushSync$1(fn2) {
            {
              if (isAlreadyRendering()) {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync3(fn2);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.createRoot = createRoot$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync$1;
          exports.hydrate = hydrate;
          exports.hydrateRoot = hydrateRoot$1;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/@mui/system/useThemeWithoutDefault.js
  var require_useThemeWithoutDefault = __commonJS({
    "node_modules/@mui/system/useThemeWithoutDefault.js"(exports) {
      "use strict";
      "use client";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React242 = _interopRequireWildcard(require_react());
      var _styledEngine = require_node();
      function _getRequireWildcardCache(e) {
        if ("function" != typeof WeakMap) return null;
        var r2 = /* @__PURE__ */ new WeakMap(), t = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(e2) {
          return e2 ? t : r2;
        })(e);
      }
      function _interopRequireWildcard(e, r2) {
        if (!r2 && e && e.__esModule) return e;
        if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };
        var t = _getRequireWildcardCache(r2);
        if (t && t.has(e)) return t.get(e);
        var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
          var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
          i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
        }
        return n.default = e, t && t.set(e, n), n;
      }
      function isObjectEmpty3(obj) {
        return Object.keys(obj).length === 0;
      }
      function useTheme7(defaultTheme4 = null) {
        const contextTheme = React242.useContext(_styledEngine.ThemeContext);
        return !contextTheme || isObjectEmpty3(contextTheme) ? defaultTheme4 : contextTheme;
      }
      var _default = exports.default = useTheme7;
    }
  });

  // node_modules/@mui/x-data-grid/index.js
  var index_exports = {};
  __export(index_exports, {
    DATA_GRID_PROPS_DEFAULT_VALUES: () => DATA_GRID_PROPS_DEFAULT_VALUES,
    DEFAULT_GRID_COL_TYPE_KEY: () => DEFAULT_GRID_COL_TYPE_KEY,
    DataGrid: () => DataGrid2,
    GRID_ACTIONS_COLUMN_TYPE: () => GRID_ACTIONS_COLUMN_TYPE,
    GRID_ACTIONS_COL_DEF: () => GRID_ACTIONS_COL_DEF,
    GRID_BOOLEAN_COL_DEF: () => GRID_BOOLEAN_COL_DEF,
    GRID_CHECKBOX_SELECTION_COL_DEF: () => GRID_CHECKBOX_SELECTION_COL_DEF,
    GRID_CHECKBOX_SELECTION_FIELD: () => GRID_CHECKBOX_SELECTION_FIELD,
    GRID_COLUMN_MENU_SLOTS: () => GRID_COLUMN_MENU_SLOTS,
    GRID_COLUMN_MENU_SLOT_PROPS: () => GRID_COLUMN_MENU_SLOT_PROPS,
    GRID_DATETIME_COL_DEF: () => GRID_DATETIME_COL_DEF,
    GRID_DATE_COL_DEF: () => GRID_DATE_COL_DEF,
    GRID_DEFAULT_LOCALE_TEXT: () => GRID_DEFAULT_LOCALE_TEXT,
    GRID_EXPERIMENTAL_ENABLED: () => GRID_EXPERIMENTAL_ENABLED,
    GRID_NUMERIC_COL_DEF: () => GRID_NUMERIC_COL_DEF,
    GRID_ROOT_GROUP_ID: () => GRID_ROOT_GROUP_ID,
    GRID_SINGLE_SELECT_COL_DEF: () => GRID_SINGLE_SELECT_COL_DEF,
    GRID_STRING_COL_DEF: () => GRID_STRING_COL_DEF,
    GridActionsCell: () => GridActionsCell,
    GridActionsCellItem: () => GridActionsCellItem,
    GridAddIcon: () => GridAddIcon,
    GridApiContext: () => GridApiContext,
    GridArrowDownwardIcon: () => GridArrowDownwardIcon,
    GridArrowUpwardIcon: () => GridArrowUpwardIcon,
    GridBody: () => GridBody,
    GridBooleanCell: () => GridBooleanCell,
    GridCell: () => GridCell,
    GridCellCheckboxForwardRef: () => GridCellCheckboxForwardRef,
    GridCellCheckboxRenderer: () => GridCellCheckboxRenderer2,
    GridCellEditStartReasons: () => GridCellEditStartReasons,
    GridCellEditStopReasons: () => GridCellEditStopReasons,
    GridCellModes: () => GridCellModes,
    GridCheckCircleIcon: () => GridCheckCircleIcon,
    GridCheckIcon: () => GridCheckIcon,
    GridClearIcon: () => GridClearIcon,
    GridCloseIcon: () => GridCloseIcon,
    GridColumnHeaderFilterIconButton: () => GridColumnHeaderFilterIconButton,
    GridColumnHeaderItem: () => GridColumnHeaderItem,
    GridColumnHeaderMenu: () => GridColumnHeaderMenu,
    GridColumnHeaderSeparator: () => GridColumnHeaderSeparator,
    GridColumnHeaderSeparatorSides: () => GridColumnHeaderSeparatorSides,
    GridColumnHeaderSortIcon: () => GridColumnHeaderSortIcon,
    GridColumnHeaderTitle: () => GridColumnHeaderTitle,
    GridColumnHeaders: () => MemoizedGridColumnHeaders,
    GridColumnIcon: () => GridColumnIcon,
    GridColumnMenu: () => GridColumnMenu,
    GridColumnMenuColumnsItem: () => GridColumnMenuColumnsItem,
    GridColumnMenuContainer: () => GridColumnMenuContainer,
    GridColumnMenuFilterItem: () => GridColumnMenuFilterItem,
    GridColumnMenuHideItem: () => GridColumnMenuHideItem,
    GridColumnMenuManageItem: () => GridColumnMenuManageItem,
    GridColumnMenuSortItem: () => GridColumnMenuSortItem,
    GridColumnsPanel: () => GridColumnsPanel,
    GridContextProvider: () => GridContextProvider,
    GridCsvExportMenuItem: () => GridCsvExportMenuItem,
    GridDeleteForeverIcon: () => GridDeleteForeverIcon,
    GridDeleteIcon: () => GridDeleteIcon,
    GridDragIcon: () => GridDragIcon,
    GridEditBooleanCell: () => GridEditBooleanCell,
    GridEditDateCell: () => GridEditDateCell,
    GridEditInputCell: () => GridEditInputCell,
    GridEditModes: () => GridEditModes,
    GridEditSingleSelectCell: () => GridEditSingleSelectCell,
    GridExpandMoreIcon: () => GridExpandMoreIcon,
    GridFilterAltIcon: () => GridFilterAltIcon,
    GridFilterForm: () => GridFilterForm,
    GridFilterInputBoolean: () => GridFilterInputBoolean,
    GridFilterInputDate: () => GridFilterInputDate,
    GridFilterInputMultipleSingleSelect: () => GridFilterInputMultipleSingleSelect,
    GridFilterInputMultipleValue: () => GridFilterInputMultipleValue,
    GridFilterInputSingleSelect: () => GridFilterInputSingleSelect,
    GridFilterInputValue: () => GridFilterInputValue,
    GridFilterListIcon: () => GridFilterListIcon,
    GridFilterPanel: () => GridFilterPanel,
    GridFooter: () => GridFooter,
    GridFooterContainer: () => GridFooterContainer,
    GridFooterPlaceholder: () => GridFooterPlaceholder,
    GridGenericColumnMenu: () => GridGenericColumnMenu,
    GridHeader: () => GridHeader,
    GridHeaderCheckbox: () => GridHeaderCheckbox,
    GridKeyboardArrowRight: () => GridKeyboardArrowRight,
    GridLoadIcon: () => GridLoadIcon,
    GridLoadingOverlay: () => GridLoadingOverlay,
    GridLogicOperator: () => GridLogicOperator,
    GridMenu: () => GridMenu,
    GridMenuIcon: () => GridMenuIcon,
    GridMoreVertIcon: () => GridMoreVertIcon,
    GridNoRowsOverlay: () => GridNoRowsOverlay,
    GridOverlay: () => GridOverlay,
    GridOverlays: () => GridOverlays,
    GridPagination: () => GridPagination,
    GridPanel: () => GridPanel,
    GridPanelContent: () => GridPanelContent,
    GridPanelFooter: () => GridPanelFooter,
    GridPanelHeader: () => GridPanelHeader,
    GridPanelWrapper: () => GridPanelWrapper,
    GridPreferencePanelsValue: () => GridPreferencePanelsValue,
    GridPreferencesPanel: () => GridPreferencesPanel,
    GridPrintExportMenuItem: () => GridPrintExportMenuItem,
    GridRemoveIcon: () => GridRemoveIcon,
    GridRoot: () => GridRoot,
    GridRow: () => MemoizedGridRow,
    GridRowCount: () => GridRowCount,
    GridRowEditStartReasons: () => GridRowEditStartReasons,
    GridRowEditStopReasons: () => GridRowEditStopReasons,
    GridRowModes: () => GridRowModes,
    GridSaveAltIcon: () => GridSaveAltIcon,
    GridSearchIcon: () => GridSearchIcon,
    GridSelectedRowCount: () => GridSelectedRowCount,
    GridSeparatorIcon: () => GridSeparatorIcon,
    GridSignature: () => GridSignature,
    GridSkeletonCell: () => GridSkeletonCell,
    GridTableRowsIcon: () => GridTableRowsIcon,
    GridToolbar: () => GridToolbar,
    GridToolbarColumnsButton: () => GridToolbarColumnsButton,
    GridToolbarContainer: () => GridToolbarContainer,
    GridToolbarDensitySelector: () => GridToolbarDensitySelector,
    GridToolbarExport: () => GridToolbarExport,
    GridToolbarExportContainer: () => GridToolbarExportContainer,
    GridToolbarFilterButton: () => GridToolbarFilterButton,
    GridToolbarQuickFilter: () => GridToolbarQuickFilter,
    GridTripleDotsVerticalIcon: () => GridTripleDotsVerticalIcon,
    GridViewColumnIcon: () => GridViewColumnIcon,
    GridViewHeadlineIcon: () => GridViewHeadlineIcon,
    GridViewStreamIcon: () => GridViewStreamIcon,
    GridVisibilityOffIcon: () => GridVisibilityOffIcon,
    SUBMIT_FILTER_DATE_STROKE_TIME: () => SUBMIT_FILTER_DATE_STROKE_TIME,
    SUBMIT_FILTER_STROKE_TIME: () => SUBMIT_FILTER_STROKE_TIME,
    arSD: () => arSD2,
    beBY: () => beBY,
    bgBG: () => bgBG2,
    checkGridRowIdIsValid: () => checkGridRowIdIsValid,
    createUseGridApiEventHandler: () => createUseGridApiEventHandler,
    csCZ: () => csCZ2,
    daDK: () => daDK2,
    deDE: () => deDE2,
    elGR: () => elGR2,
    enUS: () => enUS2,
    esES: () => esES2,
    faIR: () => faIR2,
    fiFI: () => fiFI2,
    frFR: () => frFR2,
    getDataGridUtilityClass: () => getDataGridUtilityClass,
    getDefaultGridFilterModel: () => getDefaultGridFilterModel,
    getGridBooleanOperators: () => getGridBooleanOperators,
    getGridDateOperators: () => getGridDateOperators,
    getGridDefaultColumnTypes: () => getGridDefaultColumnTypes,
    getGridNumericOperators: () => getGridNumericOperators,
    getGridNumericQuickFilterFn: () => getGridNumericQuickFilterFn,
    getGridSingleSelectOperators: () => getGridSingleSelectOperators,
    getGridStringOperators: () => getGridStringOperators,
    getGridStringQuickFilterFn: () => getGridStringQuickFilterFn,
    gridClasses: () => gridClasses,
    gridColumnDefinitionsSelector: () => gridColumnDefinitionsSelector,
    gridColumnFieldsSelector: () => gridColumnFieldsSelector,
    gridColumnGroupingSelector: () => gridColumnGroupingSelector,
    gridColumnGroupsHeaderMaxDepthSelector: () => gridColumnGroupsHeaderMaxDepthSelector,
    gridColumnGroupsHeaderStructureSelector: () => gridColumnGroupsHeaderStructureSelector,
    gridColumnGroupsLookupSelector: () => gridColumnGroupsLookupSelector,
    gridColumnGroupsUnwrappedModelSelector: () => gridColumnGroupsUnwrappedModelSelector,
    gridColumnLookupSelector: () => gridColumnLookupSelector,
    gridColumnMenuSelector: () => gridColumnMenuSelector,
    gridColumnPositionsSelector: () => gridColumnPositionsSelector,
    gridColumnVisibilityModelSelector: () => gridColumnVisibilityModelSelector,
    gridColumnsTotalWidthSelector: () => gridColumnsTotalWidthSelector,
    gridDataRowIdsSelector: () => gridDataRowIdsSelector,
    gridDateComparator: () => gridDateComparator,
    gridDateFormatter: () => gridDateFormatter,
    gridDateTimeFormatter: () => gridDateTimeFormatter,
    gridDensityFactorSelector: () => gridDensityFactorSelector,
    gridDensitySelector: () => gridDensitySelector,
    gridDensityValueSelector: () => gridDensityValueSelector,
    gridExpandedRowCountSelector: () => gridExpandedRowCountSelector,
    gridExpandedSortedRowEntriesSelector: () => gridExpandedSortedRowEntriesSelector,
    gridExpandedSortedRowIdsSelector: () => gridExpandedSortedRowIdsSelector,
    gridFilterActiveItemsLookupSelector: () => gridFilterActiveItemsLookupSelector,
    gridFilterActiveItemsSelector: () => gridFilterActiveItemsSelector,
    gridFilterModelSelector: () => gridFilterModelSelector,
    gridFilterableColumnDefinitionsSelector: () => gridFilterableColumnDefinitionsSelector,
    gridFilterableColumnLookupSelector: () => gridFilterableColumnLookupSelector,
    gridFilteredDescendantCountLookupSelector: () => gridFilteredDescendantCountLookupSelector,
    gridFilteredRowsLookupSelector: () => gridFilteredRowsLookupSelector,
    gridFilteredSortedRowEntriesSelector: () => gridFilteredSortedRowEntriesSelector,
    gridFilteredSortedRowIdsSelector: () => gridFilteredSortedRowIdsSelector,
    gridFilteredSortedTopLevelRowEntriesSelector: () => gridFilteredSortedTopLevelRowEntriesSelector,
    gridFilteredTopLevelRowCountSelector: () => gridFilteredTopLevelRowCountSelector,
    gridFocusCellSelector: () => gridFocusCellSelector,
    gridFocusColumnHeaderSelector: () => gridFocusColumnHeaderSelector,
    gridFocusStateSelector: () => gridFocusStateSelector,
    gridNumberComparator: () => gridNumberComparator,
    gridPageCountSelector: () => gridPageCountSelector,
    gridPageSelector: () => gridPageSelector,
    gridPageSizeSelector: () => gridPageSizeSelector,
    gridPaginatedVisibleSortedGridRowEntriesSelector: () => gridPaginatedVisibleSortedGridRowEntriesSelector,
    gridPaginatedVisibleSortedGridRowIdsSelector: () => gridPaginatedVisibleSortedGridRowIdsSelector,
    gridPaginationModelSelector: () => gridPaginationModelSelector,
    gridPaginationRowCountSelector: () => gridPaginationRowCountSelector,
    gridPaginationRowRangeSelector: () => gridPaginationRowRangeSelector,
    gridPaginationSelector: () => gridPaginationSelector,
    gridPanelClasses: () => gridPanelClasses,
    gridPreferencePanelStateSelector: () => gridPreferencePanelStateSelector,
    gridQuickFilterValuesSelector: () => gridQuickFilterValuesSelector,
    gridRowCountSelector: () => gridRowCountSelector,
    gridRowGroupingNameSelector: () => gridRowGroupingNameSelector,
    gridRowMaximumTreeDepthSelector: () => gridRowMaximumTreeDepthSelector,
    gridRowSelectionStateSelector: () => gridRowSelectionStateSelector,
    gridRowTreeDepthsSelector: () => gridRowTreeDepthsSelector,
    gridRowTreeSelector: () => gridRowTreeSelector,
    gridRowsDataRowIdToIdLookupSelector: () => gridRowsDataRowIdToIdLookupSelector,
    gridRowsLoadingSelector: () => gridRowsLoadingSelector,
    gridRowsLookupSelector: () => gridRowsLookupSelector,
    gridRowsMetaSelector: () => gridRowsMetaSelector,
    gridSortColumnLookupSelector: () => gridSortColumnLookupSelector,
    gridSortModelSelector: () => gridSortModelSelector,
    gridSortedRowEntriesSelector: () => gridSortedRowEntriesSelector,
    gridSortedRowIdsSelector: () => gridSortedRowIdsSelector,
    gridStringOrNumberComparator: () => gridStringOrNumberComparator,
    gridTabIndexCellSelector: () => gridTabIndexCellSelector,
    gridTabIndexColumnHeaderSelector: () => gridTabIndexColumnHeaderSelector,
    gridTabIndexStateSelector: () => gridTabIndexStateSelector,
    gridTopLevelRowCountSelector: () => gridTopLevelRowCountSelector,
    gridVirtualizationColumnEnabledSelector: () => gridVirtualizationColumnEnabledSelector,
    gridVirtualizationEnabledSelector: () => gridVirtualizationEnabledSelector,
    gridVirtualizationSelector: () => gridVirtualizationSelector,
    gridVisibleColumnDefinitionsSelector: () => gridVisibleColumnDefinitionsSelector,
    gridVisibleColumnFieldsSelector: () => gridVisibleColumnFieldsSelector,
    gridVisibleRowsLookupSelector: () => gridVisibleRowsLookupSelector,
    heIL: () => heIL2,
    hrHR: () => hrHR2,
    huHU: () => huHU2,
    isLeaf: () => isLeaf,
    itIT: () => itIT2,
    jaJP: () => jaJP2,
    koKR: () => koKR2,
    nbNO: () => nbNO2,
    nlNL: () => nlNL2,
    plPL: () => plPL2,
    ptBR: () => ptBR2,
    ptPT: () => ptPT2,
    renderActionsCell: () => renderActionsCell,
    renderBooleanCell: () => renderBooleanCell,
    renderEditBooleanCell: () => renderEditBooleanCell,
    renderEditDateCell: () => renderEditDateCell,
    renderEditInputCell: () => renderEditInputCell,
    renderEditSingleSelectCell: () => renderEditSingleSelectCell,
    roRO: () => roRO2,
    ruRU: () => ruRU2,
    selectedGridRowsCountSelector: () => selectedGridRowsCountSelector,
    selectedGridRowsSelector: () => selectedGridRowsSelector,
    selectedIdsLookupSelector: () => selectedIdsLookupSelector,
    skSK: () => skSK2,
    svSE: () => svSE2,
    trTR: () => trTR2,
    ukUA: () => ukUA2,
    unstable_gridFocusColumnGroupHeaderSelector: () => unstable_gridFocusColumnGroupHeaderSelector,
    unstable_gridFocusColumnHeaderFilterSelector: () => unstable_gridFocusColumnHeaderFilterSelector,
    unstable_gridHeaderFilteringEditFieldSelector: () => unstable_gridHeaderFilteringEditFieldSelector,
    unstable_gridHeaderFilteringMenuSelector: () => unstable_gridHeaderFilteringMenuSelector,
    unstable_gridHeaderFilteringStateSelector: () => unstable_gridHeaderFilteringStateSelector,
    unstable_gridTabIndexColumnGroupHeaderSelector: () => unstable_gridTabIndexColumnGroupHeaderSelector,
    unstable_gridTabIndexColumnHeaderFilterSelector: () => unstable_gridTabIndexColumnHeaderFilterSelector,
    unstable_resetCleanupTracking: () => unstable_resetCleanupTracking,
    urPK: () => urPK,
    useFirstRender: () => useFirstRender,
    useGridApiContext: () => useGridApiContext,
    useGridApiEventHandler: () => useGridApiEventHandler,
    useGridApiMethod: () => useGridApiMethod,
    useGridApiOptionHandler: () => useGridApiOptionHandler,
    useGridApiRef: () => useGridApiRef,
    useGridLogger: () => useGridLogger,
    useGridNativeEventListener: () => useGridNativeEventListener,
    useGridRootProps: () => useGridRootProps,
    useGridSelector: () => useGridSelector,
    useGridVirtualization: () => useGridVirtualization,
    viVN: () => viVN2,
    virtualizationStateInitializer: () => virtualizationStateInitializer,
    zhCN: () => zhCN2,
    zhHK: () => zhHK2,
    zhTW: () => zhTW2
  });

  // node_modules/@mui/x-data-grid/hooks/utils/useGridApiContext.js
  var React2 = __toESM(require_react());

  // node_modules/@mui/x-data-grid/components/GridApiContext.js
  var React = __toESM(require_react());
  var GridApiContext = /* @__PURE__ */ React.createContext(void 0);
  if (true) {
    GridApiContext.displayName = "GridApiContext";
  }

  // node_modules/@mui/x-data-grid/hooks/utils/useGridApiContext.js
  function useGridApiContext() {
    const apiRef = React2.useContext(GridApiContext);
    if (apiRef === void 0) {
      throw new Error(["MUI: Could not find the data grid context.", "It looks like you rendered your component outside of a DataGrid, DataGridPro or DataGridPremium parent component.", "This can also happen if you are bundling multiple versions of the data grid."].join("\n"));
    }
    return apiRef;
  }

  // node_modules/@mui/x-data-grid/hooks/utils/useGridApiRef.js
  var React3 = __toESM(require_react());
  var useGridApiRef = () => React3.useRef({});

  // node_modules/@mui/x-data-grid/hooks/utils/useGridRootProps.js
  var React5 = __toESM(require_react());

  // node_modules/@mui/x-data-grid/context/GridRootPropsContext.js
  var React4 = __toESM(require_react());
  var GridRootPropsContext = /* @__PURE__ */ React4.createContext(void 0);
  if (true) {
    GridRootPropsContext.displayName = "GridRootPropsContext";
  }

  // node_modules/@mui/x-data-grid/hooks/utils/useGridRootProps.js
  var useGridRootProps = () => {
    const contextValue = React5.useContext(GridRootPropsContext);
    if (!contextValue) {
      throw new Error("MUI: useGridRootProps should only be used inside the DataGrid, DataGridPro or DataGridPremium component.");
    }
    return contextValue;
  };

  // node_modules/@mui/x-data-grid/DataGrid/DataGrid.js
  init_extends();
  var React241 = __toESM(require_react());
  var import_prop_types128 = __toESM(require_prop_types());

  // node_modules/@mui/utils/esm/chainPropTypes/chainPropTypes.js
  function chainPropTypes(propType1, propType2) {
    if (false) {
      return () => null;
    }
    return function validate(...args) {
      return propType1(...args) || propType2(...args);
    };
  }

  // node_modules/@mui/utils/esm/elementAcceptingRef/elementAcceptingRef.js
  var import_prop_types = __toESM(require_prop_types());
  function isClassComponent(elementType) {
    const {
      prototype = {}
    } = elementType;
    return Boolean(prototype.isReactComponent);
  }
  function acceptingRef(props, propName, componentName, location, propFullName) {
    const element = props[propName];
    const safePropName = propFullName || propName;
    if (element == null || // When server-side rendering React doesn't warn either.
    // This is not an accurate check for SSR.
    // This is only in place for Emotion compat.
    // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
    typeof window === "undefined") {
      return null;
    }
    let warningHint;
    const elementType = element.type;
    if (typeof elementType === "function" && !isClassComponent(elementType)) {
      warningHint = "Did you accidentally use a plain function component for an element instead?";
    }
    if (warningHint !== void 0) {
      return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. Expected an element that can hold a ref. ${warningHint} For more information see https://mui.com/r/caveat-with-refs-guide`);
    }
    return null;
  }
  var elementAcceptingRef = chainPropTypes(import_prop_types.default.element, acceptingRef);
  elementAcceptingRef.isRequired = chainPropTypes(import_prop_types.default.element.isRequired, acceptingRef);
  var elementAcceptingRef_default = elementAcceptingRef;

  // node_modules/@mui/utils/esm/elementTypeAcceptingRef/elementTypeAcceptingRef.js
  var import_prop_types2 = __toESM(require_prop_types());
  function isClassComponent2(elementType) {
    const {
      prototype = {}
    } = elementType;
    return Boolean(prototype.isReactComponent);
  }
  function elementTypeAcceptingRef(props, propName, componentName, location, propFullName) {
    const propValue = props[propName];
    const safePropName = propFullName || propName;
    if (propValue == null || // When server-side rendering React doesn't warn either.
    // This is not an accurate check for SSR.
    // This is only in place for emotion compat.
    // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
    typeof window === "undefined") {
      return null;
    }
    let warningHint;
    if (typeof propValue === "function" && !isClassComponent2(propValue)) {
      warningHint = "Did you accidentally provide a plain function component instead?";
    }
    if (warningHint !== void 0) {
      return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. Expected an element type that can hold a ref. ${warningHint} For more information see https://mui.com/r/caveat-with-refs-guide`);
    }
    return null;
  }
  var elementTypeAcceptingRef_default = chainPropTypes(import_prop_types2.default.elementType, elementTypeAcceptingRef);

  // node_modules/@mui/utils/esm/exactProp/exactProp.js
  init_extends();
  var specialProperty = "exact-prop: \u200B";
  function exactProp(propTypes) {
    if (false) {
      return propTypes;
    }
    return _extends({}, propTypes, {
      [specialProperty]: (props) => {
        const unsupportedProps = Object.keys(props).filter((prop) => !propTypes.hasOwnProperty(prop));
        if (unsupportedProps.length > 0) {
          return new Error(`The following props are not supported: ${unsupportedProps.map((prop) => `\`${prop}\``).join(", ")}. Please remove them.`);
        }
        return null;
      }
    });
  }

  // node_modules/@mui/utils/esm/HTMLElementType/HTMLElementType.js
  function HTMLElementType(props, propName, componentName, location, propFullName) {
    if (false) {
      return null;
    }
    const propValue = props[propName];
    const safePropName = propFullName || propName;
    if (propValue == null) {
      return null;
    }
    if (propValue && propValue.nodeType !== 1) {
      return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. Expected an HTMLElement.`);
    }
    return null;
  }

  // node_modules/@mui/utils/esm/refType/refType.js
  var import_prop_types3 = __toESM(require_prop_types());
  var refType = import_prop_types3.default.oneOfType([import_prop_types3.default.func, import_prop_types3.default.object]);
  var refType_default = refType;

  // node_modules/@mui/utils/esm/capitalize/capitalize.js
  function capitalize(string) {
    if (typeof string !== "string") {
      throw new Error(true ? `MUI: \`capitalize(string)\` expects a string argument.` : (0, import_formatMuiErrorMessage.default)(7));
    }
    return string.charAt(0).toUpperCase() + string.slice(1);
  }

  // node_modules/@mui/utils/esm/createChainedFunction/createChainedFunction.js
  function createChainedFunction(...funcs) {
    return funcs.reduce((acc, func) => {
      if (func == null) {
        return acc;
      }
      return function chainedFunction(...args) {
        acc.apply(this, args);
        func.apply(this, args);
      };
    }, () => {
    });
  }

  // node_modules/@mui/utils/esm/debounce/debounce.js
  function debounce(func, wait = 166) {
    let timeout2;
    function debounced(...args) {
      const later = () => {
        func.apply(this, args);
      };
      clearTimeout(timeout2);
      timeout2 = setTimeout(later, wait);
    }
    debounced.clear = () => {
      clearTimeout(timeout2);
    };
    return debounced;
  }

  // node_modules/@mui/utils/esm/isMuiElement/isMuiElement.js
  var React6 = __toESM(require_react());
  function isMuiElement(element, muiNames) {
    var _muiName, _element$type;
    return /* @__PURE__ */ React6.isValidElement(element) && muiNames.indexOf(
      // For server components `muiName` is avaialble in element.type._payload.value.muiName
      // relevant info - https://github.com/facebook/react/blob/2807d781a08db8e9873687fccc25c0f12b4fb3d4/packages/react/src/ReactLazy.js#L45
      // eslint-disable-next-line no-underscore-dangle
      (_muiName = element.type.muiName) != null ? _muiName : (_element$type = element.type) == null || (_element$type = _element$type._payload) == null || (_element$type = _element$type.value) == null ? void 0 : _element$type.muiName
    ) !== -1;
  }

  // node_modules/@mui/utils/esm/ownerDocument/ownerDocument.js
  function ownerDocument(node2) {
    return node2 && node2.ownerDocument || document;
  }

  // node_modules/@mui/utils/esm/ownerWindow/ownerWindow.js
  function ownerWindow(node2) {
    const doc = ownerDocument(node2);
    return doc.defaultView || window;
  }

  // node_modules/@mui/utils/esm/setRef/setRef.js
  function setRef(ref, value) {
    if (typeof ref === "function") {
      ref(value);
    } else if (ref) {
      ref.current = value;
    }
  }

  // node_modules/@mui/utils/esm/useEnhancedEffect/useEnhancedEffect.js
  var React7 = __toESM(require_react());
  var useEnhancedEffect = typeof window !== "undefined" ? React7.useLayoutEffect : React7.useEffect;
  var useEnhancedEffect_default = useEnhancedEffect;

  // node_modules/@mui/utils/esm/useId/useId.js
  var React8 = __toESM(require_react());
  var globalId = 0;
  function useGlobalId(idOverride) {
    const [defaultId, setDefaultId] = React8.useState(idOverride);
    const id = idOverride || defaultId;
    React8.useEffect(() => {
      if (defaultId == null) {
        globalId += 1;
        setDefaultId(`mui-${globalId}`);
      }
    }, [defaultId]);
    return id;
  }
  var maybeReactUseId = React8["useId".toString()];
  function useId(idOverride) {
    if (maybeReactUseId !== void 0) {
      const reactId = maybeReactUseId();
      return idOverride != null ? idOverride : reactId;
    }
    return useGlobalId(idOverride);
  }

  // node_modules/@mui/utils/esm/unsupportedProp/unsupportedProp.js
  function unsupportedProp(props, propName, componentName, location, propFullName) {
    if (false) {
      return null;
    }
    const propFullNameSafe = propFullName || propName;
    if (typeof props[propName] !== "undefined") {
      return new Error(`The prop \`${propFullNameSafe}\` is not supported. Please remove it.`);
    }
    return null;
  }

  // node_modules/@mui/utils/esm/useControlled/useControlled.js
  var React9 = __toESM(require_react());
  function useControlled({
    controlled,
    default: defaultProp,
    name,
    state = "value"
  }) {
    const {
      current: isControlled
    } = React9.useRef(controlled !== void 0);
    const [valueState, setValue] = React9.useState(defaultProp);
    const value = isControlled ? controlled : valueState;
    if (true) {
      React9.useEffect(() => {
        if (isControlled !== (controlled !== void 0)) {
          console.error([`MUI: A component is changing the ${isControlled ? "" : "un"}controlled ${state} state of ${name} to be ${isControlled ? "un" : ""}controlled.`, "Elements should not switch from uncontrolled to controlled (or vice versa).", `Decide between using a controlled or uncontrolled ${name} element for the lifetime of the component.`, "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.", "More info: https://fb.me/react-controlled-components"].join("\n"));
        }
      }, [state, name, controlled]);
      const {
        current: defaultValue
      } = React9.useRef(defaultProp);
      React9.useEffect(() => {
        if (!isControlled && !Object.is(defaultValue, defaultProp)) {
          console.error([`MUI: A component is changing the default ${state} state of an uncontrolled ${name} after being initialized. To suppress this warning opt to use a controlled ${name}.`].join("\n"));
        }
      }, [JSON.stringify(defaultProp)]);
    }
    const setValueIfUncontrolled = React9.useCallback((newValue) => {
      if (!isControlled) {
        setValue(newValue);
      }
    }, []);
    return [value, setValueIfUncontrolled];
  }

  // node_modules/@mui/utils/esm/useEventCallback/useEventCallback.js
  var React10 = __toESM(require_react());
  function useEventCallback(fn2) {
    const ref = React10.useRef(fn2);
    useEnhancedEffect_default(() => {
      ref.current = fn2;
    });
    return React10.useRef((...args) => (
      // @ts-expect-error hide `this`
      (0, ref.current)(...args)
    )).current;
  }
  var useEventCallback_default = useEventCallback;

  // node_modules/@mui/utils/esm/useForkRef/useForkRef.js
  var React11 = __toESM(require_react());
  function useForkRef(...refs) {
    return React11.useMemo(() => {
      if (refs.every((ref) => ref == null)) {
        return null;
      }
      return (instance) => {
        refs.forEach((ref) => {
          setRef(ref, instance);
        });
      };
    }, refs);
  }

  // node_modules/@mui/utils/esm/useLazyRef/useLazyRef.js
  var React12 = __toESM(require_react());
  var UNINITIALIZED = {};
  function useLazyRef(init, initArg) {
    const ref = React12.useRef(UNINITIALIZED);
    if (ref.current === UNINITIALIZED) {
      ref.current = init(initArg);
    }
    return ref;
  }

  // node_modules/@mui/utils/esm/useOnMount/useOnMount.js
  var React13 = __toESM(require_react());
  var EMPTY = [];
  function useOnMount(fn2) {
    React13.useEffect(fn2, EMPTY);
  }

  // node_modules/@mui/utils/esm/useTimeout/useTimeout.js
  var Timeout = class _Timeout {
    constructor() {
      this.currentId = null;
      this.clear = () => {
        if (this.currentId !== null) {
          clearTimeout(this.currentId);
          this.currentId = null;
        }
      };
      this.disposeEffect = () => {
        return this.clear;
      };
    }
    static create() {
      return new _Timeout();
    }
    /**
     * Executes `fn` after `delay`, clearing any previously scheduled call.
     */
    start(delay, fn2) {
      this.clear();
      this.currentId = setTimeout(() => {
        this.currentId = null;
        fn2();
      }, delay);
    }
  };
  function useTimeout() {
    const timeout2 = useLazyRef(Timeout.create).current;
    useOnMount(timeout2.disposeEffect);
    return timeout2;
  }

  // node_modules/@mui/utils/esm/useIsFocusVisible/useIsFocusVisible.js
  var React14 = __toESM(require_react());
  var hadKeyboardEvent = true;
  var hadFocusVisibleRecently = false;
  var hadFocusVisibleRecentlyTimeout = new Timeout();
  var inputTypesWhitelist = {
    text: true,
    search: true,
    url: true,
    tel: true,
    email: true,
    password: true,
    number: true,
    date: true,
    month: true,
    week: true,
    time: true,
    datetime: true,
    "datetime-local": true
  };
  function focusTriggersKeyboardModality(node2) {
    const {
      type,
      tagName
    } = node2;
    if (tagName === "INPUT" && inputTypesWhitelist[type] && !node2.readOnly) {
      return true;
    }
    if (tagName === "TEXTAREA" && !node2.readOnly) {
      return true;
    }
    if (node2.isContentEditable) {
      return true;
    }
    return false;
  }
  function handleKeyDown(event) {
    if (event.metaKey || event.altKey || event.ctrlKey) {
      return;
    }
    hadKeyboardEvent = true;
  }
  function handlePointerDown() {
    hadKeyboardEvent = false;
  }
  function handleVisibilityChange() {
    if (this.visibilityState === "hidden") {
      if (hadFocusVisibleRecently) {
        hadKeyboardEvent = true;
      }
    }
  }
  function prepare(doc) {
    doc.addEventListener("keydown", handleKeyDown, true);
    doc.addEventListener("mousedown", handlePointerDown, true);
    doc.addEventListener("pointerdown", handlePointerDown, true);
    doc.addEventListener("touchstart", handlePointerDown, true);
    doc.addEventListener("visibilitychange", handleVisibilityChange, true);
  }
  function isFocusVisible(event) {
    const {
      target
    } = event;
    try {
      return target.matches(":focus-visible");
    } catch (error) {
    }
    return hadKeyboardEvent || focusTriggersKeyboardModality(target);
  }
  function useIsFocusVisible() {
    const ref = React14.useCallback((node2) => {
      if (node2 != null) {
        prepare(node2.ownerDocument);
      }
    }, []);
    const isFocusVisibleRef = React14.useRef(false);
    function handleBlurVisible() {
      if (isFocusVisibleRef.current) {
        hadFocusVisibleRecently = true;
        hadFocusVisibleRecentlyTimeout.start(100, () => {
          hadFocusVisibleRecently = false;
        });
        isFocusVisibleRef.current = false;
        return true;
      }
      return false;
    }
    function handleFocusVisible(event) {
      if (isFocusVisible(event)) {
        isFocusVisibleRef.current = true;
        return true;
      }
      return false;
    }
    return {
      isFocusVisibleRef,
      onFocus: handleFocusVisible,
      onBlur: handleBlurVisible,
      ref
    };
  }

  // node_modules/@mui/utils/esm/getScrollbarSize/getScrollbarSize.js
  function getScrollbarSize(doc) {
    const documentWidth = doc.documentElement.clientWidth;
    return Math.abs(window.innerWidth - documentWidth);
  }

  // node_modules/@mui/utils/esm/usePreviousProps/usePreviousProps.js
  var React15 = __toESM(require_react());
  var usePreviousProps = (value) => {
    const ref = React15.useRef({});
    React15.useEffect(() => {
      ref.current = value;
    });
    return ref.current;
  };
  var usePreviousProps_default = usePreviousProps;

  // node_modules/@mui/utils/esm/integerPropType/integerPropType.js
  function getTypeByValue(value) {
    const valueType = typeof value;
    switch (valueType) {
      case "number":
        if (Number.isNaN(value)) {
          return "NaN";
        }
        if (!Number.isFinite(value)) {
          return "Infinity";
        }
        if (value !== Math.floor(value)) {
          return "float";
        }
        return "number";
      case "object":
        if (value === null) {
          return "null";
        }
        return value.constructor.name;
      default:
        return valueType;
    }
  }
  function ponyfillIsInteger(x) {
    return typeof x === "number" && isFinite(x) && Math.floor(x) === x;
  }
  var isInteger = Number.isInteger || ponyfillIsInteger;
  function requiredInteger(props, propName, componentName, location) {
    const propValue = props[propName];
    if (propValue == null || !isInteger(propValue)) {
      const propType = getTypeByValue(propValue);
      return new RangeError(`Invalid ${location} \`${propName}\` of type \`${propType}\` supplied to \`${componentName}\`, expected \`integer\`.`);
    }
    return null;
  }
  function validator(props, propName, ...other) {
    const propValue = props[propName];
    if (propValue === void 0) {
      return null;
    }
    return requiredInteger(props, propName, ...other);
  }
  function validatorNoop() {
    return null;
  }
  validator.isRequired = requiredInteger;
  validatorNoop.isRequired = validatorNoop;
  var integerPropType_default = false ? validatorNoop : validator;

  // node_modules/@mui/utils/esm/resolveProps/resolveProps.js
  init_extends();
  function resolveProps(defaultProps2, props) {
    const output = _extends({}, props);
    Object.keys(defaultProps2).forEach((propName) => {
      if (propName.toString().match(/^(components|slots)$/)) {
        output[propName] = _extends({}, defaultProps2[propName], output[propName]);
      } else if (propName.toString().match(/^(componentsProps|slotProps)$/)) {
        const defaultSlotProps = defaultProps2[propName] || {};
        const slotProps = props[propName];
        output[propName] = {};
        if (!slotProps || !Object.keys(slotProps)) {
          output[propName] = defaultSlotProps;
        } else if (!defaultSlotProps || !Object.keys(defaultSlotProps)) {
          output[propName] = slotProps;
        } else {
          output[propName] = _extends({}, slotProps);
          Object.keys(defaultSlotProps).forEach((slotPropName) => {
            output[propName][slotPropName] = resolveProps(defaultSlotProps[slotPropName], slotProps[slotPropName]);
          });
        }
      } else if (output[propName] === void 0) {
        output[propName] = defaultProps2[propName];
      }
    });
    return output;
  }

  // node_modules/@mui/utils/esm/composeClasses/composeClasses.js
  function composeClasses(slots, getUtilityClass, classes = void 0) {
    const output = {};
    Object.keys(slots).forEach(
      // `Object.keys(slots)` can't be wider than `T` because we infer `T` from `slots`.
      // @ts-expect-error https://github.com/microsoft/TypeScript/pull/12253#issuecomment-263132208
      (slot) => {
        output[slot] = slots[slot].reduce((acc, key) => {
          if (key) {
            const utilityClass = getUtilityClass(key);
            if (utilityClass !== "") {
              acc.push(utilityClass);
            }
            if (classes && classes[key]) {
              acc.push(classes[key]);
            }
          }
          return acc;
        }, []).join(" ");
      }
    );
    return output;
  }

  // node_modules/@mui/utils/esm/ClassNameGenerator/ClassNameGenerator.js
  var defaultGenerator = (componentName) => componentName;
  var createClassNameGenerator = () => {
    let generate = defaultGenerator;
    return {
      configure(generator) {
        generate = generator;
      },
      generate(componentName) {
        return generate(componentName);
      },
      reset() {
        generate = defaultGenerator;
      }
    };
  };
  var ClassNameGenerator = createClassNameGenerator();
  var ClassNameGenerator_default = ClassNameGenerator;

  // node_modules/@mui/utils/esm/generateUtilityClass/generateUtilityClass.js
  var globalStateClasses = {
    active: "active",
    checked: "checked",
    completed: "completed",
    disabled: "disabled",
    error: "error",
    expanded: "expanded",
    focused: "focused",
    focusVisible: "focusVisible",
    open: "open",
    readOnly: "readOnly",
    required: "required",
    selected: "selected"
  };
  function generateUtilityClass(componentName, slot, globalStatePrefix = "Mui") {
    const globalStateClass = globalStateClasses[slot];
    return globalStateClass ? `${globalStatePrefix}-${globalStateClass}` : `${ClassNameGenerator_default.generate(componentName)}-${slot}`;
  }

  // node_modules/@mui/utils/esm/generateUtilityClasses/generateUtilityClasses.js
  function generateUtilityClasses(componentName, slots, globalStatePrefix = "Mui") {
    const result = {};
    slots.forEach((slot) => {
      result[slot] = generateUtilityClass(componentName, slot, globalStatePrefix);
    });
    return result;
  }

  // node_modules/@mui/utils/esm/useSlotProps/useSlotProps.js
  init_extends();

  // node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
  function _objectWithoutPropertiesLoose(r2, e) {
    if (null == r2) return {};
    var t = {};
    for (var n in r2) if ({}.hasOwnProperty.call(r2, n)) {
      if (-1 !== e.indexOf(n)) continue;
      t[n] = r2[n];
    }
    return t;
  }

  // node_modules/@mui/utils/esm/appendOwnerState/appendOwnerState.js
  init_extends();

  // node_modules/@mui/utils/esm/isHostComponent/isHostComponent.js
  function isHostComponent(element) {
    return typeof element === "string";
  }
  var isHostComponent_default = isHostComponent;

  // node_modules/@mui/utils/esm/appendOwnerState/appendOwnerState.js
  function appendOwnerState(elementType, otherProps, ownerState) {
    if (elementType === void 0 || isHostComponent_default(elementType)) {
      return otherProps;
    }
    return _extends({}, otherProps, {
      ownerState: _extends({}, otherProps.ownerState, ownerState)
    });
  }
  var appendOwnerState_default = appendOwnerState;

  // node_modules/@mui/utils/esm/mergeSlotProps/mergeSlotProps.js
  init_extends();

  // node_modules/clsx/dist/clsx.mjs
  function r(e) {
    var t, f, n = "";
    if ("string" == typeof e || "number" == typeof e) n += e;
    else if ("object" == typeof e) if (Array.isArray(e)) {
      var o = e.length;
      for (t = 0; t < o; t++) e[t] && (f = r(e[t])) && (n && (n += " "), n += f);
    } else for (f in e) e[f] && (n && (n += " "), n += f);
    return n;
  }
  function clsx() {
    for (var e, t, f = 0, n = "", o = arguments.length; f < o; f++) (e = arguments[f]) && (t = r(e)) && (n && (n += " "), n += t);
    return n;
  }
  var clsx_default = clsx;

  // node_modules/@mui/utils/esm/extractEventHandlers/extractEventHandlers.js
  function extractEventHandlers(object, excludeKeys = []) {
    if (object === void 0) {
      return {};
    }
    const result = {};
    Object.keys(object).filter((prop) => prop.match(/^on[A-Z]/) && typeof object[prop] === "function" && !excludeKeys.includes(prop)).forEach((prop) => {
      result[prop] = object[prop];
    });
    return result;
  }
  var extractEventHandlers_default = extractEventHandlers;

  // node_modules/@mui/utils/esm/omitEventHandlers/omitEventHandlers.js
  function omitEventHandlers(object) {
    if (object === void 0) {
      return {};
    }
    const result = {};
    Object.keys(object).filter((prop) => !(prop.match(/^on[A-Z]/) && typeof object[prop] === "function")).forEach((prop) => {
      result[prop] = object[prop];
    });
    return result;
  }
  var omitEventHandlers_default = omitEventHandlers;

  // node_modules/@mui/utils/esm/mergeSlotProps/mergeSlotProps.js
  function mergeSlotProps(parameters) {
    const {
      getSlotProps,
      additionalProps,
      externalSlotProps,
      externalForwardedProps,
      className
    } = parameters;
    if (!getSlotProps) {
      const joinedClasses2 = clsx_default(additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);
      const mergedStyle2 = _extends({}, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
      const props2 = _extends({}, additionalProps, externalForwardedProps, externalSlotProps);
      if (joinedClasses2.length > 0) {
        props2.className = joinedClasses2;
      }
      if (Object.keys(mergedStyle2).length > 0) {
        props2.style = mergedStyle2;
      }
      return {
        props: props2,
        internalRef: void 0
      };
    }
    const eventHandlers = extractEventHandlers_default(_extends({}, externalForwardedProps, externalSlotProps));
    const componentsPropsWithoutEventHandlers = omitEventHandlers_default(externalSlotProps);
    const otherPropsWithoutEventHandlers = omitEventHandlers_default(externalForwardedProps);
    const internalSlotProps = getSlotProps(eventHandlers);
    const joinedClasses = clsx_default(internalSlotProps == null ? void 0 : internalSlotProps.className, additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);
    const mergedStyle = _extends({}, internalSlotProps == null ? void 0 : internalSlotProps.style, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
    const props = _extends({}, internalSlotProps, additionalProps, otherPropsWithoutEventHandlers, componentsPropsWithoutEventHandlers);
    if (joinedClasses.length > 0) {
      props.className = joinedClasses;
    }
    if (Object.keys(mergedStyle).length > 0) {
      props.style = mergedStyle;
    }
    return {
      props,
      internalRef: internalSlotProps.ref
    };
  }
  var mergeSlotProps_default = mergeSlotProps;

  // node_modules/@mui/utils/esm/resolveComponentProps/resolveComponentProps.js
  function resolveComponentProps(componentProps, ownerState, slotState) {
    if (typeof componentProps === "function") {
      return componentProps(ownerState, slotState);
    }
    return componentProps;
  }
  var resolveComponentProps_default = resolveComponentProps;

  // node_modules/@mui/utils/esm/useSlotProps/useSlotProps.js
  var _excluded = ["elementType", "externalSlotProps", "ownerState", "skipResolvingSlotProps"];
  function useSlotProps(parameters) {
    var _parameters$additiona;
    const {
      elementType,
      externalSlotProps,
      ownerState,
      skipResolvingSlotProps = false
    } = parameters, rest = _objectWithoutPropertiesLoose(parameters, _excluded);
    const resolvedComponentsProps = skipResolvingSlotProps ? {} : resolveComponentProps_default(externalSlotProps, ownerState);
    const {
      props: mergedProps,
      internalRef
    } = mergeSlotProps_default(_extends({}, rest, {
      externalSlotProps: resolvedComponentsProps
    }));
    const ref = useForkRef(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_parameters$additiona = parameters.additionalProps) == null ? void 0 : _parameters$additiona.ref);
    const props = appendOwnerState_default(elementType, _extends({}, mergedProps, {
      ref
    }), ownerState);
    return props;
  }
  var useSlotProps_default = useSlotProps;

  // node_modules/@mui/utils/esm/getReactElementRef/getReactElementRef.js
  var React16 = __toESM(require_react());
  function getReactElementRef(element) {
    if (parseInt(React16.version, 10) >= 19) {
      var _element$props;
      return (element == null || (_element$props = element.props) == null ? void 0 : _element$props.ref) || null;
    }
    return (element == null ? void 0 : element.ref) || null;
  }

  // node_modules/@mui/x-data-grid/components/base/GridBody.js
  init_extends();
  var React32 = __toESM(require_react());
  var import_prop_types9 = __toESM(require_prop_types());

  // node_modules/@mui/x-data-grid/hooks/utils/useGridPrivateApiContext.js
  var React17 = __toESM(require_react());
  var GridPrivateApiContext = /* @__PURE__ */ React17.createContext(void 0);
  if (true) {
    GridPrivateApiContext.displayName = "GridPrivateApiContext";
  }
  function useGridPrivateApiContext() {
    const privateApiRef = React17.useContext(GridPrivateApiContext);
    if (privateApiRef === void 0) {
      throw new Error(["MUI: Could not find the data grid private context.", "It looks like you rendered your component outside of a DataGrid, DataGridPro or DataGridPremium parent component.", "This can also happen if you are bundling multiple versions of the data grid."].join("\n"));
    }
    return privateApiRef;
  }

  // node_modules/@mui/x-data-grid/hooks/utils/useGridSelector.js
  var React20 = __toESM(require_react());

  // node_modules/@mui/x-data-grid/hooks/utils/useLazyRef.js
  var React18 = __toESM(require_react());
  var UNINITIALIZED2 = {};
  function useLazyRef2(init, initArg) {
    const ref = React18.useRef(UNINITIALIZED2);
    if (ref.current === UNINITIALIZED2) {
      ref.current = init(initArg);
    }
    return ref;
  }

  // node_modules/@mui/x-data-grid/hooks/utils/useOnMount.js
  var React19 = __toESM(require_react());
  var EMPTY2 = [];
  function useOnMount2(fn2) {
    React19.useEffect(fn2, EMPTY2);
  }

  // node_modules/@mui/x-data-grid/utils/warning.js
  var buildWarning = (message, gravity = "warning") => {
    let alreadyWarned = false;
    const cleanMessage = Array.isArray(message) ? message.join("\n") : message;
    return () => {
      if (!alreadyWarned) {
        alreadyWarned = true;
        if (gravity === "error") {
          console.error(cleanMessage);
        } else {
          console.warn(cleanMessage);
        }
      }
    };
  };

  // node_modules/@mui/x-data-grid/utils/fastObjectShallowCompare.js
  var is = Object.is;
  function fastObjectShallowCompare(a, b) {
    if (a === b) {
      return true;
    }
    if (!(a instanceof Object) || !(b instanceof Object)) {
      return false;
    }
    let aLength = 0;
    let bLength = 0;
    for (const key in a) {
      aLength += 1;
      if (!is(a[key], b[key])) {
        return false;
      }
      if (!(key in b)) {
        return false;
      }
    }
    for (const _4 in b) {
      bLength += 1;
    }
    return aLength === bLength;
  }

  // node_modules/@mui/x-data-grid/hooks/utils/useGridSelector.js
  var stateNotInitializedWarning = buildWarning(["MUI: `useGridSelector` has been called before the initialization of the state.", "This hook can only be used inside the context of the grid."]);
  function isOutputSelector(selector) {
    return selector.acceptsApiRef;
  }
  function applySelector(apiRef, selector) {
    if (isOutputSelector(selector)) {
      return selector(apiRef);
    }
    return selector(apiRef.current.state);
  }
  var defaultCompare = Object.is;
  var objectShallowCompare = fastObjectShallowCompare;
  var createRefs = () => ({
    state: null,
    equals: null,
    selector: null
  });
  var useGridSelector = (apiRef, selector, equals = defaultCompare) => {
    if (true) {
      if (!apiRef.current.state) {
        stateNotInitializedWarning();
      }
    }
    const refs = useLazyRef2(createRefs);
    const didInit = refs.current.selector !== null;
    const [state, setState] = React20.useState(
      // We don't use an initialization function to avoid allocations
      didInit ? null : applySelector(apiRef, selector)
    );
    refs.current.state = state;
    refs.current.equals = equals;
    refs.current.selector = selector;
    useOnMount2(() => {
      return apiRef.current.store.subscribe(() => {
        const newState = applySelector(apiRef, refs.current.selector);
        if (!refs.current.equals(refs.current.state, newState)) {
          refs.current.state = newState;
          setState(newState);
        }
      });
    });
    return state;
  };

  // node_modules/@mui/x-data-grid/components/containers/GridMainContainer.js
  init_extends();
  var React31 = __toESM(require_react());

  // node_modules/@mui/system/esm/index.js
  var import_styled_engine5 = __toESM(require_node());

  // node_modules/@mui/system/esm/GlobalStyles/GlobalStyles.js
  var React26 = __toESM(require_react());
  var import_prop_types5 = __toESM(require_prop_types());
  var import_styled_engine2 = __toESM(require_node());

  // node_modules/@mui/system/esm/createTheme/createTheme.js
  init_extends();
  var import_deepmerge3 = __toESM(require_deepmerge2());

  // node_modules/@mui/system/esm/createTheme/createBreakpoints.js
  init_extends();
  var _excluded2 = ["values", "unit", "step"];
  var sortBreakpointsValues = (values3) => {
    const breakpointsAsArray = Object.keys(values3).map((key) => ({
      key,
      val: values3[key]
    })) || [];
    breakpointsAsArray.sort((breakpoint1, breakpoint2) => breakpoint1.val - breakpoint2.val);
    return breakpointsAsArray.reduce((acc, obj) => {
      return _extends({}, acc, {
        [obj.key]: obj.val
      });
    }, {});
  };
  function createBreakpoints(breakpoints) {
    const {
      // The breakpoint **start** at this value.
      // For instance with the first breakpoint xs: [xs, sm).
      values: values3 = {
        xs: 0,
        // phone
        sm: 600,
        // tablet
        md: 900,
        // small laptop
        lg: 1200,
        // desktop
        xl: 1536
        // large screen
      },
      unit = "px",
      step = 5
    } = breakpoints, other = _objectWithoutPropertiesLoose(breakpoints, _excluded2);
    const sortedValues = sortBreakpointsValues(values3);
    const keys = Object.keys(sortedValues);
    function up(key) {
      const value = typeof values3[key] === "number" ? values3[key] : key;
      return `@media (min-width:${value}${unit})`;
    }
    function down(key) {
      const value = typeof values3[key] === "number" ? values3[key] : key;
      return `@media (max-width:${value - step / 100}${unit})`;
    }
    function between(start2, end2) {
      const endIndex = keys.indexOf(end2);
      return `@media (min-width:${typeof values3[start2] === "number" ? values3[start2] : start2}${unit}) and (max-width:${(endIndex !== -1 && typeof values3[keys[endIndex]] === "number" ? values3[keys[endIndex]] : end2) - step / 100}${unit})`;
    }
    function only(key) {
      if (keys.indexOf(key) + 1 < keys.length) {
        return between(key, keys[keys.indexOf(key) + 1]);
      }
      return up(key);
    }
    function not(key) {
      const keyIndex = keys.indexOf(key);
      if (keyIndex === 0) {
        return up(keys[1]);
      }
      if (keyIndex === keys.length - 1) {
        return down(keys[keyIndex]);
      }
      return between(key, keys[keys.indexOf(key) + 1]).replace("@media", "@media not all and");
    }
    return _extends({
      keys,
      values: sortedValues,
      up,
      down,
      between,
      only,
      not,
      unit
    }, other);
  }

  // node_modules/@mui/system/esm/createTheme/shape.js
  var shape = {
    borderRadius: 4
  };
  var shape_default = shape;

  // node_modules/@mui/system/esm/responsivePropType.js
  var import_prop_types4 = __toESM(require_prop_types());
  var responsivePropType = true ? import_prop_types4.default.oneOfType([import_prop_types4.default.number, import_prop_types4.default.string, import_prop_types4.default.object, import_prop_types4.default.array]) : {};
  var responsivePropType_default = responsivePropType;

  // node_modules/@mui/system/esm/breakpoints.js
  init_extends();
  var import_deepmerge2 = __toESM(require_deepmerge2());

  // node_modules/@mui/system/esm/merge.js
  var import_deepmerge = __toESM(require_deepmerge2());
  function merge2(acc, item) {
    if (!item) {
      return acc;
    }
    return (0, import_deepmerge.default)(acc, item, {
      clone: false
      // No need to clone deep, it's way faster.
    });
  }
  var merge_default = merge2;

  // node_modules/@mui/system/esm/breakpoints.js
  var values = {
    xs: 0,
    // phone
    sm: 600,
    // tablet
    md: 900,
    // small laptop
    lg: 1200,
    // desktop
    xl: 1536
    // large screen
  };
  var defaultBreakpoints = {
    // Sorted ASC by size. That's important.
    // It can't be configured as it's used statically for propTypes.
    keys: ["xs", "sm", "md", "lg", "xl"],
    up: (key) => `@media (min-width:${values[key]}px)`
  };
  function handleBreakpoints(props, propValue, styleFromPropValue) {
    const theme = props.theme || {};
    if (Array.isArray(propValue)) {
      const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
      return propValue.reduce((acc, item, index) => {
        acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
        return acc;
      }, {});
    }
    if (typeof propValue === "object") {
      const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
      return Object.keys(propValue).reduce((acc, breakpoint) => {
        if (Object.keys(themeBreakpoints.values || values).indexOf(breakpoint) !== -1) {
          const mediaKey = themeBreakpoints.up(breakpoint);
          acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
        } else {
          const cssKey = breakpoint;
          acc[cssKey] = propValue[cssKey];
        }
        return acc;
      }, {});
    }
    const output = styleFromPropValue(propValue);
    return output;
  }
  function createEmptyBreakpointObject(breakpointsInput = {}) {
    var _breakpointsInput$key;
    const breakpointsInOrder = (_breakpointsInput$key = breakpointsInput.keys) == null ? void 0 : _breakpointsInput$key.reduce((acc, key) => {
      const breakpointStyleKey = breakpointsInput.up(key);
      acc[breakpointStyleKey] = {};
      return acc;
    }, {});
    return breakpointsInOrder || {};
  }
  function removeUnusedBreakpoints(breakpointKeys, style4) {
    return breakpointKeys.reduce((acc, key) => {
      const breakpointOutput = acc[key];
      const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;
      if (isBreakpointUnused) {
        delete acc[key];
      }
      return acc;
    }, style4);
  }
  function mergeBreakpointsInOrder(breakpointsInput, ...styles4) {
    const emptyBreakpoints = createEmptyBreakpointObject(breakpointsInput);
    const mergedOutput = [emptyBreakpoints, ...styles4].reduce((prev2, next2) => (0, import_deepmerge2.default)(prev2, next2), {});
    return removeUnusedBreakpoints(Object.keys(emptyBreakpoints), mergedOutput);
  }
  function computeBreakpointsBase(breakpointValues, themeBreakpoints) {
    if (typeof breakpointValues !== "object") {
      return {};
    }
    const base = {};
    const breakpointsKeys = Object.keys(themeBreakpoints);
    if (Array.isArray(breakpointValues)) {
      breakpointsKeys.forEach((breakpoint, i) => {
        if (i < breakpointValues.length) {
          base[breakpoint] = true;
        }
      });
    } else {
      breakpointsKeys.forEach((breakpoint) => {
        if (breakpointValues[breakpoint] != null) {
          base[breakpoint] = true;
        }
      });
    }
    return base;
  }
  function resolveBreakpointValues({
    values: breakpointValues,
    breakpoints: themeBreakpoints,
    base: customBase
  }) {
    const base = customBase || computeBreakpointsBase(breakpointValues, themeBreakpoints);
    const keys = Object.keys(base);
    if (keys.length === 0) {
      return breakpointValues;
    }
    let previous;
    return keys.reduce((acc, breakpoint, i) => {
      if (Array.isArray(breakpointValues)) {
        acc[breakpoint] = breakpointValues[i] != null ? breakpointValues[i] : breakpointValues[previous];
        previous = i;
      } else if (typeof breakpointValues === "object") {
        acc[breakpoint] = breakpointValues[breakpoint] != null ? breakpointValues[breakpoint] : breakpointValues[previous];
        previous = breakpoint;
      } else {
        acc[breakpoint] = breakpointValues;
      }
      return acc;
    }, {});
  }

  // node_modules/@mui/system/esm/style.js
  var import_capitalize3 = __toESM(require_capitalize2());
  function getPath(obj, path, checkVars = true) {
    if (!path || typeof path !== "string") {
      return null;
    }
    if (obj && obj.vars && checkVars) {
      const val = `vars.${path}`.split(".").reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);
      if (val != null) {
        return val;
      }
    }
    return path.split(".").reduce((acc, item) => {
      if (acc && acc[item] != null) {
        return acc[item];
      }
      return null;
    }, obj);
  }
  function getStyleValue(themeMapping, transform, propValueFinal, userValue = propValueFinal) {
    let value;
    if (typeof themeMapping === "function") {
      value = themeMapping(propValueFinal);
    } else if (Array.isArray(themeMapping)) {
      value = themeMapping[propValueFinal] || userValue;
    } else {
      value = getPath(themeMapping, propValueFinal) || userValue;
    }
    if (transform) {
      value = transform(value, userValue, themeMapping);
    }
    return value;
  }
  function style(options) {
    const {
      prop,
      cssProperty = options.prop,
      themeKey,
      transform
    } = options;
    const fn2 = (props) => {
      if (props[prop] == null) {
        return null;
      }
      const propValue = props[prop];
      const theme = props.theme;
      const themeMapping = getPath(theme, themeKey) || {};
      const styleFromPropValue = (propValueFinal) => {
        let value = getStyleValue(themeMapping, transform, propValueFinal);
        if (propValueFinal === value && typeof propValueFinal === "string") {
          value = getStyleValue(themeMapping, transform, `${prop}${propValueFinal === "default" ? "" : (0, import_capitalize3.default)(propValueFinal)}`, propValueFinal);
        }
        if (cssProperty === false) {
          return value;
        }
        return {
          [cssProperty]: value
        };
      };
      return handleBreakpoints(props, propValue, styleFromPropValue);
    };
    fn2.propTypes = true ? {
      [prop]: responsivePropType_default
    } : {};
    fn2.filterProps = [prop];
    return fn2;
  }
  var style_default = style;

  // node_modules/@mui/system/esm/memoize.js
  function memoize2(fn2) {
    const cache = {};
    return (arg) => {
      if (cache[arg] === void 0) {
        cache[arg] = fn2(arg);
      }
      return cache[arg];
    };
  }

  // node_modules/@mui/system/esm/spacing.js
  var properties = {
    m: "margin",
    p: "padding"
  };
  var directions = {
    t: "Top",
    r: "Right",
    b: "Bottom",
    l: "Left",
    x: ["Left", "Right"],
    y: ["Top", "Bottom"]
  };
  var aliases = {
    marginX: "mx",
    marginY: "my",
    paddingX: "px",
    paddingY: "py"
  };
  var getCssProperties = memoize2((prop) => {
    if (prop.length > 2) {
      if (aliases[prop]) {
        prop = aliases[prop];
      } else {
        return [prop];
      }
    }
    const [a, b] = prop.split("");
    const property = properties[a];
    const direction = directions[b] || "";
    return Array.isArray(direction) ? direction.map((dir) => property + dir) : [property + direction];
  });
  var marginKeys = ["m", "mt", "mr", "mb", "ml", "mx", "my", "margin", "marginTop", "marginRight", "marginBottom", "marginLeft", "marginX", "marginY", "marginInline", "marginInlineStart", "marginInlineEnd", "marginBlock", "marginBlockStart", "marginBlockEnd"];
  var paddingKeys = ["p", "pt", "pr", "pb", "pl", "px", "py", "padding", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "paddingX", "paddingY", "paddingInline", "paddingInlineStart", "paddingInlineEnd", "paddingBlock", "paddingBlockStart", "paddingBlockEnd"];
  var spacingKeys = [...marginKeys, ...paddingKeys];
  function createUnaryUnit(theme, themeKey, defaultValue, propName) {
    var _getPath;
    const themeSpacing = (_getPath = getPath(theme, themeKey, false)) != null ? _getPath : defaultValue;
    if (typeof themeSpacing === "number") {
      return (abs2) => {
        if (typeof abs2 === "string") {
          return abs2;
        }
        if (true) {
          if (typeof abs2 !== "number") {
            console.error(`MUI: Expected ${propName} argument to be a number or a string, got ${abs2}.`);
          }
        }
        return themeSpacing * abs2;
      };
    }
    if (Array.isArray(themeSpacing)) {
      return (abs2) => {
        if (typeof abs2 === "string") {
          return abs2;
        }
        if (true) {
          if (!Number.isInteger(abs2)) {
            console.error([`MUI: The \`theme.${themeKey}\` array type cannot be combined with non integer values.You should either use an integer value that can be used as index, or define the \`theme.${themeKey}\` as a number.`].join("\n"));
          } else if (abs2 > themeSpacing.length - 1) {
            console.error([`MUI: The value provided (${abs2}) overflows.`, `The supported values are: ${JSON.stringify(themeSpacing)}.`, `${abs2} > ${themeSpacing.length - 1}, you need to add the missing values.`].join("\n"));
          }
        }
        return themeSpacing[abs2];
      };
    }
    if (typeof themeSpacing === "function") {
      return themeSpacing;
    }
    if (true) {
      console.error([`MUI: The \`theme.${themeKey}\` value (${themeSpacing}) is invalid.`, "It should be a number, an array or a function."].join("\n"));
    }
    return () => void 0;
  }
  function createUnarySpacing(theme) {
    return createUnaryUnit(theme, "spacing", 8, "spacing");
  }
  function getValue(transformer, propValue) {
    if (typeof propValue === "string" || propValue == null) {
      return propValue;
    }
    const abs2 = Math.abs(propValue);
    const transformed = transformer(abs2);
    if (propValue >= 0) {
      return transformed;
    }
    if (typeof transformed === "number") {
      return -transformed;
    }
    return `-${transformed}`;
  }
  function getStyleFromPropValue(cssProperties, transformer) {
    return (propValue) => cssProperties.reduce((acc, cssProperty) => {
      acc[cssProperty] = getValue(transformer, propValue);
      return acc;
    }, {});
  }
  function resolveCssProperty(props, keys, prop, transformer) {
    if (keys.indexOf(prop) === -1) {
      return null;
    }
    const cssProperties = getCssProperties(prop);
    const styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
    const propValue = props[prop];
    return handleBreakpoints(props, propValue, styleFromPropValue);
  }
  function style2(props, keys) {
    const transformer = createUnarySpacing(props.theme);
    return Object.keys(props).map((prop) => resolveCssProperty(props, keys, prop, transformer)).reduce(merge_default, {});
  }
  function margin(props) {
    return style2(props, marginKeys);
  }
  margin.propTypes = true ? marginKeys.reduce((obj, key) => {
    obj[key] = responsivePropType_default;
    return obj;
  }, {}) : {};
  margin.filterProps = marginKeys;
  function padding(props) {
    return style2(props, paddingKeys);
  }
  padding.propTypes = true ? paddingKeys.reduce((obj, key) => {
    obj[key] = responsivePropType_default;
    return obj;
  }, {}) : {};
  padding.filterProps = paddingKeys;
  function spacing(props) {
    return style2(props, spacingKeys);
  }
  spacing.propTypes = true ? spacingKeys.reduce((obj, key) => {
    obj[key] = responsivePropType_default;
    return obj;
  }, {}) : {};
  spacing.filterProps = spacingKeys;

  // node_modules/@mui/system/esm/createTheme/createSpacing.js
  function createSpacing(spacingInput = 8) {
    if (spacingInput.mui) {
      return spacingInput;
    }
    const transform = createUnarySpacing({
      spacing: spacingInput
    });
    const spacing2 = (...argsInput) => {
      if (true) {
        if (!(argsInput.length <= 4)) {
          console.error(`MUI: Too many arguments provided, expected between 0 and 4, got ${argsInput.length}`);
        }
      }
      const args = argsInput.length === 0 ? [1] : argsInput;
      return args.map((argument) => {
        const output = transform(argument);
        return typeof output === "number" ? `${output}px` : output;
      }).join(" ");
    };
    spacing2.mui = true;
    return spacing2;
  }

  // node_modules/@mui/system/esm/styleFunctionSx/styleFunctionSx.js
  var import_capitalize4 = __toESM(require_capitalize2());

  // node_modules/@mui/system/esm/compose.js
  function compose(...styles4) {
    const handlers = styles4.reduce((acc, style4) => {
      style4.filterProps.forEach((prop) => {
        acc[prop] = style4;
      });
      return acc;
    }, {});
    const fn2 = (props) => {
      return Object.keys(props).reduce((acc, prop) => {
        if (handlers[prop]) {
          return merge_default(acc, handlers[prop](props));
        }
        return acc;
      }, {});
    };
    fn2.propTypes = true ? styles4.reduce((acc, style4) => Object.assign(acc, style4.propTypes), {}) : {};
    fn2.filterProps = styles4.reduce((acc, style4) => acc.concat(style4.filterProps), []);
    return fn2;
  }
  var compose_default = compose;

  // node_modules/@mui/system/esm/borders.js
  function borderTransform(value) {
    if (typeof value !== "number") {
      return value;
    }
    return `${value}px solid`;
  }
  function createBorderStyle(prop, transform) {
    return style_default({
      prop,
      themeKey: "borders",
      transform
    });
  }
  var border = createBorderStyle("border", borderTransform);
  var borderTop = createBorderStyle("borderTop", borderTransform);
  var borderRight = createBorderStyle("borderRight", borderTransform);
  var borderBottom = createBorderStyle("borderBottom", borderTransform);
  var borderLeft = createBorderStyle("borderLeft", borderTransform);
  var borderColor = createBorderStyle("borderColor");
  var borderTopColor = createBorderStyle("borderTopColor");
  var borderRightColor = createBorderStyle("borderRightColor");
  var borderBottomColor = createBorderStyle("borderBottomColor");
  var borderLeftColor = createBorderStyle("borderLeftColor");
  var outline = createBorderStyle("outline", borderTransform);
  var outlineColor = createBorderStyle("outlineColor");
  var borderRadius = (props) => {
    if (props.borderRadius !== void 0 && props.borderRadius !== null) {
      const transformer = createUnaryUnit(props.theme, "shape.borderRadius", 4, "borderRadius");
      const styleFromPropValue = (propValue) => ({
        borderRadius: getValue(transformer, propValue)
      });
      return handleBreakpoints(props, props.borderRadius, styleFromPropValue);
    }
    return null;
  };
  borderRadius.propTypes = true ? {
    borderRadius: responsivePropType_default
  } : {};
  borderRadius.filterProps = ["borderRadius"];
  var borders = compose_default(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderTopColor, borderRightColor, borderBottomColor, borderLeftColor, borderRadius, outline, outlineColor);

  // node_modules/@mui/system/esm/cssGrid.js
  var gap = (props) => {
    if (props.gap !== void 0 && props.gap !== null) {
      const transformer = createUnaryUnit(props.theme, "spacing", 8, "gap");
      const styleFromPropValue = (propValue) => ({
        gap: getValue(transformer, propValue)
      });
      return handleBreakpoints(props, props.gap, styleFromPropValue);
    }
    return null;
  };
  gap.propTypes = true ? {
    gap: responsivePropType_default
  } : {};
  gap.filterProps = ["gap"];
  var columnGap = (props) => {
    if (props.columnGap !== void 0 && props.columnGap !== null) {
      const transformer = createUnaryUnit(props.theme, "spacing", 8, "columnGap");
      const styleFromPropValue = (propValue) => ({
        columnGap: getValue(transformer, propValue)
      });
      return handleBreakpoints(props, props.columnGap, styleFromPropValue);
    }
    return null;
  };
  columnGap.propTypes = true ? {
    columnGap: responsivePropType_default
  } : {};
  columnGap.filterProps = ["columnGap"];
  var rowGap = (props) => {
    if (props.rowGap !== void 0 && props.rowGap !== null) {
      const transformer = createUnaryUnit(props.theme, "spacing", 8, "rowGap");
      const styleFromPropValue = (propValue) => ({
        rowGap: getValue(transformer, propValue)
      });
      return handleBreakpoints(props, props.rowGap, styleFromPropValue);
    }
    return null;
  };
  rowGap.propTypes = true ? {
    rowGap: responsivePropType_default
  } : {};
  rowGap.filterProps = ["rowGap"];
  var gridColumn = style_default({
    prop: "gridColumn"
  });
  var gridRow = style_default({
    prop: "gridRow"
  });
  var gridAutoFlow = style_default({
    prop: "gridAutoFlow"
  });
  var gridAutoColumns = style_default({
    prop: "gridAutoColumns"
  });
  var gridAutoRows = style_default({
    prop: "gridAutoRows"
  });
  var gridTemplateColumns = style_default({
    prop: "gridTemplateColumns"
  });
  var gridTemplateRows = style_default({
    prop: "gridTemplateRows"
  });
  var gridTemplateAreas = style_default({
    prop: "gridTemplateAreas"
  });
  var gridArea = style_default({
    prop: "gridArea"
  });
  var grid = compose_default(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);

  // node_modules/@mui/system/esm/palette.js
  function paletteTransform(value, userValue) {
    if (userValue === "grey") {
      return userValue;
    }
    return value;
  }
  var color = style_default({
    prop: "color",
    themeKey: "palette",
    transform: paletteTransform
  });
  var bgcolor = style_default({
    prop: "bgcolor",
    cssProperty: "backgroundColor",
    themeKey: "palette",
    transform: paletteTransform
  });
  var backgroundColor = style_default({
    prop: "backgroundColor",
    themeKey: "palette",
    transform: paletteTransform
  });
  var palette = compose_default(color, bgcolor, backgroundColor);

  // node_modules/@mui/system/esm/sizing.js
  function sizingTransform(value) {
    return value <= 1 && value !== 0 ? `${value * 100}%` : value;
  }
  var width = style_default({
    prop: "width",
    transform: sizingTransform
  });
  var maxWidth = (props) => {
    if (props.maxWidth !== void 0 && props.maxWidth !== null) {
      const styleFromPropValue = (propValue) => {
        var _props$theme, _props$theme2;
        const breakpoint = ((_props$theme = props.theme) == null || (_props$theme = _props$theme.breakpoints) == null || (_props$theme = _props$theme.values) == null ? void 0 : _props$theme[propValue]) || values[propValue];
        if (!breakpoint) {
          return {
            maxWidth: sizingTransform(propValue)
          };
        }
        if (((_props$theme2 = props.theme) == null || (_props$theme2 = _props$theme2.breakpoints) == null ? void 0 : _props$theme2.unit) !== "px") {
          return {
            maxWidth: `${breakpoint}${props.theme.breakpoints.unit}`
          };
        }
        return {
          maxWidth: breakpoint
        };
      };
      return handleBreakpoints(props, props.maxWidth, styleFromPropValue);
    }
    return null;
  };
  maxWidth.filterProps = ["maxWidth"];
  var minWidth = style_default({
    prop: "minWidth",
    transform: sizingTransform
  });
  var height = style_default({
    prop: "height",
    transform: sizingTransform
  });
  var maxHeight = style_default({
    prop: "maxHeight",
    transform: sizingTransform
  });
  var minHeight = style_default({
    prop: "minHeight",
    transform: sizingTransform
  });
  var sizeWidth = style_default({
    prop: "size",
    cssProperty: "width",
    transform: sizingTransform
  });
  var sizeHeight = style_default({
    prop: "size",
    cssProperty: "height",
    transform: sizingTransform
  });
  var boxSizing = style_default({
    prop: "boxSizing"
  });
  var sizing = compose_default(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);

  // node_modules/@mui/system/esm/styleFunctionSx/defaultSxConfig.js
  var defaultSxConfig = {
    // borders
    border: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderTop: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderRight: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderBottom: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderLeft: {
      themeKey: "borders",
      transform: borderTransform
    },
    borderColor: {
      themeKey: "palette"
    },
    borderTopColor: {
      themeKey: "palette"
    },
    borderRightColor: {
      themeKey: "palette"
    },
    borderBottomColor: {
      themeKey: "palette"
    },
    borderLeftColor: {
      themeKey: "palette"
    },
    outline: {
      themeKey: "borders",
      transform: borderTransform
    },
    outlineColor: {
      themeKey: "palette"
    },
    borderRadius: {
      themeKey: "shape.borderRadius",
      style: borderRadius
    },
    // palette
    color: {
      themeKey: "palette",
      transform: paletteTransform
    },
    bgcolor: {
      themeKey: "palette",
      cssProperty: "backgroundColor",
      transform: paletteTransform
    },
    backgroundColor: {
      themeKey: "palette",
      transform: paletteTransform
    },
    // spacing
    p: {
      style: padding
    },
    pt: {
      style: padding
    },
    pr: {
      style: padding
    },
    pb: {
      style: padding
    },
    pl: {
      style: padding
    },
    px: {
      style: padding
    },
    py: {
      style: padding
    },
    padding: {
      style: padding
    },
    paddingTop: {
      style: padding
    },
    paddingRight: {
      style: padding
    },
    paddingBottom: {
      style: padding
    },
    paddingLeft: {
      style: padding
    },
    paddingX: {
      style: padding
    },
    paddingY: {
      style: padding
    },
    paddingInline: {
      style: padding
    },
    paddingInlineStart: {
      style: padding
    },
    paddingInlineEnd: {
      style: padding
    },
    paddingBlock: {
      style: padding
    },
    paddingBlockStart: {
      style: padding
    },
    paddingBlockEnd: {
      style: padding
    },
    m: {
      style: margin
    },
    mt: {
      style: margin
    },
    mr: {
      style: margin
    },
    mb: {
      style: margin
    },
    ml: {
      style: margin
    },
    mx: {
      style: margin
    },
    my: {
      style: margin
    },
    margin: {
      style: margin
    },
    marginTop: {
      style: margin
    },
    marginRight: {
      style: margin
    },
    marginBottom: {
      style: margin
    },
    marginLeft: {
      style: margin
    },
    marginX: {
      style: margin
    },
    marginY: {
      style: margin
    },
    marginInline: {
      style: margin
    },
    marginInlineStart: {
      style: margin
    },
    marginInlineEnd: {
      style: margin
    },
    marginBlock: {
      style: margin
    },
    marginBlockStart: {
      style: margin
    },
    marginBlockEnd: {
      style: margin
    },
    // display
    displayPrint: {
      cssProperty: false,
      transform: (value) => ({
        "@media print": {
          display: value
        }
      })
    },
    display: {},
    overflow: {},
    textOverflow: {},
    visibility: {},
    whiteSpace: {},
    // flexbox
    flexBasis: {},
    flexDirection: {},
    flexWrap: {},
    justifyContent: {},
    alignItems: {},
    alignContent: {},
    order: {},
    flex: {},
    flexGrow: {},
    flexShrink: {},
    alignSelf: {},
    justifyItems: {},
    justifySelf: {},
    // grid
    gap: {
      style: gap
    },
    rowGap: {
      style: rowGap
    },
    columnGap: {
      style: columnGap
    },
    gridColumn: {},
    gridRow: {},
    gridAutoFlow: {},
    gridAutoColumns: {},
    gridAutoRows: {},
    gridTemplateColumns: {},
    gridTemplateRows: {},
    gridTemplateAreas: {},
    gridArea: {},
    // positions
    position: {},
    zIndex: {
      themeKey: "zIndex"
    },
    top: {},
    right: {},
    bottom: {},
    left: {},
    // shadows
    boxShadow: {
      themeKey: "shadows"
    },
    // sizing
    width: {
      transform: sizingTransform
    },
    maxWidth: {
      style: maxWidth
    },
    minWidth: {
      transform: sizingTransform
    },
    height: {
      transform: sizingTransform
    },
    maxHeight: {
      transform: sizingTransform
    },
    minHeight: {
      transform: sizingTransform
    },
    boxSizing: {},
    // typography
    fontFamily: {
      themeKey: "typography"
    },
    fontSize: {
      themeKey: "typography"
    },
    fontStyle: {
      themeKey: "typography"
    },
    fontWeight: {
      themeKey: "typography"
    },
    letterSpacing: {},
    textTransform: {},
    lineHeight: {},
    textAlign: {},
    typography: {
      cssProperty: false,
      themeKey: "typography"
    }
  };
  var defaultSxConfig_default = defaultSxConfig;

  // node_modules/@mui/system/esm/styleFunctionSx/styleFunctionSx.js
  function objectsHaveSameKeys(...objects) {
    const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);
    const union = new Set(allKeys);
    return objects.every((object) => union.size === Object.keys(object).length);
  }
  function callIfFn(maybeFn, arg) {
    return typeof maybeFn === "function" ? maybeFn(arg) : maybeFn;
  }
  function unstable_createStyleFunctionSx() {
    function getThemeValue(prop, val, theme, config) {
      const props = {
        [prop]: val,
        theme
      };
      const options = config[prop];
      if (!options) {
        return {
          [prop]: val
        };
      }
      const {
        cssProperty = prop,
        themeKey,
        transform,
        style: style4
      } = options;
      if (val == null) {
        return null;
      }
      if (themeKey === "typography" && val === "inherit") {
        return {
          [prop]: val
        };
      }
      const themeMapping = getPath(theme, themeKey) || {};
      if (style4) {
        return style4(props);
      }
      const styleFromPropValue = (propValueFinal) => {
        let value = getStyleValue(themeMapping, transform, propValueFinal);
        if (propValueFinal === value && typeof propValueFinal === "string") {
          value = getStyleValue(themeMapping, transform, `${prop}${propValueFinal === "default" ? "" : (0, import_capitalize4.default)(propValueFinal)}`, propValueFinal);
        }
        if (cssProperty === false) {
          return value;
        }
        return {
          [cssProperty]: value
        };
      };
      return handleBreakpoints(props, val, styleFromPropValue);
    }
    function styleFunctionSx3(props) {
      var _theme$unstable_sxCon;
      const {
        sx,
        theme = {},
        nested
      } = props || {};
      if (!sx) {
        return null;
      }
      const config = (_theme$unstable_sxCon = theme.unstable_sxConfig) != null ? _theme$unstable_sxCon : defaultSxConfig_default;
      function traverse(sxInput) {
        let sxObject = sxInput;
        if (typeof sxInput === "function") {
          sxObject = sxInput(theme);
        } else if (typeof sxInput !== "object") {
          return sxInput;
        }
        if (!sxObject) {
          return null;
        }
        const emptyBreakpoints = createEmptyBreakpointObject(theme.breakpoints);
        const breakpointsKeys = Object.keys(emptyBreakpoints);
        let css3 = emptyBreakpoints;
        Object.keys(sxObject).forEach((styleKey) => {
          const value = callIfFn(sxObject[styleKey], theme);
          if (value !== null && value !== void 0) {
            if (typeof value === "object") {
              if (config[styleKey]) {
                css3 = merge_default(css3, getThemeValue(styleKey, value, theme, config));
              } else {
                const breakpointsValues = handleBreakpoints({
                  theme
                }, value, (x) => ({
                  [styleKey]: x
                }));
                if (objectsHaveSameKeys(breakpointsValues, value)) {
                  css3[styleKey] = styleFunctionSx3({
                    sx: value,
                    theme,
                    nested: true
                  });
                } else {
                  css3 = merge_default(css3, breakpointsValues);
                }
              }
            } else {
              css3 = merge_default(css3, getThemeValue(styleKey, value, theme, config));
            }
          }
        });
        if (!nested && theme.modularCssLayers) {
          return {
            "@layer sx": removeUnusedBreakpoints(breakpointsKeys, css3)
          };
        }
        return removeUnusedBreakpoints(breakpointsKeys, css3);
      }
      return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);
    }
    return styleFunctionSx3;
  }
  var styleFunctionSx = unstable_createStyleFunctionSx();
  styleFunctionSx.filterProps = ["sx"];
  var styleFunctionSx_default = styleFunctionSx;

  // node_modules/@mui/system/esm/createTheme/applyStyles.js
  function applyStyles(key, styles4) {
    const theme = this;
    if (theme.vars && typeof theme.getColorSchemeSelector === "function") {
      const selector = theme.getColorSchemeSelector(key).replace(/(\[[^\]]+\])/, "*:where($1)");
      return {
        [selector]: styles4
      };
    }
    if (theme.palette.mode === key) {
      return styles4;
    }
    return {};
  }

  // node_modules/@mui/system/esm/createTheme/createTheme.js
  var _excluded3 = ["breakpoints", "palette", "spacing", "shape"];
  function createTheme(options = {}, ...args) {
    const {
      breakpoints: breakpointsInput = {},
      palette: paletteInput = {},
      spacing: spacingInput,
      shape: shapeInput = {}
    } = options, other = _objectWithoutPropertiesLoose(options, _excluded3);
    const breakpoints = createBreakpoints(breakpointsInput);
    const spacing2 = createSpacing(spacingInput);
    let muiTheme = (0, import_deepmerge3.default)({
      breakpoints,
      direction: "ltr",
      components: {},
      // Inject component definitions.
      palette: _extends({
        mode: "light"
      }, paletteInput),
      spacing: spacing2,
      shape: _extends({}, shape_default, shapeInput)
    }, other);
    muiTheme.applyStyles = applyStyles;
    muiTheme = args.reduce((acc, argument) => (0, import_deepmerge3.default)(acc, argument), muiTheme);
    muiTheme.unstable_sxConfig = _extends({}, defaultSxConfig_default, other == null ? void 0 : other.unstable_sxConfig);
    muiTheme.unstable_sx = function sx(props) {
      return styleFunctionSx_default({
        sx: props,
        theme: this
      });
    };
    return muiTheme;
  }
  var createTheme_default = createTheme;

  // node_modules/@mui/system/esm/useThemeWithoutDefault.js
  var React25 = __toESM(require_react());
  var import_styled_engine = __toESM(require_node());
  function isObjectEmpty(obj) {
    return Object.keys(obj).length === 0;
  }
  function useTheme3(defaultTheme4 = null) {
    const contextTheme = React25.useContext(import_styled_engine.ThemeContext);
    return !contextTheme || isObjectEmpty(contextTheme) ? defaultTheme4 : contextTheme;
  }
  var useThemeWithoutDefault_default = useTheme3;

  // node_modules/@mui/system/esm/useTheme.js
  var systemDefaultTheme = createTheme_default();
  function useTheme4(defaultTheme4 = systemDefaultTheme) {
    return useThemeWithoutDefault_default(defaultTheme4);
  }
  var useTheme_default = useTheme4;

  // node_modules/@mui/system/esm/GlobalStyles/GlobalStyles.js
  var import_jsx_runtime = __toESM(require_jsx_runtime());
  function wrapGlobalLayer(styles4) {
    const serialized = (0, import_styled_engine2.internal_serializeStyles)(styles4);
    if (styles4 !== serialized && serialized.styles) {
      if (!serialized.styles.match(/^@layer\s+[^{]*$/)) {
        serialized.styles = `@layer global{${serialized.styles}}`;
      }
      return serialized;
    }
    return styles4;
  }
  function GlobalStyles({
    styles: styles4,
    themeId,
    defaultTheme: defaultTheme4 = {}
  }) {
    const upperTheme = useTheme_default(defaultTheme4);
    const resolvedTheme = themeId ? upperTheme[themeId] || upperTheme : upperTheme;
    let globalStyles = typeof styles4 === "function" ? styles4(resolvedTheme) : styles4;
    if (resolvedTheme.modularCssLayers) {
      if (Array.isArray(globalStyles)) {
        globalStyles = globalStyles.map((styleArg) => {
          if (typeof styleArg === "function") {
            return wrapGlobalLayer(styleArg(resolvedTheme));
          }
          return wrapGlobalLayer(styleArg);
        });
      } else {
        globalStyles = wrapGlobalLayer(globalStyles);
      }
    }
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_styled_engine2.GlobalStyles, {
      styles: globalStyles
    });
  }
  true ? GlobalStyles.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * @ignore
     */
    defaultTheme: import_prop_types5.default.object,
    /**
     * @ignore
     */
    styles: import_prop_types5.default.oneOfType([import_prop_types5.default.array, import_prop_types5.default.func, import_prop_types5.default.number, import_prop_types5.default.object, import_prop_types5.default.string, import_prop_types5.default.bool]),
    /**
     * @ignore
     */
    themeId: import_prop_types5.default.string
  } : void 0;
  var GlobalStyles_default = GlobalStyles;

  // node_modules/@mui/system/esm/styleFunctionSx/extendSxProp.js
  init_extends();
  var import_deepmerge4 = __toESM(require_deepmerge2());
  var _excluded4 = ["sx"];
  var splitProps = (props) => {
    var _props$theme$unstable, _props$theme;
    const result = {
      systemProps: {},
      otherProps: {}
    };
    const config = (_props$theme$unstable = props == null || (_props$theme = props.theme) == null ? void 0 : _props$theme.unstable_sxConfig) != null ? _props$theme$unstable : defaultSxConfig_default;
    Object.keys(props).forEach((prop) => {
      if (config[prop]) {
        result.systemProps[prop] = props[prop];
      } else {
        result.otherProps[prop] = props[prop];
      }
    });
    return result;
  };
  function extendSxProp(props) {
    const {
      sx: inSx
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded4);
    const {
      systemProps,
      otherProps
    } = splitProps(other);
    let finalSx;
    if (Array.isArray(inSx)) {
      finalSx = [systemProps, ...inSx];
    } else if (typeof inSx === "function") {
      finalSx = (...args) => {
        const result = inSx(...args);
        if (!(0, import_deepmerge4.isPlainObject)(result)) {
          return systemProps;
        }
        return _extends({}, systemProps, result);
      };
    } else {
      finalSx = _extends({}, systemProps, inSx);
    }
    return _extends({}, otherProps, {
      sx: finalSx
    });
  }

  // node_modules/@mui/system/esm/createBox.js
  init_extends();
  var React27 = __toESM(require_react());
  var import_styled_engine3 = __toESM(require_node());
  var import_jsx_runtime2 = __toESM(require_jsx_runtime());
  var _excluded5 = ["className", "component"];
  function createBox(options = {}) {
    const {
      themeId,
      defaultTheme: defaultTheme4,
      defaultClassName = "MuiBox-root",
      generateClassName
    } = options;
    const BoxRoot = (0, import_styled_engine3.default)("div", {
      shouldForwardProp: (prop) => prop !== "theme" && prop !== "sx" && prop !== "as"
    })(styleFunctionSx_default);
    const Box2 = /* @__PURE__ */ React27.forwardRef(function Box3(inProps, ref) {
      const theme = useTheme_default(defaultTheme4);
      const _extendSxProp = extendSxProp(inProps), {
        className,
        component = "div"
      } = _extendSxProp, other = _objectWithoutPropertiesLoose(_extendSxProp, _excluded5);
      return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(BoxRoot, _extends({
        as: component,
        ref,
        className: clsx_default(className, generateClassName ? generateClassName(defaultClassName) : defaultClassName),
        theme: themeId ? theme[themeId] || theme : theme
      }, other));
    });
    return Box2;
  }

  // node_modules/@mui/system/esm/createStyled.js
  init_extends();
  var import_styled_engine4 = __toESM(require_node());
  var import_deepmerge5 = __toESM(require_deepmerge2());
  var import_capitalize5 = __toESM(require_capitalize2());
  var import_getDisplayName = __toESM(require_getDisplayName2());
  var _excluded6 = ["ownerState"];
  var _excluded22 = ["variants"];
  var _excluded32 = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"];
  function isEmpty(obj) {
    return Object.keys(obj).length === 0;
  }
  function isStringTag(tag) {
    return typeof tag === "string" && // 96 is one less than the char code
    // for "a" so this is checking that
    // it's a lowercase character
    tag.charCodeAt(0) > 96;
  }
  function shouldForwardProp(prop) {
    return prop !== "ownerState" && prop !== "theme" && prop !== "sx" && prop !== "as";
  }
  function shallowLayer(serialized, layerName) {
    if (layerName && serialized && typeof serialized === "object" && serialized.styles && !serialized.styles.startsWith("@layer")) {
      serialized.styles = `@layer ${layerName}{${String(serialized.styles)}}`;
    }
    return serialized;
  }
  var systemDefaultTheme2 = createTheme_default();
  var lowercaseFirstLetter = (string) => {
    if (!string) {
      return string;
    }
    return string.charAt(0).toLowerCase() + string.slice(1);
  };
  function resolveTheme({
    defaultTheme: defaultTheme4,
    theme,
    themeId
  }) {
    return isEmpty(theme) ? defaultTheme4 : theme[themeId] || theme;
  }
  function defaultOverridesResolver(slot) {
    if (!slot) {
      return null;
    }
    return (props, styles4) => styles4[slot];
  }
  function processStyleArg(callableStyle, _ref, layerName) {
    let {
      ownerState
    } = _ref, props = _objectWithoutPropertiesLoose(_ref, _excluded6);
    const resolvedStylesArg = typeof callableStyle === "function" ? callableStyle(_extends({
      ownerState
    }, props)) : callableStyle;
    if (Array.isArray(resolvedStylesArg)) {
      return resolvedStylesArg.flatMap((resolvedStyle) => processStyleArg(resolvedStyle, _extends({
        ownerState
      }, props), layerName));
    }
    if (!!resolvedStylesArg && typeof resolvedStylesArg === "object" && Array.isArray(resolvedStylesArg.variants)) {
      const {
        variants = []
      } = resolvedStylesArg, otherStyles = _objectWithoutPropertiesLoose(resolvedStylesArg, _excluded22);
      let result = otherStyles;
      variants.forEach((variant) => {
        let isMatch = true;
        if (typeof variant.props === "function") {
          isMatch = variant.props(_extends({
            ownerState
          }, props, ownerState));
        } else {
          Object.keys(variant.props).forEach((key) => {
            if ((ownerState == null ? void 0 : ownerState[key]) !== variant.props[key] && props[key] !== variant.props[key]) {
              isMatch = false;
            }
          });
        }
        if (isMatch) {
          if (!Array.isArray(result)) {
            result = [result];
          }
          const variantStyle = typeof variant.style === "function" ? variant.style(_extends({
            ownerState
          }, props, ownerState)) : variant.style;
          result.push(layerName ? shallowLayer((0, import_styled_engine4.internal_serializeStyles)(variantStyle), layerName) : variantStyle);
        }
      });
      return result;
    }
    return layerName ? shallowLayer((0, import_styled_engine4.internal_serializeStyles)(resolvedStylesArg), layerName) : resolvedStylesArg;
  }
  function createStyled3(input = {}) {
    const {
      themeId,
      defaultTheme: defaultTheme4 = systemDefaultTheme2,
      rootShouldForwardProp: rootShouldForwardProp2 = shouldForwardProp,
      slotShouldForwardProp: slotShouldForwardProp2 = shouldForwardProp
    } = input;
    const systemSx = (props) => {
      return styleFunctionSx_default(_extends({}, props, {
        theme: resolveTheme(_extends({}, props, {
          defaultTheme: defaultTheme4,
          themeId
        }))
      }));
    };
    systemSx.__mui_systemSx = true;
    return (tag, inputOptions = {}) => {
      (0, import_styled_engine4.internal_processStyles)(tag, (styles4) => styles4.filter((style4) => !(style4 != null && style4.__mui_systemSx)));
      const {
        name: componentName,
        slot: componentSlot,
        skipVariantsResolver: inputSkipVariantsResolver,
        skipSx: inputSkipSx,
        // TODO v6: remove `lowercaseFirstLetter()` in the next major release
        // For more details: https://github.com/mui/material-ui/pull/37908
        overridesResolver: overridesResolver3 = defaultOverridesResolver(lowercaseFirstLetter(componentSlot))
      } = inputOptions, options = _objectWithoutPropertiesLoose(inputOptions, _excluded32);
      const layerName = componentName && componentName.startsWith("Mui") || !!componentSlot ? "components" : "custom";
      const skipVariantsResolver = inputSkipVariantsResolver !== void 0 ? inputSkipVariantsResolver : (
        // TODO v6: remove `Root` in the next major release
        // For more details: https://github.com/mui/material-ui/pull/37908
        componentSlot && componentSlot !== "Root" && componentSlot !== "root" || false
      );
      const skipSx = inputSkipSx || false;
      let label;
      if (true) {
        if (componentName) {
          label = `${componentName}-${lowercaseFirstLetter(componentSlot || "Root")}`;
        }
      }
      let shouldForwardPropOption = shouldForwardProp;
      if (componentSlot === "Root" || componentSlot === "root") {
        shouldForwardPropOption = rootShouldForwardProp2;
      } else if (componentSlot) {
        shouldForwardPropOption = slotShouldForwardProp2;
      } else if (isStringTag(tag)) {
        shouldForwardPropOption = void 0;
      }
      const defaultStyledResolver = (0, import_styled_engine4.default)(tag, _extends({
        shouldForwardProp: shouldForwardPropOption,
        label
      }, options));
      const transformStyleArg = (stylesArg) => {
        if (typeof stylesArg === "function" && stylesArg.__emotion_real !== stylesArg || (0, import_deepmerge5.isPlainObject)(stylesArg)) {
          return (props) => {
            const theme = resolveTheme({
              theme: props.theme,
              defaultTheme: defaultTheme4,
              themeId
            });
            return processStyleArg(stylesArg, _extends({}, props, {
              theme
            }), theme.modularCssLayers ? layerName : void 0);
          };
        }
        return stylesArg;
      };
      const muiStyledResolver = (styleArg, ...expressions) => {
        let transformedStyleArg = transformStyleArg(styleArg);
        const expressionsWithDefaultTheme = expressions ? expressions.map(transformStyleArg) : [];
        if (componentName && overridesResolver3) {
          expressionsWithDefaultTheme.push((props) => {
            const theme = resolveTheme(_extends({}, props, {
              defaultTheme: defaultTheme4,
              themeId
            }));
            if (!theme.components || !theme.components[componentName] || !theme.components[componentName].styleOverrides) {
              return null;
            }
            const styleOverrides = theme.components[componentName].styleOverrides;
            const resolvedStyleOverrides = {};
            Object.entries(styleOverrides).forEach(([slotKey, slotStyle]) => {
              resolvedStyleOverrides[slotKey] = processStyleArg(slotStyle, _extends({}, props, {
                theme
              }), theme.modularCssLayers ? "theme" : void 0);
            });
            return overridesResolver3(props, resolvedStyleOverrides);
          });
        }
        if (componentName && !skipVariantsResolver) {
          expressionsWithDefaultTheme.push((props) => {
            var _theme$components;
            const theme = resolveTheme(_extends({}, props, {
              defaultTheme: defaultTheme4,
              themeId
            }));
            const themeVariants = theme == null || (_theme$components = theme.components) == null || (_theme$components = _theme$components[componentName]) == null ? void 0 : _theme$components.variants;
            return processStyleArg({
              variants: themeVariants
            }, _extends({}, props, {
              theme
            }), theme.modularCssLayers ? "theme" : void 0);
          });
        }
        if (!skipSx) {
          expressionsWithDefaultTheme.push(systemSx);
        }
        const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;
        if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
          const placeholders = new Array(numOfCustomFnsApplied).fill("");
          transformedStyleArg = [...styleArg, ...placeholders];
          transformedStyleArg.raw = [...styleArg.raw, ...placeholders];
        }
        const Component = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);
        if (true) {
          let displayName;
          if (componentName) {
            displayName = `${componentName}${(0, import_capitalize5.default)(componentSlot || "")}`;
          }
          if (displayName === void 0) {
            displayName = `Styled(${(0, import_getDisplayName.default)(tag)})`;
          }
          Component.displayName = displayName;
        }
        if (tag.muiName) {
          Component.muiName = tag.muiName;
        }
        return Component;
      };
      if (defaultStyledResolver.withConfig) {
        muiStyledResolver.withConfig = defaultStyledResolver.withConfig;
      }
      return muiStyledResolver;
    };
  }

  // node_modules/@mui/system/esm/styled.js
  var styled3 = createStyled3();
  var styled_default = styled3;

  // node_modules/@mui/system/esm/useThemeProps/getThemeProps.js
  function getThemeProps(params) {
    const {
      theme,
      name,
      props
    } = params;
    if (!theme || !theme.components || !theme.components[name] || !theme.components[name].defaultProps) {
      return props;
    }
    return resolveProps(theme.components[name].defaultProps, props);
  }

  // node_modules/@mui/system/esm/useThemeProps/useThemeProps.js
  function useThemeProps({
    props,
    name,
    defaultTheme: defaultTheme4,
    themeId
  }) {
    let theme = useTheme_default(defaultTheme4);
    if (themeId) {
      theme = theme[themeId] || theme;
    }
    const mergedProps = getThemeProps({
      theme,
      name,
      props
    });
    return mergedProps;
  }

  // node_modules/@mui/system/esm/colorManipulator.js
  var import_clamp = __toESM(require_clamp2());
  function clampWrapper(value, min2 = 0, max2 = 1) {
    if (true) {
      if (value < min2 || value > max2) {
        console.error(`MUI: The value provided ${value} is out of range [${min2}, ${max2}].`);
      }
    }
    return (0, import_clamp.default)(value, min2, max2);
  }
  function hexToRgb(color2) {
    color2 = color2.slice(1);
    const re = new RegExp(`.{1,${color2.length >= 6 ? 2 : 1}}`, "g");
    let colors = color2.match(re);
    if (colors && colors[0].length === 1) {
      colors = colors.map((n) => n + n);
    }
    return colors ? `rgb${colors.length === 4 ? "a" : ""}(${colors.map((n, index) => {
      return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1e3) / 1e3;
    }).join(", ")})` : "";
  }
  function decomposeColor(color2) {
    if (color2.type) {
      return color2;
    }
    if (color2.charAt(0) === "#") {
      return decomposeColor(hexToRgb(color2));
    }
    const marker = color2.indexOf("(");
    const type = color2.substring(0, marker);
    if (["rgb", "rgba", "hsl", "hsla", "color"].indexOf(type) === -1) {
      throw new Error(true ? `MUI: Unsupported \`${color2}\` color.
The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : (0, import_formatMuiErrorMessage.default)(9, color2));
    }
    let values3 = color2.substring(marker + 1, color2.length - 1);
    let colorSpace;
    if (type === "color") {
      values3 = values3.split(" ");
      colorSpace = values3.shift();
      if (values3.length === 4 && values3[3].charAt(0) === "/") {
        values3[3] = values3[3].slice(1);
      }
      if (["srgb", "display-p3", "a98-rgb", "prophoto-rgb", "rec-2020"].indexOf(colorSpace) === -1) {
        throw new Error(true ? `MUI: unsupported \`${colorSpace}\` color space.
The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : (0, import_formatMuiErrorMessage.default)(10, colorSpace));
      }
    } else {
      values3 = values3.split(",");
    }
    values3 = values3.map((value) => parseFloat(value));
    return {
      type,
      values: values3,
      colorSpace
    };
  }
  function recomposeColor(color2) {
    const {
      type,
      colorSpace
    } = color2;
    let {
      values: values3
    } = color2;
    if (type.indexOf("rgb") !== -1) {
      values3 = values3.map((n, i) => i < 3 ? parseInt(n, 10) : n);
    } else if (type.indexOf("hsl") !== -1) {
      values3[1] = `${values3[1]}%`;
      values3[2] = `${values3[2]}%`;
    }
    if (type.indexOf("color") !== -1) {
      values3 = `${colorSpace} ${values3.join(" ")}`;
    } else {
      values3 = `${values3.join(", ")}`;
    }
    return `${type}(${values3})`;
  }
  function alpha(color2, value) {
    color2 = decomposeColor(color2);
    value = clampWrapper(value);
    if (color2.type === "rgb" || color2.type === "hsl") {
      color2.type += "a";
    }
    if (color2.type === "color") {
      color2.values[3] = `/${value}`;
    } else {
      color2.values[3] = value;
    }
    return recomposeColor(color2);
  }
  function darken(color2, coefficient) {
    color2 = decomposeColor(color2);
    coefficient = clampWrapper(coefficient);
    if (color2.type.indexOf("hsl") !== -1) {
      color2.values[2] *= 1 - coefficient;
    } else if (color2.type.indexOf("rgb") !== -1 || color2.type.indexOf("color") !== -1) {
      for (let i = 0; i < 3; i += 1) {
        color2.values[i] *= 1 - coefficient;
      }
    }
    return recomposeColor(color2);
  }
  function lighten(color2, coefficient) {
    color2 = decomposeColor(color2);
    coefficient = clampWrapper(coefficient);
    if (color2.type.indexOf("hsl") !== -1) {
      color2.values[2] += (100 - color2.values[2]) * coefficient;
    } else if (color2.type.indexOf("rgb") !== -1) {
      for (let i = 0; i < 3; i += 1) {
        color2.values[i] += (255 - color2.values[i]) * coefficient;
      }
    } else if (color2.type.indexOf("color") !== -1) {
      for (let i = 0; i < 3; i += 1) {
        color2.values[i] += (1 - color2.values[i]) * coefficient;
      }
    }
    return recomposeColor(color2);
  }

  // node_modules/@mui/system/esm/RtlProvider/index.js
  init_extends();
  var React28 = __toESM(require_react());
  var import_prop_types6 = __toESM(require_prop_types());
  var import_jsx_runtime3 = __toESM(require_jsx_runtime());
  var _excluded7 = ["value"];
  var RtlContext = /* @__PURE__ */ React28.createContext();
  function RtlProvider(_ref) {
    let {
      value
    } = _ref, props = _objectWithoutPropertiesLoose(_ref, _excluded7);
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(RtlContext.Provider, _extends({
      value: value != null ? value : true
    }, props));
  }
  true ? RtlProvider.propTypes = {
    children: import_prop_types6.default.node,
    value: import_prop_types6.default.bool
  } : void 0;
  var useRtl = () => {
    const value = React28.useContext(RtlContext);
    return value != null ? value : false;
  };

  // node_modules/@mui/system/esm/DefaultPropsProvider/DefaultPropsProvider.js
  var React29 = __toESM(require_react());
  var import_prop_types7 = __toESM(require_prop_types());
  var import_jsx_runtime4 = __toESM(require_jsx_runtime());
  var PropsContext = /* @__PURE__ */ React29.createContext(void 0);
  function DefaultPropsProvider({
    value,
    children
  }) {
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(PropsContext.Provider, {
      value,
      children
    });
  }
  true ? DefaultPropsProvider.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * @ignore
     */
    children: import_prop_types7.default.node,
    /**
     * @ignore
     */
    value: import_prop_types7.default.object
  } : void 0;
  function getThemeProps2(params) {
    const {
      theme,
      name,
      props
    } = params;
    if (!theme || !theme.components || !theme.components[name]) {
      return props;
    }
    const config = theme.components[name];
    if (config.defaultProps) {
      return resolveProps(config.defaultProps, props);
    }
    if (!config.styleOverrides && !config.variants) {
      return resolveProps(config, props);
    }
    return props;
  }
  function useDefaultProps({
    props,
    name
  }) {
    const ctx = React29.useContext(PropsContext);
    return getThemeProps2({
      props,
      name,
      theme: {
        components: ctx
      }
    });
  }
  var DefaultPropsProvider_default = DefaultPropsProvider;

  // node_modules/@babel/runtime/helpers/esm/typeof.js
  function _typeof(o) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof(o);
  }

  // node_modules/@babel/runtime/helpers/esm/toPrimitive.js
  function toPrimitive(t, r2) {
    if ("object" != _typeof(t) || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r2 || "default");
      if ("object" != _typeof(i)) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t);
  }

  // node_modules/@babel/runtime/helpers/esm/toPropertyKey.js
  function toPropertyKey(t) {
    var i = toPrimitive(t, "string");
    return "symbol" == _typeof(i) ? i : i + "";
  }

  // node_modules/@mui/system/esm/Stack/createStack.js
  init_extends();
  var React30 = __toESM(require_react());
  var import_prop_types8 = __toESM(require_prop_types());
  var import_deepmerge6 = __toESM(require_deepmerge2());
  var import_jsx_runtime5 = __toESM(require_jsx_runtime());
  var _excluded8 = ["component", "direction", "spacing", "divider", "children", "className", "useFlexGap"];
  var defaultTheme = createTheme_default();
  var defaultCreateStyledComponent = styled_default("div", {
    name: "MuiStack",
    slot: "Root",
    overridesResolver: (props, styles4) => styles4.root
  });
  function useThemePropsDefault(props) {
    return useThemeProps({
      props,
      name: "MuiStack",
      defaultTheme
    });
  }
  function joinChildren(children, separator) {
    const childrenArray = React30.Children.toArray(children).filter(Boolean);
    return childrenArray.reduce((output, child, index) => {
      output.push(child);
      if (index < childrenArray.length - 1) {
        output.push(/* @__PURE__ */ React30.cloneElement(separator, {
          key: `separator-${index}`
        }));
      }
      return output;
    }, []);
  }
  var getSideFromDirection = (direction) => {
    return {
      row: "Left",
      "row-reverse": "Right",
      column: "Top",
      "column-reverse": "Bottom"
    }[direction];
  };
  var style3 = ({
    ownerState,
    theme
  }) => {
    let styles4 = _extends({
      display: "flex",
      flexDirection: "column"
    }, handleBreakpoints({
      theme
    }, resolveBreakpointValues({
      values: ownerState.direction,
      breakpoints: theme.breakpoints.values
    }), (propValue) => ({
      flexDirection: propValue
    })));
    if (ownerState.spacing) {
      const transformer = createUnarySpacing(theme);
      const base = Object.keys(theme.breakpoints.values).reduce((acc, breakpoint) => {
        if (typeof ownerState.spacing === "object" && ownerState.spacing[breakpoint] != null || typeof ownerState.direction === "object" && ownerState.direction[breakpoint] != null) {
          acc[breakpoint] = true;
        }
        return acc;
      }, {});
      const directionValues = resolveBreakpointValues({
        values: ownerState.direction,
        base
      });
      const spacingValues = resolveBreakpointValues({
        values: ownerState.spacing,
        base
      });
      if (typeof directionValues === "object") {
        Object.keys(directionValues).forEach((breakpoint, index, breakpoints) => {
          const directionValue = directionValues[breakpoint];
          if (!directionValue) {
            const previousDirectionValue = index > 0 ? directionValues[breakpoints[index - 1]] : "column";
            directionValues[breakpoint] = previousDirectionValue;
          }
        });
      }
      const styleFromPropValue = (propValue, breakpoint) => {
        if (ownerState.useFlexGap) {
          return {
            gap: getValue(transformer, propValue)
          };
        }
        return {
          // The useFlexGap={false} implement relies on each child to give up control of the margin.
          // We need to reset the margin to avoid double spacing.
          "& > :not(style):not(style)": {
            margin: 0
          },
          "& > :not(style) ~ :not(style)": {
            [`margin${getSideFromDirection(breakpoint ? directionValues[breakpoint] : ownerState.direction)}`]: getValue(transformer, propValue)
          }
        };
      };
      styles4 = (0, import_deepmerge6.default)(styles4, handleBreakpoints({
        theme
      }, spacingValues, styleFromPropValue));
    }
    styles4 = mergeBreakpointsInOrder(theme.breakpoints, styles4);
    return styles4;
  };
  function createStack(options = {}) {
    const {
      // This will allow adding custom styled fn (for example for custom sx style function)
      createStyledComponent = defaultCreateStyledComponent,
      useThemeProps: useThemeProps3 = useThemePropsDefault,
      componentName = "MuiStack"
    } = options;
    const useUtilityClasses83 = () => {
      const slots = {
        root: ["root"]
      };
      return composeClasses(slots, (slot) => generateUtilityClass(componentName, slot), {});
    };
    const StackRoot = createStyledComponent(style3);
    const Stack2 = /* @__PURE__ */ React30.forwardRef(function Grid(inProps, ref) {
      const themeProps = useThemeProps3(inProps);
      const props = extendSxProp(themeProps);
      const {
        component = "div",
        direction = "column",
        spacing: spacing2 = 0,
        divider,
        children,
        className,
        useFlexGap = false
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded8);
      const ownerState = {
        direction,
        spacing: spacing2,
        useFlexGap
      };
      const classes = useUtilityClasses83();
      return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(StackRoot, _extends({
        as: component,
        ownerState,
        ref,
        className: clsx_default(classes.root, className)
      }, other, {
        children: divider ? joinChildren(children, divider) : children
      }));
    });
    true ? Stack2.propTypes = {
      children: import_prop_types8.default.node,
      direction: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), import_prop_types8.default.arrayOf(import_prop_types8.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), import_prop_types8.default.object]),
      divider: import_prop_types8.default.node,
      spacing: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.number, import_prop_types8.default.string])), import_prop_types8.default.number, import_prop_types8.default.object, import_prop_types8.default.string]),
      sx: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.func, import_prop_types8.default.object, import_prop_types8.default.bool])), import_prop_types8.default.func, import_prop_types8.default.object])
    } : void 0;
    return Stack2;
  }

  // node_modules/@mui/x-data-grid/constants/gridClasses.js
  function getDataGridUtilityClass(slot) {
    return generateUtilityClass("MuiDataGrid", slot);
  }
  var gridClasses = generateUtilityClasses("MuiDataGrid", ["actionsCell", "aggregationColumnHeader", "aggregationColumnHeader--alignLeft", "aggregationColumnHeader--alignCenter", "aggregationColumnHeader--alignRight", "aggregationColumnHeaderLabel", "autoHeight", "autosizing", "booleanCell", "cell--editable", "cell--editing", "cell--textCenter", "cell--textLeft", "cell--textRight", "cell--withRenderer", "cell--rangeTop", "cell--rangeBottom", "cell--rangeLeft", "cell--rangeRight", "cell--selectionMode", "cell", "cellContent", "cellCheckbox", "cellSkeleton", "checkboxInput", "columnHeader--alignCenter", "columnHeader--alignLeft", "columnHeader--alignRight", "columnHeader--dragging", "columnHeader--moving", "columnHeader--numeric", "columnHeader--sortable", "columnHeader--sorted", "columnHeader--filtered", "columnHeader", "columnHeaderCheckbox", "columnHeaderDraggableContainer", "columnHeaderDropZone", "columnHeaderTitle", "columnHeaderTitleContainer", "columnHeaderTitleContainerContent", "columnGroupHeader", "columnHeader--filledGroup", "columnHeader--emptyGroup", "columnHeader--showColumnBorder", "columnHeaders", "columnHeadersInner", "columnHeadersInner--scrollable", "columnSeparator--resizable", "columnSeparator--resizing", "columnSeparator--sideLeft", "columnSeparator--sideRight", "columnSeparator", "columnsPanel", "columnsPanelRow", "detailPanel", "detailPanels", "detailPanelToggleCell", "detailPanelToggleCell--expanded", "footerCell", "panel", "panelHeader", "panelWrapper", "panelContent", "panelFooter", "paper", "editBooleanCell", "editInputCell", "filterForm", "filterFormDeleteIcon", "filterFormLogicOperatorInput", "filterFormColumnInput", "filterFormOperatorInput", "filterFormValueInput", "filterIcon", "footerContainer", "headerFilterRow", "iconButtonContainer", "iconSeparator", "main", "menu", "menuIcon", "menuIconButton", "menuOpen", "menuList", "overlay", "overlayWrapper", "overlayWrapperInner", "root", "root--densityStandard", "root--densityComfortable", "root--densityCompact", "root--disableUserSelection", "row", "row--editable", "row--editing", "row--lastVisible", "row--dragging", "row--dynamicHeight", "row--detailPanelExpanded", "rowReorderCellPlaceholder", "rowCount", "rowReorderCellContainer", "rowReorderCell", "rowReorderCell--draggable", "scrollArea--left", "scrollArea--right", "scrollArea", "selectedRowCount", "sortIcon", "toolbarContainer", "toolbarFilterList", "virtualScroller", "virtualScrollerContent", "virtualScrollerContent--overflowed", "virtualScrollerRenderZone", "pinnedColumns", "pinnedColumns--left", "pinnedColumns--right", "pinnedColumnHeaders", "pinnedColumnHeaders--left", "pinnedColumnHeaders--right", "withBorderColor", "cell--withRightBorder", "columnHeader--withRightBorder", "treeDataGroupingCell", "treeDataGroupingCellToggle", "groupingCriteriaCell", "groupingCriteriaCellToggle", "pinnedRows", "pinnedRows--top", "pinnedRows--bottom", "pinnedRowsRenderZone"]);

  // node_modules/reselect/es/defaultMemoize.js
  var NOT_FOUND = "NOT_FOUND";
  function createSingletonCache(equals) {
    var entry;
    return {
      get: function get(key) {
        if (entry && equals(entry.key, key)) {
          return entry.value;
        }
        return NOT_FOUND;
      },
      put: function put(key, value) {
        entry = {
          key,
          value
        };
      },
      getEntries: function getEntries() {
        return entry ? [entry] : [];
      },
      clear: function clear() {
        entry = void 0;
      }
    };
  }
  function createLruCache(maxSize, equals) {
    var entries = [];
    function get(key) {
      var cacheIndex = entries.findIndex(function(entry2) {
        return equals(key, entry2.key);
      });
      if (cacheIndex > -1) {
        var entry = entries[cacheIndex];
        if (cacheIndex > 0) {
          entries.splice(cacheIndex, 1);
          entries.unshift(entry);
        }
        return entry.value;
      }
      return NOT_FOUND;
    }
    function put(key, value) {
      if (get(key) === NOT_FOUND) {
        entries.unshift({
          key,
          value
        });
        if (entries.length > maxSize) {
          entries.pop();
        }
      }
    }
    function getEntries() {
      return entries;
    }
    function clear() {
      entries = [];
    }
    return {
      get,
      put,
      getEntries,
      clear
    };
  }
  var defaultEqualityCheck = function defaultEqualityCheck2(a, b) {
    return a === b;
  };
  function createCacheKeyComparator(equalityCheck) {
    return function areArgumentsShallowlyEqual(prev2, next2) {
      if (prev2 === null || next2 === null || prev2.length !== next2.length) {
        return false;
      }
      var length2 = prev2.length;
      for (var i = 0; i < length2; i++) {
        if (!equalityCheck(prev2[i], next2[i])) {
          return false;
        }
      }
      return true;
    };
  }
  function defaultMemoize(func, equalityCheckOrOptions) {
    var providedOptions = typeof equalityCheckOrOptions === "object" ? equalityCheckOrOptions : {
      equalityCheck: equalityCheckOrOptions
    };
    var _providedOptions$equa = providedOptions.equalityCheck, equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa, _providedOptions$maxS = providedOptions.maxSize, maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS, resultEqualityCheck = providedOptions.resultEqualityCheck;
    var comparator = createCacheKeyComparator(equalityCheck);
    var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator);
    function memoized() {
      var value = cache.get(arguments);
      if (value === NOT_FOUND) {
        value = func.apply(null, arguments);
        if (resultEqualityCheck) {
          var entries = cache.getEntries();
          var matchingEntry = entries.find(function(entry) {
            return resultEqualityCheck(entry.value, value);
          });
          if (matchingEntry) {
            value = matchingEntry.value;
          }
        }
        cache.put(arguments, value);
      }
      return value;
    }
    memoized.clearCache = function() {
      return cache.clear();
    };
    return memoized;
  }

  // node_modules/reselect/es/index.js
  function getDependencies(funcs) {
    var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;
    if (!dependencies.every(function(dep) {
      return typeof dep === "function";
    })) {
      var dependencyTypes = dependencies.map(function(dep) {
        return typeof dep === "function" ? "function " + (dep.name || "unnamed") + "()" : typeof dep;
      }).join(", ");
      throw new Error("createSelector expects all input-selectors to be functions, but received the following types: [" + dependencyTypes + "]");
    }
    return dependencies;
  }
  function createSelectorCreator(memoize3) {
    for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      memoizeOptionsFromArgs[_key - 1] = arguments[_key];
    }
    var createSelector3 = function createSelector4() {
      for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        funcs[_key2] = arguments[_key2];
      }
      var _recomputations = 0;
      var _lastResult;
      var directlyPassedOptions = {
        memoizeOptions: void 0
      };
      var resultFunc = funcs.pop();
      if (typeof resultFunc === "object") {
        directlyPassedOptions = resultFunc;
        resultFunc = funcs.pop();
      }
      if (typeof resultFunc !== "function") {
        throw new Error("createSelector expects an output function after the inputs, but received: [" + typeof resultFunc + "]");
      }
      var _directlyPassedOption = directlyPassedOptions, _directlyPassedOption2 = _directlyPassedOption.memoizeOptions, memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2;
      var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];
      var dependencies = getDependencies(funcs);
      var memoizedResultFunc = memoize3.apply(void 0, [function recomputationWrapper() {
        _recomputations++;
        return resultFunc.apply(null, arguments);
      }].concat(finalMemoizeOptions));
      var selector = memoize3(function dependenciesChecker() {
        var params = [];
        var length2 = dependencies.length;
        for (var i = 0; i < length2; i++) {
          params.push(dependencies[i].apply(null, arguments));
        }
        _lastResult = memoizedResultFunc.apply(null, params);
        return _lastResult;
      });
      Object.assign(selector, {
        resultFunc,
        memoizedResultFunc,
        dependencies,
        lastResult: function lastResult() {
          return _lastResult;
        },
        recomputations: function recomputations() {
          return _recomputations;
        },
        resetRecomputations: function resetRecomputations() {
          return _recomputations = 0;
        }
      });
      return selector;
    };
    return createSelector3;
  }
  var createSelector = /* @__PURE__ */ createSelectorCreator(defaultMemoize);

  // node_modules/@mui/x-data-grid/utils/createSelector.js
  var cacheContainer = {
    cache: /* @__PURE__ */ new WeakMap()
  };
  var missingInstanceIdWarning = buildWarning(["MUI: A selector was called without passing the instance ID, which may impact the performance of the grid.", "To fix, call it with `apiRef`, e.g. `mySelector(apiRef)`, or pass the instance ID explicitly, e.g. `mySelector(state, apiRef.current.instanceId)`."]);
  function checkIsAPIRef(value) {
    return "current" in value && "instanceId" in value.current;
  }
  var DEFAULT_INSTANCE_ID = {
    id: "default"
  };
  var createSelector2 = (a, b, c, d, e, f, ...rest) => {
    if (rest.length > 0) {
      throw new Error("Unsupported number of selectors");
    }
    let selector;
    if (a && b && c && d && e && f) {
      selector = (stateOrApiRef, instanceIdParam) => {
        const isAPIRef = checkIsAPIRef(stateOrApiRef);
        const instanceId = instanceIdParam != null ? instanceIdParam : isAPIRef ? stateOrApiRef.current.instanceId : DEFAULT_INSTANCE_ID;
        const state = isAPIRef ? stateOrApiRef.current.state : stateOrApiRef;
        const va = a(state, instanceId);
        const vb = b(state, instanceId);
        const vc = c(state, instanceId);
        const vd = d(state, instanceId);
        const ve = e(state, instanceId);
        return f(va, vb, vc, vd, ve);
      };
    } else if (a && b && c && d && e) {
      selector = (stateOrApiRef, instanceIdParam) => {
        const isAPIRef = checkIsAPIRef(stateOrApiRef);
        const instanceId = instanceIdParam != null ? instanceIdParam : isAPIRef ? stateOrApiRef.current.instanceId : DEFAULT_INSTANCE_ID;
        const state = isAPIRef ? stateOrApiRef.current.state : stateOrApiRef;
        const va = a(state, instanceId);
        const vb = b(state, instanceId);
        const vc = c(state, instanceId);
        const vd = d(state, instanceId);
        return e(va, vb, vc, vd);
      };
    } else if (a && b && c && d) {
      selector = (stateOrApiRef, instanceIdParam) => {
        const isAPIRef = checkIsAPIRef(stateOrApiRef);
        const instanceId = instanceIdParam != null ? instanceIdParam : isAPIRef ? stateOrApiRef.current.instanceId : DEFAULT_INSTANCE_ID;
        const state = isAPIRef ? stateOrApiRef.current.state : stateOrApiRef;
        const va = a(state, instanceId);
        const vb = b(state, instanceId);
        const vc = c(state, instanceId);
        return d(va, vb, vc);
      };
    } else if (a && b && c) {
      selector = (stateOrApiRef, instanceIdParam) => {
        const isAPIRef = checkIsAPIRef(stateOrApiRef);
        const instanceId = instanceIdParam != null ? instanceIdParam : isAPIRef ? stateOrApiRef.current.instanceId : DEFAULT_INSTANCE_ID;
        const state = isAPIRef ? stateOrApiRef.current.state : stateOrApiRef;
        const va = a(state, instanceId);
        const vb = b(state, instanceId);
        return c(va, vb);
      };
    } else if (a && b) {
      selector = (stateOrApiRef, instanceIdParam) => {
        const isAPIRef = checkIsAPIRef(stateOrApiRef);
        const instanceId = instanceIdParam != null ? instanceIdParam : isAPIRef ? stateOrApiRef.current.instanceId : DEFAULT_INSTANCE_ID;
        const state = isAPIRef ? stateOrApiRef.current.state : stateOrApiRef;
        const va = a(state, instanceId);
        return b(va);
      };
    } else {
      throw new Error("Missing arguments");
    }
    selector.acceptsApiRef = true;
    return selector;
  };
  var createSelectorMemoized = (...args) => {
    const selector = (...selectorArgs) => {
      var _cache$get, _cache$get3;
      const [stateOrApiRef, instanceId] = selectorArgs;
      const isAPIRef = checkIsAPIRef(stateOrApiRef);
      const cacheKey = isAPIRef ? stateOrApiRef.current.instanceId : instanceId != null ? instanceId : DEFAULT_INSTANCE_ID;
      const state = isAPIRef ? stateOrApiRef.current.state : stateOrApiRef;
      if (true) {
        if (cacheKey.id === "default") {
          missingInstanceIdWarning();
        }
      }
      const {
        cache
      } = cacheContainer;
      if (cache.get(cacheKey) && (_cache$get = cache.get(cacheKey)) != null && _cache$get.get(args)) {
        var _cache$get2;
        return (_cache$get2 = cache.get(cacheKey)) == null ? void 0 : _cache$get2.get(args)(state, cacheKey);
      }
      const newSelector = createSelector(...args);
      if (!cache.get(cacheKey)) {
        cache.set(cacheKey, /* @__PURE__ */ new Map());
      }
      (_cache$get3 = cache.get(cacheKey)) == null || _cache$get3.set(args, newSelector);
      return newSelector(state, cacheKey);
    };
    selector.acceptsApiRef = true;
    return selector;
  };

  // node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsSelector.js
  var gridColumnsStateSelector = (state) => state.columns;
  var gridColumnFieldsSelector = createSelector2(gridColumnsStateSelector, (columnsState) => columnsState.orderedFields);
  var gridColumnLookupSelector = createSelector2(gridColumnsStateSelector, (columnsState) => columnsState.lookup);
  var gridColumnDefinitionsSelector = createSelectorMemoized(gridColumnFieldsSelector, gridColumnLookupSelector, (allFields, lookup) => allFields.map((field) => lookup[field]));
  var gridColumnVisibilityModelSelector = createSelector2(gridColumnsStateSelector, (columnsState) => columnsState.columnVisibilityModel);
  var gridVisibleColumnDefinitionsSelector = createSelectorMemoized(gridColumnDefinitionsSelector, gridColumnVisibilityModelSelector, (columns, columnVisibilityModel) => columns.filter((column2) => columnVisibilityModel[column2.field] !== false));
  var gridVisibleColumnFieldsSelector = createSelectorMemoized(gridVisibleColumnDefinitionsSelector, (visibleColumns) => visibleColumns.map((column2) => column2.field));
  var gridColumnPositionsSelector = createSelectorMemoized(gridVisibleColumnDefinitionsSelector, (visibleColumns) => {
    const positions = [];
    let currentPosition = 0;
    for (let i = 0; i < visibleColumns.length; i += 1) {
      positions.push(currentPosition);
      currentPosition += visibleColumns[i].computedWidth;
    }
    return positions;
  });
  var gridColumnsTotalWidthSelector = createSelector2(gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector, (visibleColumns, positions) => {
    const colCount = visibleColumns.length;
    if (colCount === 0) {
      return 0;
    }
    return positions[colCount - 1] + visibleColumns[colCount - 1].computedWidth;
  });
  var gridFilterableColumnDefinitionsSelector = createSelectorMemoized(gridColumnDefinitionsSelector, (columns) => columns.filter((col) => col.filterable));
  var gridFilterableColumnLookupSelector = createSelectorMemoized(gridColumnDefinitionsSelector, (columns) => columns.reduce((acc, col) => {
    if (col.filterable) {
      acc[col.field] = col;
    }
    return acc;
  }, {}));

  // node_modules/@mui/x-data-grid/hooks/features/columnGrouping/gridColumnGroupsSelector.js
  var gridColumnGroupingSelector = (state) => state.columnGrouping;
  var gridColumnGroupsUnwrappedModelSelector = createSelectorMemoized(gridColumnGroupingSelector, (columnGrouping) => {
    var _columnGrouping$unwra;
    return (_columnGrouping$unwra = columnGrouping == null ? void 0 : columnGrouping.unwrappedGroupingModel) != null ? _columnGrouping$unwra : {};
  });
  var gridColumnGroupsLookupSelector = createSelectorMemoized(gridColumnGroupingSelector, (columnGrouping) => {
    var _columnGrouping$looku;
    return (_columnGrouping$looku = columnGrouping == null ? void 0 : columnGrouping.lookup) != null ? _columnGrouping$looku : {};
  });
  var gridColumnGroupsHeaderStructureSelector = createSelectorMemoized(gridColumnGroupingSelector, (columnGrouping) => {
    var _columnGrouping$heade;
    return (_columnGrouping$heade = columnGrouping == null ? void 0 : columnGrouping.headerStructure) != null ? _columnGrouping$heade : [];
  });
  var gridColumnGroupsHeaderMaxDepthSelector = createSelector2(gridColumnGroupingSelector, (columnGrouping) => {
    var _columnGrouping$maxDe;
    return (_columnGrouping$maxDe = columnGrouping == null ? void 0 : columnGrouping.maxDepth) != null ? _columnGrouping$maxDe : 0;
  });

  // node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsSelector.js
  var gridRowsStateSelector = (state) => state.rows;
  var gridRowCountSelector = createSelector2(gridRowsStateSelector, (rows) => rows.totalRowCount);
  var gridRowsLoadingSelector = createSelector2(gridRowsStateSelector, (rows) => rows.loading);
  var gridTopLevelRowCountSelector = createSelector2(gridRowsStateSelector, (rows) => rows.totalTopLevelRowCount);
  var gridRowsLookupSelector = createSelector2(gridRowsStateSelector, (rows) => rows.dataRowIdToModelLookup);
  var gridRowsDataRowIdToIdLookupSelector = createSelector2(gridRowsStateSelector, (rows) => rows.dataRowIdToIdLookup);
  var gridRowTreeSelector = createSelector2(gridRowsStateSelector, (rows) => rows.tree);
  var gridRowGroupingNameSelector = createSelector2(gridRowsStateSelector, (rows) => rows.groupingName);
  var gridRowTreeDepthsSelector = createSelector2(gridRowsStateSelector, (rows) => rows.treeDepths);
  var gridRowMaximumTreeDepthSelector = createSelectorMemoized(gridRowsStateSelector, (rows) => {
    const entries = Object.entries(rows.treeDepths);
    if (entries.length === 0) {
      return 1;
    }
    return entries.filter(([, nodeCount]) => nodeCount > 0).map(([depth]) => Number(depth)).sort((a, b) => b - a)[0] + 1;
  });
  var gridDataRowIdsSelector = createSelector2(gridRowsStateSelector, (rows) => rows.dataRowIds);
  var gridAdditionalRowGroupsSelector = createSelector2(gridRowsStateSelector, (rows) => rows == null ? void 0 : rows.additionalRowGroups);
  var gridPinnedRowsSelector = createSelectorMemoized(gridAdditionalRowGroupsSelector, (additionalRowGroups) => {
    var _rawPinnedRows$bottom, _rawPinnedRows$top;
    const rawPinnedRows = additionalRowGroups == null ? void 0 : additionalRowGroups.pinnedRows;
    return {
      bottom: rawPinnedRows == null || (_rawPinnedRows$bottom = rawPinnedRows.bottom) == null ? void 0 : _rawPinnedRows$bottom.map((rowEntry) => {
        var _rowEntry$model;
        return {
          id: rowEntry.id,
          model: (_rowEntry$model = rowEntry.model) != null ? _rowEntry$model : {}
        };
      }),
      top: rawPinnedRows == null || (_rawPinnedRows$top = rawPinnedRows.top) == null ? void 0 : _rawPinnedRows$top.map((rowEntry) => {
        var _rowEntry$model2;
        return {
          id: rowEntry.id,
          model: (_rowEntry$model2 = rowEntry.model) != null ? _rowEntry$model2 : {}
        };
      })
    };
  });
  var gridPinnedRowsCountSelector = createSelector2(gridPinnedRowsSelector, (pinnedRows) => {
    var _pinnedRows$top, _pinnedRows$bottom;
    return ((pinnedRows == null || (_pinnedRows$top = pinnedRows.top) == null ? void 0 : _pinnedRows$top.length) || 0) + ((pinnedRows == null || (_pinnedRows$bottom = pinnedRows.bottom) == null ? void 0 : _pinnedRows$bottom.length) || 0);
  });

  // node_modules/@mui/x-data-grid/hooks/utils/useGridAriaAttributes.js
  var useGridAriaAttributes = () => {
    var _rootProps$experiment;
    const apiRef = useGridPrivateApiContext();
    const rootProps = useGridRootProps();
    const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);
    const totalRowCount = useGridSelector(apiRef, gridRowCountSelector);
    const headerGroupingMaxDepth = useGridSelector(apiRef, gridColumnGroupsHeaderMaxDepthSelector);
    const pinnedRowsCount = useGridSelector(apiRef, gridPinnedRowsCountSelector);
    let role = "grid";
    if ((_rootProps$experiment = rootProps.experimentalFeatures) != null && _rootProps$experiment.ariaV7 && rootProps.treeData) {
      role = "treegrid";
    }
    return {
      role,
      "aria-colcount": visibleColumns.length,
      "aria-rowcount": headerGroupingMaxDepth + 1 + pinnedRowsCount + totalRowCount,
      "aria-multiselectable": !rootProps.disableMultipleRowSelection
    };
  };

  // node_modules/@mui/x-data-grid/components/containers/GridMainContainer.js
  var import_jsx_runtime6 = __toESM(require_jsx_runtime());
  var useUtilityClasses = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["main"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridMainContainerRoot = styled_default("div", {
    name: "MuiDataGrid",
    slot: "Main",
    overridesResolver: (props, styles4) => styles4.main
  })(() => ({
    position: "relative",
    flexGrow: 1,
    display: "flex",
    flexDirection: "column",
    overflow: "hidden"
  }));
  var GridMainContainer = /* @__PURE__ */ React31.forwardRef((props, ref) => {
    var _rootProps$experiment;
    const rootProps = useGridRootProps();
    const classes = useUtilityClasses(rootProps);
    const getAriaAttributes = (_rootProps$experiment = rootProps.experimentalFeatures) != null && _rootProps$experiment.ariaV7 ? useGridAriaAttributes : null;
    const ariaAttributes = typeof getAriaAttributes === "function" ? getAriaAttributes() : null;
    return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(GridMainContainerRoot, _extends({
      ref,
      className: classes.root,
      ownerState: rootProps
    }, ariaAttributes, {
      children: props.children
    }));
  });

  // node_modules/@mui/x-data-grid/hooks/features/sorting/gridSortingSelector.js
  var gridSortingStateSelector = (state) => state.sorting;
  var gridSortedRowIdsSelector = createSelector2(gridSortingStateSelector, (sortingState) => sortingState.sortedRows);
  var gridSortedRowEntriesSelector = createSelectorMemoized(
    gridSortedRowIdsSelector,
    gridRowsLookupSelector,
    // TODO rows v6: Is this the best approach ?
    (sortedIds, idRowsLookup) => sortedIds.map((id) => {
      var _idRowsLookup$id;
      return {
        id,
        model: (_idRowsLookup$id = idRowsLookup[id]) != null ? _idRowsLookup$id : {}
      };
    })
  );
  var gridSortModelSelector = createSelector2(gridSortingStateSelector, (sorting) => sorting.sortModel);
  var gridSortColumnLookupSelector = createSelectorMemoized(gridSortModelSelector, (sortModel) => {
    const result = sortModel.reduce((res, sortItem, index) => {
      res[sortItem.field] = {
        sortDirection: sortItem.sort,
        sortIndex: sortModel.length > 1 ? index + 1 : void 0
      };
      return res;
    }, {});
    return result;
  });

  // node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterSelector.js
  var gridFilterStateSelector = (state) => state.filter;
  var gridFilterModelSelector = createSelector2(gridFilterStateSelector, (filterState) => filterState.filterModel);
  var gridQuickFilterValuesSelector = createSelector2(gridFilterModelSelector, (filterModel) => filterModel.quickFilterValues);
  var gridVisibleRowsLookupSelector = (state) => state.visibleRowsLookup;
  var gridFilteredRowsLookupSelector = createSelector2(gridFilterStateSelector, (filterState) => filterState.filteredRowsLookup);
  var gridFilteredDescendantCountLookupSelector = createSelector2(gridFilterStateSelector, (filterState) => filterState.filteredDescendantCountLookup);
  var gridExpandedSortedRowEntriesSelector = createSelectorMemoized(gridVisibleRowsLookupSelector, gridSortedRowEntriesSelector, (visibleRowsLookup, sortedRows) => sortedRows.filter((row) => visibleRowsLookup[row.id] !== false));
  var gridExpandedSortedRowIdsSelector = createSelectorMemoized(gridExpandedSortedRowEntriesSelector, (visibleSortedRowEntries) => visibleSortedRowEntries.map((row) => row.id));
  var gridFilteredSortedRowEntriesSelector = createSelectorMemoized(gridFilteredRowsLookupSelector, gridSortedRowEntriesSelector, (filteredRowsLookup, sortedRows) => sortedRows.filter((row) => filteredRowsLookup[row.id] !== false));
  var gridFilteredSortedRowIdsSelector = createSelectorMemoized(gridFilteredSortedRowEntriesSelector, (filteredSortedRowEntries) => filteredSortedRowEntries.map((row) => row.id));
  var gridFilteredSortedTopLevelRowEntriesSelector = createSelectorMemoized(gridExpandedSortedRowEntriesSelector, gridRowTreeSelector, gridRowMaximumTreeDepthSelector, (visibleSortedRows, rowTree, rowTreeDepth) => {
    if (rowTreeDepth < 2) {
      return visibleSortedRows;
    }
    return visibleSortedRows.filter((row) => {
      var _rowTree$row$id;
      return ((_rowTree$row$id = rowTree[row.id]) == null ? void 0 : _rowTree$row$id.depth) === 0;
    });
  });
  var gridExpandedRowCountSelector = createSelector2(gridExpandedSortedRowEntriesSelector, (visibleSortedRows) => visibleSortedRows.length);
  var gridFilteredTopLevelRowCountSelector = createSelector2(gridFilteredSortedTopLevelRowEntriesSelector, (visibleSortedTopLevelRows) => visibleSortedTopLevelRows.length);
  var gridFilterActiveItemsSelector = createSelectorMemoized(gridFilterModelSelector, gridColumnLookupSelector, (filterModel, columnLookup) => {
    var _filterModel$items;
    return (_filterModel$items = filterModel.items) == null ? void 0 : _filterModel$items.filter((item) => {
      var _column$filterOperato, _item$value;
      if (!item.field) {
        return false;
      }
      const column2 = columnLookup[item.field];
      if (!(column2 != null && column2.filterOperators) || (column2 == null || (_column$filterOperato = column2.filterOperators) == null ? void 0 : _column$filterOperato.length) === 0) {
        return false;
      }
      const filterOperator = column2.filterOperators.find((operator) => operator.value === item.operator);
      if (!filterOperator) {
        return false;
      }
      return !filterOperator.InputComponent || item.value != null && ((_item$value = item.value) == null ? void 0 : _item$value.toString()) !== "";
    });
  });
  var gridFilterActiveItemsLookupSelector = createSelectorMemoized(gridFilterActiveItemsSelector, (activeFilters) => {
    const result = activeFilters.reduce((res, filterItem) => {
      if (!res[filterItem.field]) {
        res[filterItem.field] = [filterItem];
      } else {
        res[filterItem.field].push(filterItem);
      }
      return res;
    }, {});
    return result;
  });

  // node_modules/@mui/x-data-grid/hooks/features/focus/gridFocusStateSelector.js
  var gridFocusStateSelector = (state) => state.focus;
  var gridFocusCellSelector = createSelector2(gridFocusStateSelector, (focusState) => focusState.cell);
  var gridFocusColumnHeaderSelector = createSelector2(gridFocusStateSelector, (focusState) => focusState.columnHeader);
  var unstable_gridFocusColumnHeaderFilterSelector = createSelector2(gridFocusStateSelector, (focusState) => focusState.columnHeaderFilter);
  var unstable_gridFocusColumnGroupHeaderSelector = createSelector2(gridFocusStateSelector, (focusState) => focusState.columnGroupHeader);
  var gridTabIndexStateSelector = (state) => state.tabIndex;
  var gridTabIndexCellSelector = createSelector2(gridTabIndexStateSelector, (state) => state.cell);
  var gridTabIndexColumnHeaderSelector = createSelector2(gridTabIndexStateSelector, (state) => state.columnHeader);
  var unstable_gridTabIndexColumnHeaderFilterSelector = createSelector2(gridTabIndexStateSelector, (state) => state.columnHeaderFilter);
  var unstable_gridTabIndexColumnGroupHeaderSelector = createSelector2(gridTabIndexStateSelector, (state) => state.columnGroupHeader);

  // node_modules/@mui/x-data-grid/hooks/features/density/densitySelector.js
  var gridDensitySelector = (state) => state.density;
  var gridDensityValueSelector = createSelector2(gridDensitySelector, (density) => density.value);
  var gridDensityFactorSelector = createSelector2(gridDensitySelector, (density) => density.factor);

  // node_modules/@mui/x-data-grid/hooks/features/columnMenu/columnMenuSelector.js
  var gridColumnMenuSelector = (state) => state.columnMenu;

  // node_modules/@mui/x-data-grid/components/base/GridBody.js
  var import_jsx_runtime7 = __toESM(require_jsx_runtime());
  var import_jsx_runtime8 = __toESM(require_jsx_runtime());
  function GridBody(props) {
    const {
      VirtualScrollerComponent,
      ColumnHeadersProps,
      children
    } = props;
    const apiRef = useGridPrivateApiContext();
    const rootProps = useGridRootProps();
    const rootRef = React32.useRef(null);
    const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);
    const filterColumnLookup = useGridSelector(apiRef, gridFilterActiveItemsLookupSelector);
    const sortColumnLookup = useGridSelector(apiRef, gridSortColumnLookupSelector);
    const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);
    const columnHeaderTabIndexState = useGridSelector(apiRef, gridTabIndexColumnHeaderSelector);
    const cellTabIndexState = useGridSelector(apiRef, gridTabIndexCellSelector);
    const columnGroupHeaderTabIndexState = useGridSelector(apiRef, unstable_gridTabIndexColumnGroupHeaderSelector);
    const columnHeaderFocus = useGridSelector(apiRef, gridFocusColumnHeaderSelector);
    const columnGroupHeaderFocus = useGridSelector(apiRef, unstable_gridFocusColumnGroupHeaderSelector);
    const densityFactor = useGridSelector(apiRef, gridDensityFactorSelector);
    const headerGroupingMaxDepth = useGridSelector(apiRef, gridColumnGroupsHeaderMaxDepthSelector);
    const columnMenuState = useGridSelector(apiRef, gridColumnMenuSelector);
    const columnVisibility = useGridSelector(apiRef, gridColumnVisibilityModelSelector);
    const columnGroupsHeaderStructure = useGridSelector(apiRef, gridColumnGroupsHeaderStructureSelector);
    const hasOtherElementInTabSequence = !(columnGroupHeaderTabIndexState === null && columnHeaderTabIndexState === null && cellTabIndexState === null);
    useEnhancedEffect_default(() => {
      apiRef.current.computeSizeAndPublishResizeEvent();
      const elementToObserve = rootRef.current;
      if (typeof ResizeObserver === "undefined") {
        return () => {
        };
      }
      let animationFrame;
      const observer = new ResizeObserver(() => {
        animationFrame = requestAnimationFrame(() => {
          apiRef.current.computeSizeAndPublishResizeEvent();
        });
      });
      if (elementToObserve) {
        observer.observe(elementToObserve);
      }
      return () => {
        if (animationFrame) {
          window.cancelAnimationFrame(animationFrame);
        }
        if (elementToObserve) {
          observer.unobserve(elementToObserve);
        }
      };
    }, [apiRef]);
    const columnHeadersRef = React32.useRef(null);
    const columnsContainerRef = React32.useRef(null);
    const virtualScrollerRef = React32.useRef(null);
    apiRef.current.register("private", {
      columnHeadersContainerElementRef: columnsContainerRef,
      columnHeadersElementRef: columnHeadersRef,
      virtualScrollerRef,
      mainElementRef: rootRef
    });
    const hasDimensions = !!apiRef.current.getRootDimensions();
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(GridMainContainer, {
      ref: rootRef,
      children: [/* @__PURE__ */ (0, import_jsx_runtime7.jsx)(rootProps.slots.columnHeaders, _extends({
        ref: columnsContainerRef,
        innerRef: columnHeadersRef,
        visibleColumns,
        filterColumnLookup,
        sortColumnLookup,
        columnPositions,
        columnHeaderTabIndexState,
        columnGroupHeaderTabIndexState,
        columnHeaderFocus,
        columnGroupHeaderFocus,
        densityFactor,
        headerGroupingMaxDepth,
        columnMenuState,
        columnVisibility,
        columnGroupsHeaderStructure,
        hasOtherElementInTabSequence
      }, ColumnHeadersProps)), hasDimensions && /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
        VirtualScrollerComponent,
        {
          ref: virtualScrollerRef
        }
      ), children]
    });
  }
  true ? GridBody.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    children: import_prop_types9.default.node,
    ColumnHeadersProps: import_prop_types9.default.object,
    VirtualScrollerComponent: import_prop_types9.default.elementType.isRequired
  } : void 0;

  // node_modules/@mui/x-data-grid/components/base/GridFooterPlaceholder.js
  init_extends();
  var React33 = __toESM(require_react());
  var import_jsx_runtime9 = __toESM(require_jsx_runtime());
  function GridFooterPlaceholder() {
    var _rootProps$slotProps;
    const rootProps = useGridRootProps();
    if (rootProps.hideFooter) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(rootProps.slots.footer, _extends({}, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.footer));
  }

  // node_modules/@mui/x-data-grid/components/base/GridOverlays.js
  init_extends();
  var React34 = __toESM(require_react());
  var import_prop_types10 = __toESM(require_prop_types());

  // node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsUtils.js
  init_extends();
  var GRID_ROOT_GROUP_ID = `auto-generated-group-node-root`;
  var GRID_ID_AUTOGENERATED = Symbol("mui.id_autogenerated");
  var buildRootGroup = () => ({
    type: "group",
    id: GRID_ROOT_GROUP_ID,
    depth: -1,
    groupingField: null,
    groupingKey: null,
    isAutoGenerated: true,
    children: [],
    childrenFromPath: {},
    childrenExpanded: true,
    parent: null
  });
  function checkGridRowIdIsValid(id, row, detailErrorMessage = "A row was provided without id in the rows prop:") {
    if (id == null) {
      throw new Error(["MUI: The data grid component requires all rows to have a unique `id` property.", "Alternatively, you can use the `getRowId` prop to specify a custom id for each row.", detailErrorMessage, JSON.stringify(row)].join("\n"));
    }
  }
  var getRowIdFromRowModel = (rowModel, getRowId, detailErrorMessage) => {
    const id = getRowId ? getRowId(rowModel) : rowModel.id;
    checkGridRowIdIsValid(id, rowModel, detailErrorMessage);
    return id;
  };
  var createRowsInternalCache = ({
    rows,
    getRowId,
    loading,
    rowCount
  }) => {
    const updates = {
      type: "full",
      rows: []
    };
    const dataRowIdToModelLookup = {};
    const dataRowIdToIdLookup = {};
    for (let i = 0; i < rows.length; i += 1) {
      const model = rows[i];
      const id = getRowIdFromRowModel(model, getRowId);
      dataRowIdToModelLookup[id] = model;
      dataRowIdToIdLookup[id] = id;
      updates.rows.push(id);
    }
    return {
      rowsBeforePartialUpdates: rows,
      loadingPropBeforePartialUpdates: loading,
      rowCountPropBeforePartialUpdates: rowCount,
      updates,
      dataRowIdToIdLookup,
      dataRowIdToModelLookup
    };
  };
  var getTopLevelRowCount = ({
    tree,
    rowCountProp = 0
  }) => {
    const rootGroupNode = tree[GRID_ROOT_GROUP_ID];
    return Math.max(rowCountProp, rootGroupNode.children.length + (rootGroupNode.footerId == null ? 0 : 1));
  };
  var getRowsStateFromCache = ({
    apiRef,
    rowCountProp = 0,
    loadingProp,
    previousTree,
    previousTreeDepths
  }) => {
    const cache = apiRef.current.caches.rows;
    const {
      tree: unProcessedTree,
      treeDepths: unProcessedTreeDepths,
      dataRowIds: unProcessedDataRowIds,
      groupingName
    } = apiRef.current.applyStrategyProcessor("rowTreeCreation", {
      previousTree,
      previousTreeDepths,
      updates: cache.updates,
      dataRowIdToIdLookup: cache.dataRowIdToIdLookup,
      dataRowIdToModelLookup: cache.dataRowIdToModelLookup
    });
    const groupingParamsWithHydrateRows = apiRef.current.unstable_applyPipeProcessors("hydrateRows", {
      tree: unProcessedTree,
      treeDepths: unProcessedTreeDepths,
      dataRowIdToIdLookup: cache.dataRowIdToIdLookup,
      dataRowIds: unProcessedDataRowIds,
      dataRowIdToModelLookup: cache.dataRowIdToModelLookup
    });
    apiRef.current.caches.rows.updates = {
      type: "partial",
      actions: {
        insert: [],
        modify: [],
        remove: []
      },
      idToActionLookup: {}
    };
    return _extends({}, groupingParamsWithHydrateRows, {
      totalRowCount: Math.max(rowCountProp, groupingParamsWithHydrateRows.dataRowIds.length),
      totalTopLevelRowCount: getTopLevelRowCount({
        tree: groupingParamsWithHydrateRows.tree,
        rowCountProp
      }),
      groupingName,
      loading: loadingProp
    });
  };
  var isAutoGeneratedRow = (rowNode) => rowNode.type === "skeletonRow" || rowNode.type === "footer" || rowNode.type === "group" && rowNode.isAutoGenerated || rowNode.type === "pinnedRow" && rowNode.isAutoGenerated;
  var getTreeNodeDescendants = (tree, parentId, skipAutoGeneratedRows) => {
    const node2 = tree[parentId];
    if (node2.type !== "group") {
      return [];
    }
    const validDescendants = [];
    for (let i = 0; i < node2.children.length; i += 1) {
      const child = node2.children[i];
      if (!skipAutoGeneratedRows || !isAutoGeneratedRow(tree[child])) {
        validDescendants.push(child);
      }
      const childDescendants = getTreeNodeDescendants(tree, child, skipAutoGeneratedRows);
      for (let j = 0; j < childDescendants.length; j += 1) {
        validDescendants.push(childDescendants[j]);
      }
    }
    if (!skipAutoGeneratedRows && node2.footerId != null) {
      validDescendants.push(node2.footerId);
    }
    return validDescendants;
  };
  var updateCacheWithNewRows = ({
    previousCache,
    getRowId,
    updates
  }) => {
    var _previousCache$update, _previousCache$update2, _previousCache$update3;
    if (previousCache.updates.type === "full") {
      throw new Error("MUI: Unable to prepare a partial update if a full update is not applied yet");
    }
    const uniqueUpdates = /* @__PURE__ */ new Map();
    updates.forEach((update) => {
      const id = getRowIdFromRowModel(update, getRowId, "A row was provided without id when calling updateRows():");
      if (uniqueUpdates.has(id)) {
        uniqueUpdates.set(id, _extends({}, uniqueUpdates.get(id), update));
      } else {
        uniqueUpdates.set(id, update);
      }
    });
    const partialUpdates = {
      type: "partial",
      actions: {
        insert: [...(_previousCache$update = previousCache.updates.actions.insert) != null ? _previousCache$update : []],
        modify: [...(_previousCache$update2 = previousCache.updates.actions.modify) != null ? _previousCache$update2 : []],
        remove: [...(_previousCache$update3 = previousCache.updates.actions.remove) != null ? _previousCache$update3 : []]
      },
      idToActionLookup: _extends({}, previousCache.updates.idToActionLookup)
    };
    const dataRowIdToModelLookup = _extends({}, previousCache.dataRowIdToModelLookup);
    const dataRowIdToIdLookup = _extends({}, previousCache.dataRowIdToIdLookup);
    const alreadyAppliedActionsToRemove = {
      insert: {},
      modify: {},
      remove: {}
    };
    uniqueUpdates.forEach((partialRow, id) => {
      const actionAlreadyAppliedToRow = partialUpdates.idToActionLookup[id];
      if (partialRow._action === "delete") {
        if (actionAlreadyAppliedToRow === "remove" || !dataRowIdToModelLookup[id]) {
          return;
        }
        if (actionAlreadyAppliedToRow != null) {
          alreadyAppliedActionsToRemove[actionAlreadyAppliedToRow][id] = true;
        }
        partialUpdates.actions.remove.push(id);
        delete dataRowIdToModelLookup[id];
        delete dataRowIdToIdLookup[id];
        return;
      }
      const oldRow = dataRowIdToModelLookup[id];
      if (oldRow) {
        if (actionAlreadyAppliedToRow === "remove") {
          alreadyAppliedActionsToRemove.remove[id] = true;
          partialUpdates.actions.modify.push(id);
        } else if (actionAlreadyAppliedToRow == null) {
          partialUpdates.actions.modify.push(id);
        }
        dataRowIdToModelLookup[id] = _extends({}, oldRow, partialRow);
        return;
      }
      if (actionAlreadyAppliedToRow === "remove") {
        alreadyAppliedActionsToRemove.remove[id] = true;
        partialUpdates.actions.insert.push(id);
      } else if (actionAlreadyAppliedToRow == null) {
        partialUpdates.actions.insert.push(id);
      }
      dataRowIdToModelLookup[id] = partialRow;
      dataRowIdToIdLookup[id] = id;
    });
    const actionTypeWithActionsToRemove = Object.keys(alreadyAppliedActionsToRemove);
    for (let i = 0; i < actionTypeWithActionsToRemove.length; i += 1) {
      const actionType = actionTypeWithActionsToRemove[i];
      const idsToRemove = alreadyAppliedActionsToRemove[actionType];
      if (Object.keys(idsToRemove).length > 0) {
        partialUpdates.actions[actionType] = partialUpdates.actions[actionType].filter((id) => !idsToRemove[id]);
      }
    }
    return {
      dataRowIdToModelLookup,
      dataRowIdToIdLookup,
      updates: partialUpdates,
      rowsBeforePartialUpdates: previousCache.rowsBeforePartialUpdates,
      loadingPropBeforePartialUpdates: previousCache.loadingPropBeforePartialUpdates,
      rowCountPropBeforePartialUpdates: previousCache.rowCountPropBeforePartialUpdates
    };
  };
  function calculatePinnedRowsHeight(apiRef) {
    var _pinnedRows$top, _pinnedRows$bottom;
    const pinnedRows = gridPinnedRowsSelector(apiRef);
    const topPinnedRowsHeight = (pinnedRows == null || (_pinnedRows$top = pinnedRows.top) == null ? void 0 : _pinnedRows$top.reduce((acc, value) => {
      acc += apiRef.current.unstable_getRowHeight(value.id);
      return acc;
    }, 0)) || 0;
    const bottomPinnedRowsHeight = (pinnedRows == null || (_pinnedRows$bottom = pinnedRows.bottom) == null ? void 0 : _pinnedRows$bottom.reduce((acc, value) => {
      acc += apiRef.current.unstable_getRowHeight(value.id);
      return acc;
    }, 0)) || 0;
    return {
      top: topPinnedRowsHeight,
      bottom: bottomPinnedRowsHeight
    };
  }
  function getMinimalContentHeight(apiRef, rowHeight) {
    const densityFactor = gridDensityFactorSelector(apiRef);
    return `var(--DataGrid-overlayHeight, ${2 * Math.floor(rowHeight * densityFactor)}px)`;
  }

  // node_modules/@mui/x-data-grid/components/base/GridOverlays.js
  var import_jsx_runtime10 = __toESM(require_jsx_runtime());
  var GridOverlayWrapperRoot = styled_default("div", {
    name: "MuiDataGrid",
    slot: "OverlayWrapper",
    shouldForwardProp: (prop) => prop !== "overlayType",
    overridesResolver: (props, styles4) => styles4.overlayWrapper
  })(({
    overlayType
  }) => ({
    position: "sticky",
    // To stay in place while scrolling
    top: 0,
    left: 0,
    width: 0,
    // To stay above the content instead of shifting it down
    height: 0,
    // To stay above the content instead of shifting it down
    zIndex: overlayType === "loadingOverlay" ? 5 : 4
    // Should be above pinned columns and detail panel
  }));
  var GridOverlayWrapperInner = styled_default("div", {
    name: "MuiDataGrid",
    slot: "OverlayWrapperInner",
    shouldForwardProp: (prop) => prop !== "overlayType",
    overridesResolver: (props, styles4) => styles4.overlayWrapperInner
  })({});
  var useUtilityClasses2 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["overlayWrapper"],
      inner: ["overlayWrapperInner"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  function GridOverlayWrapper(props) {
    var _viewportInnerSize$he, _viewportInnerSize$wi;
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const [viewportInnerSize, setViewportInnerSize] = React34.useState(() => {
      var _apiRef$current$getRo, _apiRef$current$getRo2;
      return (_apiRef$current$getRo = (_apiRef$current$getRo2 = apiRef.current.getRootDimensions()) == null ? void 0 : _apiRef$current$getRo2.viewportInnerSize) != null ? _apiRef$current$getRo : null;
    });
    const handleViewportSizeChange = React34.useCallback(() => {
      var _apiRef$current$getRo3, _apiRef$current$getRo4;
      setViewportInnerSize((_apiRef$current$getRo3 = (_apiRef$current$getRo4 = apiRef.current.getRootDimensions()) == null ? void 0 : _apiRef$current$getRo4.viewportInnerSize) != null ? _apiRef$current$getRo3 : null);
    }, [apiRef]);
    useEnhancedEffect_default(() => {
      return apiRef.current.subscribeEvent("viewportInnerSizeChange", handleViewportSizeChange);
    }, [apiRef, handleViewportSizeChange]);
    let height2 = (_viewportInnerSize$he = viewportInnerSize == null ? void 0 : viewportInnerSize.height) != null ? _viewportInnerSize$he : 0;
    if (rootProps.autoHeight && height2 === 0) {
      height2 = getMinimalContentHeight(apiRef, rootProps.rowHeight);
    }
    const classes = useUtilityClasses2(_extends({}, props, {
      classes: rootProps.classes
    }));
    if (!viewportInnerSize) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(GridOverlayWrapperRoot, {
      className: clsx_default(classes.root),
      overlayType: props.overlayType,
      children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(GridOverlayWrapperInner, _extends({
        className: clsx_default(classes.inner),
        style: {
          height: height2,
          width: (_viewportInnerSize$wi = viewportInnerSize == null ? void 0 : viewportInnerSize.width) != null ? _viewportInnerSize$wi : 0
        }
      }, props))
    });
  }
  true ? GridOverlayWrapper.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    overlayType: import_prop_types10.default.string.isRequired
  } : void 0;
  function GridOverlays() {
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const totalRowCount = useGridSelector(apiRef, gridRowCountSelector);
    const visibleRowCount = useGridSelector(apiRef, gridExpandedRowCountSelector);
    const loading = useGridSelector(apiRef, gridRowsLoadingSelector);
    const showNoRowsOverlay = !loading && totalRowCount === 0;
    const showNoResultsOverlay = !loading && totalRowCount > 0 && visibleRowCount === 0;
    let overlay = null;
    let overlayType = "";
    if (showNoRowsOverlay) {
      var _rootProps$slotProps;
      overlay = /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(rootProps.slots.noRowsOverlay, _extends({}, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.noRowsOverlay));
      overlayType = "noRowsOverlay";
    }
    if (showNoResultsOverlay) {
      var _rootProps$slotProps2;
      overlay = /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(rootProps.slots.noResultsOverlay, _extends({}, (_rootProps$slotProps2 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps2.noResultsOverlay));
      overlayType = "noResultsOverlay";
    }
    if (loading) {
      var _rootProps$slotProps3;
      overlay = /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(rootProps.slots.loadingOverlay, _extends({}, (_rootProps$slotProps3 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps3.loadingOverlay));
      overlayType = "loadingOverlay";
    }
    if (overlay === null) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(GridOverlayWrapper, {
      overlayType,
      children: overlay
    });
  }

  // node_modules/@mui/x-data-grid/components/cell/GridCell.js
  init_extends();
  var React38 = __toESM(require_react());
  var import_prop_types11 = __toESM(require_prop_types());

  // node_modules/@mui/x-data-grid/utils/fastMemo.js
  var React35 = __toESM(require_react());
  function fastMemo(component) {
    return /* @__PURE__ */ React35.memo(component, fastObjectShallowCompare);
  }

  // node_modules/@mui/x-data-grid/utils/doesSupportPreventScroll.js
  var cachedSupportsPreventScroll;
  function doesSupportPreventScroll() {
    if (cachedSupportsPreventScroll === void 0) {
      document.createElement("div").focus({
        get preventScroll() {
          cachedSupportsPreventScroll = true;
          return false;
        }
      });
    }
    return cachedSupportsPreventScroll;
  }

  // node_modules/@mui/x-data-grid/models/gridEditRowModel.js
  var GridEditModes = /* @__PURE__ */ function(GridEditModes2) {
    GridEditModes2["Cell"] = "cell";
    GridEditModes2["Row"] = "row";
    return GridEditModes2;
  }(GridEditModes || {});
  var GridCellModes = /* @__PURE__ */ function(GridCellModes2) {
    GridCellModes2["Edit"] = "edit";
    GridCellModes2["View"] = "view";
    return GridCellModes2;
  }(GridCellModes || {});
  var GridRowModes = /* @__PURE__ */ function(GridRowModes2) {
    GridRowModes2["Edit"] = "edit";
    GridRowModes2["View"] = "view";
    return GridRowModes2;
  }(GridRowModes || {});

  // node_modules/@mui/x-data-grid/models/gridFilterItem.js
  var GridLogicOperator = /* @__PURE__ */ function(GridLogicOperator2) {
    GridLogicOperator2["And"] = "and";
    GridLogicOperator2["Or"] = "or";
    return GridLogicOperator2;
  }(GridLogicOperator || {});

  // node_modules/@mui/x-data-grid/models/params/gridEditCellParams.js
  var GridCellEditStartReasons = /* @__PURE__ */ function(GridCellEditStartReasons2) {
    GridCellEditStartReasons2["enterKeyDown"] = "enterKeyDown";
    GridCellEditStartReasons2["cellDoubleClick"] = "cellDoubleClick";
    GridCellEditStartReasons2["printableKeyDown"] = "printableKeyDown";
    GridCellEditStartReasons2["deleteKeyDown"] = "deleteKeyDown";
    GridCellEditStartReasons2["pasteKeyDown"] = "pasteKeyDown";
    return GridCellEditStartReasons2;
  }(GridCellEditStartReasons || {});
  var GridCellEditStopReasons = /* @__PURE__ */ function(GridCellEditStopReasons2) {
    GridCellEditStopReasons2["cellFocusOut"] = "cellFocusOut";
    GridCellEditStopReasons2["escapeKeyDown"] = "escapeKeyDown";
    GridCellEditStopReasons2["enterKeyDown"] = "enterKeyDown";
    GridCellEditStopReasons2["tabKeyDown"] = "tabKeyDown";
    GridCellEditStopReasons2["shiftTabKeyDown"] = "shiftTabKeyDown";
    return GridCellEditStopReasons2;
  }(GridCellEditStopReasons || {});

  // node_modules/@mui/x-data-grid/models/params/gridRowParams.js
  var GridRowEditStartReasons = /* @__PURE__ */ function(GridRowEditStartReasons2) {
    GridRowEditStartReasons2["enterKeyDown"] = "enterKeyDown";
    GridRowEditStartReasons2["cellDoubleClick"] = "cellDoubleClick";
    GridRowEditStartReasons2["printableKeyDown"] = "printableKeyDown";
    GridRowEditStartReasons2["deleteKeyDown"] = "deleteKeyDown";
    return GridRowEditStartReasons2;
  }(GridRowEditStartReasons || {});
  var GridRowEditStopReasons = /* @__PURE__ */ function(GridRowEditStopReasons2) {
    GridRowEditStopReasons2["rowFocusOut"] = "rowFocusOut";
    GridRowEditStopReasons2["escapeKeyDown"] = "escapeKeyDown";
    GridRowEditStopReasons2["enterKeyDown"] = "enterKeyDown";
    GridRowEditStopReasons2["tabKeyDown"] = "tabKeyDown";
    GridRowEditStopReasons2["shiftTabKeyDown"] = "shiftTabKeyDown";
    return GridRowEditStopReasons2;
  }(GridRowEditStopReasons || {});

  // node_modules/@mui/x-data-grid/models/gridColumnGrouping.js
  function isLeaf(node2) {
    return node2.field !== void 0;
  }

  // node_modules/@mui/x-data-grid/hooks/features/rows/useGridParamsApi.js
  var React37 = __toESM(require_react());

  // node_modules/@mui/x-data-grid/utils/domUtils.js
  function isOverflown(element) {
    return element.scrollHeight > element.clientHeight || element.scrollWidth > element.clientWidth;
  }
  function findParentElementFromClassName(elem, className) {
    return elem.closest(`.${className}`);
  }
  function escapeOperandAttributeSelector(operand) {
    return operand.replace(/["\\]/g, "\\$&");
  }
  function getGridColumnHeaderElement(root, field) {
    return root.querySelector(`[role="columnheader"][data-field="${escapeOperandAttributeSelector(field)}"]`);
  }
  function getGridRowElementSelector(id) {
    return `.${gridClasses.row}[data-id="${escapeOperandAttributeSelector(String(id))}"]`;
  }
  function getGridRowElement(root, id) {
    return root.querySelector(getGridRowElementSelector(id));
  }
  function getGridCellElement(root, {
    id,
    field
  }) {
    const rowSelector = getGridRowElementSelector(id);
    const cellSelector = `.${gridClasses.cell}[data-field="${escapeOperandAttributeSelector(field)}"]`;
    const selector = `${rowSelector} ${cellSelector}`;
    return root.querySelector(selector);
  }
  function isEventTargetInPortal(event) {
    if (
      // The target is not an element when triggered by a Select inside the cell
      // See https://github.com/mui/material-ui/issues/10534
      event.target.nodeType === 1 && !event.currentTarget.contains(event.target)
    ) {
      return true;
    }
    return false;
  }

  // node_modules/@mui/x-data-grid/hooks/utils/useGridApiMethod.js
  var React36 = __toESM(require_react());
  function useGridApiMethod(privateApiRef, apiMethods, visibility) {
    const isFirstRender = React36.useRef(true);
    React36.useEffect(() => {
      isFirstRender.current = false;
      privateApiRef.current.register(visibility, apiMethods);
    }, [privateApiRef, visibility, apiMethods]);
    if (isFirstRender.current) {
      privateApiRef.current.register(visibility, apiMethods);
    }
  }

  // node_modules/@mui/x-data-grid/hooks/features/rows/useGridParamsApi.js
  var MissingRowIdError = class extends Error {
  };
  function useGridParamsApi(apiRef, props) {
    const {
      getRowId
    } = props;
    const getColumnHeaderParams = React37.useCallback((field) => ({
      field,
      colDef: apiRef.current.getColumn(field)
    }), [apiRef]);
    const getRowParams = React37.useCallback((id) => {
      const row = apiRef.current.getRow(id);
      if (!row) {
        throw new MissingRowIdError(`No row with id #${id} found`);
      }
      const params = {
        id,
        columns: apiRef.current.getAllColumns(),
        row
      };
      return params;
    }, [apiRef]);
    const getBaseCellParams = React37.useCallback((id, field) => {
      const row = apiRef.current.getRow(id);
      const rowNode = apiRef.current.getRowNode(id);
      if (!row || !rowNode) {
        throw new MissingRowIdError(`No row with id #${id} found`);
      }
      const cellFocus = gridFocusCellSelector(apiRef);
      const cellTabIndex = gridTabIndexCellSelector(apiRef);
      const params = {
        id,
        field,
        row,
        rowNode,
        value: row[field],
        colDef: apiRef.current.getColumn(field),
        cellMode: apiRef.current.getCellMode(id, field),
        api: apiRef.current,
        hasFocus: cellFocus !== null && cellFocus.field === field && cellFocus.id === id,
        tabIndex: cellTabIndex && cellTabIndex.field === field && cellTabIndex.id === id ? 0 : -1
      };
      return params;
    }, [apiRef]);
    const getCellParams = React37.useCallback((id, field) => {
      const colDef = apiRef.current.getColumn(field);
      const value = apiRef.current.getCellValue(id, field);
      const row = apiRef.current.getRow(id);
      const rowNode = apiRef.current.getRowNode(id);
      if (!row || !rowNode) {
        throw new MissingRowIdError(`No row with id #${id} found`);
      }
      const cellFocus = gridFocusCellSelector(apiRef);
      const cellTabIndex = gridTabIndexCellSelector(apiRef);
      const params = {
        id,
        field,
        row,
        rowNode,
        colDef,
        cellMode: apiRef.current.getCellMode(id, field),
        hasFocus: cellFocus !== null && cellFocus.field === field && cellFocus.id === id,
        tabIndex: cellTabIndex && cellTabIndex.field === field && cellTabIndex.id === id ? 0 : -1,
        value,
        formattedValue: value,
        isEditable: false
      };
      if (colDef && colDef.valueFormatter) {
        params.formattedValue = colDef.valueFormatter({
          id,
          field: params.field,
          value: params.value,
          api: apiRef.current
        });
      }
      params.isEditable = colDef && apiRef.current.isCellEditable(params);
      return params;
    }, [apiRef]);
    const getCellValue = React37.useCallback((id, field) => {
      const colDef = apiRef.current.getColumn(field);
      if (!colDef || !colDef.valueGetter) {
        const rowModel = apiRef.current.getRow(id);
        if (!rowModel) {
          throw new MissingRowIdError(`No row with id #${id} found`);
        }
        return rowModel[field];
      }
      return colDef.valueGetter(getBaseCellParams(id, field));
    }, [apiRef, getBaseCellParams]);
    const getRowValue = React37.useCallback((row, colDef) => {
      var _getRowId;
      const id = GRID_ID_AUTOGENERATED in row ? row[GRID_ID_AUTOGENERATED] : (_getRowId = getRowId == null ? void 0 : getRowId(row)) != null ? _getRowId : row.id;
      const field = colDef.field;
      if (!colDef || !colDef.valueGetter) {
        return row[field];
      }
      return colDef.valueGetter(getBaseCellParams(id, field));
    }, [getBaseCellParams, getRowId]);
    const getRowFormattedValue = React37.useCallback((row, colDef) => {
      var _ref;
      const value = getRowValue(row, colDef);
      if (!colDef || !colDef.valueFormatter) {
        return value;
      }
      const id = (_ref = getRowId ? getRowId(row) : row.id) != null ? _ref : row[GRID_ID_AUTOGENERATED];
      const field = colDef.field;
      return colDef.valueFormatter({
        id,
        field,
        value,
        api: apiRef.current
      });
    }, [apiRef, getRowId, getRowValue]);
    const getColumnHeaderElement = React37.useCallback((field) => {
      if (!apiRef.current.rootElementRef.current) {
        return null;
      }
      return getGridColumnHeaderElement(apiRef.current.rootElementRef.current, field);
    }, [apiRef]);
    const getRowElement = React37.useCallback((id) => {
      if (!apiRef.current.rootElementRef.current) {
        return null;
      }
      return getGridRowElement(apiRef.current.rootElementRef.current, id);
    }, [apiRef]);
    const getCellElement = React37.useCallback((id, field) => {
      if (!apiRef.current.rootElementRef.current) {
        return null;
      }
      return getGridCellElement(apiRef.current.rootElementRef.current, {
        id,
        field
      });
    }, [apiRef]);
    const paramsApi = {
      getCellValue,
      getCellParams,
      getCellElement,
      getRowValue,
      getRowFormattedValue,
      getRowParams,
      getRowElement,
      getColumnHeaderParams,
      getColumnHeaderElement
    };
    useGridApiMethod(apiRef, paramsApi, "public");
  }

  // node_modules/@mui/x-data-grid/components/cell/GridCell.js
  var import_jsx_runtime11 = __toESM(require_jsx_runtime());
  var _excluded9 = ["changeReason", "unstable_updateValueOnRender"];
  var _excluded23 = ["align", "children", "editCellState", "colIndex", "column", "cellMode", "field", "formattedValue", "hasFocus", "height", "isEditable", "isSelected", "rowId", "tabIndex", "style", "value", "width", "className", "showRightBorder", "extendRowFullWidth", "row", "colSpan", "disableDragEvents", "isNotVisible", "onClick", "onDoubleClick", "onMouseDown", "onMouseUp", "onMouseOver", "onKeyDown", "onKeyUp", "onDragEnter", "onDragOver"];
  var _excluded33 = ["column", "rowId", "editCellState", "align", "children", "colIndex", "height", "width", "className", "showRightBorder", "extendRowFullWidth", "row", "colSpan", "disableDragEvents", "isNotVisible", "onClick", "onDoubleClick", "onMouseDown", "onMouseUp", "onMouseOver", "onKeyDown", "onKeyUp", "onDragEnter", "onDragOver", "style"];
  var _excluded42 = ["changeReason", "unstable_updateValueOnRender"];
  var EMPTY_CELL_PARAMS = {
    id: -1,
    field: "__unset__",
    row: {},
    rowNode: {
      id: -1,
      depth: 0,
      type: "leaf",
      parent: -1,
      groupingKey: null
    },
    colDef: {
      type: "string",
      field: "__unset__",
      computedWidth: 0
    },
    cellMode: GridCellModes.View,
    hasFocus: false,
    tabIndex: -1,
    value: null,
    formattedValue: "__unset__",
    isEditable: false,
    api: {}
  };
  var useUtilityClasses3 = (ownerState) => {
    const {
      align,
      showRightBorder,
      isEditable,
      isSelected,
      isSelectionMode,
      classes
    } = ownerState;
    const slots = {
      root: ["cell", `cell--text${capitalize(align)}`, isEditable && "cell--editable", isSelected && "selected", showRightBorder && "cell--withRightBorder", isSelectionMode && !isEditable && "cell--selectionMode", "withBorderColor"],
      content: ["cellContent"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridCellWrapper = /* @__PURE__ */ React38.forwardRef((props, ref) => {
    const {
      column: column2,
      rowId,
      editCellState
    } = props;
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const field = column2.field;
    const cellParamsWithAPI = useGridSelector(apiRef, () => {
      try {
        const cellParams = apiRef.current.getCellParams(rowId, field);
        const result = cellParams;
        result.api = apiRef.current;
        return result;
      } catch (e) {
        if (e instanceof MissingRowIdError) {
          return EMPTY_CELL_PARAMS;
        }
        throw e;
      }
    }, objectShallowCompare);
    const isSelected = useGridSelector(apiRef, () => apiRef.current.unstable_applyPipeProcessors("isCellSelected", false, {
      id: rowId,
      field
    }));
    if (cellParamsWithAPI === EMPTY_CELL_PARAMS) {
      return null;
    }
    const {
      cellMode,
      hasFocus,
      isEditable,
      value,
      formattedValue
    } = cellParamsWithAPI;
    const managesOwnFocus = column2.type === "actions";
    const tabIndex = (cellMode === "view" || !isEditable) && !managesOwnFocus ? cellParamsWithAPI.tabIndex : -1;
    const {
      classes: rootClasses,
      getCellClassName
    } = rootProps;
    const classNames = apiRef.current.unstable_applyPipeProcessors("cellClassName", [], {
      id: rowId,
      field
    });
    if (column2.cellClassName) {
      classNames.push(typeof column2.cellClassName === "function" ? column2.cellClassName(cellParamsWithAPI) : column2.cellClassName);
    }
    if (getCellClassName) {
      classNames.push(getCellClassName(cellParamsWithAPI));
    }
    let children;
    if (editCellState == null && column2.renderCell) {
      children = column2.renderCell(cellParamsWithAPI);
      classNames.push(gridClasses["cell--withRenderer"]);
      classNames.push(rootClasses == null ? void 0 : rootClasses["cell--withRenderer"]);
    }
    if (editCellState != null && column2.renderEditCell) {
      const updatedRow = apiRef.current.getRowWithUpdatedValues(rowId, column2.field);
      const editCellStateRest = _objectWithoutPropertiesLoose(editCellState, _excluded9);
      const params = _extends({}, cellParamsWithAPI, {
        row: updatedRow
      }, editCellStateRest);
      children = column2.renderEditCell(params);
      classNames.push(gridClasses["cell--editing"]);
      classNames.push(rootClasses == null ? void 0 : rootClasses["cell--editing"]);
    }
    const {
      slots
    } = rootProps;
    const CellComponent = slots.cell;
    const cellProps = _extends({}, props, {
      ref,
      field,
      formattedValue,
      hasFocus,
      isEditable,
      isSelected,
      value,
      cellMode,
      children,
      tabIndex,
      className: clsx_default(classNames)
    });
    return /* @__PURE__ */ React38.createElement(CellComponent, cellProps);
  });
  var GridCell = /* @__PURE__ */ React38.forwardRef((props, ref) => {
    var _rootProps$experiment, _rootProps$experiment2;
    const {
      align,
      children: childrenProp,
      colIndex,
      column: column2,
      cellMode,
      field,
      formattedValue,
      hasFocus,
      height: height2,
      isEditable,
      isSelected,
      rowId,
      tabIndex,
      style: styleProp,
      value,
      width: width2,
      className,
      showRightBorder,
      colSpan,
      disableDragEvents,
      isNotVisible,
      onClick,
      onDoubleClick,
      onMouseDown,
      onMouseUp,
      onMouseOver,
      onKeyDown,
      onKeyUp,
      onDragEnter,
      onDragOver
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded23);
    const valueToRender = formattedValue == null ? value : formattedValue;
    const cellRef = React38.useRef(null);
    const handleRef = useForkRef(ref, cellRef);
    const focusElementRef = React38.useRef(null);
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const ownerState = {
      align,
      showRightBorder,
      isEditable,
      classes: rootProps.classes,
      isSelected
    };
    const classes = useUtilityClasses3(ownerState);
    const publishMouseUp = React38.useCallback((eventName) => (event) => {
      const params = apiRef.current.getCellParams(rowId, field || "");
      apiRef.current.publishEvent(eventName, params, event);
      if (onMouseUp) {
        onMouseUp(event);
      }
    }, [apiRef, field, onMouseUp, rowId]);
    const publishMouseDown = React38.useCallback((eventName) => (event) => {
      const params = apiRef.current.getCellParams(rowId, field || "");
      apiRef.current.publishEvent(eventName, params, event);
      if (onMouseDown) {
        onMouseDown(event);
      }
    }, [apiRef, field, onMouseDown, rowId]);
    const publish = React38.useCallback((eventName, propHandler) => (event) => {
      if (!apiRef.current.getRow(rowId)) {
        return;
      }
      const params = apiRef.current.getCellParams(rowId, field || "");
      apiRef.current.publishEvent(eventName, params, event);
      if (propHandler) {
        propHandler(event);
      }
    }, [apiRef, field, rowId]);
    const style4 = React38.useMemo(() => {
      if (isNotVisible) {
        return {
          padding: 0,
          opacity: 0,
          width: 0,
          border: 0
        };
      }
      const cellStyle = _extends({
        minWidth: width2,
        maxWidth: width2,
        minHeight: height2,
        maxHeight: height2 === "auto" ? "none" : height2
      }, styleProp);
      return cellStyle;
    }, [width2, height2, isNotVisible, styleProp]);
    React38.useEffect(() => {
      if (!hasFocus || cellMode === GridCellModes.Edit) {
        return;
      }
      const doc = ownerDocument(apiRef.current.rootElementRef.current);
      if (cellRef.current && !cellRef.current.contains(doc.activeElement)) {
        const focusableElement = cellRef.current.querySelector('[tabindex="0"]');
        const elementToFocus = focusElementRef.current || focusableElement || cellRef.current;
        if (doesSupportPreventScroll()) {
          elementToFocus.focus({
            preventScroll: true
          });
        } else {
          const scrollPosition = apiRef.current.getScrollPosition();
          elementToFocus.focus();
          apiRef.current.scroll(scrollPosition);
        }
      }
    }, [hasFocus, cellMode, apiRef]);
    let handleFocus = other.onFocus;
    if (false) {
      handleFocus = (event) => {
        const focusedCell = gridFocusCellSelector(apiRef);
        if ((focusedCell == null ? void 0 : focusedCell.id) === rowId && focusedCell.field === field) {
          if (typeof other.onFocus === "function") {
            other.onFocus(event);
          }
          return;
        }
        if (!warnedOnce) {
          console.warn([`MUI: The cell with id=${rowId} and field=${field} received focus.`, `According to the state, the focus should be at id=${focusedCell == null ? void 0 : focusedCell.id}, field=${focusedCell == null ? void 0 : focusedCell.field}.`, "Not syncing the state may cause unwanted behaviors since the `cellFocusIn` event won't be fired.", "Call `fireEvent.mouseUp` before the `fireEvent.click` to sync the focus with the state."].join("\n"));
          warnedOnce = true;
        }
      };
    }
    const managesOwnFocus = column2.type === "actions";
    let children = childrenProp;
    if (children === void 0) {
      const valueString = valueToRender == null ? void 0 : valueToRender.toString();
      children = /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("div", {
        className: classes.content,
        title: valueString,
        role: "presentation",
        children: valueString
      });
    }
    if (/* @__PURE__ */ React38.isValidElement(children) && managesOwnFocus) {
      children = /* @__PURE__ */ React38.cloneElement(children, {
        focusElementRef
      });
    }
    const draggableEventHandlers = disableDragEvents ? null : {
      onDragEnter: publish("cellDragEnter", onDragEnter),
      onDragOver: publish("cellDragOver", onDragOver)
    };
    const ariaV7 = (_rootProps$experiment2 = rootProps.experimentalFeatures) == null ? void 0 : _rootProps$experiment2.ariaV7;
    return (
      // eslint-disable-next-line jsx-a11y/no-static-element-interactions
      /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("div", _extends({
        ref: handleRef,
        className: clsx_default(className, classes.root),
        role: ariaV7 ? "gridcell" : "cell",
        "data-field": field,
        "data-colindex": colIndex,
        "aria-colindex": colIndex + 1,
        "aria-colspan": colSpan,
        style: style4,
        tabIndex,
        onClick: publish("cellClick", onClick),
        onDoubleClick: publish("cellDoubleClick", onDoubleClick),
        onMouseOver: publish("cellMouseOver", onMouseOver),
        onMouseDown: publishMouseDown("cellMouseDown"),
        onMouseUp: publishMouseUp("cellMouseUp"),
        onKeyDown: publish("cellKeyDown", onKeyDown),
        onKeyUp: publish("cellKeyUp", onKeyUp)
      }, draggableEventHandlers, other, {
        onFocus: handleFocus,
        children
      }))
    );
  });
  var MemoizedCellWrapper = fastMemo(GridCellWrapper);
  true ? GridCellWrapper.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    align: import_prop_types11.default.oneOf(["center", "left", "right"]),
    className: import_prop_types11.default.string,
    colIndex: import_prop_types11.default.number,
    colSpan: import_prop_types11.default.number,
    column: import_prop_types11.default.object,
    disableDragEvents: import_prop_types11.default.bool,
    height: import_prop_types11.default.oneOfType([import_prop_types11.default.oneOf(["auto"]), import_prop_types11.default.number]),
    onClick: import_prop_types11.default.func,
    onDoubleClick: import_prop_types11.default.func,
    onDragEnter: import_prop_types11.default.func,
    onDragOver: import_prop_types11.default.func,
    onKeyDown: import_prop_types11.default.func,
    onMouseDown: import_prop_types11.default.func,
    onMouseUp: import_prop_types11.default.func,
    rowId: import_prop_types11.default.oneOfType([import_prop_types11.default.number, import_prop_types11.default.string]),
    showRightBorder: import_prop_types11.default.bool,
    width: import_prop_types11.default.number
  } : void 0;
  true ? GridCell.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    align: import_prop_types11.default.oneOf(["center", "left", "right"]),
    cellMode: import_prop_types11.default.oneOf(["edit", "view"]),
    children: import_prop_types11.default.node,
    className: import_prop_types11.default.string,
    colIndex: import_prop_types11.default.number,
    colSpan: import_prop_types11.default.number,
    column: import_prop_types11.default.object,
    disableDragEvents: import_prop_types11.default.bool,
    editCellState: import_prop_types11.default.shape({
      changeReason: import_prop_types11.default.oneOf(["debouncedSetEditCellValue", "setEditCellValue"]),
      isProcessingProps: import_prop_types11.default.bool,
      isValidating: import_prop_types11.default.bool,
      value: import_prop_types11.default.any
    }),
    isNotVisible: import_prop_types11.default.bool,
    height: import_prop_types11.default.oneOfType([import_prop_types11.default.oneOf(["auto"]), import_prop_types11.default.number]),
    onClick: import_prop_types11.default.func,
    onDoubleClick: import_prop_types11.default.func,
    onDragEnter: import_prop_types11.default.func,
    onDragOver: import_prop_types11.default.func,
    onKeyDown: import_prop_types11.default.func,
    onMouseDown: import_prop_types11.default.func,
    onMouseUp: import_prop_types11.default.func,
    rowId: import_prop_types11.default.oneOfType([import_prop_types11.default.number, import_prop_types11.default.string]),
    showRightBorder: import_prop_types11.default.bool,
    width: import_prop_types11.default.number
  } : void 0;
  var GridCellV7 = /* @__PURE__ */ React38.forwardRef((props, ref) => {
    var _getActions, _ref, _rootProps$unstable_c, _rootProps$experiment3, _rootProps$experiment4;
    const {
      column: column2,
      rowId,
      editCellState,
      align,
      colIndex,
      height: height2,
      width: width2,
      className,
      showRightBorder,
      colSpan,
      disableDragEvents,
      isNotVisible,
      onClick,
      onDoubleClick,
      onMouseDown,
      onMouseUp,
      onMouseOver,
      onKeyDown,
      onKeyUp,
      onDragEnter,
      onDragOver,
      style: styleProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded33);
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const field = column2.field;
    const cellParamsWithAPI = useGridSelector(apiRef, () => {
      try {
        const cellParams = apiRef.current.getCellParams(rowId, field);
        const result = cellParams;
        result.api = apiRef.current;
        return result;
      } catch (e) {
        if (e instanceof MissingRowIdError) {
          return EMPTY_CELL_PARAMS;
        }
        throw e;
      }
    }, objectShallowCompare);
    const isSelected = useGridSelector(apiRef, () => apiRef.current.unstable_applyPipeProcessors("isCellSelected", false, {
      id: rowId,
      field
    }));
    const {
      cellMode,
      hasFocus,
      isEditable,
      value,
      formattedValue
    } = cellParamsWithAPI;
    const canManageOwnFocus = column2.type === "actions" && ((_getActions = (_ref = column2).getActions) == null ? void 0 : _getActions.call(_ref, apiRef.current.getRowParams(rowId)).some((action) => !action.props.disabled));
    const tabIndex = (cellMode === "view" || !isEditable) && !canManageOwnFocus ? cellParamsWithAPI.tabIndex : -1;
    const {
      classes: rootClasses,
      getCellClassName
    } = rootProps;
    const classNames = apiRef.current.unstable_applyPipeProcessors("cellClassName", [], {
      id: rowId,
      field
    });
    if (column2.cellClassName) {
      classNames.push(typeof column2.cellClassName === "function" ? column2.cellClassName(cellParamsWithAPI) : column2.cellClassName);
    }
    if (getCellClassName) {
      classNames.push(getCellClassName(cellParamsWithAPI));
    }
    const valueToRender = formattedValue == null ? value : formattedValue;
    const cellRef = React38.useRef(null);
    const handleRef = useForkRef(ref, cellRef);
    const focusElementRef = React38.useRef(null);
    const isSelectionMode = (_rootProps$unstable_c = rootProps.unstable_cellSelection) != null ? _rootProps$unstable_c : false;
    const ownerState = {
      align,
      showRightBorder,
      isEditable,
      classes: rootProps.classes,
      isSelected,
      isSelectionMode
    };
    const classes = useUtilityClasses3(ownerState);
    const publishMouseUp = React38.useCallback((eventName) => (event) => {
      const params = apiRef.current.getCellParams(rowId, field || "");
      apiRef.current.publishEvent(eventName, params, event);
      if (onMouseUp) {
        onMouseUp(event);
      }
    }, [apiRef, field, onMouseUp, rowId]);
    const publishMouseDown = React38.useCallback((eventName) => (event) => {
      const params = apiRef.current.getCellParams(rowId, field || "");
      apiRef.current.publishEvent(eventName, params, event);
      if (onMouseDown) {
        onMouseDown(event);
      }
    }, [apiRef, field, onMouseDown, rowId]);
    const publish = React38.useCallback((eventName, propHandler) => (event) => {
      if (!apiRef.current.getRow(rowId)) {
        return;
      }
      const params = apiRef.current.getCellParams(rowId, field || "");
      apiRef.current.publishEvent(eventName, params, event);
      if (propHandler) {
        propHandler(event);
      }
    }, [apiRef, field, rowId]);
    const style4 = React38.useMemo(() => {
      if (isNotVisible) {
        return _extends({
          padding: 0,
          opacity: 0,
          width: 0,
          border: 0
        }, styleProp);
      }
      const cellStyle = _extends({
        minWidth: width2,
        maxWidth: width2,
        minHeight: height2,
        maxHeight: height2 === "auto" ? "none" : height2
      }, styleProp);
      return cellStyle;
    }, [width2, height2, isNotVisible, styleProp]);
    React38.useEffect(() => {
      if (!hasFocus || cellMode === GridCellModes.Edit) {
        return;
      }
      const doc = ownerDocument(apiRef.current.rootElementRef.current);
      if (cellRef.current && !cellRef.current.contains(doc.activeElement)) {
        const focusableElement = cellRef.current.querySelector('[tabindex="0"]');
        const elementToFocus = focusElementRef.current || focusableElement || cellRef.current;
        if (doesSupportPreventScroll()) {
          elementToFocus.focus({
            preventScroll: true
          });
        } else {
          const scrollPosition = apiRef.current.getScrollPosition();
          elementToFocus.focus();
          apiRef.current.scroll(scrollPosition);
        }
      }
    }, [hasFocus, cellMode, apiRef]);
    if (cellParamsWithAPI === EMPTY_CELL_PARAMS) {
      return null;
    }
    let handleFocus = other.onFocus;
    if (false) {
      handleFocus = (event) => {
        const focusedCell = gridFocusCellSelector(apiRef);
        if ((focusedCell == null ? void 0 : focusedCell.id) === rowId && focusedCell.field === field) {
          if (typeof other.onFocus === "function") {
            other.onFocus(event);
          }
          return;
        }
        if (!warnedOnce) {
          console.warn([`MUI: The cell with id=${rowId} and field=${field} received focus.`, `According to the state, the focus should be at id=${focusedCell == null ? void 0 : focusedCell.id}, field=${focusedCell == null ? void 0 : focusedCell.field}.`, "Not syncing the state may cause unwanted behaviors since the `cellFocusIn` event won't be fired.", "Call `fireEvent.mouseUp` before the `fireEvent.click` to sync the focus with the state."].join("\n"));
          warnedOnce = true;
        }
      };
    }
    let children;
    if (editCellState == null && column2.renderCell) {
      children = column2.renderCell(cellParamsWithAPI);
      classNames.push(gridClasses["cell--withRenderer"]);
      classNames.push(rootClasses == null ? void 0 : rootClasses["cell--withRenderer"]);
    }
    if (editCellState != null && column2.renderEditCell) {
      const updatedRow = apiRef.current.getRowWithUpdatedValues(rowId, column2.field);
      const editCellStateRest = _objectWithoutPropertiesLoose(editCellState, _excluded42);
      const params = _extends({}, cellParamsWithAPI, {
        row: updatedRow
      }, editCellStateRest);
      children = column2.renderEditCell(params);
      classNames.push(gridClasses["cell--editing"]);
      classNames.push(rootClasses == null ? void 0 : rootClasses["cell--editing"]);
    }
    if (children === void 0) {
      const valueString = valueToRender == null ? void 0 : valueToRender.toString();
      children = /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("div", {
        className: classes.content,
        title: valueString,
        role: "presentation",
        children: valueString
      });
    }
    if (/* @__PURE__ */ React38.isValidElement(children) && canManageOwnFocus) {
      children = /* @__PURE__ */ React38.cloneElement(children, {
        focusElementRef
      });
    }
    const draggableEventHandlers = disableDragEvents ? null : {
      onDragEnter: publish("cellDragEnter", onDragEnter),
      onDragOver: publish("cellDragOver", onDragOver)
    };
    const ariaV7 = (_rootProps$experiment4 = rootProps.experimentalFeatures) == null ? void 0 : _rootProps$experiment4.ariaV7;
    return (
      // eslint-disable-next-line jsx-a11y/no-static-element-interactions
      /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("div", _extends({
        ref: handleRef,
        className: clsx_default(className, classNames, classes.root),
        role: ariaV7 ? "gridcell" : "cell",
        "data-field": field,
        "data-colindex": colIndex,
        "aria-colindex": colIndex + 1,
        "aria-colspan": colSpan,
        style: style4,
        tabIndex,
        onClick: publish("cellClick", onClick),
        onDoubleClick: publish("cellDoubleClick", onDoubleClick),
        onMouseOver: publish("cellMouseOver", onMouseOver),
        onMouseDown: publishMouseDown("cellMouseDown"),
        onMouseUp: publishMouseUp("cellMouseUp"),
        onKeyDown: publish("cellKeyDown", onKeyDown),
        onKeyUp: publish("cellKeyUp", onKeyUp)
      }, draggableEventHandlers, other, {
        onFocus: handleFocus,
        children
      }))
    );
  });
  true ? GridCellV7.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    align: import_prop_types11.default.oneOf(["center", "left", "right"]).isRequired,
    className: import_prop_types11.default.string,
    colIndex: import_prop_types11.default.number.isRequired,
    colSpan: import_prop_types11.default.number,
    column: import_prop_types11.default.object.isRequired,
    disableDragEvents: import_prop_types11.default.bool,
    editCellState: import_prop_types11.default.shape({
      changeReason: import_prop_types11.default.oneOf(["debouncedSetEditCellValue", "setEditCellValue"]),
      isProcessingProps: import_prop_types11.default.bool,
      isValidating: import_prop_types11.default.bool,
      value: import_prop_types11.default.any
    }),
    height: import_prop_types11.default.oneOfType([import_prop_types11.default.oneOf(["auto"]), import_prop_types11.default.number]).isRequired,
    isNotVisible: import_prop_types11.default.bool,
    onClick: import_prop_types11.default.func,
    onDoubleClick: import_prop_types11.default.func,
    onDragEnter: import_prop_types11.default.func,
    onDragOver: import_prop_types11.default.func,
    onKeyDown: import_prop_types11.default.func,
    onMouseDown: import_prop_types11.default.func,
    onMouseUp: import_prop_types11.default.func,
    rowId: import_prop_types11.default.oneOfType([import_prop_types11.default.number, import_prop_types11.default.string]).isRequired,
    showRightBorder: import_prop_types11.default.bool,
    width: import_prop_types11.default.number.isRequired
  } : void 0;
  var MemoizedGridCellV7 = fastMemo(GridCellV7);

  // node_modules/@mui/x-data-grid/components/cell/GridBooleanCell.js
  init_extends();
  var React39 = __toESM(require_react());
  var import_prop_types12 = __toESM(require_prop_types());
  var import_jsx_runtime12 = __toESM(require_jsx_runtime());
  var _excluded10 = ["id", "value", "formattedValue", "api", "field", "row", "rowNode", "colDef", "cellMode", "isEditable", "hasFocus", "tabIndex"];
  var useUtilityClasses4 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["booleanCell"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  function GridBooleanCellRaw(props) {
    const {
      value
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded10);
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const ownerState = {
      classes: rootProps.classes
    };
    const classes = useUtilityClasses4(ownerState);
    const Icon = React39.useMemo(() => value ? rootProps.slots.booleanCellTrueIcon : rootProps.slots.booleanCellFalseIcon, [rootProps.slots.booleanCellFalseIcon, rootProps.slots.booleanCellTrueIcon, value]);
    return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(Icon, _extends({
      fontSize: "small",
      className: classes.root,
      titleAccess: apiRef.current.getLocaleText(value ? "booleanCellTrueLabel" : "booleanCellFalseLabel"),
      "data-value": Boolean(value)
    }, other));
  }
  true ? GridBooleanCellRaw.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * GridApi that let you manipulate the grid.
     */
    api: import_prop_types12.default.object.isRequired,
    /**
     * The mode of the cell.
     */
    cellMode: import_prop_types12.default.oneOf(["edit", "view"]).isRequired,
    /**
     * The column of the row that the current cell belongs to.
     */
    colDef: import_prop_types12.default.object.isRequired,
    /**
     * The column field of the cell that triggered the event.
     */
    field: import_prop_types12.default.string.isRequired,
    /**
     * A ref allowing to set imperative focus.
     * It can be passed to the element that should receive focus.
     * @ignore - do not document.
     */
    focusElementRef: import_prop_types12.default.oneOfType([import_prop_types12.default.func, import_prop_types12.default.shape({
      current: import_prop_types12.default.shape({
        focus: import_prop_types12.default.func.isRequired
      })
    })]),
    /**
     * The cell value formatted with the column valueFormatter.
     */
    formattedValue: import_prop_types12.default.any,
    /**
     * If true, the cell is the active element.
     */
    hasFocus: import_prop_types12.default.bool.isRequired,
    /**
     * The grid row id.
     */
    id: import_prop_types12.default.oneOfType([import_prop_types12.default.number, import_prop_types12.default.string]).isRequired,
    /**
     * If true, the cell is editable.
     */
    isEditable: import_prop_types12.default.bool,
    /**
     * The row model of the row that the current cell belongs to.
     */
    row: import_prop_types12.default.any.isRequired,
    /**
     * The node of the row that the current cell belongs to.
     */
    rowNode: import_prop_types12.default.object.isRequired,
    /**
     * the tabIndex value.
     */
    tabIndex: import_prop_types12.default.oneOf([-1, 0]).isRequired,
    /**
     * The cell value.
     * If the column has `valueGetter`, use `params.row` to directly access the fields.
     */
    value: import_prop_types12.default.any
  } : void 0;
  var GridBooleanCell = /* @__PURE__ */ React39.memo(GridBooleanCellRaw);
  var renderBooleanCell = (params) => {
    if (isAutoGeneratedRow(params.rowNode)) {
      return "";
    }
    return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(GridBooleanCell, _extends({}, params));
  };

  // node_modules/@mui/x-data-grid/components/cell/GridEditBooleanCell.js
  init_extends();
  var React40 = __toESM(require_react());
  var import_prop_types13 = __toESM(require_prop_types());
  var import_jsx_runtime13 = __toESM(require_jsx_runtime());
  var _excluded11 = ["id", "value", "formattedValue", "api", "field", "row", "rowNode", "colDef", "cellMode", "isEditable", "tabIndex", "className", "hasFocus", "isValidating", "isProcessingProps", "error", "onValueChange"];
  var useUtilityClasses5 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["editBooleanCell"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  function GridEditBooleanCell(props) {
    var _rootProps$slotProps;
    const {
      id: idProp,
      value,
      field,
      className,
      hasFocus,
      onValueChange
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded11);
    const apiRef = useGridApiContext();
    const inputRef = React40.useRef(null);
    const id = useId();
    const [valueState, setValueState] = React40.useState(value);
    const rootProps = useGridRootProps();
    const ownerState = {
      classes: rootProps.classes
    };
    const classes = useUtilityClasses5(ownerState);
    const handleChange = React40.useCallback(async (event) => {
      const newValue = event.target.checked;
      if (onValueChange) {
        await onValueChange(event, newValue);
      }
      setValueState(newValue);
      await apiRef.current.setEditCellValue({
        id: idProp,
        field,
        value: newValue
      }, event);
    }, [apiRef, field, idProp, onValueChange]);
    React40.useEffect(() => {
      setValueState(value);
    }, [value]);
    useEnhancedEffect_default(() => {
      if (hasFocus) {
        inputRef.current.focus();
      }
    }, [hasFocus]);
    return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("label", _extends({
      htmlFor: id,
      className: clsx_default(classes.root, className)
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(rootProps.slots.baseCheckbox, _extends({
        id,
        inputRef,
        checked: Boolean(valueState),
        onChange: handleChange,
        size: "small"
      }, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseCheckbox))
    }));
  }
  true ? GridEditBooleanCell.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * GridApi that let you manipulate the grid.
     */
    api: import_prop_types13.default.object.isRequired,
    /**
     * The mode of the cell.
     */
    cellMode: import_prop_types13.default.oneOf(["edit", "view"]).isRequired,
    changeReason: import_prop_types13.default.oneOf(["debouncedSetEditCellValue", "setEditCellValue"]),
    /**
     * The column of the row that the current cell belongs to.
     */
    colDef: import_prop_types13.default.object.isRequired,
    /**
     * The column field of the cell that triggered the event.
     */
    field: import_prop_types13.default.string.isRequired,
    /**
     * The cell value formatted with the column valueFormatter.
     */
    formattedValue: import_prop_types13.default.any,
    /**
     * If true, the cell is the active element.
     */
    hasFocus: import_prop_types13.default.bool.isRequired,
    /**
     * The grid row id.
     */
    id: import_prop_types13.default.oneOfType([import_prop_types13.default.number, import_prop_types13.default.string]).isRequired,
    /**
     * If true, the cell is editable.
     */
    isEditable: import_prop_types13.default.bool,
    isProcessingProps: import_prop_types13.default.bool,
    isValidating: import_prop_types13.default.bool,
    /**
     * Callback called when the value is changed by the user.
     * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
     * @param {boolean} newValue The value that is going to be passed to `apiRef.current.setEditCellValue`.
     * @returns {Promise<void> | void} A promise to be awaited before calling `apiRef.current.setEditCellValue`
     */
    onValueChange: import_prop_types13.default.func,
    /**
     * The row model of the row that the current cell belongs to.
     */
    row: import_prop_types13.default.any.isRequired,
    /**
     * The node of the row that the current cell belongs to.
     */
    rowNode: import_prop_types13.default.object.isRequired,
    /**
     * the tabIndex value.
     */
    tabIndex: import_prop_types13.default.oneOf([-1, 0]).isRequired,
    /**
     * The cell value.
     * If the column has `valueGetter`, use `params.row` to directly access the fields.
     */
    value: import_prop_types13.default.any
  } : void 0;
  var renderEditBooleanCell = (params) => /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(GridEditBooleanCell, _extends({}, params));

  // node_modules/@mui/x-data-grid/components/cell/GridEditDateCell.js
  init_extends();
  var React48 = __toESM(require_react());
  var import_prop_types18 = __toESM(require_prop_types());

  // node_modules/@mui/material/InputBase/InputBase.js
  init_extends();
  var React46 = __toESM(require_react());
  var import_prop_types17 = __toESM(require_prop_types());

  // node_modules/@mui/material/TextareaAutosize/TextareaAutosize.js
  init_extends();
  var React41 = __toESM(require_react());
  var import_prop_types14 = __toESM(require_prop_types());
  var import_jsx_runtime14 = __toESM(require_jsx_runtime());
  var import_jsx_runtime15 = __toESM(require_jsx_runtime());
  var _excluded12 = ["onChange", "maxRows", "minRows", "style", "value"];
  function getStyleValue2(value) {
    return parseInt(value, 10) || 0;
  }
  var styles = {
    shadow: {
      // Visibility needed to hide the extra text area on iPads
      visibility: "hidden",
      // Remove from the content flow
      position: "absolute",
      // Ignore the scrollbar width
      overflow: "hidden",
      height: 0,
      top: 0,
      left: 0,
      // Create a new layer, increase the isolation of the computed values
      transform: "translateZ(0)"
    }
  };
  function isObjectEmpty2(object) {
    for (const _4 in object) {
      return false;
    }
    return true;
  }
  function isEmpty2(obj) {
    return isObjectEmpty2(obj) || obj.outerHeightStyle === 0 && !obj.overflowing;
  }
  var TextareaAutosize = /* @__PURE__ */ React41.forwardRef(function TextareaAutosize2(props, forwardedRef) {
    const {
      onChange,
      maxRows,
      minRows = 1,
      style: style4,
      value
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded12);
    const {
      current: isControlled
    } = React41.useRef(value != null);
    const textareaRef = React41.useRef(null);
    const handleRef = useForkRef(forwardedRef, textareaRef);
    const heightRef = React41.useRef(null);
    const hiddenTextareaRef = React41.useRef(null);
    const calculateTextareaStyles = React41.useCallback(() => {
      const textarea = textareaRef.current;
      const hiddenTextarea = hiddenTextareaRef.current;
      if (!textarea || !hiddenTextarea) {
        return void 0;
      }
      const containerWindow = ownerWindow(textarea);
      const computedStyle = containerWindow.getComputedStyle(textarea);
      if (computedStyle.width === "0px") {
        return {
          outerHeightStyle: 0,
          overflowing: false
        };
      }
      hiddenTextarea.style.width = computedStyle.width;
      hiddenTextarea.value = textarea.value || props.placeholder || "x";
      if (hiddenTextarea.value.slice(-1) === "\n") {
        hiddenTextarea.value += " ";
      }
      const boxSizing2 = computedStyle.boxSizing;
      const padding2 = getStyleValue2(computedStyle.paddingBottom) + getStyleValue2(computedStyle.paddingTop);
      const border2 = getStyleValue2(computedStyle.borderBottomWidth) + getStyleValue2(computedStyle.borderTopWidth);
      const innerHeight = hiddenTextarea.scrollHeight;
      hiddenTextarea.value = "x";
      const singleRowHeight = hiddenTextarea.scrollHeight;
      let outerHeight = innerHeight;
      if (minRows) {
        outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);
      }
      if (maxRows) {
        outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);
      }
      outerHeight = Math.max(outerHeight, singleRowHeight);
      const outerHeightStyle = outerHeight + (boxSizing2 === "border-box" ? padding2 + border2 : 0);
      const overflowing = Math.abs(outerHeight - innerHeight) <= 1;
      return {
        outerHeightStyle,
        overflowing
      };
    }, [maxRows, minRows, props.placeholder]);
    const didHeightChange = useEventCallback_default(() => {
      const textarea = textareaRef.current;
      const textareaStyles = calculateTextareaStyles();
      if (!textarea || !textareaStyles || isEmpty2(textareaStyles)) {
        return false;
      }
      const outerHeightStyle = textareaStyles.outerHeightStyle;
      return heightRef.current != null && heightRef.current !== outerHeightStyle;
    });
    const syncHeight = React41.useCallback(() => {
      const textarea = textareaRef.current;
      const textareaStyles = calculateTextareaStyles();
      if (!textarea || !textareaStyles || isEmpty2(textareaStyles)) {
        return;
      }
      const outerHeightStyle = textareaStyles.outerHeightStyle;
      if (heightRef.current !== outerHeightStyle) {
        heightRef.current = outerHeightStyle;
        textarea.style.height = `${outerHeightStyle}px`;
      }
      textarea.style.overflow = textareaStyles.overflowing ? "hidden" : "";
    }, [calculateTextareaStyles]);
    const frameRef = React41.useRef(-1);
    useEnhancedEffect_default(() => {
      const debouncedHandleResize = debounce(syncHeight);
      const textarea = textareaRef == null ? void 0 : textareaRef.current;
      if (!textarea) {
        return void 0;
      }
      const containerWindow = ownerWindow(textarea);
      containerWindow.addEventListener("resize", debouncedHandleResize);
      let resizeObserver;
      if (typeof ResizeObserver !== "undefined") {
        resizeObserver = new ResizeObserver(() => {
          if (didHeightChange()) {
            resizeObserver.unobserve(textarea);
            cancelAnimationFrame(frameRef.current);
            syncHeight();
            frameRef.current = requestAnimationFrame(() => {
              resizeObserver.observe(textarea);
            });
          }
        });
        resizeObserver.observe(textarea);
      }
      return () => {
        debouncedHandleResize.clear();
        cancelAnimationFrame(frameRef.current);
        containerWindow.removeEventListener("resize", debouncedHandleResize);
        if (resizeObserver) {
          resizeObserver.disconnect();
        }
      };
    }, [calculateTextareaStyles, syncHeight, didHeightChange]);
    useEnhancedEffect_default(() => {
      syncHeight();
    });
    const handleChange = (event) => {
      if (!isControlled) {
        syncHeight();
      }
      if (onChange) {
        onChange(event);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)(React41.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime14.jsx)("textarea", _extends({
        value,
        onChange: handleChange,
        ref: handleRef,
        rows: minRows,
        style: style4
      }, other)), /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("textarea", {
        "aria-hidden": true,
        className: props.className,
        readOnly: true,
        ref: hiddenTextareaRef,
        tabIndex: -1,
        style: _extends({}, styles.shadow, style4, {
          paddingTop: 0,
          paddingBottom: 0
        })
      })]
    });
  });
  true ? TextareaAutosize.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * @ignore
     */
    className: import_prop_types14.default.string,
    /**
     * Maximum number of rows to display.
     */
    maxRows: import_prop_types14.default.oneOfType([import_prop_types14.default.number, import_prop_types14.default.string]),
    /**
     * Minimum number of rows to display.
     * @default 1
     */
    minRows: import_prop_types14.default.oneOfType([import_prop_types14.default.number, import_prop_types14.default.string]),
    /**
     * @ignore
     */
    onChange: import_prop_types14.default.func,
    /**
     * @ignore
     */
    placeholder: import_prop_types14.default.string,
    /**
     * @ignore
     */
    style: import_prop_types14.default.object,
    /**
     * @ignore
     */
    value: import_prop_types14.default.oneOfType([import_prop_types14.default.arrayOf(import_prop_types14.default.string), import_prop_types14.default.number, import_prop_types14.default.string])
  } : void 0;
  var TextareaAutosize_default = TextareaAutosize;

  // node_modules/@mui/material/FormControl/formControlState.js
  function formControlState({
    props,
    states,
    muiFormControl
  }) {
    return states.reduce((acc, state) => {
      acc[state] = props[state];
      if (muiFormControl) {
        if (typeof props[state] === "undefined") {
          acc[state] = muiFormControl[state];
        }
      }
      return acc;
    }, {});
  }

  // node_modules/@mui/material/FormControl/FormControlContext.js
  var React42 = __toESM(require_react());
  var FormControlContext = /* @__PURE__ */ React42.createContext(void 0);
  if (true) {
    FormControlContext.displayName = "FormControlContext";
  }
  var FormControlContext_default = FormControlContext;

  // node_modules/@mui/material/FormControl/useFormControl.js
  var React43 = __toESM(require_react());
  function useFormControl() {
    return React43.useContext(FormControlContext_default);
  }

  // node_modules/@mui/material/styles/styled.js
  var import_createStyled2 = __toESM(require_createStyled());

  // node_modules/@mui/material/styles/createTheme.js
  init_extends();
  var import_deepmerge9 = __toESM(require_deepmerge2());
  var import_styleFunctionSx6 = __toESM(require_styleFunctionSx2());
  var import_createTheme5 = __toESM(require_createTheme2());

  // node_modules/@mui/material/styles/createMixins.js
  init_extends();
  function createMixins(breakpoints, mixins) {
    return _extends({
      toolbar: {
        minHeight: 56,
        [breakpoints.up("xs")]: {
          "@media (orientation: landscape)": {
            minHeight: 48
          }
        },
        [breakpoints.up("sm")]: {
          minHeight: 64
        }
      }
    }, mixins);
  }

  // node_modules/@mui/material/styles/createPalette.js
  init_extends();
  var import_deepmerge7 = __toESM(require_deepmerge2());
  var import_colorManipulator = __toESM(require_colorManipulator());

  // node_modules/@mui/material/colors/common.js
  var common = {
    black: "#000",
    white: "#fff"
  };
  var common_default = common;

  // node_modules/@mui/material/colors/grey.js
  var grey = {
    50: "#fafafa",
    100: "#f5f5f5",
    200: "#eeeeee",
    300: "#e0e0e0",
    400: "#bdbdbd",
    500: "#9e9e9e",
    600: "#757575",
    700: "#616161",
    800: "#424242",
    900: "#212121",
    A100: "#f5f5f5",
    A200: "#eeeeee",
    A400: "#bdbdbd",
    A700: "#616161"
  };
  var grey_default = grey;

  // node_modules/@mui/material/colors/purple.js
  var purple = {
    50: "#f3e5f5",
    100: "#e1bee7",
    200: "#ce93d8",
    300: "#ba68c8",
    400: "#ab47bc",
    500: "#9c27b0",
    600: "#8e24aa",
    700: "#7b1fa2",
    800: "#6a1b9a",
    900: "#4a148c",
    A100: "#ea80fc",
    A200: "#e040fb",
    A400: "#d500f9",
    A700: "#aa00ff"
  };
  var purple_default = purple;

  // node_modules/@mui/material/colors/red.js
  var red = {
    50: "#ffebee",
    100: "#ffcdd2",
    200: "#ef9a9a",
    300: "#e57373",
    400: "#ef5350",
    500: "#f44336",
    600: "#e53935",
    700: "#d32f2f",
    800: "#c62828",
    900: "#b71c1c",
    A100: "#ff8a80",
    A200: "#ff5252",
    A400: "#ff1744",
    A700: "#d50000"
  };
  var red_default = red;

  // node_modules/@mui/material/colors/orange.js
  var orange = {
    50: "#fff3e0",
    100: "#ffe0b2",
    200: "#ffcc80",
    300: "#ffb74d",
    400: "#ffa726",
    500: "#ff9800",
    600: "#fb8c00",
    700: "#f57c00",
    800: "#ef6c00",
    900: "#e65100",
    A100: "#ffd180",
    A200: "#ffab40",
    A400: "#ff9100",
    A700: "#ff6d00"
  };
  var orange_default = orange;

  // node_modules/@mui/material/colors/blue.js
  var blue = {
    50: "#e3f2fd",
    100: "#bbdefb",
    200: "#90caf9",
    300: "#64b5f6",
    400: "#42a5f5",
    500: "#2196f3",
    600: "#1e88e5",
    700: "#1976d2",
    800: "#1565c0",
    900: "#0d47a1",
    A100: "#82b1ff",
    A200: "#448aff",
    A400: "#2979ff",
    A700: "#2962ff"
  };
  var blue_default = blue;

  // node_modules/@mui/material/colors/lightBlue.js
  var lightBlue = {
    50: "#e1f5fe",
    100: "#b3e5fc",
    200: "#81d4fa",
    300: "#4fc3f7",
    400: "#29b6f6",
    500: "#03a9f4",
    600: "#039be5",
    700: "#0288d1",
    800: "#0277bd",
    900: "#01579b",
    A100: "#80d8ff",
    A200: "#40c4ff",
    A400: "#00b0ff",
    A700: "#0091ea"
  };
  var lightBlue_default = lightBlue;

  // node_modules/@mui/material/colors/green.js
  var green = {
    50: "#e8f5e9",
    100: "#c8e6c9",
    200: "#a5d6a7",
    300: "#81c784",
    400: "#66bb6a",
    500: "#4caf50",
    600: "#43a047",
    700: "#388e3c",
    800: "#2e7d32",
    900: "#1b5e20",
    A100: "#b9f6ca",
    A200: "#69f0ae",
    A400: "#00e676",
    A700: "#00c853"
  };
  var green_default = green;

  // node_modules/@mui/material/styles/createPalette.js
  var _excluded13 = ["mode", "contrastThreshold", "tonalOffset"];
  var light = {
    // The colors used to style the text.
    text: {
      // The most important text.
      primary: "rgba(0, 0, 0, 0.87)",
      // Secondary text.
      secondary: "rgba(0, 0, 0, 0.6)",
      // Disabled text have even lower visual prominence.
      disabled: "rgba(0, 0, 0, 0.38)"
    },
    // The color used to divide different elements.
    divider: "rgba(0, 0, 0, 0.12)",
    // The background colors used to style the surfaces.
    // Consistency between these values is important.
    background: {
      paper: common_default.white,
      default: common_default.white
    },
    // The colors used to style the action elements.
    action: {
      // The color of an active action like an icon button.
      active: "rgba(0, 0, 0, 0.54)",
      // The color of an hovered action.
      hover: "rgba(0, 0, 0, 0.04)",
      hoverOpacity: 0.04,
      // The color of a selected action.
      selected: "rgba(0, 0, 0, 0.08)",
      selectedOpacity: 0.08,
      // The color of a disabled action.
      disabled: "rgba(0, 0, 0, 0.26)",
      // The background color of a disabled action.
      disabledBackground: "rgba(0, 0, 0, 0.12)",
      disabledOpacity: 0.38,
      focus: "rgba(0, 0, 0, 0.12)",
      focusOpacity: 0.12,
      activatedOpacity: 0.12
    }
  };
  var dark = {
    text: {
      primary: common_default.white,
      secondary: "rgba(255, 255, 255, 0.7)",
      disabled: "rgba(255, 255, 255, 0.5)",
      icon: "rgba(255, 255, 255, 0.5)"
    },
    divider: "rgba(255, 255, 255, 0.12)",
    background: {
      paper: "#121212",
      default: "#121212"
    },
    action: {
      active: common_default.white,
      hover: "rgba(255, 255, 255, 0.08)",
      hoverOpacity: 0.08,
      selected: "rgba(255, 255, 255, 0.16)",
      selectedOpacity: 0.16,
      disabled: "rgba(255, 255, 255, 0.3)",
      disabledBackground: "rgba(255, 255, 255, 0.12)",
      disabledOpacity: 0.38,
      focus: "rgba(255, 255, 255, 0.12)",
      focusOpacity: 0.12,
      activatedOpacity: 0.24
    }
  };
  function addLightOrDark(intent, direction, shade, tonalOffset) {
    const tonalOffsetLight = tonalOffset.light || tonalOffset;
    const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;
    if (!intent[direction]) {
      if (intent.hasOwnProperty(shade)) {
        intent[direction] = intent[shade];
      } else if (direction === "light") {
        intent.light = (0, import_colorManipulator.lighten)(intent.main, tonalOffsetLight);
      } else if (direction === "dark") {
        intent.dark = (0, import_colorManipulator.darken)(intent.main, tonalOffsetDark);
      }
    }
  }
  function getDefaultPrimary(mode = "light") {
    if (mode === "dark") {
      return {
        main: blue_default[200],
        light: blue_default[50],
        dark: blue_default[400]
      };
    }
    return {
      main: blue_default[700],
      light: blue_default[400],
      dark: blue_default[800]
    };
  }
  function getDefaultSecondary(mode = "light") {
    if (mode === "dark") {
      return {
        main: purple_default[200],
        light: purple_default[50],
        dark: purple_default[400]
      };
    }
    return {
      main: purple_default[500],
      light: purple_default[300],
      dark: purple_default[700]
    };
  }
  function getDefaultError(mode = "light") {
    if (mode === "dark") {
      return {
        main: red_default[500],
        light: red_default[300],
        dark: red_default[700]
      };
    }
    return {
      main: red_default[700],
      light: red_default[400],
      dark: red_default[800]
    };
  }
  function getDefaultInfo(mode = "light") {
    if (mode === "dark") {
      return {
        main: lightBlue_default[400],
        light: lightBlue_default[300],
        dark: lightBlue_default[700]
      };
    }
    return {
      main: lightBlue_default[700],
      light: lightBlue_default[500],
      dark: lightBlue_default[900]
    };
  }
  function getDefaultSuccess(mode = "light") {
    if (mode === "dark") {
      return {
        main: green_default[400],
        light: green_default[300],
        dark: green_default[700]
      };
    }
    return {
      main: green_default[800],
      light: green_default[500],
      dark: green_default[900]
    };
  }
  function getDefaultWarning(mode = "light") {
    if (mode === "dark") {
      return {
        main: orange_default[400],
        light: orange_default[300],
        dark: orange_default[700]
      };
    }
    return {
      main: "#ed6c02",
      // closest to orange[800] that pass 3:1.
      light: orange_default[500],
      dark: orange_default[900]
    };
  }
  function createPalette(palette2) {
    const {
      mode = "light",
      contrastThreshold = 3,
      tonalOffset = 0.2
    } = palette2, other = _objectWithoutPropertiesLoose(palette2, _excluded13);
    const primary = palette2.primary || getDefaultPrimary(mode);
    const secondary = palette2.secondary || getDefaultSecondary(mode);
    const error = palette2.error || getDefaultError(mode);
    const info = palette2.info || getDefaultInfo(mode);
    const success = palette2.success || getDefaultSuccess(mode);
    const warning = palette2.warning || getDefaultWarning(mode);
    function getContrastText(background) {
      const contrastText = (0, import_colorManipulator.getContrastRatio)(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;
      if (true) {
        const contrast = (0, import_colorManipulator.getContrastRatio)(background, contrastText);
        if (contrast < 3) {
          console.error([`MUI: The contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`, "falls below the WCAG recommended absolute minimum contrast ratio of 3:1.", "https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast"].join("\n"));
        }
      }
      return contrastText;
    }
    const augmentColor = ({
      color: color2,
      name,
      mainShade = 500,
      lightShade = 300,
      darkShade = 700
    }) => {
      color2 = _extends({}, color2);
      if (!color2.main && color2[mainShade]) {
        color2.main = color2[mainShade];
      }
      if (!color2.hasOwnProperty("main")) {
        throw new Error(true ? `MUI: The color${name ? ` (${name})` : ""} provided to augmentColor(color) is invalid.
The color object needs to have a \`main\` property or a \`${mainShade}\` property.` : (0, import_formatMuiErrorMessage.default)(11, name ? ` (${name})` : "", mainShade));
      }
      if (typeof color2.main !== "string") {
        throw new Error(true ? `MUI: The color${name ? ` (${name})` : ""} provided to augmentColor(color) is invalid.
\`color.main\` should be a string, but \`${JSON.stringify(color2.main)}\` was provided instead.

Did you intend to use one of the following approaches?

import { green } from "@mui/material/colors";

const theme1 = createTheme({ palette: {
  primary: green,
} });

const theme2 = createTheme({ palette: {
  primary: { main: green[500] },
} });` : (0, import_formatMuiErrorMessage.default)(12, name ? ` (${name})` : "", JSON.stringify(color2.main)));
      }
      addLightOrDark(color2, "light", lightShade, tonalOffset);
      addLightOrDark(color2, "dark", darkShade, tonalOffset);
      if (!color2.contrastText) {
        color2.contrastText = getContrastText(color2.main);
      }
      return color2;
    };
    const modes = {
      dark,
      light
    };
    if (true) {
      if (!modes[mode]) {
        console.error(`MUI: The palette mode \`${mode}\` is not supported.`);
      }
    }
    const paletteOutput = (0, import_deepmerge7.default)(_extends({
      // A collection of common colors.
      common: _extends({}, common_default),
      // prevent mutable object.
      // The palette mode, can be light or dark.
      mode,
      // The colors used to represent primary interface elements for a user.
      primary: augmentColor({
        color: primary,
        name: "primary"
      }),
      // The colors used to represent secondary interface elements for a user.
      secondary: augmentColor({
        color: secondary,
        name: "secondary",
        mainShade: "A400",
        lightShade: "A200",
        darkShade: "A700"
      }),
      // The colors used to represent interface elements that the user should be made aware of.
      error: augmentColor({
        color: error,
        name: "error"
      }),
      // The colors used to represent potentially dangerous actions or important messages.
      warning: augmentColor({
        color: warning,
        name: "warning"
      }),
      // The colors used to present information to the user that is neutral and not necessarily important.
      info: augmentColor({
        color: info,
        name: "info"
      }),
      // The colors used to indicate the successful completion of an action that user triggered.
      success: augmentColor({
        color: success,
        name: "success"
      }),
      // The grey colors.
      grey: grey_default,
      // Used by `getContrastText()` to maximize the contrast between
      // the background and the text.
      contrastThreshold,
      // Takes a background color and returns the text color that maximizes the contrast.
      getContrastText,
      // Generate a rich color object.
      augmentColor,
      // Used by the functions below to shift a color's luminance by approximately
      // two indexes within its tonal palette.
      // E.g., shift from Red 500 to Red 300 or Red 700.
      tonalOffset
    }, modes[mode]), other);
    return paletteOutput;
  }

  // node_modules/@mui/material/styles/createTypography.js
  init_extends();
  var import_deepmerge8 = __toESM(require_deepmerge2());
  var _excluded14 = ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"];
  function round(value) {
    return Math.round(value * 1e5) / 1e5;
  }
  var caseAllCaps = {
    textTransform: "uppercase"
  };
  var defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';
  function createTypography(palette2, typography) {
    const _ref = typeof typography === "function" ? typography(palette2) : typography, {
      fontFamily = defaultFontFamily,
      // The default font size of the Material Specification.
      fontSize = 14,
      // px
      fontWeightLight = 300,
      fontWeightRegular = 400,
      fontWeightMedium = 500,
      fontWeightBold = 700,
      // Tell MUI what's the font-size on the html element.
      // 16px is the default font-size used by browsers.
      htmlFontSize = 16,
      // Apply the CSS properties to all the variants.
      allVariants,
      pxToRem: pxToRem2
    } = _ref, other = _objectWithoutPropertiesLoose(_ref, _excluded14);
    if (true) {
      if (typeof fontSize !== "number") {
        console.error("MUI: `fontSize` is required to be a number.");
      }
      if (typeof htmlFontSize !== "number") {
        console.error("MUI: `htmlFontSize` is required to be a number.");
      }
    }
    const coef = fontSize / 14;
    const pxToRem = pxToRem2 || ((size) => `${size / htmlFontSize * coef}rem`);
    const buildVariant = (fontWeight, size, lineHeight, letterSpacing, casing) => _extends({
      fontFamily,
      fontWeight,
      fontSize: pxToRem(size),
      // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
      lineHeight
    }, fontFamily === defaultFontFamily ? {
      letterSpacing: `${round(letterSpacing / size)}em`
    } : {}, casing, allVariants);
    const variants = {
      h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
      h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
      h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
      h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
      h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
      h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
      subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
      subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
      body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
      body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
      button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
      caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
      overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps),
      // TODO v6: Remove handling of 'inherit' variant from the theme as it is already handled in Material UI's Typography component. Also, remember to remove the associated types.
      inherit: {
        fontFamily: "inherit",
        fontWeight: "inherit",
        fontSize: "inherit",
        lineHeight: "inherit",
        letterSpacing: "inherit"
      }
    };
    return (0, import_deepmerge8.default)(_extends({
      htmlFontSize,
      pxToRem,
      fontFamily,
      fontSize,
      fontWeightLight,
      fontWeightRegular,
      fontWeightMedium,
      fontWeightBold
    }, variants), other, {
      clone: false
      // No need to clone deep
    });
  }

  // node_modules/@mui/material/styles/shadows.js
  var shadowKeyUmbraOpacity = 0.2;
  var shadowKeyPenumbraOpacity = 0.14;
  var shadowAmbientShadowOpacity = 0.12;
  function createShadow(...px) {
    return [`${px[0]}px ${px[1]}px ${px[2]}px ${px[3]}px rgba(0,0,0,${shadowKeyUmbraOpacity})`, `${px[4]}px ${px[5]}px ${px[6]}px ${px[7]}px rgba(0,0,0,${shadowKeyPenumbraOpacity})`, `${px[8]}px ${px[9]}px ${px[10]}px ${px[11]}px rgba(0,0,0,${shadowAmbientShadowOpacity})`].join(",");
  }
  var shadows = ["none", createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
  var shadows_default = shadows;

  // node_modules/@mui/material/styles/createTransitions.js
  init_extends();
  var _excluded15 = ["duration", "easing", "delay"];
  var easing = {
    // This is the most common easing curve.
    easeInOut: "cubic-bezier(0.4, 0, 0.2, 1)",
    // Objects enter the screen at full velocity from off-screen and
    // slowly decelerate to a resting point.
    easeOut: "cubic-bezier(0.0, 0, 0.2, 1)",
    // Objects leave the screen at full velocity. They do not decelerate when off-screen.
    easeIn: "cubic-bezier(0.4, 0, 1, 1)",
    // The sharp curve is used by objects that may return to the screen at any time.
    sharp: "cubic-bezier(0.4, 0, 0.6, 1)"
  };
  var duration = {
    shortest: 150,
    shorter: 200,
    short: 250,
    // most basic recommended timing
    standard: 300,
    // this is to be used in complex animations
    complex: 375,
    // recommended when something is entering screen
    enteringScreen: 225,
    // recommended when something is leaving screen
    leavingScreen: 195
  };
  function formatMs(milliseconds) {
    return `${Math.round(milliseconds)}ms`;
  }
  function getAutoHeightDuration(height2) {
    if (!height2) {
      return 0;
    }
    const constant = height2 / 36;
    return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10);
  }
  function createTransitions(inputTransitions) {
    const mergedEasing = _extends({}, easing, inputTransitions.easing);
    const mergedDuration = _extends({}, duration, inputTransitions.duration);
    const create = (props = ["all"], options = {}) => {
      const {
        duration: durationOption = mergedDuration.standard,
        easing: easingOption = mergedEasing.easeInOut,
        delay = 0
      } = options, other = _objectWithoutPropertiesLoose(options, _excluded15);
      if (true) {
        const isString = (value) => typeof value === "string";
        const isNumber2 = (value) => !isNaN(parseFloat(value));
        if (!isString(props) && !Array.isArray(props)) {
          console.error('MUI: Argument "props" must be a string or Array.');
        }
        if (!isNumber2(durationOption) && !isString(durationOption)) {
          console.error(`MUI: Argument "duration" must be a number or a string but found ${durationOption}.`);
        }
        if (!isString(easingOption)) {
          console.error('MUI: Argument "easing" must be a string.');
        }
        if (!isNumber2(delay) && !isString(delay)) {
          console.error('MUI: Argument "delay" must be a number or a string.');
        }
        if (typeof options !== "object") {
          console.error(["MUI: Secong argument of transition.create must be an object.", "Arguments should be either `create('prop1', options)` or `create(['prop1', 'prop2'], options)`"].join("\n"));
        }
        if (Object.keys(other).length !== 0) {
          console.error(`MUI: Unrecognized argument(s) [${Object.keys(other).join(",")}].`);
        }
      }
      return (Array.isArray(props) ? props : [props]).map((animatedProp) => `${animatedProp} ${typeof durationOption === "string" ? durationOption : formatMs(durationOption)} ${easingOption} ${typeof delay === "string" ? delay : formatMs(delay)}`).join(",");
    };
    return _extends({
      getAutoHeightDuration,
      create
    }, inputTransitions, {
      easing: mergedEasing,
      duration: mergedDuration
    });
  }

  // node_modules/@mui/material/styles/zIndex.js
  var zIndex = {
    mobileStepper: 1e3,
    fab: 1050,
    speedDial: 1050,
    appBar: 1100,
    drawer: 1200,
    modal: 1300,
    snackbar: 1400,
    tooltip: 1500
  };
  var zIndex_default = zIndex;

  // node_modules/@mui/material/styles/createTheme.js
  var _excluded16 = ["breakpoints", "mixins", "spacing", "palette", "transitions", "typography", "shape"];
  function createTheme2(options = {}, ...args) {
    const {
      mixins: mixinsInput = {},
      palette: paletteInput = {},
      transitions: transitionsInput = {},
      typography: typographyInput = {}
    } = options, other = _objectWithoutPropertiesLoose(options, _excluded16);
    if (options.vars && // The error should throw only for the root theme creation because user is not allowed to use a custom node `vars`.
    // `generateCssVars` is the closest identifier for checking that the `options` is a result of `extendTheme` with CSS variables so that user can create new theme for nested ThemeProvider.
    options.generateCssVars === void 0) {
      throw new Error(true ? `MUI: \`vars\` is a private field used for CSS variables support.
Please use another name.` : (0, import_formatMuiErrorMessage.default)(18));
    }
    const palette2 = createPalette(paletteInput);
    const systemTheme = (0, import_createTheme5.default)(options);
    let muiTheme = (0, import_deepmerge9.default)(systemTheme, {
      mixins: createMixins(systemTheme.breakpoints, mixinsInput),
      palette: palette2,
      // Don't use [...shadows] until you've verified its transpiled code is not invoking the iterator protocol.
      shadows: shadows_default.slice(),
      typography: createTypography(palette2, typographyInput),
      transitions: createTransitions(transitionsInput),
      zIndex: _extends({}, zIndex_default)
    });
    muiTheme = (0, import_deepmerge9.default)(muiTheme, other);
    muiTheme = args.reduce((acc, argument) => (0, import_deepmerge9.default)(acc, argument), muiTheme);
    if (true) {
      const stateClasses = ["active", "checked", "completed", "disabled", "error", "expanded", "focused", "focusVisible", "required", "selected"];
      const traverse = (node2, component) => {
        let key;
        for (key in node2) {
          const child = node2[key];
          if (stateClasses.indexOf(key) !== -1 && Object.keys(child).length > 0) {
            if (true) {
              const stateClass = generateUtilityClass("", key);
              console.error([`MUI: The \`${component}\` component increases the CSS specificity of the \`${key}\` internal state.`, "You can not override it like this: ", JSON.stringify(node2, null, 2), "", `Instead, you need to use the '&.${stateClass}' syntax:`, JSON.stringify({
                root: {
                  [`&.${stateClass}`]: child
                }
              }, null, 2), "", "https://mui.com/r/state-classes-guide"].join("\n"));
            }
            node2[key] = {};
          }
        }
      };
      Object.keys(muiTheme.components).forEach((component) => {
        const styleOverrides = muiTheme.components[component].styleOverrides;
        if (styleOverrides && component.indexOf("Mui") === 0) {
          traverse(styleOverrides, component);
        }
      });
    }
    muiTheme.unstable_sxConfig = _extends({}, import_styleFunctionSx6.unstable_defaultSxConfig, other == null ? void 0 : other.unstable_sxConfig);
    muiTheme.unstable_sx = function sx(props) {
      return (0, import_styleFunctionSx6.default)({
        sx: props,
        theme: this
      });
    };
    return muiTheme;
  }
  var createTheme_default2 = createTheme2;

  // node_modules/@mui/material/styles/defaultTheme.js
  var defaultTheme2 = createTheme_default2();
  var defaultTheme_default = defaultTheme2;

  // node_modules/@mui/material/styles/identifier.js
  var identifier_default = "$$material";

  // node_modules/@mui/material/styles/slotShouldForwardProp.js
  function slotShouldForwardProp(prop) {
    return prop !== "ownerState" && prop !== "theme" && prop !== "sx" && prop !== "as";
  }
  var slotShouldForwardProp_default = slotShouldForwardProp;

  // node_modules/@mui/material/styles/rootShouldForwardProp.js
  var rootShouldForwardProp = (prop) => slotShouldForwardProp_default(prop) && prop !== "classes";
  var rootShouldForwardProp_default = rootShouldForwardProp;

  // node_modules/@mui/material/styles/styled.js
  var styled4 = (0, import_createStyled2.default)({
    themeId: identifier_default,
    defaultTheme: defaultTheme_default,
    rootShouldForwardProp: rootShouldForwardProp_default
  });
  var styled_default2 = styled4;

  // node_modules/@mui/material/DefaultPropsProvider/DefaultPropsProvider.js
  init_extends();
  var React44 = __toESM(require_react());
  var import_prop_types15 = __toESM(require_prop_types());
  var import_jsx_runtime16 = __toESM(require_jsx_runtime());
  function DefaultPropsProvider2(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(DefaultPropsProvider_default, _extends({}, props));
  }
  true ? DefaultPropsProvider2.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * @ignore
     */
    children: import_prop_types15.default.node,
    /**
     * @ignore
     */
    value: import_prop_types15.default.object.isRequired
  } : void 0;
  function useDefaultProps2(params) {
    return useDefaultProps(params);
  }

  // node_modules/@mui/material/utils/capitalize.js
  var import_capitalize6 = __toESM(require_capitalize2());
  var capitalize_default = import_capitalize6.default;

  // node_modules/@mui/material/utils/useForkRef.js
  var useForkRef_default = useForkRef;

  // node_modules/@mui/material/utils/useEnhancedEffect.js
  var useEnhancedEffect_default2 = useEnhancedEffect_default;

  // node_modules/@mui/material/GlobalStyles/GlobalStyles.js
  init_extends();
  var React45 = __toESM(require_react());
  var import_prop_types16 = __toESM(require_prop_types());
  var import_jsx_runtime17 = __toESM(require_jsx_runtime());
  function GlobalStyles2(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(GlobalStyles_default, _extends({}, props, {
      defaultTheme: defaultTheme_default,
      themeId: identifier_default
    }));
  }
  true ? GlobalStyles2.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The styles you want to apply globally.
     */
    styles: import_prop_types16.default.oneOfType([import_prop_types16.default.array, import_prop_types16.default.func, import_prop_types16.default.number, import_prop_types16.default.object, import_prop_types16.default.string, import_prop_types16.default.bool])
  } : void 0;
  var GlobalStyles_default2 = GlobalStyles2;

  // node_modules/@mui/material/InputBase/utils.js
  function hasValue(value) {
    return value != null && !(Array.isArray(value) && value.length === 0);
  }
  function isFilled(obj, SSR = false) {
    return obj && (hasValue(obj.value) && obj.value !== "" || SSR && hasValue(obj.defaultValue) && obj.defaultValue !== "");
  }
  function isAdornedStart(obj) {
    return obj.startAdornment;
  }

  // node_modules/@mui/material/InputBase/inputBaseClasses.js
  function getInputBaseUtilityClass(slot) {
    return generateUtilityClass("MuiInputBase", slot);
  }
  var inputBaseClasses = generateUtilityClasses("MuiInputBase", ["root", "formControl", "focused", "disabled", "adornedStart", "adornedEnd", "error", "sizeSmall", "multiline", "colorSecondary", "fullWidth", "hiddenLabel", "readOnly", "input", "inputSizeSmall", "inputMultiline", "inputTypeSearch", "inputAdornedStart", "inputAdornedEnd", "inputHiddenLabel"]);
  var inputBaseClasses_default = inputBaseClasses;

  // node_modules/@mui/material/InputBase/InputBase.js
  var import_jsx_runtime18 = __toESM(require_jsx_runtime());
  var import_jsx_runtime19 = __toESM(require_jsx_runtime());
  var _excluded17 = ["aria-describedby", "autoComplete", "autoFocus", "className", "color", "components", "componentsProps", "defaultValue", "disabled", "disableInjectingGlobalStyles", "endAdornment", "error", "fullWidth", "id", "inputComponent", "inputProps", "inputRef", "margin", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onClick", "onFocus", "onKeyDown", "onKeyUp", "placeholder", "readOnly", "renderSuffix", "rows", "size", "slotProps", "slots", "startAdornment", "type", "value"];
  var rootOverridesResolver = (props, styles4) => {
    const {
      ownerState
    } = props;
    return [styles4.root, ownerState.formControl && styles4.formControl, ownerState.startAdornment && styles4.adornedStart, ownerState.endAdornment && styles4.adornedEnd, ownerState.error && styles4.error, ownerState.size === "small" && styles4.sizeSmall, ownerState.multiline && styles4.multiline, ownerState.color && styles4[`color${capitalize_default(ownerState.color)}`], ownerState.fullWidth && styles4.fullWidth, ownerState.hiddenLabel && styles4.hiddenLabel];
  };
  var inputOverridesResolver = (props, styles4) => {
    const {
      ownerState
    } = props;
    return [styles4.input, ownerState.size === "small" && styles4.inputSizeSmall, ownerState.multiline && styles4.inputMultiline, ownerState.type === "search" && styles4.inputTypeSearch, ownerState.startAdornment && styles4.inputAdornedStart, ownerState.endAdornment && styles4.inputAdornedEnd, ownerState.hiddenLabel && styles4.inputHiddenLabel];
  };
  var useUtilityClasses6 = (ownerState) => {
    const {
      classes,
      color: color2,
      disabled,
      error,
      endAdornment,
      focused,
      formControl,
      fullWidth,
      hiddenLabel,
      multiline,
      readOnly,
      size,
      startAdornment,
      type
    } = ownerState;
    const slots = {
      root: ["root", `color${capitalize_default(color2)}`, disabled && "disabled", error && "error", fullWidth && "fullWidth", focused && "focused", formControl && "formControl", size && size !== "medium" && `size${capitalize_default(size)}`, multiline && "multiline", startAdornment && "adornedStart", endAdornment && "adornedEnd", hiddenLabel && "hiddenLabel", readOnly && "readOnly"],
      input: ["input", disabled && "disabled", type === "search" && "inputTypeSearch", multiline && "inputMultiline", size === "small" && "inputSizeSmall", hiddenLabel && "inputHiddenLabel", startAdornment && "inputAdornedStart", endAdornment && "inputAdornedEnd", readOnly && "readOnly"]
    };
    return composeClasses(slots, getInputBaseUtilityClass, classes);
  };
  var InputBaseRoot = styled_default2("div", {
    name: "MuiInputBase",
    slot: "Root",
    overridesResolver: rootOverridesResolver
  })(({
    theme,
    ownerState
  }) => _extends({}, theme.typography.body1, {
    color: (theme.vars || theme).palette.text.primary,
    lineHeight: "1.4375em",
    // 23px
    boxSizing: "border-box",
    // Prevent padding issue with fullWidth.
    position: "relative",
    cursor: "text",
    display: "inline-flex",
    alignItems: "center",
    [`&.${inputBaseClasses_default.disabled}`]: {
      color: (theme.vars || theme).palette.text.disabled,
      cursor: "default"
    }
  }, ownerState.multiline && _extends({
    padding: "4px 0 5px"
  }, ownerState.size === "small" && {
    paddingTop: 1
  }), ownerState.fullWidth && {
    width: "100%"
  }));
  var InputBaseComponent = styled_default2("input", {
    name: "MuiInputBase",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })(({
    theme,
    ownerState
  }) => {
    const light2 = theme.palette.mode === "light";
    const placeholder = _extends({
      color: "currentColor"
    }, theme.vars ? {
      opacity: theme.vars.opacity.inputPlaceholder
    } : {
      opacity: light2 ? 0.42 : 0.5
    }, {
      transition: theme.transitions.create("opacity", {
        duration: theme.transitions.duration.shorter
      })
    });
    const placeholderHidden = {
      opacity: "0 !important"
    };
    const placeholderVisible = theme.vars ? {
      opacity: theme.vars.opacity.inputPlaceholder
    } : {
      opacity: light2 ? 0.42 : 0.5
    };
    return _extends({
      font: "inherit",
      letterSpacing: "inherit",
      color: "currentColor",
      padding: "4px 0 5px",
      border: 0,
      boxSizing: "content-box",
      background: "none",
      height: "1.4375em",
      // Reset 23pxthe native input line-height
      margin: 0,
      // Reset for Safari
      WebkitTapHighlightColor: "transparent",
      display: "block",
      // Make the flex item shrink with Firefox
      minWidth: 0,
      width: "100%",
      // Fix IE11 width issue
      animationName: "mui-auto-fill-cancel",
      animationDuration: "10ms",
      "&::-webkit-input-placeholder": placeholder,
      "&::-moz-placeholder": placeholder,
      // Firefox 19+
      "&:-ms-input-placeholder": placeholder,
      // IE11
      "&::-ms-input-placeholder": placeholder,
      // Edge
      "&:focus": {
        outline: 0
      },
      // Reset Firefox invalid required input style
      "&:invalid": {
        boxShadow: "none"
      },
      "&::-webkit-search-decoration": {
        // Remove the padding when type=search.
        WebkitAppearance: "none"
      },
      // Show and hide the placeholder logic
      [`label[data-shrink=false] + .${inputBaseClasses_default.formControl} &`]: {
        "&::-webkit-input-placeholder": placeholderHidden,
        "&::-moz-placeholder": placeholderHidden,
        // Firefox 19+
        "&:-ms-input-placeholder": placeholderHidden,
        // IE11
        "&::-ms-input-placeholder": placeholderHidden,
        // Edge
        "&:focus::-webkit-input-placeholder": placeholderVisible,
        "&:focus::-moz-placeholder": placeholderVisible,
        // Firefox 19+
        "&:focus:-ms-input-placeholder": placeholderVisible,
        // IE11
        "&:focus::-ms-input-placeholder": placeholderVisible
        // Edge
      },
      [`&.${inputBaseClasses_default.disabled}`]: {
        opacity: 1,
        // Reset iOS opacity
        WebkitTextFillColor: (theme.vars || theme).palette.text.disabled
        // Fix opacity Safari bug
      },
      "&:-webkit-autofill": {
        animationDuration: "5000s",
        animationName: "mui-auto-fill"
      }
    }, ownerState.size === "small" && {
      paddingTop: 1
    }, ownerState.multiline && {
      height: "auto",
      resize: "none",
      padding: 0,
      paddingTop: 0
    }, ownerState.type === "search" && {
      // Improve type search style.
      MozAppearance: "textfield"
    });
  });
  var inputGlobalStyles = /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(GlobalStyles_default2, {
    styles: {
      "@keyframes mui-auto-fill": {
        from: {
          display: "block"
        }
      },
      "@keyframes mui-auto-fill-cancel": {
        from: {
          display: "block"
        }
      }
    }
  });
  var InputBase = /* @__PURE__ */ React46.forwardRef(function InputBase2(inProps, ref) {
    var _slotProps$input;
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiInputBase"
    });
    const {
      "aria-describedby": ariaDescribedby,
      autoComplete,
      autoFocus,
      className,
      components = {},
      componentsProps = {},
      defaultValue,
      disabled,
      disableInjectingGlobalStyles,
      endAdornment,
      fullWidth = false,
      id,
      inputComponent = "input",
      inputProps: inputPropsProp = {},
      inputRef: inputRefProp,
      maxRows,
      minRows,
      multiline = false,
      name,
      onBlur,
      onChange,
      onClick,
      onFocus,
      onKeyDown,
      onKeyUp,
      placeholder,
      readOnly,
      renderSuffix,
      rows,
      slotProps = {},
      slots = {},
      startAdornment,
      type = "text",
      value: valueProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded17);
    const value = inputPropsProp.value != null ? inputPropsProp.value : valueProp;
    const {
      current: isControlled
    } = React46.useRef(value != null);
    const inputRef = React46.useRef();
    const handleInputRefWarning = React46.useCallback((instance) => {
      if (true) {
        if (instance && instance.nodeName !== "INPUT" && !instance.focus) {
          console.error(["MUI: You have provided a `inputComponent` to the input component", "that does not correctly handle the `ref` prop.", "Make sure the `ref` prop is called with a HTMLInputElement."].join("\n"));
        }
      }
    }, []);
    const handleInputRef = useForkRef_default(inputRef, inputRefProp, inputPropsProp.ref, handleInputRefWarning);
    const [focused, setFocused] = React46.useState(false);
    const muiFormControl = useFormControl();
    if (true) {
      React46.useEffect(() => {
        if (muiFormControl) {
          return muiFormControl.registerEffect();
        }
        return void 0;
      }, [muiFormControl]);
    }
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["color", "disabled", "error", "hiddenLabel", "size", "required", "filled"]
    });
    fcs.focused = muiFormControl ? muiFormControl.focused : focused;
    React46.useEffect(() => {
      if (!muiFormControl && disabled && focused) {
        setFocused(false);
        if (onBlur) {
          onBlur();
        }
      }
    }, [muiFormControl, disabled, focused, onBlur]);
    const onFilled = muiFormControl && muiFormControl.onFilled;
    const onEmpty = muiFormControl && muiFormControl.onEmpty;
    const checkDirty = React46.useCallback((obj) => {
      if (isFilled(obj)) {
        if (onFilled) {
          onFilled();
        }
      } else if (onEmpty) {
        onEmpty();
      }
    }, [onFilled, onEmpty]);
    useEnhancedEffect_default2(() => {
      if (isControlled) {
        checkDirty({
          value
        });
      }
    }, [value, checkDirty, isControlled]);
    const handleFocus = (event) => {
      if (fcs.disabled) {
        event.stopPropagation();
        return;
      }
      if (onFocus) {
        onFocus(event);
      }
      if (inputPropsProp.onFocus) {
        inputPropsProp.onFocus(event);
      }
      if (muiFormControl && muiFormControl.onFocus) {
        muiFormControl.onFocus(event);
      } else {
        setFocused(true);
      }
    };
    const handleBlur = (event) => {
      if (onBlur) {
        onBlur(event);
      }
      if (inputPropsProp.onBlur) {
        inputPropsProp.onBlur(event);
      }
      if (muiFormControl && muiFormControl.onBlur) {
        muiFormControl.onBlur(event);
      } else {
        setFocused(false);
      }
    };
    const handleChange = (event, ...args) => {
      if (!isControlled) {
        const element = event.target || inputRef.current;
        if (element == null) {
          throw new Error(true ? `MUI: Expected valid input target. Did you use a custom \`inputComponent\` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.` : (0, import_formatMuiErrorMessage.default)(1));
        }
        checkDirty({
          value: element.value
        });
      }
      if (inputPropsProp.onChange) {
        inputPropsProp.onChange(event, ...args);
      }
      if (onChange) {
        onChange(event, ...args);
      }
    };
    React46.useEffect(() => {
      checkDirty(inputRef.current);
    }, []);
    const handleClick = (event) => {
      if (inputRef.current && event.currentTarget === event.target) {
        inputRef.current.focus();
      }
      if (onClick) {
        onClick(event);
      }
    };
    let InputComponent = inputComponent;
    let inputProps = inputPropsProp;
    if (multiline && InputComponent === "input") {
      if (rows) {
        if (true) {
          if (minRows || maxRows) {
            console.warn("MUI: You can not use the `minRows` or `maxRows` props when the input `rows` prop is set.");
          }
        }
        inputProps = _extends({
          type: void 0,
          minRows: rows,
          maxRows: rows
        }, inputProps);
      } else {
        inputProps = _extends({
          type: void 0,
          maxRows,
          minRows
        }, inputProps);
      }
      InputComponent = TextareaAutosize_default;
    }
    const handleAutoFill = (event) => {
      checkDirty(event.animationName === "mui-auto-fill-cancel" ? inputRef.current : {
        value: "x"
      });
    };
    React46.useEffect(() => {
      if (muiFormControl) {
        muiFormControl.setAdornedStart(Boolean(startAdornment));
      }
    }, [muiFormControl, startAdornment]);
    const ownerState = _extends({}, props, {
      color: fcs.color || "primary",
      disabled: fcs.disabled,
      endAdornment,
      error: fcs.error,
      focused: fcs.focused,
      formControl: muiFormControl,
      fullWidth,
      hiddenLabel: fcs.hiddenLabel,
      multiline,
      size: fcs.size,
      startAdornment,
      type
    });
    const classes = useUtilityClasses6(ownerState);
    const Root = slots.root || components.Root || InputBaseRoot;
    const rootProps = slotProps.root || componentsProps.root || {};
    const Input3 = slots.input || components.Input || InputBaseComponent;
    inputProps = _extends({}, inputProps, (_slotProps$input = slotProps.input) != null ? _slotProps$input : componentsProps.input);
    return /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)(React46.Fragment, {
      children: [!disableInjectingGlobalStyles && inputGlobalStyles, /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)(Root, _extends({}, rootProps, !isHostComponent_default(Root) && {
        ownerState: _extends({}, ownerState, rootProps.ownerState)
      }, {
        ref,
        onClick: handleClick
      }, other, {
        className: clsx_default(classes.root, rootProps.className, className, readOnly && "MuiInputBase-readOnly"),
        children: [startAdornment, /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(FormControlContext_default.Provider, {
          value: null,
          children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Input3, _extends({
            ownerState,
            "aria-invalid": fcs.error,
            "aria-describedby": ariaDescribedby,
            autoComplete,
            autoFocus,
            defaultValue,
            disabled: fcs.disabled,
            id,
            onAnimationStart: handleAutoFill,
            name,
            placeholder,
            readOnly,
            required: fcs.required,
            rows,
            value,
            onKeyDown,
            onKeyUp,
            type
          }, inputProps, !isHostComponent_default(Input3) && {
            as: InputComponent,
            ownerState: _extends({}, ownerState, inputProps.ownerState)
          }, {
            ref: handleInputRef,
            className: clsx_default(classes.input, inputProps.className, readOnly && "MuiInputBase-readOnly"),
            onBlur: handleBlur,
            onChange: handleChange,
            onFocus: handleFocus
          }))
        }), endAdornment, renderSuffix ? renderSuffix(_extends({}, fcs, {
          startAdornment
        })) : null]
      }))]
    });
  });
  true ? InputBase.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * @ignore
     */
    "aria-describedby": import_prop_types17.default.string,
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: import_prop_types17.default.string,
    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: import_prop_types17.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types17.default.object,
    /**
     * @ignore
     */
    className: import_prop_types17.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
     */
    color: import_prop_types17.default.oneOfType([import_prop_types17.default.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), import_prop_types17.default.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: import_prop_types17.default.shape({
      Input: import_prop_types17.default.elementType,
      Root: import_prop_types17.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: import_prop_types17.default.shape({
      input: import_prop_types17.default.object,
      root: import_prop_types17.default.object
    }),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types17.default.any,
    /**
     * If `true`, the component is disabled.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    disabled: import_prop_types17.default.bool,
    /**
     * If `true`, GlobalStyles for the auto-fill keyframes will not be injected/removed on mount/unmount. Make sure to inject them at the top of your application.
     * This option is intended to help with boosting the initial rendering performance if you are loading a big amount of Input components at once.
     * @default false
     */
    disableInjectingGlobalStyles: import_prop_types17.default.bool,
    /**
     * End `InputAdornment` for this component.
     */
    endAdornment: import_prop_types17.default.node,
    /**
     * If `true`, the `input` will indicate an error.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    error: import_prop_types17.default.bool,
    /**
     * If `true`, the `input` will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types17.default.bool,
    /**
     * The id of the `input` element.
     */
    id: import_prop_types17.default.string,
    /**
     * The component used for the `input` element.
     * Either a string to use a HTML element or a component.
     * @default 'input'
     */
    inputComponent: elementTypeAcceptingRef_default,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * @default {}
     */
    inputProps: import_prop_types17.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType_default,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
     */
    margin: import_prop_types17.default.oneOf(["dense", "none"]),
    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: import_prop_types17.default.oneOfType([import_prop_types17.default.number, import_prop_types17.default.string]),
    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: import_prop_types17.default.oneOfType([import_prop_types17.default.number, import_prop_types17.default.string]),
    /**
     * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.
     * @default false
     */
    multiline: import_prop_types17.default.bool,
    /**
     * Name attribute of the `input` element.
     */
    name: import_prop_types17.default.string,
    /**
     * Callback fired when the `input` is blurred.
     *
     * Notice that the first argument (event) might be undefined.
     */
    onBlur: import_prop_types17.default.func,
    /**
     * Callback fired when the value is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: import_prop_types17.default.func,
    /**
     * @ignore
     */
    onClick: import_prop_types17.default.func,
    /**
     * @ignore
     */
    onFocus: import_prop_types17.default.func,
    /**
     * Callback fired when the `input` doesn't satisfy its constraints.
     */
    onInvalid: import_prop_types17.default.func,
    /**
     * @ignore
     */
    onKeyDown: import_prop_types17.default.func,
    /**
     * @ignore
     */
    onKeyUp: import_prop_types17.default.func,
    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: import_prop_types17.default.string,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: import_prop_types17.default.bool,
    /**
     * @ignore
     */
    renderSuffix: import_prop_types17.default.func,
    /**
     * If `true`, the `input` element is required.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    required: import_prop_types17.default.bool,
    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: import_prop_types17.default.oneOfType([import_prop_types17.default.number, import_prop_types17.default.string]),
    /**
     * The size of the component.
     */
    size: import_prop_types17.default.oneOfType([import_prop_types17.default.oneOf(["medium", "small"]), import_prop_types17.default.string]),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: import_prop_types17.default.shape({
      input: import_prop_types17.default.object,
      root: import_prop_types17.default.object
    }),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: import_prop_types17.default.shape({
      input: import_prop_types17.default.elementType,
      root: import_prop_types17.default.elementType
    }),
    /**
     * Start `InputAdornment` for this component.
     */
    startAdornment: import_prop_types17.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types17.default.oneOfType([import_prop_types17.default.arrayOf(import_prop_types17.default.oneOfType([import_prop_types17.default.func, import_prop_types17.default.object, import_prop_types17.default.bool])), import_prop_types17.default.func, import_prop_types17.default.object]),
    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     * @default 'text'
     */
    type: import_prop_types17.default.string,
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: import_prop_types17.default.any
  } : void 0;
  var InputBase_default = InputBase;

  // node_modules/@mui/material/styles/cssUtils.js
  function getUnit(input) {
    return String(input).match(/[\d.\-+]*\s*(.*)/)[1] || "";
  }
  function toUnitless(length2) {
    return parseFloat(length2);
  }

  // node_modules/@mui/material/styles/useTheme.js
  var React47 = __toESM(require_react());
  function useTheme5() {
    const theme = useTheme_default(defaultTheme_default);
    if (true) {
      React47.useDebugValue(theme);
    }
    return theme[identifier_default] || theme;
  }

  // node_modules/@mui/material/styles/useThemeProps.js
  function useThemeProps2({
    props,
    name
  }) {
    return useThemeProps({
      props,
      name,
      defaultTheme: defaultTheme_default,
      themeId: identifier_default
    });
  }

  // node_modules/@mui/material/styles/getOverlayAlpha.js
  var getOverlayAlpha = (elevation) => {
    let alphaValue;
    if (elevation < 1) {
      alphaValue = 5.11916 * elevation ** 2;
    } else {
      alphaValue = 4.5 * Math.log(elevation + 1) + 2;
    }
    return (alphaValue / 100).toFixed(2);
  };
  var getOverlayAlpha_default = getOverlayAlpha;

  // node_modules/@mui/x-data-grid/components/cell/GridEditDateCell.js
  var import_jsx_runtime20 = __toESM(require_jsx_runtime());
  var _excluded18 = ["id", "value", "formattedValue", "api", "field", "row", "rowNode", "colDef", "cellMode", "isEditable", "tabIndex", "hasFocus", "inputProps", "isValidating", "isProcessingProps", "onValueChange"];
  var StyledInputBase = styled_default2(InputBase_default)({
    fontSize: "inherit"
  });
  var useUtilityClasses7 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["editInputCell"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  function GridEditDateCell(props) {
    const {
      id,
      value: valueProp,
      field,
      colDef,
      hasFocus,
      inputProps,
      onValueChange
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded18);
    const isDateTime = colDef.type === "dateTime";
    const apiRef = useGridApiContext();
    const inputRef = React48.useRef();
    const valueTransformed = React48.useMemo(() => {
      let parsedDate;
      if (valueProp == null) {
        parsedDate = null;
      } else if (valueProp instanceof Date) {
        parsedDate = valueProp;
      } else {
        parsedDate = new Date((valueProp != null ? valueProp : "").toString());
      }
      let formattedDate;
      if (parsedDate == null || Number.isNaN(parsedDate.getTime())) {
        formattedDate = "";
      } else {
        const localDate = new Date(parsedDate.getTime() - parsedDate.getTimezoneOffset() * 60 * 1e3);
        formattedDate = localDate.toISOString().substr(0, isDateTime ? 16 : 10);
      }
      return {
        parsed: parsedDate,
        formatted: formattedDate
      };
    }, [valueProp, isDateTime]);
    const [valueState, setValueState] = React48.useState(valueTransformed);
    const rootProps = useGridRootProps();
    const ownerState = {
      classes: rootProps.classes
    };
    const classes = useUtilityClasses7(ownerState);
    const parseValueToDate = React48.useCallback((value) => {
      if (value === "") {
        return null;
      }
      const [date, time] = value.split("T");
      const [year, month, day] = date.split("-");
      const parsedDate = /* @__PURE__ */ new Date();
      parsedDate.setFullYear(Number(year), Number(month) - 1, Number(day));
      parsedDate.setHours(0, 0, 0, 0);
      if (time) {
        const [hours, minutes] = time.split(":");
        parsedDate.setHours(Number(hours), Number(minutes), 0, 0);
      }
      return parsedDate;
    }, []);
    const handleChange = React48.useCallback(async (event) => {
      const newFormattedDate = event.target.value;
      const newParsedDate = parseValueToDate(newFormattedDate);
      if (onValueChange) {
        await onValueChange(event, newParsedDate);
      }
      setValueState({
        parsed: newParsedDate,
        formatted: newFormattedDate
      });
      apiRef.current.setEditCellValue({
        id,
        field,
        value: newParsedDate
      }, event);
    }, [apiRef, field, id, onValueChange, parseValueToDate]);
    React48.useEffect(() => {
      setValueState((state) => {
        var _valueTransformed$par, _state$parsed;
        if (valueTransformed.parsed !== state.parsed && ((_valueTransformed$par = valueTransformed.parsed) == null ? void 0 : _valueTransformed$par.getTime()) !== ((_state$parsed = state.parsed) == null ? void 0 : _state$parsed.getTime())) {
          return valueTransformed;
        }
        return state;
      });
    }, [valueTransformed]);
    useEnhancedEffect_default(() => {
      if (hasFocus) {
        inputRef.current.focus();
      }
    }, [hasFocus]);
    return /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(StyledInputBase, _extends({
      inputRef,
      fullWidth: true,
      className: classes.root,
      type: isDateTime ? "datetime-local" : "date",
      inputProps: _extends({
        max: isDateTime ? "9999-12-31T23:59" : "9999-12-31"
      }, inputProps),
      value: valueState.formatted,
      onChange: handleChange
    }, other));
  }
  true ? GridEditDateCell.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * GridApi that let you manipulate the grid.
     */
    api: import_prop_types18.default.object.isRequired,
    /**
     * The mode of the cell.
     */
    cellMode: import_prop_types18.default.oneOf(["edit", "view"]).isRequired,
    changeReason: import_prop_types18.default.oneOf(["debouncedSetEditCellValue", "setEditCellValue"]),
    /**
     * The column of the row that the current cell belongs to.
     */
    colDef: import_prop_types18.default.object.isRequired,
    /**
     * The column field of the cell that triggered the event.
     */
    field: import_prop_types18.default.string.isRequired,
    /**
     * The cell value formatted with the column valueFormatter.
     */
    formattedValue: import_prop_types18.default.any,
    /**
     * If true, the cell is the active element.
     */
    hasFocus: import_prop_types18.default.bool.isRequired,
    /**
     * The grid row id.
     */
    id: import_prop_types18.default.oneOfType([import_prop_types18.default.number, import_prop_types18.default.string]).isRequired,
    /**
     * If true, the cell is editable.
     */
    isEditable: import_prop_types18.default.bool,
    isProcessingProps: import_prop_types18.default.bool,
    isValidating: import_prop_types18.default.bool,
    /**
     * Callback called when the value is changed by the user.
     * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
     * @param {Date | null} newValue The value that is going to be passed to `apiRef.current.setEditCellValue`.
     * @returns {Promise<void> | void} A promise to be awaited before calling `apiRef.current.setEditCellValue`
     */
    onValueChange: import_prop_types18.default.func,
    /**
     * The row model of the row that the current cell belongs to.
     */
    row: import_prop_types18.default.any.isRequired,
    /**
     * The node of the row that the current cell belongs to.
     */
    rowNode: import_prop_types18.default.object.isRequired,
    /**
     * the tabIndex value.
     */
    tabIndex: import_prop_types18.default.oneOf([-1, 0]).isRequired,
    /**
     * The cell value.
     * If the column has `valueGetter`, use `params.row` to directly access the fields.
     */
    value: import_prop_types18.default.any
  } : void 0;
  var renderEditDateCell = (params) => /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(GridEditDateCell, _extends({}, params));

  // node_modules/@mui/x-data-grid/components/cell/GridEditInputCell.js
  init_extends();
  var React49 = __toESM(require_react());
  var import_prop_types19 = __toESM(require_prop_types());
  var import_jsx_runtime21 = __toESM(require_jsx_runtime());
  var _excluded19 = ["id", "value", "formattedValue", "api", "field", "row", "rowNode", "colDef", "cellMode", "isEditable", "tabIndex", "hasFocus", "isValidating", "debounceMs", "isProcessingProps", "onValueChange"];
  var useUtilityClasses8 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["editInputCell"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridEditInputCellRoot = styled_default2(InputBase_default, {
    name: "MuiDataGrid",
    slot: "EditInputCell",
    overridesResolver: (props, styles4) => styles4.editInputCell
  })(({
    theme
  }) => _extends({}, theme.typography.body2, {
    padding: "1px 0",
    "& input": {
      padding: "0 16px",
      height: "100%"
    }
  }));
  var GridEditInputCell = /* @__PURE__ */ React49.forwardRef((props, ref) => {
    const rootProps = useGridRootProps();
    const {
      id,
      value,
      field,
      colDef,
      hasFocus,
      debounceMs = 200,
      isProcessingProps,
      onValueChange
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded19);
    const apiRef = useGridApiContext();
    const inputRef = React49.useRef();
    const [valueState, setValueState] = React49.useState(value);
    const classes = useUtilityClasses8(rootProps);
    const handleChange = React49.useCallback(async (event) => {
      const newValue = event.target.value;
      if (onValueChange) {
        await onValueChange(event, newValue);
      }
      const column2 = apiRef.current.getColumn(field);
      let parsedValue = newValue;
      if (column2.valueParser) {
        parsedValue = column2.valueParser(newValue, apiRef.current.getCellParams(id, field));
      }
      setValueState(parsedValue);
      apiRef.current.setEditCellValue({
        id,
        field,
        value: parsedValue,
        debounceMs,
        unstable_skipValueParser: true
      }, event);
    }, [apiRef, debounceMs, field, id, onValueChange]);
    const meta = apiRef.current.unstable_getEditCellMeta(id, field);
    React49.useEffect(() => {
      if ((meta == null ? void 0 : meta.changeReason) !== "debouncedSetEditCellValue") {
        setValueState(value);
      }
    }, [meta, value]);
    useEnhancedEffect_default(() => {
      if (hasFocus) {
        inputRef.current.focus();
      }
    }, [hasFocus]);
    return /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(GridEditInputCellRoot, _extends({
      ref,
      inputRef,
      className: classes.root,
      ownerState: rootProps,
      fullWidth: true,
      type: colDef.type === "number" ? colDef.type : "text",
      value: valueState != null ? valueState : "",
      onChange: handleChange,
      endAdornment: isProcessingProps ? /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(rootProps.slots.loadIcon, {
        fontSize: "small",
        color: "action"
      }) : void 0
    }, other));
  });
  true ? GridEditInputCell.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * GridApi that let you manipulate the grid.
     */
    api: import_prop_types19.default.object.isRequired,
    /**
     * The mode of the cell.
     */
    cellMode: import_prop_types19.default.oneOf(["edit", "view"]).isRequired,
    changeReason: import_prop_types19.default.oneOf(["debouncedSetEditCellValue", "setEditCellValue"]),
    /**
     * The column of the row that the current cell belongs to.
     */
    colDef: import_prop_types19.default.object.isRequired,
    debounceMs: import_prop_types19.default.number,
    /**
     * The column field of the cell that triggered the event.
     */
    field: import_prop_types19.default.string.isRequired,
    /**
     * The cell value formatted with the column valueFormatter.
     */
    formattedValue: import_prop_types19.default.any,
    /**
     * If true, the cell is the active element.
     */
    hasFocus: import_prop_types19.default.bool.isRequired,
    /**
     * The grid row id.
     */
    id: import_prop_types19.default.oneOfType([import_prop_types19.default.number, import_prop_types19.default.string]).isRequired,
    /**
     * If true, the cell is editable.
     */
    isEditable: import_prop_types19.default.bool,
    isProcessingProps: import_prop_types19.default.bool,
    isValidating: import_prop_types19.default.bool,
    /**
     * Callback called when the value is changed by the user.
     * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
     * @param {Date | null} newValue The value that is going to be passed to `apiRef.current.setEditCellValue`.
     * @returns {Promise<void> | void} A promise to be awaited before calling `apiRef.current.setEditCellValue`
     */
    onValueChange: import_prop_types19.default.func,
    /**
     * The row model of the row that the current cell belongs to.
     */
    row: import_prop_types19.default.any.isRequired,
    /**
     * The node of the row that the current cell belongs to.
     */
    rowNode: import_prop_types19.default.object.isRequired,
    /**
     * the tabIndex value.
     */
    tabIndex: import_prop_types19.default.oneOf([-1, 0]).isRequired,
    /**
     * The cell value.
     * If the column has `valueGetter`, use `params.row` to directly access the fields.
     */
    value: import_prop_types19.default.any
  } : void 0;
  var renderEditInputCell = (params) => /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(GridEditInputCell, _extends({}, params));

  // node_modules/@mui/x-data-grid/components/cell/GridEditSingleSelectCell.js
  init_extends();
  var React50 = __toESM(require_react());
  var import_prop_types20 = __toESM(require_prop_types());

  // node_modules/@mui/x-data-grid/utils/keyboardUtils.js
  var isEscapeKey = (key) => key === "Escape";
  var isEnterKey = (key) => key === "Enter";
  var isTabKey = (key) => key === "Tab";
  var isSpaceKey = (key) => key === " ";
  var isArrowKeys = (key) => key.indexOf("Arrow") === 0;
  var isHomeOrEndKeys = (key) => key === "Home" || key === "End";
  var isPageKeys = (key) => key.indexOf("Page") === 0;
  function isPrintableKey(event) {
    return event.key.length === 1 && !event.ctrlKey && !event.metaKey;
  }
  var isNavigationKey = (key) => isHomeOrEndKeys(key) || isArrowKeys(key) || isPageKeys(key) || isSpaceKey(key);
  var isKeyboardEvent = (event) => !!event.key;
  var isHideMenuKey = (key) => isTabKey(key) || isEscapeKey(key);

  // node_modules/@mui/x-data-grid/components/panel/filterPanel/filterPanelUtils.js
  function isSingleSelectColDef(colDef) {
    return (colDef == null ? void 0 : colDef.type) === "singleSelect";
  }
  function getValueFromValueOptions(value, valueOptions, getOptionValue) {
    if (valueOptions === void 0) {
      return void 0;
    }
    const result = valueOptions.find((option) => {
      const optionValue = getOptionValue(option);
      return String(optionValue) === String(value);
    });
    return getOptionValue(result);
  }

  // node_modules/@mui/x-data-grid/components/cell/GridEditSingleSelectCell.js
  var import_react4 = __toESM(require_react());
  var import_jsx_runtime22 = __toESM(require_jsx_runtime());
  var _excluded20 = ["id", "value", "formattedValue", "api", "field", "row", "rowNode", "colDef", "cellMode", "isEditable", "tabIndex", "className", "hasFocus", "isValidating", "isProcessingProps", "error", "onValueChange", "initialOpen", "getOptionLabel", "getOptionValue"];
  var _excluded24 = ["MenuProps"];
  function isKeyboardEvent2(event) {
    return !!event.key;
  }
  function GridEditSingleSelectCell(props) {
    var _rootProps$slotProps, _baseSelectProps$nati, _rootProps$slotProps2;
    const rootProps = useGridRootProps();
    const {
      id,
      value: valueProp,
      field,
      row,
      colDef,
      hasFocus,
      error,
      onValueChange,
      initialOpen = rootProps.editMode === GridEditModes.Cell,
      getOptionLabel: getOptionLabelProp,
      getOptionValue: getOptionValueProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded20);
    const apiRef = useGridApiContext();
    const ref = React50.useRef();
    const inputRef = React50.useRef();
    const [open, setOpen] = React50.useState(initialOpen);
    const baseSelectProps = ((_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseSelect) || {};
    const isSelectNative = (_baseSelectProps$nati = baseSelectProps.native) != null ? _baseSelectProps$nati : false;
    const _ref = ((_rootProps$slotProps2 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps2.baseSelect) || {}, {
      MenuProps
    } = _ref, otherBaseSelectProps = _objectWithoutPropertiesLoose(_ref, _excluded24);
    useEnhancedEffect_default(() => {
      if (hasFocus) {
        var _inputRef$current;
        (_inputRef$current = inputRef.current) == null || _inputRef$current.focus();
      }
    }, [hasFocus]);
    if (!isSingleSelectColDef(colDef)) {
      return null;
    }
    let valueOptions;
    if (typeof (colDef == null ? void 0 : colDef.valueOptions) === "function") {
      valueOptions = colDef == null ? void 0 : colDef.valueOptions({
        id,
        row,
        field
      });
    } else {
      valueOptions = colDef == null ? void 0 : colDef.valueOptions;
    }
    if (!valueOptions) {
      return null;
    }
    const getOptionValue = getOptionValueProp || colDef.getOptionValue;
    const getOptionLabel = getOptionLabelProp || colDef.getOptionLabel;
    const handleChange = async (event) => {
      if (!isSingleSelectColDef(colDef) || !valueOptions) {
        return;
      }
      setOpen(false);
      const target = event.target;
      const formattedTargetValue = getValueFromValueOptions(target.value, valueOptions, getOptionValue);
      if (onValueChange) {
        await onValueChange(event, formattedTargetValue);
      }
      await apiRef.current.setEditCellValue({
        id,
        field,
        value: formattedTargetValue
      }, event);
    };
    const handleClose = (event, reason) => {
      if (rootProps.editMode === GridEditModes.Row) {
        setOpen(false);
        return;
      }
      if (reason === "backdropClick" || isEscapeKey(event.key)) {
        const params = apiRef.current.getCellParams(id, field);
        apiRef.current.publishEvent("cellEditStop", _extends({}, params, {
          reason: isEscapeKey(event.key) ? GridCellEditStopReasons.escapeKeyDown : GridCellEditStopReasons.cellFocusOut
        }));
      }
    };
    const handleOpen = (event) => {
      if (isKeyboardEvent2(event) && event.key === "Enter") {
        return;
      }
      setOpen(true);
    };
    if (!valueOptions || !colDef) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(rootProps.slots.baseSelect, _extends({
      ref,
      inputRef,
      value: valueProp,
      onChange: handleChange,
      open,
      onOpen: handleOpen,
      MenuProps: _extends({
        onClose: handleClose
      }, MenuProps),
      error,
      native: isSelectNative,
      fullWidth: true
    }, other, otherBaseSelectProps, {
      children: valueOptions.map((valueOption) => {
        var _rootProps$slotProps3;
        const value = getOptionValue(valueOption);
        return /* @__PURE__ */ (0, import_react4.createElement)(rootProps.slots.baseSelectOption, _extends({}, ((_rootProps$slotProps3 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps3.baseSelectOption) || {}, {
          native: isSelectNative,
          key: value,
          value
        }), getOptionLabel(valueOption));
      })
    }));
  }
  true ? GridEditSingleSelectCell.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * GridApi that let you manipulate the grid.
     */
    api: import_prop_types20.default.object.isRequired,
    /**
     * The mode of the cell.
     */
    cellMode: import_prop_types20.default.oneOf(["edit", "view"]).isRequired,
    changeReason: import_prop_types20.default.oneOf(["debouncedSetEditCellValue", "setEditCellValue"]),
    /**
     * The column of the row that the current cell belongs to.
     */
    colDef: import_prop_types20.default.object.isRequired,
    /**
     * The column field of the cell that triggered the event.
     */
    field: import_prop_types20.default.string.isRequired,
    /**
     * The cell value formatted with the column valueFormatter.
     */
    formattedValue: import_prop_types20.default.any,
    /**
     * Used to determine the label displayed for a given value option.
     * @param {ValueOptions} value The current value option.
     * @returns {string} The text to be displayed.
     */
    getOptionLabel: import_prop_types20.default.func,
    /**
     * Used to determine the value used for a value option.
     * @param {ValueOptions} value The current value option.
     * @returns {string} The value to be used.
     */
    getOptionValue: import_prop_types20.default.func,
    /**
     * If true, the cell is the active element.
     */
    hasFocus: import_prop_types20.default.bool.isRequired,
    /**
     * The grid row id.
     */
    id: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.string]).isRequired,
    /**
     * If true, the select opens by default.
     */
    initialOpen: import_prop_types20.default.bool,
    /**
     * If true, the cell is editable.
     */
    isEditable: import_prop_types20.default.bool,
    isProcessingProps: import_prop_types20.default.bool,
    isValidating: import_prop_types20.default.bool,
    /**
     * Callback called when the value is changed by the user.
     * @param {SelectChangeEvent<any>} event The event source of the callback.
     * @param {any} newValue The value that is going to be passed to `apiRef.current.setEditCellValue`.
     * @returns {Promise<void> | void} A promise to be awaited before calling `apiRef.current.setEditCellValue`
     */
    onValueChange: import_prop_types20.default.func,
    /**
     * The row model of the row that the current cell belongs to.
     */
    row: import_prop_types20.default.any.isRequired,
    /**
     * The node of the row that the current cell belongs to.
     */
    rowNode: import_prop_types20.default.object.isRequired,
    /**
     * the tabIndex value.
     */
    tabIndex: import_prop_types20.default.oneOf([-1, 0]).isRequired,
    /**
     * The cell value.
     * If the column has `valueGetter`, use `params.row` to directly access the fields.
     */
    value: import_prop_types20.default.any
  } : void 0;
  var renderEditSingleSelectCell = (params) => /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(GridEditSingleSelectCell, _extends({}, params));

  // node_modules/@mui/x-data-grid/components/cell/GridActionsCell.js
  init_extends();
  var React64 = __toESM(require_react());
  var import_prop_types33 = __toESM(require_prop_types());

  // node_modules/@mui/material/MenuList/MenuList.js
  init_extends();
  var React53 = __toESM(require_react());
  var import_react_is = __toESM(require_react_is2());
  var import_prop_types22 = __toESM(require_prop_types());

  // node_modules/@mui/material/utils/ownerDocument.js
  var ownerDocument_default = ownerDocument;

  // node_modules/@mui/material/List/List.js
  init_extends();
  var React52 = __toESM(require_react());
  var import_prop_types21 = __toESM(require_prop_types());

  // node_modules/@mui/material/List/ListContext.js
  var React51 = __toESM(require_react());
  var ListContext = /* @__PURE__ */ React51.createContext({});
  if (true) {
    ListContext.displayName = "ListContext";
  }
  var ListContext_default = ListContext;

  // node_modules/@mui/material/List/listClasses.js
  function getListUtilityClass(slot) {
    return generateUtilityClass("MuiList", slot);
  }
  var listClasses = generateUtilityClasses("MuiList", ["root", "padding", "dense", "subheader"]);

  // node_modules/@mui/material/List/List.js
  var import_jsx_runtime23 = __toESM(require_jsx_runtime());
  var import_jsx_runtime24 = __toESM(require_jsx_runtime());
  var _excluded21 = ["children", "className", "component", "dense", "disablePadding", "subheader"];
  var useUtilityClasses9 = (ownerState) => {
    const {
      classes,
      disablePadding,
      dense,
      subheader
    } = ownerState;
    const slots = {
      root: ["root", !disablePadding && "padding", dense && "dense", subheader && "subheader"]
    };
    return composeClasses(slots, getListUtilityClass, classes);
  };
  var ListRoot = styled_default2("ul", {
    name: "MuiList",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, !ownerState.disablePadding && styles4.padding, ownerState.dense && styles4.dense, ownerState.subheader && styles4.subheader];
    }
  })(({
    ownerState
  }) => _extends({
    listStyle: "none",
    margin: 0,
    padding: 0,
    position: "relative"
  }, !ownerState.disablePadding && {
    paddingTop: 8,
    paddingBottom: 8
  }, ownerState.subheader && {
    paddingTop: 0
  }));
  var List = /* @__PURE__ */ React52.forwardRef(function List2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiList"
    });
    const {
      children,
      className,
      component = "ul",
      dense = false,
      disablePadding = false,
      subheader
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded21);
    const context = React52.useMemo(() => ({
      dense
    }), [dense]);
    const ownerState = _extends({}, props, {
      component,
      dense,
      disablePadding
    });
    const classes = useUtilityClasses9(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(ListContext_default.Provider, {
      value: context,
      children: /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)(ListRoot, _extends({
        as: component,
        className: clsx_default(classes.root, className),
        ref,
        ownerState
      }, other, {
        children: [subheader, children]
      }))
    });
  });
  true ? List.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types21.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types21.default.object,
    /**
     * @ignore
     */
    className: import_prop_types21.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types21.default.elementType,
    /**
     * If `true`, compact vertical padding designed for keyboard and mouse input is used for
     * the list and list items.
     * The prop is available to descendant components as the `dense` context.
     * @default false
     */
    dense: import_prop_types21.default.bool,
    /**
     * If `true`, vertical padding is removed from the list.
     * @default false
     */
    disablePadding: import_prop_types21.default.bool,
    /**
     * The content of the subheader, normally `ListSubheader`.
     */
    subheader: import_prop_types21.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types21.default.oneOfType([import_prop_types21.default.arrayOf(import_prop_types21.default.oneOfType([import_prop_types21.default.func, import_prop_types21.default.object, import_prop_types21.default.bool])), import_prop_types21.default.func, import_prop_types21.default.object])
  } : void 0;
  var List_default = List;

  // node_modules/@mui/material/utils/getScrollbarSize.js
  var getScrollbarSize_default = getScrollbarSize;

  // node_modules/@mui/material/MenuList/MenuList.js
  var import_jsx_runtime25 = __toESM(require_jsx_runtime());
  var _excluded25 = ["actions", "autoFocus", "autoFocusItem", "children", "className", "disabledItemsFocusable", "disableListWrap", "onKeyDown", "variant"];
  function nextItem(list, item, disableListWrap) {
    if (list === item) {
      return list.firstChild;
    }
    if (item && item.nextElementSibling) {
      return item.nextElementSibling;
    }
    return disableListWrap ? null : list.firstChild;
  }
  function previousItem(list, item, disableListWrap) {
    if (list === item) {
      return disableListWrap ? list.firstChild : list.lastChild;
    }
    if (item && item.previousElementSibling) {
      return item.previousElementSibling;
    }
    return disableListWrap ? null : list.lastChild;
  }
  function textCriteriaMatches(nextFocus, textCriteria) {
    if (textCriteria === void 0) {
      return true;
    }
    let text = nextFocus.innerText;
    if (text === void 0) {
      text = nextFocus.textContent;
    }
    text = text.trim().toLowerCase();
    if (text.length === 0) {
      return false;
    }
    if (textCriteria.repeating) {
      return text[0] === textCriteria.keys[0];
    }
    return text.indexOf(textCriteria.keys.join("")) === 0;
  }
  function moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, traversalFunction, textCriteria) {
    let wrappedOnce = false;
    let nextFocus = traversalFunction(list, currentFocus, currentFocus ? disableListWrap : false);
    while (nextFocus) {
      if (nextFocus === list.firstChild) {
        if (wrappedOnce) {
          return false;
        }
        wrappedOnce = true;
      }
      const nextFocusDisabled = disabledItemsFocusable ? false : nextFocus.disabled || nextFocus.getAttribute("aria-disabled") === "true";
      if (!nextFocus.hasAttribute("tabindex") || !textCriteriaMatches(nextFocus, textCriteria) || nextFocusDisabled) {
        nextFocus = traversalFunction(list, nextFocus, disableListWrap);
      } else {
        nextFocus.focus();
        return true;
      }
    }
    return false;
  }
  var MenuList = /* @__PURE__ */ React53.forwardRef(function MenuList2(props, ref) {
    const {
      // private
      // eslint-disable-next-line react/prop-types
      actions,
      autoFocus = false,
      autoFocusItem = false,
      children,
      className,
      disabledItemsFocusable = false,
      disableListWrap = false,
      onKeyDown,
      variant = "selectedMenu"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded25);
    const listRef = React53.useRef(null);
    const textCriteriaRef = React53.useRef({
      keys: [],
      repeating: true,
      previousKeyMatched: true,
      lastTime: null
    });
    useEnhancedEffect_default2(() => {
      if (autoFocus) {
        listRef.current.focus();
      }
    }, [autoFocus]);
    React53.useImperativeHandle(actions, () => ({
      adjustStyleForScrollbar: (containerElement, {
        direction
      }) => {
        const noExplicitWidth = !listRef.current.style.width;
        if (containerElement.clientHeight < listRef.current.clientHeight && noExplicitWidth) {
          const scrollbarSize = `${getScrollbarSize_default(ownerDocument_default(containerElement))}px`;
          listRef.current.style[direction === "rtl" ? "paddingLeft" : "paddingRight"] = scrollbarSize;
          listRef.current.style.width = `calc(100% + ${scrollbarSize})`;
        }
        return listRef.current;
      }
    }), []);
    const handleKeyDown2 = (event) => {
      const list = listRef.current;
      const key = event.key;
      const currentFocus = ownerDocument_default(list).activeElement;
      if (key === "ArrowDown") {
        event.preventDefault();
        moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, nextItem);
      } else if (key === "ArrowUp") {
        event.preventDefault();
        moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, previousItem);
      } else if (key === "Home") {
        event.preventDefault();
        moveFocus(list, null, disableListWrap, disabledItemsFocusable, nextItem);
      } else if (key === "End") {
        event.preventDefault();
        moveFocus(list, null, disableListWrap, disabledItemsFocusable, previousItem);
      } else if (key.length === 1) {
        const criteria = textCriteriaRef.current;
        const lowerKey = key.toLowerCase();
        const currTime = performance.now();
        if (criteria.keys.length > 0) {
          if (currTime - criteria.lastTime > 500) {
            criteria.keys = [];
            criteria.repeating = true;
            criteria.previousKeyMatched = true;
          } else if (criteria.repeating && lowerKey !== criteria.keys[0]) {
            criteria.repeating = false;
          }
        }
        criteria.lastTime = currTime;
        criteria.keys.push(lowerKey);
        const keepFocusOnCurrent = currentFocus && !criteria.repeating && textCriteriaMatches(currentFocus, criteria);
        if (criteria.previousKeyMatched && (keepFocusOnCurrent || moveFocus(list, currentFocus, false, disabledItemsFocusable, nextItem, criteria))) {
          event.preventDefault();
        } else {
          criteria.previousKeyMatched = false;
        }
      }
      if (onKeyDown) {
        onKeyDown(event);
      }
    };
    const handleRef = useForkRef_default(listRef, ref);
    let activeItemIndex = -1;
    React53.Children.forEach(children, (child, index) => {
      if (!/* @__PURE__ */ React53.isValidElement(child)) {
        if (activeItemIndex === index) {
          activeItemIndex += 1;
          if (activeItemIndex >= children.length) {
            activeItemIndex = -1;
          }
        }
        return;
      }
      if (true) {
        if ((0, import_react_is.isFragment)(child)) {
          console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      if (!child.props.disabled) {
        if (variant === "selectedMenu" && child.props.selected) {
          activeItemIndex = index;
        } else if (activeItemIndex === -1) {
          activeItemIndex = index;
        }
      }
      if (activeItemIndex === index && (child.props.disabled || child.props.muiSkipListHighlight || child.type.muiSkipListHighlight)) {
        activeItemIndex += 1;
        if (activeItemIndex >= children.length) {
          activeItemIndex = -1;
        }
      }
    });
    const items = React53.Children.map(children, (child, index) => {
      if (index === activeItemIndex) {
        const newChildProps = {};
        if (autoFocusItem) {
          newChildProps.autoFocus = true;
        }
        if (child.props.tabIndex === void 0 && variant === "selectedMenu") {
          newChildProps.tabIndex = 0;
        }
        return /* @__PURE__ */ React53.cloneElement(child, newChildProps);
      }
      return child;
    });
    return /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(List_default, _extends({
      role: "menu",
      ref: handleRef,
      className,
      onKeyDown: handleKeyDown2,
      tabIndex: autoFocus ? 0 : -1
    }, other, {
      children: items
    }));
  });
  true ? MenuList.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * If `true`, will focus the `[role="menu"]` container and move into tab order.
     * @default false
     */
    autoFocus: import_prop_types22.default.bool,
    /**
     * If `true`, will focus the first menuitem if `variant="menu"` or selected item
     * if `variant="selectedMenu"`.
     * @default false
     */
    autoFocusItem: import_prop_types22.default.bool,
    /**
     * MenuList contents, normally `MenuItem`s.
     */
    children: import_prop_types22.default.node,
    /**
     * @ignore
     */
    className: import_prop_types22.default.string,
    /**
     * If `true`, will allow focus on disabled items.
     * @default false
     */
    disabledItemsFocusable: import_prop_types22.default.bool,
    /**
     * If `true`, the menu items will not wrap focus.
     * @default false
     */
    disableListWrap: import_prop_types22.default.bool,
    /**
     * @ignore
     */
    onKeyDown: import_prop_types22.default.func,
    /**
     * The variant to use. Use `menu` to prevent selected items from impacting the initial focus
     * and the vertical alignment relative to the anchor element.
     * @default 'selectedMenu'
     */
    variant: import_prop_types22.default.oneOf(["menu", "selectedMenu"])
  } : void 0;
  var MenuList_default = MenuList;

  // node_modules/@mui/x-data-grid/components/menu/GridMenu.js
  init_extends();
  var React63 = __toESM(require_react());
  var import_prop_types32 = __toESM(require_prop_types());

  // node_modules/@mui/material/ClickAwayListener/ClickAwayListener.js
  var React54 = __toESM(require_react());
  var import_prop_types23 = __toESM(require_prop_types());
  var import_jsx_runtime26 = __toESM(require_jsx_runtime());
  function mapEventPropToEvent(eventProp) {
    return eventProp.substring(2).toLowerCase();
  }
  function clickedRootScrollbar(event, doc) {
    return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;
  }
  function ClickAwayListener(props) {
    const {
      children,
      disableReactTree = false,
      mouseEvent = "onClick",
      onClickAway,
      touchEvent = "onTouchEnd"
    } = props;
    const movedRef = React54.useRef(false);
    const nodeRef = React54.useRef(null);
    const activatedRef = React54.useRef(false);
    const syntheticEventRef = React54.useRef(false);
    React54.useEffect(() => {
      setTimeout(() => {
        activatedRef.current = true;
      }, 0);
      return () => {
        activatedRef.current = false;
      };
    }, []);
    const handleRef = useForkRef(getReactElementRef(children), nodeRef);
    const handleClickAway = useEventCallback_default((event) => {
      const insideReactTree = syntheticEventRef.current;
      syntheticEventRef.current = false;
      const doc = ownerDocument(nodeRef.current);
      if (!activatedRef.current || !nodeRef.current || "clientX" in event && clickedRootScrollbar(event, doc)) {
        return;
      }
      if (movedRef.current) {
        movedRef.current = false;
        return;
      }
      let insideDOM;
      if (event.composedPath) {
        insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;
      } else {
        insideDOM = !doc.documentElement.contains(
          // @ts-expect-error returns `false` as intended when not dispatched from a Node
          event.target
        ) || nodeRef.current.contains(
          // @ts-expect-error returns `false` as intended when not dispatched from a Node
          event.target
        );
      }
      if (!insideDOM && (disableReactTree || !insideReactTree)) {
        onClickAway(event);
      }
    });
    const createHandleSynthetic = (handlerName) => (event) => {
      syntheticEventRef.current = true;
      const childrenPropsHandler = children.props[handlerName];
      if (childrenPropsHandler) {
        childrenPropsHandler(event);
      }
    };
    const childrenProps = {
      ref: handleRef
    };
    if (touchEvent !== false) {
      childrenProps[touchEvent] = createHandleSynthetic(touchEvent);
    }
    React54.useEffect(() => {
      if (touchEvent !== false) {
        const mappedTouchEvent = mapEventPropToEvent(touchEvent);
        const doc = ownerDocument(nodeRef.current);
        const handleTouchMove = () => {
          movedRef.current = true;
        };
        doc.addEventListener(mappedTouchEvent, handleClickAway);
        doc.addEventListener("touchmove", handleTouchMove);
        return () => {
          doc.removeEventListener(mappedTouchEvent, handleClickAway);
          doc.removeEventListener("touchmove", handleTouchMove);
        };
      }
      return void 0;
    }, [handleClickAway, touchEvent]);
    if (mouseEvent !== false) {
      childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);
    }
    React54.useEffect(() => {
      if (mouseEvent !== false) {
        const mappedMouseEvent = mapEventPropToEvent(mouseEvent);
        const doc = ownerDocument(nodeRef.current);
        doc.addEventListener(mappedMouseEvent, handleClickAway);
        return () => {
          doc.removeEventListener(mappedMouseEvent, handleClickAway);
        };
      }
      return void 0;
    }, [handleClickAway, mouseEvent]);
    return /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(React54.Fragment, {
      children: /* @__PURE__ */ React54.cloneElement(children, childrenProps)
    });
  }
  true ? ClickAwayListener.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The wrapped element.
     */
    children: elementAcceptingRef_default.isRequired,
    /**
     * If `true`, the React tree is ignored and only the DOM tree is considered.
     * This prop changes how portaled elements are handled.
     * @default false
     */
    disableReactTree: import_prop_types23.default.bool,
    /**
     * The mouse event to listen to. You can disable the listener by providing `false`.
     * @default 'onClick'
     */
    mouseEvent: import_prop_types23.default.oneOf(["onClick", "onMouseDown", "onMouseUp", "onPointerDown", "onPointerUp", false]),
    /**
     * Callback fired when a "click away" event is detected.
     */
    onClickAway: import_prop_types23.default.func.isRequired,
    /**
     * The touch event to listen to. You can disable the listener by providing `false`.
     * @default 'onTouchEnd'
     */
    touchEvent: import_prop_types23.default.oneOf(["onTouchEnd", "onTouchStart", false])
  } : void 0;
  if (true) {
    ClickAwayListener["propTypes"] = exactProp(ClickAwayListener.propTypes);
  }

  // node_modules/@mui/material/Grow/Grow.js
  init_extends();
  var React58 = __toESM(require_react());
  var import_prop_types27 = __toESM(require_prop_types());

  // node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
  function _setPrototypeOf(t, e) {
    return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t2, e2) {
      return t2.__proto__ = e2, t2;
    }, _setPrototypeOf(t, e);
  }

  // node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
  function _inheritsLoose(t, o) {
    t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf(t, o);
  }

  // node_modules/react-transition-group/esm/Transition.js
  var import_prop_types25 = __toESM(require_prop_types());
  var import_react6 = __toESM(require_react());
  var import_react_dom = __toESM(require_react_dom());

  // node_modules/react-transition-group/esm/config.js
  var config_default = {
    disabled: false
  };

  // node_modules/react-transition-group/esm/utils/PropTypes.js
  var import_prop_types24 = __toESM(require_prop_types());
  var timeoutsShape = true ? import_prop_types24.default.oneOfType([import_prop_types24.default.number, import_prop_types24.default.shape({
    enter: import_prop_types24.default.number,
    exit: import_prop_types24.default.number,
    appear: import_prop_types24.default.number
  }).isRequired]) : null;
  var classNamesShape = true ? import_prop_types24.default.oneOfType([import_prop_types24.default.string, import_prop_types24.default.shape({
    enter: import_prop_types24.default.string,
    exit: import_prop_types24.default.string,
    active: import_prop_types24.default.string
  }), import_prop_types24.default.shape({
    enter: import_prop_types24.default.string,
    enterDone: import_prop_types24.default.string,
    enterActive: import_prop_types24.default.string,
    exit: import_prop_types24.default.string,
    exitDone: import_prop_types24.default.string,
    exitActive: import_prop_types24.default.string
  })]) : null;

  // node_modules/react-transition-group/esm/TransitionGroupContext.js
  var import_react5 = __toESM(require_react());
  var TransitionGroupContext_default = import_react5.default.createContext(null);

  // node_modules/react-transition-group/esm/utils/reflow.js
  var forceReflow = function forceReflow2(node2) {
    return node2.scrollTop;
  };

  // node_modules/react-transition-group/esm/Transition.js
  var UNMOUNTED = "unmounted";
  var EXITED = "exited";
  var ENTERING = "entering";
  var ENTERED = "entered";
  var EXITING = "exiting";
  var Transition = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(Transition2, _React$Component);
    function Transition2(props, context) {
      var _this;
      _this = _React$Component.call(this, props, context) || this;
      var parentGroup = context;
      var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
      var initialStatus;
      _this.appearStatus = null;
      if (props.in) {
        if (appear) {
          initialStatus = EXITED;
          _this.appearStatus = ENTERING;
        } else {
          initialStatus = ENTERED;
        }
      } else {
        if (props.unmountOnExit || props.mountOnEnter) {
          initialStatus = UNMOUNTED;
        } else {
          initialStatus = EXITED;
        }
      }
      _this.state = {
        status: initialStatus
      };
      _this.nextCallback = null;
      return _this;
    }
    Transition2.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
      var nextIn = _ref.in;
      if (nextIn && prevState.status === UNMOUNTED) {
        return {
          status: EXITED
        };
      }
      return null;
    };
    var _proto = Transition2.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this.updateStatus(true, this.appearStatus);
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
      var nextStatus = null;
      if (prevProps !== this.props) {
        var status = this.state.status;
        if (this.props.in) {
          if (status !== ENTERING && status !== ENTERED) {
            nextStatus = ENTERING;
          }
        } else {
          if (status === ENTERING || status === ENTERED) {
            nextStatus = EXITING;
          }
        }
      }
      this.updateStatus(false, nextStatus);
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.cancelNextCallback();
    };
    _proto.getTimeouts = function getTimeouts() {
      var timeout2 = this.props.timeout;
      var exit, enter, appear;
      exit = enter = appear = timeout2;
      if (timeout2 != null && typeof timeout2 !== "number") {
        exit = timeout2.exit;
        enter = timeout2.enter;
        appear = timeout2.appear !== void 0 ? timeout2.appear : enter;
      }
      return {
        exit,
        enter,
        appear
      };
    };
    _proto.updateStatus = function updateStatus(mounting, nextStatus) {
      if (mounting === void 0) {
        mounting = false;
      }
      if (nextStatus !== null) {
        this.cancelNextCallback();
        if (nextStatus === ENTERING) {
          if (this.props.unmountOnExit || this.props.mountOnEnter) {
            var node2 = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom.default.findDOMNode(this);
            if (node2) forceReflow(node2);
          }
          this.performEnter(mounting);
        } else {
          this.performExit();
        }
      } else if (this.props.unmountOnExit && this.state.status === EXITED) {
        this.setState({
          status: UNMOUNTED
        });
      }
    };
    _proto.performEnter = function performEnter(mounting) {
      var _this2 = this;
      var enter = this.props.enter;
      var appearing = this.context ? this.context.isMounting : mounting;
      var _ref2 = this.props.nodeRef ? [appearing] : [import_react_dom.default.findDOMNode(this), appearing], maybeNode = _ref2[0], maybeAppearing = _ref2[1];
      var timeouts = this.getTimeouts();
      var enterTimeout = appearing ? timeouts.appear : timeouts.enter;
      if (!mounting && !enter || config_default.disabled) {
        this.safeSetState({
          status: ENTERED
        }, function() {
          _this2.props.onEntered(maybeNode);
        });
        return;
      }
      this.props.onEnter(maybeNode, maybeAppearing);
      this.safeSetState({
        status: ENTERING
      }, function() {
        _this2.props.onEntering(maybeNode, maybeAppearing);
        _this2.onTransitionEnd(enterTimeout, function() {
          _this2.safeSetState({
            status: ENTERED
          }, function() {
            _this2.props.onEntered(maybeNode, maybeAppearing);
          });
        });
      });
    };
    _proto.performExit = function performExit() {
      var _this3 = this;
      var exit = this.props.exit;
      var timeouts = this.getTimeouts();
      var maybeNode = this.props.nodeRef ? void 0 : import_react_dom.default.findDOMNode(this);
      if (!exit || config_default.disabled) {
        this.safeSetState({
          status: EXITED
        }, function() {
          _this3.props.onExited(maybeNode);
        });
        return;
      }
      this.props.onExit(maybeNode);
      this.safeSetState({
        status: EXITING
      }, function() {
        _this3.props.onExiting(maybeNode);
        _this3.onTransitionEnd(timeouts.exit, function() {
          _this3.safeSetState({
            status: EXITED
          }, function() {
            _this3.props.onExited(maybeNode);
          });
        });
      });
    };
    _proto.cancelNextCallback = function cancelNextCallback() {
      if (this.nextCallback !== null) {
        this.nextCallback.cancel();
        this.nextCallback = null;
      }
    };
    _proto.safeSetState = function safeSetState(nextState, callback) {
      callback = this.setNextCallback(callback);
      this.setState(nextState, callback);
    };
    _proto.setNextCallback = function setNextCallback(callback) {
      var _this4 = this;
      var active = true;
      this.nextCallback = function(event) {
        if (active) {
          active = false;
          _this4.nextCallback = null;
          callback(event);
        }
      };
      this.nextCallback.cancel = function() {
        active = false;
      };
      return this.nextCallback;
    };
    _proto.onTransitionEnd = function onTransitionEnd(timeout2, handler) {
      this.setNextCallback(handler);
      var node2 = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom.default.findDOMNode(this);
      var doesNotHaveTimeoutOrListener = timeout2 == null && !this.props.addEndListener;
      if (!node2 || doesNotHaveTimeoutOrListener) {
        setTimeout(this.nextCallback, 0);
        return;
      }
      if (this.props.addEndListener) {
        var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node2, this.nextCallback], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];
        this.props.addEndListener(maybeNode, maybeNextCallback);
      }
      if (timeout2 != null) {
        setTimeout(this.nextCallback, timeout2);
      }
    };
    _proto.render = function render() {
      var status = this.state.status;
      if (status === UNMOUNTED) {
        return null;
      }
      var _this$props = this.props, children = _this$props.children, _in = _this$props.in, _mountOnEnter = _this$props.mountOnEnter, _unmountOnExit = _this$props.unmountOnExit, _appear = _this$props.appear, _enter = _this$props.enter, _exit = _this$props.exit, _timeout = _this$props.timeout, _addEndListener = _this$props.addEndListener, _onEnter = _this$props.onEnter, _onEntering = _this$props.onEntering, _onEntered = _this$props.onEntered, _onExit = _this$props.onExit, _onExiting = _this$props.onExiting, _onExited = _this$props.onExited, _nodeRef = _this$props.nodeRef, childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
      return (
        // allows for nested Transitions
        /* @__PURE__ */ import_react6.default.createElement(TransitionGroupContext_default.Provider, {
          value: null
        }, typeof children === "function" ? children(status, childProps) : import_react6.default.cloneElement(import_react6.default.Children.only(children), childProps))
      );
    };
    return Transition2;
  }(import_react6.default.Component);
  Transition.contextType = TransitionGroupContext_default;
  Transition.propTypes = true ? {
    /**
     * A React reference to DOM element that need to transition:
     * https://stackoverflow.com/a/51127130/4671932
     *
     *   - When `nodeRef` prop is used, `node` is not passed to callback functions
     *      (e.g. `onEnter`) because user already has direct access to the node.
     *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
     *     `nodeRef` need to be provided to `Transition` with changed `key` prop
     *     (see
     *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
     */
    nodeRef: import_prop_types25.default.shape({
      current: typeof Element === "undefined" ? import_prop_types25.default.any : function(propValue, key, componentName, location, propFullName, secret) {
        var value = propValue[key];
        return import_prop_types25.default.instanceOf(value && "ownerDocument" in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);
      }
    }),
    /**
     * A `function` child can be used instead of a React element. This function is
     * called with the current transition status (`'entering'`, `'entered'`,
     * `'exiting'`, `'exited'`), which can be used to apply context
     * specific props to a component.
     *
     * ```jsx
     * <Transition in={this.state.in} timeout={150}>
     *   {state => (
     *     <MyComponent className={`fade fade-${state}`} />
     *   )}
     * </Transition>
     * ```
     */
    children: import_prop_types25.default.oneOfType([import_prop_types25.default.func.isRequired, import_prop_types25.default.element.isRequired]).isRequired,
    /**
     * Show the component; triggers the enter or exit states
     */
    in: import_prop_types25.default.bool,
    /**
     * By default the child component is mounted immediately along with
     * the parent `Transition` component. If you want to "lazy mount" the component on the
     * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
     * mounted, even on "exited", unless you also specify `unmountOnExit`.
     */
    mountOnEnter: import_prop_types25.default.bool,
    /**
     * By default the child component stays mounted after it reaches the `'exited'` state.
     * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
     */
    unmountOnExit: import_prop_types25.default.bool,
    /**
     * By default the child component does not perform the enter transition when
     * it first mounts, regardless of the value of `in`. If you want this
     * behavior, set both `appear` and `in` to `true`.
     *
     * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
     * > only adds an additional enter transition. However, in the
     * > `<CSSTransition>` component that first enter transition does result in
     * > additional `.appear-*` classes, that way you can choose to style it
     * > differently.
     */
    appear: import_prop_types25.default.bool,
    /**
     * Enable or disable enter transitions.
     */
    enter: import_prop_types25.default.bool,
    /**
     * Enable or disable exit transitions.
     */
    exit: import_prop_types25.default.bool,
    /**
     * The duration of the transition, in milliseconds.
     * Required unless `addEndListener` is provided.
     *
     * You may specify a single timeout for all transitions:
     *
     * ```jsx
     * timeout={500}
     * ```
     *
     * or individually:
     *
     * ```jsx
     * timeout={{
     *  appear: 500,
     *  enter: 300,
     *  exit: 500,
     * }}
     * ```
     *
     * - `appear` defaults to the value of `enter`
     * - `enter` defaults to `0`
     * - `exit` defaults to `0`
     *
     * @type {number | { enter?: number, exit?: number, appear?: number }}
     */
    timeout: function timeout(props) {
      var pt = timeoutsShape;
      if (!props.addEndListener) pt = pt.isRequired;
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      return pt.apply(void 0, [props].concat(args));
    },
    /**
     * Add a custom transition end trigger. Called with the transitioning
     * DOM node and a `done` callback. Allows for more fine grained transition end
     * logic. Timeouts are still used as a fallback if provided.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * ```jsx
     * addEndListener={(node, done) => {
     *   // use the css transitionend event to mark the finish of a transition
     *   node.addEventListener('transitionend', done, false);
     * }}
     * ```
     */
    addEndListener: import_prop_types25.default.func,
    /**
     * Callback fired before the "entering" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool) -> void
     */
    onEnter: import_prop_types25.default.func,
    /**
     * Callback fired after the "entering" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEntering: import_prop_types25.default.func,
    /**
     * Callback fired after the "entered" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool) -> void
     */
    onEntered: import_prop_types25.default.func,
    /**
     * Callback fired before the "exiting" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExit: import_prop_types25.default.func,
    /**
     * Callback fired after the "exiting" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExiting: import_prop_types25.default.func,
    /**
     * Callback fired after the "exited" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExited: import_prop_types25.default.func
  } : {};
  function noop() {
  }
  Transition.defaultProps = {
    in: false,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
    enter: true,
    exit: true,
    onEnter: noop,
    onEntering: noop,
    onEntered: noop,
    onExit: noop,
    onExiting: noop,
    onExited: noop
  };
  Transition.UNMOUNTED = UNMOUNTED;
  Transition.EXITED = EXITED;
  Transition.ENTERING = ENTERING;
  Transition.ENTERED = ENTERED;
  Transition.EXITING = EXITING;
  var Transition_default = Transition;

  // node_modules/react-transition-group/esm/TransitionGroup.js
  init_extends();

  // node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
  function _assertThisInitialized(e) {
    if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return e;
  }

  // node_modules/react-transition-group/esm/TransitionGroup.js
  var import_prop_types26 = __toESM(require_prop_types());
  var import_react8 = __toESM(require_react());

  // node_modules/react-transition-group/esm/utils/ChildMapping.js
  var import_react7 = __toESM(require_react());
  function getChildMapping(children, mapFn) {
    var mapper = function mapper2(child) {
      return mapFn && (0, import_react7.isValidElement)(child) ? mapFn(child) : child;
    };
    var result = /* @__PURE__ */ Object.create(null);
    if (children) import_react7.Children.map(children, function(c) {
      return c;
    }).forEach(function(child) {
      result[child.key] = mapper(child);
    });
    return result;
  }
  function mergeChildMappings(prev2, next2) {
    prev2 = prev2 || {};
    next2 = next2 || {};
    function getValueForKey(key) {
      return key in next2 ? next2[key] : prev2[key];
    }
    var nextKeysPending = /* @__PURE__ */ Object.create(null);
    var pendingKeys = [];
    for (var prevKey in prev2) {
      if (prevKey in next2) {
        if (pendingKeys.length) {
          nextKeysPending[prevKey] = pendingKeys;
          pendingKeys = [];
        }
      } else {
        pendingKeys.push(prevKey);
      }
    }
    var i;
    var childMapping = {};
    for (var nextKey in next2) {
      if (nextKeysPending[nextKey]) {
        for (i = 0; i < nextKeysPending[nextKey].length; i++) {
          var pendingNextKey = nextKeysPending[nextKey][i];
          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
        }
      }
      childMapping[nextKey] = getValueForKey(nextKey);
    }
    for (i = 0; i < pendingKeys.length; i++) {
      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
    }
    return childMapping;
  }
  function getProp(child, prop, props) {
    return props[prop] != null ? props[prop] : child.props[prop];
  }
  function getInitialChildMapping(props, onExited) {
    return getChildMapping(props.children, function(child) {
      return (0, import_react7.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: true,
        appear: getProp(child, "appear", props),
        enter: getProp(child, "enter", props),
        exit: getProp(child, "exit", props)
      });
    });
  }
  function getNextChildMapping(nextProps, prevChildMapping, onExited) {
    var nextChildMapping = getChildMapping(nextProps.children);
    var children = mergeChildMappings(prevChildMapping, nextChildMapping);
    Object.keys(children).forEach(function(key) {
      var child = children[key];
      if (!(0, import_react7.isValidElement)(child)) return;
      var hasPrev = key in prevChildMapping;
      var hasNext = key in nextChildMapping;
      var prevChild = prevChildMapping[key];
      var isLeaving = (0, import_react7.isValidElement)(prevChild) && !prevChild.props.in;
      if (hasNext && (!hasPrev || isLeaving)) {
        children[key] = (0, import_react7.cloneElement)(child, {
          onExited: onExited.bind(null, child),
          in: true,
          exit: getProp(child, "exit", nextProps),
          enter: getProp(child, "enter", nextProps)
        });
      } else if (!hasNext && hasPrev && !isLeaving) {
        children[key] = (0, import_react7.cloneElement)(child, {
          in: false
        });
      } else if (hasNext && hasPrev && (0, import_react7.isValidElement)(prevChild)) {
        children[key] = (0, import_react7.cloneElement)(child, {
          onExited: onExited.bind(null, child),
          in: prevChild.props.in,
          exit: getProp(child, "exit", nextProps),
          enter: getProp(child, "enter", nextProps)
        });
      }
    });
    return children;
  }

  // node_modules/react-transition-group/esm/TransitionGroup.js
  var values2 = Object.values || function(obj) {
    return Object.keys(obj).map(function(k) {
      return obj[k];
    });
  };
  var defaultProps = {
    component: "div",
    childFactory: function childFactory(child) {
      return child;
    }
  };
  var TransitionGroup = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(TransitionGroup2, _React$Component);
    function TransitionGroup2(props, context) {
      var _this;
      _this = _React$Component.call(this, props, context) || this;
      var handleExited = _this.handleExited.bind(_assertThisInitialized(_this));
      _this.state = {
        contextValue: {
          isMounting: true
        },
        handleExited,
        firstRender: true
      };
      return _this;
    }
    var _proto = TransitionGroup2.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this.mounted = true;
      this.setState({
        contextValue: {
          isMounting: false
        }
      });
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.mounted = false;
    };
    TransitionGroup2.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
      var prevChildMapping = _ref.children, handleExited = _ref.handleExited, firstRender = _ref.firstRender;
      return {
        children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
        firstRender: false
      };
    };
    _proto.handleExited = function handleExited(child, node2) {
      var currentChildMapping = getChildMapping(this.props.children);
      if (child.key in currentChildMapping) return;
      if (child.props.onExited) {
        child.props.onExited(node2);
      }
      if (this.mounted) {
        this.setState(function(state) {
          var children = _extends({}, state.children);
          delete children[child.key];
          return {
            children
          };
        });
      }
    };
    _proto.render = function render() {
      var _this$props = this.props, Component = _this$props.component, childFactory2 = _this$props.childFactory, props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);
      var contextValue = this.state.contextValue;
      var children = values2(this.state.children).map(childFactory2);
      delete props.appear;
      delete props.enter;
      delete props.exit;
      if (Component === null) {
        return /* @__PURE__ */ import_react8.default.createElement(TransitionGroupContext_default.Provider, {
          value: contextValue
        }, children);
      }
      return /* @__PURE__ */ import_react8.default.createElement(TransitionGroupContext_default.Provider, {
        value: contextValue
      }, /* @__PURE__ */ import_react8.default.createElement(Component, props, children));
    };
    return TransitionGroup2;
  }(import_react8.default.Component);
  TransitionGroup.propTypes = true ? {
    /**
     * `<TransitionGroup>` renders a `<div>` by default. You can change this
     * behavior by providing a `component` prop.
     * If you use React v16+ and would like to avoid a wrapping `<div>` element
     * you can pass in `component={null}`. This is useful if the wrapping div
     * borks your css styles.
     */
    component: import_prop_types26.default.any,
    /**
     * A set of `<Transition>` components, that are toggled `in` and out as they
     * leave. the `<TransitionGroup>` will inject specific transition props, so
     * remember to spread them through if you are wrapping the `<Transition>` as
     * with our `<Fade>` example.
     *
     * While this component is meant for multiple `Transition` or `CSSTransition`
     * children, sometimes you may want to have a single transition child with
     * content that you want to be transitioned out and in when you change it
     * (e.g. routes, images etc.) In that case you can change the `key` prop of
     * the transition child as you change its content, this will cause
     * `TransitionGroup` to transition the child out and back in.
     */
    children: import_prop_types26.default.node,
    /**
     * A convenience prop that enables or disables appear animations
     * for all children. Note that specifying this will override any defaults set
     * on individual children Transitions.
     */
    appear: import_prop_types26.default.bool,
    /**
     * A convenience prop that enables or disables enter animations
     * for all children. Note that specifying this will override any defaults set
     * on individual children Transitions.
     */
    enter: import_prop_types26.default.bool,
    /**
     * A convenience prop that enables or disables exit animations
     * for all children. Note that specifying this will override any defaults set
     * on individual children Transitions.
     */
    exit: import_prop_types26.default.bool,
    /**
     * You may need to apply reactive updates to a child as it is exiting.
     * This is generally done by using `cloneElement` however in the case of an exiting
     * child the element has already been removed and not accessible to the consumer.
     *
     * If you do need to update a child as it leaves you can provide a `childFactory`
     * to wrap every child, even the ones that are leaving.
     *
     * @type Function(child: ReactElement) -> ReactElement
     */
    childFactory: import_prop_types26.default.func
  } : {};
  TransitionGroup.defaultProps = defaultProps;
  var TransitionGroup_default = TransitionGroup;

  // node_modules/@mui/material/transitions/utils.js
  var reflow = (node2) => node2.scrollTop;
  function getTransitionProps(props, options) {
    var _style$transitionDura, _style$transitionTimi;
    const {
      timeout: timeout2,
      easing: easing2,
      style: style4 = {}
    } = props;
    return {
      duration: (_style$transitionDura = style4.transitionDuration) != null ? _style$transitionDura : typeof timeout2 === "number" ? timeout2 : timeout2[options.mode] || 0,
      easing: (_style$transitionTimi = style4.transitionTimingFunction) != null ? _style$transitionTimi : typeof easing2 === "object" ? easing2[options.mode] : easing2,
      delay: style4.transitionDelay
    };
  }

  // node_modules/@mui/material/Grow/Grow.js
  var import_jsx_runtime27 = __toESM(require_jsx_runtime());
  var _excluded26 = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
  function getScale(value) {
    return `scale(${value}, ${value ** 2})`;
  }
  var styles2 = {
    entering: {
      opacity: 1,
      transform: getScale(1)
    },
    entered: {
      opacity: 1,
      transform: "none"
    }
  };
  var isWebKit154 = typeof navigator !== "undefined" && /^((?!chrome|android).)*(safari|mobile)/i.test(navigator.userAgent) && /(os |version\/)15(.|_)4/i.test(navigator.userAgent);
  var Grow = /* @__PURE__ */ React58.forwardRef(function Grow2(props, ref) {
    const {
      addEndListener,
      appear = true,
      children,
      easing: easing2,
      in: inProp,
      onEnter,
      onEntered,
      onEntering,
      onExit,
      onExited,
      onExiting,
      style: style4,
      timeout: timeout2 = "auto",
      // eslint-disable-next-line react/prop-types
      TransitionComponent = Transition_default
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded26);
    const timer = useTimeout();
    const autoTimeout = React58.useRef();
    const theme = useTheme5();
    const nodeRef = React58.useRef(null);
    const handleRef = useForkRef_default(nodeRef, getReactElementRef(children), ref);
    const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
      if (callback) {
        const node2 = nodeRef.current;
        if (maybeIsAppearing === void 0) {
          callback(node2);
        } else {
          callback(node2, maybeIsAppearing);
        }
      }
    };
    const handleEntering = normalizedTransitionCallback(onEntering);
    const handleEnter = normalizedTransitionCallback((node2, isAppearing) => {
      reflow(node2);
      const {
        duration: transitionDuration,
        delay,
        easing: transitionTimingFunction
      } = getTransitionProps({
        style: style4,
        timeout: timeout2,
        easing: easing2
      }, {
        mode: "enter"
      });
      let duration2;
      if (timeout2 === "auto") {
        duration2 = theme.transitions.getAutoHeightDuration(node2.clientHeight);
        autoTimeout.current = duration2;
      } else {
        duration2 = transitionDuration;
      }
      node2.style.transition = [theme.transitions.create("opacity", {
        duration: duration2,
        delay
      }), theme.transitions.create("transform", {
        duration: isWebKit154 ? duration2 : duration2 * 0.666,
        delay,
        easing: transitionTimingFunction
      })].join(",");
      if (onEnter) {
        onEnter(node2, isAppearing);
      }
    });
    const handleEntered = normalizedTransitionCallback(onEntered);
    const handleExiting = normalizedTransitionCallback(onExiting);
    const handleExit = normalizedTransitionCallback((node2) => {
      const {
        duration: transitionDuration,
        delay,
        easing: transitionTimingFunction
      } = getTransitionProps({
        style: style4,
        timeout: timeout2,
        easing: easing2
      }, {
        mode: "exit"
      });
      let duration2;
      if (timeout2 === "auto") {
        duration2 = theme.transitions.getAutoHeightDuration(node2.clientHeight);
        autoTimeout.current = duration2;
      } else {
        duration2 = transitionDuration;
      }
      node2.style.transition = [theme.transitions.create("opacity", {
        duration: duration2,
        delay
      }), theme.transitions.create("transform", {
        duration: isWebKit154 ? duration2 : duration2 * 0.666,
        delay: isWebKit154 ? delay : delay || duration2 * 0.333,
        easing: transitionTimingFunction
      })].join(",");
      node2.style.opacity = 0;
      node2.style.transform = getScale(0.75);
      if (onExit) {
        onExit(node2);
      }
    });
    const handleExited = normalizedTransitionCallback(onExited);
    const handleAddEndListener = (next2) => {
      if (timeout2 === "auto") {
        timer.start(autoTimeout.current || 0, next2);
      }
      if (addEndListener) {
        addEndListener(nodeRef.current, next2);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(TransitionComponent, _extends({
      appear,
      in: inProp,
      nodeRef,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      timeout: timeout2 === "auto" ? null : timeout2
    }, other, {
      children: (state, childProps) => {
        return /* @__PURE__ */ React58.cloneElement(children, _extends({
          style: _extends({
            opacity: 0,
            transform: getScale(0.75),
            visibility: state === "exited" && !inProp ? "hidden" : void 0
          }, styles2[state], style4, children.props.style),
          ref: handleRef
        }, childProps));
      }
    }));
  });
  true ? Grow.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Add a custom transition end trigger. Called with the transitioning DOM
     * node and a done callback. Allows for more fine grained transition end
     * logic. Note: Timeouts are still used as a fallback if provided.
     */
    addEndListener: import_prop_types27.default.func,
    /**
     * Perform the enter transition when it first mounts if `in` is also `true`.
     * Set this to `false` to disable this behavior.
     * @default true
     */
    appear: import_prop_types27.default.bool,
    /**
     * A single child content element.
     */
    children: elementAcceptingRef_default.isRequired,
    /**
     * The transition timing function.
     * You may specify a single easing or a object containing enter and exit values.
     */
    easing: import_prop_types27.default.oneOfType([import_prop_types27.default.shape({
      enter: import_prop_types27.default.string,
      exit: import_prop_types27.default.string
    }), import_prop_types27.default.string]),
    /**
     * If `true`, the component will transition in.
     */
    in: import_prop_types27.default.bool,
    /**
     * @ignore
     */
    onEnter: import_prop_types27.default.func,
    /**
     * @ignore
     */
    onEntered: import_prop_types27.default.func,
    /**
     * @ignore
     */
    onEntering: import_prop_types27.default.func,
    /**
     * @ignore
     */
    onExit: import_prop_types27.default.func,
    /**
     * @ignore
     */
    onExited: import_prop_types27.default.func,
    /**
     * @ignore
     */
    onExiting: import_prop_types27.default.func,
    /**
     * @ignore
     */
    style: import_prop_types27.default.object,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     *
     * Set to 'auto' to automatically calculate transition time based on height.
     * @default 'auto'
     */
    timeout: import_prop_types27.default.oneOfType([import_prop_types27.default.oneOf(["auto"]), import_prop_types27.default.number, import_prop_types27.default.shape({
      appear: import_prop_types27.default.number,
      enter: import_prop_types27.default.number,
      exit: import_prop_types27.default.number
    })])
  } : void 0;
  Grow.muiSupportAuto = true;
  var Grow_default = Grow;

  // node_modules/@mui/material/Paper/Paper.js
  init_extends();
  var React59 = __toESM(require_react());
  var import_prop_types28 = __toESM(require_prop_types());
  var import_colorManipulator2 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/Paper/paperClasses.js
  function getPaperUtilityClass(slot) {
    return generateUtilityClass("MuiPaper", slot);
  }
  var paperClasses = generateUtilityClasses("MuiPaper", ["root", "rounded", "outlined", "elevation", "elevation0", "elevation1", "elevation2", "elevation3", "elevation4", "elevation5", "elevation6", "elevation7", "elevation8", "elevation9", "elevation10", "elevation11", "elevation12", "elevation13", "elevation14", "elevation15", "elevation16", "elevation17", "elevation18", "elevation19", "elevation20", "elevation21", "elevation22", "elevation23", "elevation24"]);

  // node_modules/@mui/material/Paper/Paper.js
  var import_jsx_runtime28 = __toESM(require_jsx_runtime());
  var _excluded27 = ["className", "component", "elevation", "square", "variant"];
  var useUtilityClasses10 = (ownerState) => {
    const {
      square,
      elevation,
      variant,
      classes
    } = ownerState;
    const slots = {
      root: ["root", variant, !square && "rounded", variant === "elevation" && `elevation${elevation}`]
    };
    return composeClasses(slots, getPaperUtilityClass, classes);
  };
  var PaperRoot = styled_default2("div", {
    name: "MuiPaper",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, styles4[ownerState.variant], !ownerState.square && styles4.rounded, ownerState.variant === "elevation" && styles4[`elevation${ownerState.elevation}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    var _theme$vars$overlays;
    return _extends({
      backgroundColor: (theme.vars || theme).palette.background.paper,
      color: (theme.vars || theme).palette.text.primary,
      transition: theme.transitions.create("box-shadow")
    }, !ownerState.square && {
      borderRadius: theme.shape.borderRadius
    }, ownerState.variant === "outlined" && {
      border: `1px solid ${(theme.vars || theme).palette.divider}`
    }, ownerState.variant === "elevation" && _extends({
      boxShadow: (theme.vars || theme).shadows[ownerState.elevation]
    }, !theme.vars && theme.palette.mode === "dark" && {
      backgroundImage: `linear-gradient(${(0, import_colorManipulator2.alpha)("#fff", getOverlayAlpha_default(ownerState.elevation))}, ${(0, import_colorManipulator2.alpha)("#fff", getOverlayAlpha_default(ownerState.elevation))})`
    }, theme.vars && {
      backgroundImage: (_theme$vars$overlays = theme.vars.overlays) == null ? void 0 : _theme$vars$overlays[ownerState.elevation]
    }));
  });
  var Paper = /* @__PURE__ */ React59.forwardRef(function Paper2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiPaper"
    });
    const {
      className,
      component = "div",
      elevation = 1,
      square = false,
      variant = "elevation"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded27);
    const ownerState = _extends({}, props, {
      component,
      elevation,
      square,
      variant
    });
    const classes = useUtilityClasses10(ownerState);
    if (true) {
      const theme = useTheme5();
      if (theme.shadows[elevation] === void 0) {
        console.error([`MUI: The elevation provided <Paper elevation={${elevation}}> is not available in the theme.`, `Please make sure that \`theme.shadows[${elevation}]\` is defined.`].join("\n"));
      }
    }
    return /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(PaperRoot, _extends({
      as: component,
      ownerState,
      className: clsx_default(classes.root, className),
      ref
    }, other));
  });
  true ? Paper.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types28.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types28.default.object,
    /**
     * @ignore
     */
    className: import_prop_types28.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types28.default.elementType,
    /**
     * Shadow depth, corresponds to `dp` in the spec.
     * It accepts values between 0 and 24 inclusive.
     * @default 1
     */
    elevation: chainPropTypes(integerPropType_default, (props) => {
      const {
        elevation,
        variant
      } = props;
      if (elevation > 0 && variant === "outlined") {
        return new Error(`MUI: Combining \`elevation={${elevation}}\` with \`variant="${variant}"\` has no effect. Either use \`elevation={0}\` or use a different \`variant\`.`);
      }
      return null;
    }),
    /**
     * If `true`, rounded corners are disabled.
     * @default false
     */
    square: import_prop_types28.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types28.default.oneOfType([import_prop_types28.default.arrayOf(import_prop_types28.default.oneOfType([import_prop_types28.default.func, import_prop_types28.default.object, import_prop_types28.default.bool])), import_prop_types28.default.func, import_prop_types28.default.object]),
    /**
     * The variant to use.
     * @default 'elevation'
     */
    variant: import_prop_types28.default.oneOfType([import_prop_types28.default.oneOf(["elevation", "outlined"]), import_prop_types28.default.string])
  } : void 0;
  var Paper_default = Paper;

  // node_modules/@mui/material/Popper/Popper.js
  init_extends();
  var import_useThemeWithoutDefault2 = __toESM(require_useThemeWithoutDefault());
  var import_prop_types31 = __toESM(require_prop_types());
  var React62 = __toESM(require_react());

  // node_modules/@mui/material/Popper/BasePopper.js
  init_extends();
  var React61 = __toESM(require_react());

  // node_modules/@popperjs/core/lib/enums.js
  var top = "top";
  var bottom = "bottom";
  var right = "right";
  var left = "left";
  var auto = "auto";
  var basePlacements = [top, bottom, right, left];
  var start = "start";
  var end = "end";
  var clippingParents = "clippingParents";
  var viewport = "viewport";
  var popper = "popper";
  var reference = "reference";
  var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
    return acc.concat([placement + "-" + start, placement + "-" + end]);
  }, []);
  var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
    return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
  }, []);
  var beforeRead = "beforeRead";
  var read = "read";
  var afterRead = "afterRead";
  var beforeMain = "beforeMain";
  var main = "main";
  var afterMain = "afterMain";
  var beforeWrite = "beforeWrite";
  var write = "write";
  var afterWrite = "afterWrite";
  var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

  // node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
  function getNodeName(element) {
    return element ? (element.nodeName || "").toLowerCase() : null;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getWindow.js
  function getWindow(node2) {
    if (node2 == null) {
      return window;
    }
    if (node2.toString() !== "[object Window]") {
      var ownerDocument2 = node2.ownerDocument;
      return ownerDocument2 ? ownerDocument2.defaultView || window : window;
    }
    return node2;
  }

  // node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
  function isElement(node2) {
    var OwnElement = getWindow(node2).Element;
    return node2 instanceof OwnElement || node2 instanceof Element;
  }
  function isHTMLElement(node2) {
    var OwnElement = getWindow(node2).HTMLElement;
    return node2 instanceof OwnElement || node2 instanceof HTMLElement;
  }
  function isShadowRoot(node2) {
    if (typeof ShadowRoot === "undefined") {
      return false;
    }
    var OwnElement = getWindow(node2).ShadowRoot;
    return node2 instanceof OwnElement || node2 instanceof ShadowRoot;
  }

  // node_modules/@popperjs/core/lib/modifiers/applyStyles.js
  function applyStyles2(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function(name) {
      var style4 = state.styles[name] || {};
      var attributes = state.attributes[name] || {};
      var element = state.elements[name];
      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style4);
      Object.keys(attributes).forEach(function(name2) {
        var value = attributes[name2];
        if (value === false) {
          element.removeAttribute(name2);
        } else {
          element.setAttribute(name2, value === true ? "" : value);
        }
      });
    });
  }
  function effect(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
      popper: {
        position: state.options.strategy,
        left: "0",
        top: "0",
        margin: "0"
      },
      arrow: {
        position: "absolute"
      },
      reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;
    if (state.elements.arrow) {
      Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }
    return function() {
      Object.keys(state.elements).forEach(function(name) {
        var element = state.elements[name];
        var attributes = state.attributes[name] || {};
        var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
        var style4 = styleProperties.reduce(function(style5, property) {
          style5[property] = "";
          return style5;
        }, {});
        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        }
        Object.assign(element.style, style4);
        Object.keys(attributes).forEach(function(attribute) {
          element.removeAttribute(attribute);
        });
      });
    };
  }
  var applyStyles_default = {
    name: "applyStyles",
    enabled: true,
    phase: "write",
    fn: applyStyles2,
    effect,
    requires: ["computeStyles"]
  };

  // node_modules/@popperjs/core/lib/utils/getBasePlacement.js
  function getBasePlacement(placement) {
    return placement.split("-")[0];
  }

  // node_modules/@popperjs/core/lib/utils/math.js
  var max = Math.max;
  var min = Math.min;
  var round2 = Math.round;

  // node_modules/@popperjs/core/lib/utils/userAgent.js
  function getUAString() {
    var uaData = navigator.userAgentData;
    if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
      return uaData.brands.map(function(item) {
        return item.brand + "/" + item.version;
      }).join(" ");
    }
    return navigator.userAgent;
  }

  // node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js
  function isLayoutViewport() {
    return !/^((?!chrome|android).)*safari/i.test(getUAString());
  }

  // node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
  function getBoundingClientRect(element, includeScale, isFixedStrategy) {
    if (includeScale === void 0) {
      includeScale = false;
    }
    if (isFixedStrategy === void 0) {
      isFixedStrategy = false;
    }
    var clientRect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;
    if (includeScale && isHTMLElement(element)) {
      scaleX = element.offsetWidth > 0 ? round2(clientRect.width) / element.offsetWidth || 1 : 1;
      scaleY = element.offsetHeight > 0 ? round2(clientRect.height) / element.offsetHeight || 1 : 1;
    }
    var _ref = isElement(element) ? getWindow(element) : window, visualViewport = _ref.visualViewport;
    var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
    var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
    var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
    var width2 = clientRect.width / scaleX;
    var height2 = clientRect.height / scaleY;
    return {
      width: width2,
      height: height2,
      top: y,
      right: x + width2,
      bottom: y + height2,
      left: x,
      x,
      y
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
  function getLayoutRect(element) {
    var clientRect = getBoundingClientRect(element);
    var width2 = element.offsetWidth;
    var height2 = element.offsetHeight;
    if (Math.abs(clientRect.width - width2) <= 1) {
      width2 = clientRect.width;
    }
    if (Math.abs(clientRect.height - height2) <= 1) {
      height2 = clientRect.height;
    }
    return {
      x: element.offsetLeft,
      y: element.offsetTop,
      width: width2,
      height: height2
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/contains.js
  function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode();
    if (parent.contains(child)) {
      return true;
    } else if (rootNode && isShadowRoot(rootNode)) {
      var next2 = child;
      do {
        if (next2 && parent.isSameNode(next2)) {
          return true;
        }
        next2 = next2.parentNode || next2.host;
      } while (next2);
    }
    return false;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
  function getComputedStyle(element) {
    return getWindow(element).getComputedStyle(element);
  }

  // node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
  function isTableElement(element) {
    return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
  function getDocumentElement(element) {
    return ((isElement(element) ? element.ownerDocument : (
      // $FlowFixMe[prop-missing]
      element.document
    )) || window.document).documentElement;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
  function getParentNode(element) {
    if (getNodeName(element) === "html") {
      return element;
    }
    return (
      // this is a quicker (but less type safe) way to save quite some bytes from the bundle
      // $FlowFixMe[incompatible-return]
      // $FlowFixMe[prop-missing]
      element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
      element.parentNode || // DOM Element detected
      (isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
      // $FlowFixMe[incompatible-call]: HTMLElement is a Node
      getDocumentElement(element)
    );
  }

  // node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
  function getTrueOffsetParent(element) {
    if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
    getComputedStyle(element).position === "fixed") {
      return null;
    }
    return element.offsetParent;
  }
  function getContainingBlock(element) {
    var isFirefox = /firefox/i.test(getUAString());
    var isIE = /Trident/i.test(getUAString());
    if (isIE && isHTMLElement(element)) {
      var elementCss = getComputedStyle(element);
      if (elementCss.position === "fixed") {
        return null;
      }
    }
    var currentNode = getParentNode(element);
    if (isShadowRoot(currentNode)) {
      currentNode = currentNode.host;
    }
    while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
      var css3 = getComputedStyle(currentNode);
      if (css3.transform !== "none" || css3.perspective !== "none" || css3.contain === "paint" || ["transform", "perspective"].indexOf(css3.willChange) !== -1 || isFirefox && css3.willChange === "filter" || isFirefox && css3.filter && css3.filter !== "none") {
        return currentNode;
      } else {
        currentNode = currentNode.parentNode;
      }
    }
    return null;
  }
  function getOffsetParent(element) {
    var window2 = getWindow(element);
    var offsetParent = getTrueOffsetParent(element);
    while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === "static") {
      offsetParent = getTrueOffsetParent(offsetParent);
    }
    if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle(offsetParent).position === "static")) {
      return window2;
    }
    return offsetParent || getContainingBlock(element) || window2;
  }

  // node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
  function getMainAxisFromPlacement(placement) {
    return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
  }

  // node_modules/@popperjs/core/lib/utils/within.js
  function within(min2, value, max2) {
    return max(min2, min(value, max2));
  }
  function withinMaxClamp(min2, value, max2) {
    var v = within(min2, value, max2);
    return v > max2 ? max2 : v;
  }

  // node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
  function getFreshSideObject() {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }

  // node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
  function mergePaddingObject(paddingObject) {
    return Object.assign({}, getFreshSideObject(), paddingObject);
  }

  // node_modules/@popperjs/core/lib/utils/expandToHashMap.js
  function expandToHashMap(value, keys) {
    return keys.reduce(function(hashMap, key) {
      hashMap[key] = value;
      return hashMap;
    }, {});
  }

  // node_modules/@popperjs/core/lib/modifiers/arrow.js
  var toPaddingObject = function toPaddingObject2(padding2, state) {
    padding2 = typeof padding2 === "function" ? padding2(Object.assign({}, state.rects, {
      placement: state.placement
    })) : padding2;
    return mergePaddingObject(typeof padding2 !== "number" ? padding2 : expandToHashMap(padding2, basePlacements));
  };
  function arrow(_ref) {
    var _state$modifiersData$;
    var state = _ref.state, name = _ref.name, options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets2 = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement(state.placement);
    var axis = getMainAxisFromPlacement(basePlacement);
    var isVertical = [left, right].indexOf(basePlacement) >= 0;
    var len = isVertical ? "height" : "width";
    if (!arrowElement || !popperOffsets2) {
      return;
    }
    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = getLayoutRect(arrowElement);
    var minProp = axis === "y" ? top : left;
    var maxProp = axis === "y" ? bottom : right;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
    var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent(arrowElement);
    var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2;
    var min2 = paddingObject[minProp];
    var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset2 = within(min2, center, max2);
    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
  }
  function effect2(_ref2) {
    var state = _ref2.state, options = _ref2.options;
    var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
    if (arrowElement == null) {
      return;
    }
    if (typeof arrowElement === "string") {
      arrowElement = state.elements.popper.querySelector(arrowElement);
      if (!arrowElement) {
        return;
      }
    }
    if (!contains(state.elements.popper, arrowElement)) {
      return;
    }
    state.elements.arrow = arrowElement;
  }
  var arrow_default = {
    name: "arrow",
    enabled: true,
    phase: "main",
    fn: arrow,
    effect: effect2,
    requires: ["popperOffsets"],
    requiresIfExists: ["preventOverflow"]
  };

  // node_modules/@popperjs/core/lib/utils/getVariation.js
  function getVariation(placement) {
    return placement.split("-")[1];
  }

  // node_modules/@popperjs/core/lib/modifiers/computeStyles.js
  var unsetSides = {
    top: "auto",
    right: "auto",
    bottom: "auto",
    left: "auto"
  };
  function roundOffsetsByDPR(_ref, win) {
    var x = _ref.x, y = _ref.y;
    var dpr = win.devicePixelRatio || 1;
    return {
      x: round2(x * dpr) / dpr || 0,
      y: round2(y * dpr) / dpr || 0
    };
  }
  function mapToStyles(_ref2) {
    var _Object$assign2;
    var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position2 = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
    var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
      x,
      y
    }) : {
      x,
      y
    };
    x = _ref3.x;
    y = _ref3.y;
    var hasX = offsets.hasOwnProperty("x");
    var hasY = offsets.hasOwnProperty("y");
    var sideX = left;
    var sideY = top;
    var win = window;
    if (adaptive) {
      var offsetParent = getOffsetParent(popper2);
      var heightProp = "clientHeight";
      var widthProp = "clientWidth";
      if (offsetParent === getWindow(popper2)) {
        offsetParent = getDocumentElement(popper2);
        if (getComputedStyle(offsetParent).position !== "static" && position2 === "absolute") {
          heightProp = "scrollHeight";
          widthProp = "scrollWidth";
        }
      }
      offsetParent = offsetParent;
      if (placement === top || (placement === left || placement === right) && variation === end) {
        sideY = bottom;
        var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : (
          // $FlowFixMe[prop-missing]
          offsetParent[heightProp]
        );
        y -= offsetY - popperRect.height;
        y *= gpuAcceleration ? 1 : -1;
      }
      if (placement === left || (placement === top || placement === bottom) && variation === end) {
        sideX = right;
        var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : (
          // $FlowFixMe[prop-missing]
          offsetParent[widthProp]
        );
        x -= offsetX - popperRect.width;
        x *= gpuAcceleration ? 1 : -1;
      }
    }
    var commonStyles = Object.assign({
      position: position2
    }, adaptive && unsetSides);
    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
      x,
      y
    }, getWindow(popper2)) : {
      x,
      y
    };
    x = _ref4.x;
    y = _ref4.y;
    if (gpuAcceleration) {
      var _Object$assign;
      return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }
    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
  }
  function computeStyles(_ref5) {
    var state = _ref5.state, options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
    var commonStyles = {
      placement: getBasePlacement(state.placement),
      variation: getVariation(state.placement),
      popper: state.elements.popper,
      popperRect: state.rects.popper,
      gpuAcceleration,
      isFixed: state.options.strategy === "fixed"
    };
    if (state.modifiersData.popperOffsets != null) {
      state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive,
        roundOffsets
      })));
    }
    if (state.modifiersData.arrow != null) {
      state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: "absolute",
        adaptive: false,
        roundOffsets
      })));
    }
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      "data-popper-placement": state.placement
    });
  }
  var computeStyles_default = {
    name: "computeStyles",
    enabled: true,
    phase: "beforeWrite",
    fn: computeStyles,
    data: {}
  };

  // node_modules/@popperjs/core/lib/modifiers/eventListeners.js
  var passive = {
    passive: true
  };
  function effect3(_ref) {
    var state = _ref.state, instance = _ref.instance, options = _ref.options;
    var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
    var window2 = getWindow(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.addEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.addEventListener("resize", instance.update, passive);
    }
    return function() {
      if (scroll) {
        scrollParents.forEach(function(scrollParent) {
          scrollParent.removeEventListener("scroll", instance.update, passive);
        });
      }
      if (resize) {
        window2.removeEventListener("resize", instance.update, passive);
      }
    };
  }
  var eventListeners_default = {
    name: "eventListeners",
    enabled: true,
    phase: "write",
    fn: function fn() {
    },
    effect: effect3,
    data: {}
  };

  // node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
  var hash2 = {
    left: "right",
    right: "left",
    bottom: "top",
    top: "bottom"
  };
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function(matched) {
      return hash2[matched];
    });
  }

  // node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
  var hash3 = {
    start: "end",
    end: "start"
  };
  function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function(matched) {
      return hash3[matched];
    });
  }

  // node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
  function getWindowScroll(node2) {
    var win = getWindow(node2);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
      scrollLeft,
      scrollTop
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
  function getWindowScrollBarX(element) {
    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
  function getViewportRect(element, strategy) {
    var win = getWindow(element);
    var html = getDocumentElement(element);
    var visualViewport = win.visualViewport;
    var width2 = html.clientWidth;
    var height2 = html.clientHeight;
    var x = 0;
    var y = 0;
    if (visualViewport) {
      width2 = visualViewport.width;
      height2 = visualViewport.height;
      var layoutViewport = isLayoutViewport();
      if (layoutViewport || !layoutViewport && strategy === "fixed") {
        x = visualViewport.offsetLeft;
        y = visualViewport.offsetTop;
      }
    }
    return {
      width: width2,
      height: height2,
      x: x + getWindowScrollBarX(element),
      y
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
  function getDocumentRect(element) {
    var _element$ownerDocumen;
    var html = getDocumentElement(element);
    var winScroll = getWindowScroll(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width2 = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height2 = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
    var y = -winScroll.scrollTop;
    if (getComputedStyle(body || html).direction === "rtl") {
      x += max(html.clientWidth, body ? body.clientWidth : 0) - width2;
    }
    return {
      width: width2,
      height: height2,
      x,
      y
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
  function isScrollParent(element) {
    var _getComputedStyle = getComputedStyle(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
  }

  // node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
  function getScrollParent(node2) {
    if (["html", "body", "#document"].indexOf(getNodeName(node2)) >= 0) {
      return node2.ownerDocument.body;
    }
    if (isHTMLElement(node2) && isScrollParent(node2)) {
      return node2;
    }
    return getScrollParent(getParentNode(node2));
  }

  // node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
  function listScrollParents(element, list) {
    var _element$ownerDocumen;
    if (list === void 0) {
      list = [];
    }
    var scrollParent = getScrollParent(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = getWindow(scrollParent);
    var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : (
      // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
      updatedList.concat(listScrollParents(getParentNode(target)))
    );
  }

  // node_modules/@popperjs/core/lib/utils/rectToClientRect.js
  function rectToClientRect(rect) {
    return Object.assign({}, rect, {
      left: rect.x,
      top: rect.y,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    });
  }

  // node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
  function getInnerBoundingClientRect(element, strategy) {
    var rect = getBoundingClientRect(element, false, strategy === "fixed");
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }
  function getClientRectFromMixedType(element, clippingParent, strategy) {
    return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
  }
  function getClippingParents(element) {
    var clippingParents2 = listScrollParents(getParentNode(element));
    var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle(element).position) >= 0;
    var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
    if (!isElement(clipperElement)) {
      return [];
    }
    return clippingParents2.filter(function(clippingParent) {
      return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
    });
  }
  function getClippingRect(element, boundary, rootBoundary, strategy) {
    var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
    var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
    var firstClippingParent = clippingParents2[0];
    var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
      var rect = getClientRectFromMixedType(element, clippingParent, strategy);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min(rect.right, accRect.right);
      accRect.bottom = min(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent, strategy));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
  }

  // node_modules/@popperjs/core/lib/utils/computeOffsets.js
  function computeOffsets(_ref) {
    var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement(placement) : null;
    var variation = placement ? getVariation(placement) : null;
    var commonX = reference2.x + reference2.width / 2 - element.width / 2;
    var commonY = reference2.y + reference2.height / 2 - element.height / 2;
    var offsets;
    switch (basePlacement) {
      case top:
        offsets = {
          x: commonX,
          y: reference2.y - element.height
        };
        break;
      case bottom:
        offsets = {
          x: commonX,
          y: reference2.y + reference2.height
        };
        break;
      case right:
        offsets = {
          x: reference2.x + reference2.width,
          y: commonY
        };
        break;
      case left:
        offsets = {
          x: reference2.x - element.width,
          y: commonY
        };
        break;
      default:
        offsets = {
          x: reference2.x,
          y: reference2.y
        };
    }
    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
    if (mainAxis != null) {
      var len = mainAxis === "y" ? "height" : "width";
      switch (variation) {
        case start:
          offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
          break;
        case end:
          offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
          break;
        default:
      }
    }
    return offsets;
  }

  // node_modules/@popperjs/core/lib/utils/detectOverflow.js
  function detectOverflow(state, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding2 = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject(typeof padding2 !== "number" ? padding2 : expandToHashMap(padding2, basePlacements));
    var altContext = elementContext === popper ? reference : popper;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
    var referenceClientRect = getBoundingClientRect(state.elements.reference);
    var popperOffsets2 = computeOffsets({
      reference: referenceClientRect,
      element: popperRect,
      strategy: "absolute",
      placement
    });
    var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
    var overflowOffsets = {
      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
      right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset;
    if (elementContext === popper && offsetData) {
      var offset2 = offsetData[placement];
      Object.keys(overflowOffsets).forEach(function(key) {
        var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
        var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
        overflowOffsets[key] += offset2[axis] * multiply;
      });
    }
    return overflowOffsets;
  }

  // node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
  function computeAutoPlacement(state, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding2 = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
    var variation = getVariation(placement);
    var placements2 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
      return getVariation(placement2) === variation;
    }) : basePlacements;
    var allowedPlacements = placements2.filter(function(placement2) {
      return allowedAutoPlacements.indexOf(placement2) >= 0;
    });
    if (allowedPlacements.length === 0) {
      allowedPlacements = placements2;
    }
    var overflows = allowedPlacements.reduce(function(acc, placement2) {
      acc[placement2] = detectOverflow(state, {
        placement: placement2,
        boundary,
        rootBoundary,
        padding: padding2
      })[getBasePlacement(placement2)];
      return acc;
    }, {});
    return Object.keys(overflows).sort(function(a, b) {
      return overflows[a] - overflows[b];
    });
  }

  // node_modules/@popperjs/core/lib/modifiers/flip.js
  function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement(placement) === auto) {
      return [];
    }
    var oppositePlacement = getOppositePlacement(placement);
    return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
  }
  function flip(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    if (state.modifiersData[name]._skip) {
      return;
    }
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding2 = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
    var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
      return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
        placement: placement2,
        boundary,
        rootBoundary,
        padding: padding2,
        flipVariations,
        allowedAutoPlacements
      }) : placement2);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = /* @__PURE__ */ new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements2[0];
    for (var i = 0; i < placements2.length; i++) {
      var placement = placements2[i];
      var _basePlacement = getBasePlacement(placement);
      var isStartVariation = getVariation(placement) === start;
      var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
      var len = isVertical ? "width" : "height";
      var overflow = detectOverflow(state, {
        placement,
        boundary,
        rootBoundary,
        altBoundary,
        padding: padding2
      });
      var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
      if (referenceRect[len] > popperRect[len]) {
        mainVariationSide = getOppositePlacement(mainVariationSide);
      }
      var altVariationSide = getOppositePlacement(mainVariationSide);
      var checks = [];
      if (checkMainAxis) {
        checks.push(overflow[_basePlacement] <= 0);
      }
      if (checkAltAxis) {
        checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
      }
      if (checks.every(function(check) {
        return check;
      })) {
        firstFittingPlacement = placement;
        makeFallbackChecks = false;
        break;
      }
      checksMap.set(placement, checks);
    }
    if (makeFallbackChecks) {
      var numberOfChecks = flipVariations ? 3 : 1;
      var _loop = function _loop2(_i2) {
        var fittingPlacement = placements2.find(function(placement2) {
          var checks2 = checksMap.get(placement2);
          if (checks2) {
            return checks2.slice(0, _i2).every(function(check) {
              return check;
            });
          }
        });
        if (fittingPlacement) {
          firstFittingPlacement = fittingPlacement;
          return "break";
        }
      };
      for (var _i = numberOfChecks; _i > 0; _i--) {
        var _ret = _loop(_i);
        if (_ret === "break") break;
      }
    }
    if (state.placement !== firstFittingPlacement) {
      state.modifiersData[name]._skip = true;
      state.placement = firstFittingPlacement;
      state.reset = true;
    }
  }
  var flip_default = {
    name: "flip",
    enabled: true,
    phase: "main",
    fn: flip,
    requiresIfExists: ["offset"],
    data: {
      _skip: false
    }
  };

  // node_modules/@popperjs/core/lib/modifiers/hide.js
  function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) {
      preventedOffsets = {
        x: 0,
        y: 0
      };
    }
    return {
      top: overflow.top - rect.height - preventedOffsets.y,
      right: overflow.right - rect.width + preventedOffsets.x,
      bottom: overflow.bottom - rect.height + preventedOffsets.y,
      left: overflow.left - rect.width - preventedOffsets.x
    };
  }
  function isAnySideFullyClipped(overflow) {
    return [top, right, bottom, left].some(function(side) {
      return overflow[side] >= 0;
    });
  }
  function hide(_ref) {
    var state = _ref.state, name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = detectOverflow(state, {
      elementContext: "reference"
    });
    var popperAltOverflow = detectOverflow(state, {
      altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
      referenceClippingOffsets,
      popperEscapeOffsets,
      isReferenceHidden,
      hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      "data-popper-reference-hidden": isReferenceHidden,
      "data-popper-escaped": hasPopperEscaped
    });
  }
  var hide_default = {
    name: "hide",
    enabled: true,
    phase: "main",
    requiresIfExists: ["preventOverflow"],
    fn: hide
  };

  // node_modules/@popperjs/core/lib/modifiers/offset.js
  function distanceAndSkiddingToXY(placement, rects, offset2) {
    var basePlacement = getBasePlacement(placement);
    var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
    var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
      placement
    })) : offset2, skidding = _ref[0], distance = _ref[1];
    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [left, right].indexOf(basePlacement) >= 0 ? {
      x: distance,
      y: skidding
    } : {
      x: skidding,
      y: distance
    };
  }
  function offset(_ref2) {
    var state = _ref2.state, options = _ref2.options, name = _ref2.name;
    var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
    var data = placements.reduce(function(acc, placement) {
      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
      return acc;
    }, {});
    var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
    if (state.modifiersData.popperOffsets != null) {
      state.modifiersData.popperOffsets.x += x;
      state.modifiersData.popperOffsets.y += y;
    }
    state.modifiersData[name] = data;
  }
  var offset_default = {
    name: "offset",
    enabled: true,
    phase: "main",
    requires: ["popperOffsets"],
    fn: offset
  };

  // node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
  function popperOffsets(_ref) {
    var state = _ref.state, name = _ref.name;
    state.modifiersData[name] = computeOffsets({
      reference: state.rects.reference,
      element: state.rects.popper,
      strategy: "absolute",
      placement: state.placement
    });
  }
  var popperOffsets_default = {
    name: "popperOffsets",
    enabled: true,
    phase: "read",
    fn: popperOffsets,
    data: {}
  };

  // node_modules/@popperjs/core/lib/utils/getAltAxis.js
  function getAltAxis(axis) {
    return axis === "x" ? "y" : "x";
  }

  // node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
  function preventOverflow(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding2 = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = detectOverflow(state, {
      boundary,
      rootBoundary,
      padding: padding2,
      altBoundary
    });
    var basePlacement = getBasePlacement(state.placement);
    var variation = getVariation(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement(basePlacement);
    var altAxis = getAltAxis(mainAxis);
    var popperOffsets2 = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
      placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
      mainAxis: tetherOffsetValue,
      altAxis: tetherOffsetValue
    } : Object.assign({
      mainAxis: 0,
      altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
      x: 0,
      y: 0
    };
    if (!popperOffsets2) {
      return;
    }
    if (checkMainAxis) {
      var _offsetModifierState$;
      var mainSide = mainAxis === "y" ? top : left;
      var altSide = mainAxis === "y" ? bottom : right;
      var len = mainAxis === "y" ? "height" : "width";
      var offset2 = popperOffsets2[mainAxis];
      var min2 = offset2 + overflow[mainSide];
      var max2 = offset2 - overflow[altSide];
      var additive = tether ? -popperRect[len] / 2 : 0;
      var minLen = variation === start ? referenceRect[len] : popperRect[len];
      var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
      var arrowElement = state.elements.arrow;
      var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
        width: 0,
        height: 0
      };
      var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
      var arrowPaddingMin = arrowPaddingObject[mainSide];
      var arrowPaddingMax = arrowPaddingObject[altSide];
      var arrowLen = within(0, referenceRect[len], arrowRect[len]);
      var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
      var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
      var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
      var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
      var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
      var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
      var tetherMax = offset2 + maxOffset - offsetModifierValue;
      var preventedOffset = within(tether ? min(min2, tetherMin) : min2, offset2, tether ? max(max2, tetherMax) : max2);
      popperOffsets2[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset2;
    }
    if (checkAltAxis) {
      var _offsetModifierState$2;
      var _mainSide = mainAxis === "x" ? top : left;
      var _altSide = mainAxis === "x" ? bottom : right;
      var _offset = popperOffsets2[altAxis];
      var _len = altAxis === "y" ? "height" : "width";
      var _min = _offset + overflow[_mainSide];
      var _max = _offset - overflow[_altSide];
      var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
      var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
      var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
      var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
      var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
      popperOffsets2[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }
    state.modifiersData[name] = data;
  }
  var preventOverflow_default = {
    name: "preventOverflow",
    enabled: true,
    phase: "main",
    fn: preventOverflow,
    requiresIfExists: ["offset"]
  };

  // node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
  function getHTMLElementScroll(element) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
  function getNodeScroll(node2) {
    if (node2 === getWindow(node2) || !isHTMLElement(node2)) {
      return getWindowScroll(node2);
    } else {
      return getHTMLElementScroll(node2);
    }
  }

  // node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
  function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = round2(rect.width) / element.offsetWidth || 1;
    var scaleY = round2(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
  }
  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) {
      isFixed = false;
    }
    var isOffsetParentAnElement = isHTMLElement(offsetParent);
    var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
    var documentElement = getDocumentElement(offsetParent);
    var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
    var scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    var offsets = {
      x: 0,
      y: 0
    };
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
      isScrollParent(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isHTMLElement(offsetParent)) {
        offsets = getBoundingClientRect(offsetParent, true);
        offsets.x += offsetParent.clientLeft;
        offsets.y += offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }
    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }

  // node_modules/@popperjs/core/lib/utils/orderModifiers.js
  function order(modifiers) {
    var map = /* @__PURE__ */ new Map();
    var visited = /* @__PURE__ */ new Set();
    var result = [];
    modifiers.forEach(function(modifier) {
      map.set(modifier.name, modifier);
    });
    function sort(modifier) {
      visited.add(modifier.name);
      var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
      requires.forEach(function(dep) {
        if (!visited.has(dep)) {
          var depModifier = map.get(dep);
          if (depModifier) {
            sort(depModifier);
          }
        }
      });
      result.push(modifier);
    }
    modifiers.forEach(function(modifier) {
      if (!visited.has(modifier.name)) {
        sort(modifier);
      }
    });
    return result;
  }
  function orderModifiers(modifiers) {
    var orderedModifiers = order(modifiers);
    return modifierPhases.reduce(function(acc, phase) {
      return acc.concat(orderedModifiers.filter(function(modifier) {
        return modifier.phase === phase;
      }));
    }, []);
  }

  // node_modules/@popperjs/core/lib/utils/debounce.js
  function debounce2(fn2) {
    var pending;
    return function() {
      if (!pending) {
        pending = new Promise(function(resolve) {
          Promise.resolve().then(function() {
            pending = void 0;
            resolve(fn2());
          });
        });
      }
      return pending;
    };
  }

  // node_modules/@popperjs/core/lib/utils/mergeByName.js
  function mergeByName(modifiers) {
    var merged = modifiers.reduce(function(merged2, current) {
      var existing = merged2[current.name];
      merged2[current.name] = existing ? Object.assign({}, existing, current, {
        options: Object.assign({}, existing.options, current.options),
        data: Object.assign({}, existing.data, current.data)
      }) : current;
      return merged2;
    }, {});
    return Object.keys(merged).map(function(key) {
      return merged[key];
    });
  }

  // node_modules/@popperjs/core/lib/createPopper.js
  var DEFAULT_OPTIONS = {
    placement: "bottom",
    modifiers: [],
    strategy: "absolute"
  };
  function areValidElements() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return !args.some(function(element) {
      return !(element && typeof element.getBoundingClientRect === "function");
    });
  }
  function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) {
      generatorOptions = {};
    }
    var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers2 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper2(reference2, popper2, options) {
      if (options === void 0) {
        options = defaultOptions;
      }
      var state = {
        placement: "bottom",
        orderedModifiers: [],
        options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
        modifiersData: {},
        elements: {
          reference: reference2,
          popper: popper2
        },
        attributes: {},
        styles: {}
      };
      var effectCleanupFns = [];
      var isDestroyed = false;
      var instance = {
        state,
        setOptions: function setOptions(setOptionsAction) {
          var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
          cleanupModifierEffects();
          state.options = Object.assign({}, defaultOptions, state.options, options2);
          state.scrollParents = {
            reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
            popper: listScrollParents(popper2)
          };
          var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers2, state.options.modifiers)));
          state.orderedModifiers = orderedModifiers.filter(function(m) {
            return m.enabled;
          });
          runModifierEffects();
          return instance.update();
        },
        // Sync update – it will always be executed, even if not necessary. This
        // is useful for low frequency updates where sync behavior simplifies the
        // logic.
        // For high frequency updates (e.g. `resize` and `scroll` events), always
        // prefer the async Popper#update method
        forceUpdate: function forceUpdate() {
          if (isDestroyed) {
            return;
          }
          var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
          if (!areValidElements(reference3, popper3)) {
            return;
          }
          state.rects = {
            reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
            popper: getLayoutRect(popper3)
          };
          state.reset = false;
          state.placement = state.options.placement;
          state.orderedModifiers.forEach(function(modifier) {
            return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
          });
          for (var index = 0; index < state.orderedModifiers.length; index++) {
            if (state.reset === true) {
              state.reset = false;
              index = -1;
              continue;
            }
            var _state$orderedModifie = state.orderedModifiers[index], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
            if (typeof fn2 === "function") {
              state = fn2({
                state,
                options: _options,
                name,
                instance
              }) || state;
            }
          }
        },
        // Async and optimistically optimized update – it will not be executed if
        // not necessary (debounced to run at most once-per-tick)
        update: debounce2(function() {
          return new Promise(function(resolve) {
            instance.forceUpdate();
            resolve(state);
          });
        }),
        destroy: function destroy() {
          cleanupModifierEffects();
          isDestroyed = true;
        }
      };
      if (!areValidElements(reference2, popper2)) {
        return instance;
      }
      instance.setOptions(options).then(function(state2) {
        if (!isDestroyed && options.onFirstUpdate) {
          options.onFirstUpdate(state2);
        }
      });
      function runModifierEffects() {
        state.orderedModifiers.forEach(function(_ref) {
          var name = _ref.name, _ref$options = _ref.options, options2 = _ref$options === void 0 ? {} : _ref$options, effect4 = _ref.effect;
          if (typeof effect4 === "function") {
            var cleanupFn = effect4({
              state,
              name,
              instance,
              options: options2
            });
            var noopFn = function noopFn2() {
            };
            effectCleanupFns.push(cleanupFn || noopFn);
          }
        });
      }
      function cleanupModifierEffects() {
        effectCleanupFns.forEach(function(fn2) {
          return fn2();
        });
        effectCleanupFns = [];
      }
      return instance;
    };
  }

  // node_modules/@popperjs/core/lib/popper.js
  var defaultModifiers = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
  var createPopper = /* @__PURE__ */ popperGenerator({
    defaultModifiers
  });

  // node_modules/@mui/material/Popper/BasePopper.js
  var import_prop_types30 = __toESM(require_prop_types());

  // node_modules/@mui/material/Portal/Portal.js
  var React60 = __toESM(require_react());
  var ReactDOM2 = __toESM(require_react_dom());
  var import_prop_types29 = __toESM(require_prop_types());
  var import_jsx_runtime29 = __toESM(require_jsx_runtime());
  function getContainer(container) {
    return typeof container === "function" ? container() : container;
  }
  var Portal = /* @__PURE__ */ React60.forwardRef(function Portal2(props, forwardedRef) {
    const {
      children,
      container,
      disablePortal = false
    } = props;
    const [mountNode, setMountNode] = React60.useState(null);
    const handleRef = useForkRef(/* @__PURE__ */ React60.isValidElement(children) ? getReactElementRef(children) : null, forwardedRef);
    useEnhancedEffect_default(() => {
      if (!disablePortal) {
        setMountNode(getContainer(container) || document.body);
      }
    }, [container, disablePortal]);
    useEnhancedEffect_default(() => {
      if (mountNode && !disablePortal) {
        setRef(forwardedRef, mountNode);
        return () => {
          setRef(forwardedRef, null);
        };
      }
      return void 0;
    }, [forwardedRef, mountNode, disablePortal]);
    if (disablePortal) {
      if (/* @__PURE__ */ React60.isValidElement(children)) {
        const newProps = {
          ref: handleRef
        };
        return /* @__PURE__ */ React60.cloneElement(children, newProps);
      }
      return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(React60.Fragment, {
        children
      });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(React60.Fragment, {
      children: mountNode ? /* @__PURE__ */ ReactDOM2.createPortal(children, mountNode) : mountNode
    });
  });
  true ? Portal.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The children to render into the `container`.
     */
    children: import_prop_types29.default.node,
    /**
     * An HTML element or function that returns one.
     * The `container` will have the portal children appended to it.
     *
     * You can also provide a callback, which is called in a React layout effect.
     * This lets you set the container from a ref, and also makes server-side rendering possible.
     *
     * By default, it uses the body of the top-level document object,
     * so it's simply `document.body` most of the time.
     */
    container: import_prop_types29.default.oneOfType([HTMLElementType, import_prop_types29.default.func]),
    /**
     * The `children` will be under the DOM hierarchy of the parent component.
     * @default false
     */
    disablePortal: import_prop_types29.default.bool
  } : void 0;
  if (true) {
    Portal["propTypes"] = exactProp(Portal.propTypes);
  }
  var Portal_default = Portal;

  // node_modules/@mui/material/Popper/popperClasses.js
  function getPopperUtilityClass(slot) {
    return generateUtilityClass("MuiPopper", slot);
  }
  var popperClasses = generateUtilityClasses("MuiPopper", ["root"]);

  // node_modules/@mui/material/Popper/BasePopper.js
  var import_jsx_runtime30 = __toESM(require_jsx_runtime());
  var _excluded28 = ["anchorEl", "children", "direction", "disablePortal", "modifiers", "open", "placement", "popperOptions", "popperRef", "slotProps", "slots", "TransitionProps", "ownerState"];
  var _excluded29 = ["anchorEl", "children", "container", "direction", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "style", "transition", "slotProps", "slots"];
  function flipPlacement(placement, direction) {
    if (direction === "ltr") {
      return placement;
    }
    switch (placement) {
      case "bottom-end":
        return "bottom-start";
      case "bottom-start":
        return "bottom-end";
      case "top-end":
        return "top-start";
      case "top-start":
        return "top-end";
      default:
        return placement;
    }
  }
  function resolveAnchorEl(anchorEl) {
    return typeof anchorEl === "function" ? anchorEl() : anchorEl;
  }
  function isHTMLElement2(element) {
    return element.nodeType !== void 0;
  }
  function isVirtualElement(element) {
    return !isHTMLElement2(element);
  }
  var useUtilityClasses11 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return composeClasses(slots, getPopperUtilityClass, classes);
  };
  var defaultPopperOptions = {};
  var PopperTooltip = /* @__PURE__ */ React61.forwardRef(function PopperTooltip2(props, forwardedRef) {
    var _slots$root;
    const {
      anchorEl,
      children,
      direction,
      disablePortal,
      modifiers,
      open,
      placement: initialPlacement,
      popperOptions,
      popperRef: popperRefProp,
      slotProps = {},
      slots = {},
      TransitionProps
      // @ts-ignore internal logic
      // prevent from spreading to DOM, it can come from the parent component e.g. Select.
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded28);
    const tooltipRef = React61.useRef(null);
    const ownRef = useForkRef(tooltipRef, forwardedRef);
    const popperRef = React61.useRef(null);
    const handlePopperRef = useForkRef(popperRef, popperRefProp);
    const handlePopperRefRef = React61.useRef(handlePopperRef);
    useEnhancedEffect_default(() => {
      handlePopperRefRef.current = handlePopperRef;
    }, [handlePopperRef]);
    React61.useImperativeHandle(popperRefProp, () => popperRef.current, []);
    const rtlPlacement = flipPlacement(initialPlacement, direction);
    const [placement, setPlacement] = React61.useState(rtlPlacement);
    const [resolvedAnchorElement, setResolvedAnchorElement] = React61.useState(resolveAnchorEl(anchorEl));
    React61.useEffect(() => {
      if (popperRef.current) {
        popperRef.current.forceUpdate();
      }
    });
    React61.useEffect(() => {
      if (anchorEl) {
        setResolvedAnchorElement(resolveAnchorEl(anchorEl));
      }
    }, [anchorEl]);
    useEnhancedEffect_default(() => {
      if (!resolvedAnchorElement || !open) {
        return void 0;
      }
      const handlePopperUpdate = (data) => {
        setPlacement(data.placement);
      };
      if (true) {
        if (resolvedAnchorElement && isHTMLElement2(resolvedAnchorElement) && resolvedAnchorElement.nodeType === 1) {
          const box = resolvedAnchorElement.getBoundingClientRect();
          if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            console.warn(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
          }
        }
      }
      let popperModifiers = [{
        name: "preventOverflow",
        options: {
          altBoundary: disablePortal
        }
      }, {
        name: "flip",
        options: {
          altBoundary: disablePortal
        }
      }, {
        name: "onUpdate",
        enabled: true,
        phase: "afterWrite",
        fn: ({
          state
        }) => {
          handlePopperUpdate(state);
        }
      }];
      if (modifiers != null) {
        popperModifiers = popperModifiers.concat(modifiers);
      }
      if (popperOptions && popperOptions.modifiers != null) {
        popperModifiers = popperModifiers.concat(popperOptions.modifiers);
      }
      const popper2 = createPopper(resolvedAnchorElement, tooltipRef.current, _extends({
        placement: rtlPlacement
      }, popperOptions, {
        modifiers: popperModifiers
      }));
      handlePopperRefRef.current(popper2);
      return () => {
        popper2.destroy();
        handlePopperRefRef.current(null);
      };
    }, [resolvedAnchorElement, disablePortal, modifiers, open, popperOptions, rtlPlacement]);
    const childProps = {
      placement
    };
    if (TransitionProps !== null) {
      childProps.TransitionProps = TransitionProps;
    }
    const classes = useUtilityClasses11(props);
    const Root = (_slots$root = slots.root) != null ? _slots$root : "div";
    const rootProps = useSlotProps_default({
      elementType: Root,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      additionalProps: {
        role: "tooltip",
        ref: ownRef
      },
      ownerState: props,
      className: classes.root
    });
    return /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(Root, _extends({}, rootProps, {
      children: typeof children === "function" ? children(childProps) : children
    }));
  });
  var Popper = /* @__PURE__ */ React61.forwardRef(function Popper2(props, forwardedRef) {
    const {
      anchorEl,
      children,
      container: containerProp,
      direction = "ltr",
      disablePortal = false,
      keepMounted = false,
      modifiers,
      open,
      placement = "bottom",
      popperOptions = defaultPopperOptions,
      popperRef,
      style: style4,
      transition = false,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded29);
    const [exited, setExited] = React61.useState(true);
    const handleEnter = () => {
      setExited(false);
    };
    const handleExited = () => {
      setExited(true);
    };
    if (!keepMounted && !open && (!transition || exited)) {
      return null;
    }
    let container;
    if (containerProp) {
      container = containerProp;
    } else if (anchorEl) {
      const resolvedAnchorEl = resolveAnchorEl(anchorEl);
      container = resolvedAnchorEl && isHTMLElement2(resolvedAnchorEl) ? ownerDocument(resolvedAnchorEl).body : ownerDocument(null).body;
    }
    const display = !open && keepMounted && (!transition || exited) ? "none" : void 0;
    const transitionProps = transition ? {
      in: open,
      onEnter: handleEnter,
      onExited: handleExited
    } : void 0;
    return /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(Portal_default, {
      disablePortal,
      container,
      children: /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(PopperTooltip, _extends({
        anchorEl,
        direction,
        disablePortal,
        modifiers,
        ref: forwardedRef,
        open: transition ? !exited : open,
        placement,
        popperOptions,
        popperRef,
        slotProps,
        slots
      }, other, {
        style: _extends({
          // Prevents scroll issue, waiting for Popper.js to add this style once initiated.
          position: "fixed",
          // Fix Popper.js display issue
          top: 0,
          left: 0,
          display
        }, style4),
        TransitionProps: transitionProps,
        children
      }))
    });
  });
  true ? Popper.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
     * or a function that returns either.
     * It's used to set the position of the popper.
     * The return value will passed as the reference object of the Popper instance.
     */
    anchorEl: chainPropTypes(import_prop_types30.default.oneOfType([HTMLElementType, import_prop_types30.default.object, import_prop_types30.default.func]), (props) => {
      if (props.open) {
        const resolvedAnchorEl = resolveAnchorEl(props.anchorEl);
        if (resolvedAnchorEl && isHTMLElement2(resolvedAnchorEl) && resolvedAnchorEl.nodeType === 1) {
          const box = resolvedAnchorEl.getBoundingClientRect();
          if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
          }
        } else if (!resolvedAnchorEl || typeof resolvedAnchorEl.getBoundingClientRect !== "function" || isVirtualElement(resolvedAnchorEl) && resolvedAnchorEl.contextElement != null && resolvedAnchorEl.contextElement.nodeType !== 1) {
          return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "It should be an HTML element instance or a virtualElement ", "(https://popper.js.org/docs/v2/virtual-elements/)."].join("\n"));
        }
      }
      return null;
    }),
    /**
     * Popper render function or node.
     */
    children: import_prop_types30.default.oneOfType([import_prop_types30.default.node, import_prop_types30.default.func]),
    /**
     * An HTML element or function that returns one.
     * The `container` will have the portal children appended to it.
     *
     * You can also provide a callback, which is called in a React layout effect.
     * This lets you set the container from a ref, and also makes server-side rendering possible.
     *
     * By default, it uses the body of the top-level document object,
     * so it's simply `document.body` most of the time.
     */
    container: import_prop_types30.default.oneOfType([HTMLElementType, import_prop_types30.default.func]),
    /**
     * Direction of the text.
     * @default 'ltr'
     */
    direction: import_prop_types30.default.oneOf(["ltr", "rtl"]),
    /**
     * The `children` will be under the DOM hierarchy of the parent component.
     * @default false
     */
    disablePortal: import_prop_types30.default.bool,
    /**
     * Always keep the children in the DOM.
     * This prop can be useful in SEO situation or
     * when you want to maximize the responsiveness of the Popper.
     * @default false
     */
    keepMounted: import_prop_types30.default.bool,
    /**
     * Popper.js is based on a "plugin-like" architecture,
     * most of its features are fully encapsulated "modifiers".
     *
     * A modifier is a function that is called each time Popper.js needs to
     * compute the position of the popper.
     * For this reason, modifiers should be very performant to avoid bottlenecks.
     * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
     */
    modifiers: import_prop_types30.default.arrayOf(import_prop_types30.default.shape({
      data: import_prop_types30.default.object,
      effect: import_prop_types30.default.func,
      enabled: import_prop_types30.default.bool,
      fn: import_prop_types30.default.func,
      name: import_prop_types30.default.any,
      options: import_prop_types30.default.object,
      phase: import_prop_types30.default.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
      requires: import_prop_types30.default.arrayOf(import_prop_types30.default.string),
      requiresIfExists: import_prop_types30.default.arrayOf(import_prop_types30.default.string)
    })),
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types30.default.bool.isRequired,
    /**
     * Popper placement.
     * @default 'bottom'
     */
    placement: import_prop_types30.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    /**
     * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.
     * @default {}
     */
    popperOptions: import_prop_types30.default.shape({
      modifiers: import_prop_types30.default.array,
      onFirstUpdate: import_prop_types30.default.func,
      placement: import_prop_types30.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
      strategy: import_prop_types30.default.oneOf(["absolute", "fixed"])
    }),
    /**
     * A ref that points to the used popper instance.
     */
    popperRef: refType_default,
    /**
     * The props used for each slot inside the Popper.
     * @default {}
     */
    slotProps: import_prop_types30.default.shape({
      root: import_prop_types30.default.oneOfType([import_prop_types30.default.func, import_prop_types30.default.object])
    }),
    /**
     * The components used for each slot inside the Popper.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types30.default.shape({
      root: import_prop_types30.default.elementType
    }),
    /**
     * Help supporting a react-transition-group/Transition component.
     * @default false
     */
    transition: import_prop_types30.default.bool
  } : void 0;
  var BasePopper_default = Popper;

  // node_modules/@mui/material/Popper/Popper.js
  var import_jsx_runtime31 = __toESM(require_jsx_runtime());
  var _excluded30 = ["anchorEl", "component", "components", "componentsProps", "container", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "transition", "slots", "slotProps"];
  var PopperRoot = styled_default2(BasePopper_default, {
    name: "MuiPopper",
    slot: "Root",
    overridesResolver: (props, styles4) => styles4.root
  })({});
  var Popper3 = /* @__PURE__ */ React62.forwardRef(function Popper4(inProps, ref) {
    var _slots$root;
    const theme = (0, import_useThemeWithoutDefault2.default)();
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiPopper"
    });
    const {
      anchorEl,
      component,
      components,
      componentsProps,
      container,
      disablePortal,
      keepMounted,
      modifiers,
      open,
      placement,
      popperOptions,
      popperRef,
      transition,
      slots,
      slotProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded30);
    const RootComponent = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components == null ? void 0 : components.Root;
    const otherProps = _extends({
      anchorEl,
      container,
      disablePortal,
      keepMounted,
      modifiers,
      open,
      placement,
      popperOptions,
      popperRef,
      transition
    }, other);
    return /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(PopperRoot, _extends({
      as: component,
      direction: theme == null ? void 0 : theme.direction,
      slots: {
        root: RootComponent
      },
      slotProps: slotProps != null ? slotProps : componentsProps
    }, otherProps, {
      ref
    }));
  });
  true ? Popper3.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
     * or a function that returns either.
     * It's used to set the position of the popper.
     * The return value will passed as the reference object of the Popper instance.
     */
    anchorEl: import_prop_types31.default.oneOfType([HTMLElementType, import_prop_types31.default.object, import_prop_types31.default.func]),
    /**
     * Popper render function or node.
     */
    children: import_prop_types31.default.oneOfType([import_prop_types31.default.node, import_prop_types31.default.func]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types31.default.elementType,
    /**
     * The components used for each slot inside the Popper.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    components: import_prop_types31.default.shape({
      Root: import_prop_types31.default.elementType
    }),
    /**
     * The props used for each slot inside the Popper.
     * @default {}
     */
    componentsProps: import_prop_types31.default.shape({
      root: import_prop_types31.default.oneOfType([import_prop_types31.default.func, import_prop_types31.default.object])
    }),
    /**
     * An HTML element or function that returns one.
     * The `container` will have the portal children appended to it.
     *
     * You can also provide a callback, which is called in a React layout effect.
     * This lets you set the container from a ref, and also makes server-side rendering possible.
     *
     * By default, it uses the body of the top-level document object,
     * so it's simply `document.body` most of the time.
     */
    container: import_prop_types31.default.oneOfType([HTMLElementType, import_prop_types31.default.func]),
    /**
     * The `children` will be under the DOM hierarchy of the parent component.
     * @default false
     */
    disablePortal: import_prop_types31.default.bool,
    /**
     * Always keep the children in the DOM.
     * This prop can be useful in SEO situation or
     * when you want to maximize the responsiveness of the Popper.
     * @default false
     */
    keepMounted: import_prop_types31.default.bool,
    /**
     * Popper.js is based on a "plugin-like" architecture,
     * most of its features are fully encapsulated "modifiers".
     *
     * A modifier is a function that is called each time Popper.js needs to
     * compute the position of the popper.
     * For this reason, modifiers should be very performant to avoid bottlenecks.
     * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
     */
    modifiers: import_prop_types31.default.arrayOf(import_prop_types31.default.shape({
      data: import_prop_types31.default.object,
      effect: import_prop_types31.default.func,
      enabled: import_prop_types31.default.bool,
      fn: import_prop_types31.default.func,
      name: import_prop_types31.default.any,
      options: import_prop_types31.default.object,
      phase: import_prop_types31.default.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
      requires: import_prop_types31.default.arrayOf(import_prop_types31.default.string),
      requiresIfExists: import_prop_types31.default.arrayOf(import_prop_types31.default.string)
    })),
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types31.default.bool.isRequired,
    /**
     * Popper placement.
     * @default 'bottom'
     */
    placement: import_prop_types31.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    /**
     * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.
     * @default {}
     */
    popperOptions: import_prop_types31.default.shape({
      modifiers: import_prop_types31.default.array,
      onFirstUpdate: import_prop_types31.default.func,
      placement: import_prop_types31.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
      strategy: import_prop_types31.default.oneOf(["absolute", "fixed"])
    }),
    /**
     * A ref that points to the used popper instance.
     */
    popperRef: refType_default,
    /**
     * The props used for each slot inside the Popper.
     * @default {}
     */
    slotProps: import_prop_types31.default.shape({
      root: import_prop_types31.default.oneOfType([import_prop_types31.default.func, import_prop_types31.default.object])
    }),
    /**
     * The components used for each slot inside the Popper.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types31.default.shape({
      root: import_prop_types31.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types31.default.oneOfType([import_prop_types31.default.arrayOf(import_prop_types31.default.oneOfType([import_prop_types31.default.func, import_prop_types31.default.object, import_prop_types31.default.bool])), import_prop_types31.default.func, import_prop_types31.default.object]),
    /**
     * Help supporting a react-transition-group/Transition component.
     * @default false
     */
    transition: import_prop_types31.default.bool
  } : void 0;
  var Popper_default = Popper3;

  // node_modules/@mui/x-data-grid/components/menu/GridMenu.js
  var import_jsx_runtime32 = __toESM(require_jsx_runtime());
  var _excluded31 = ["open", "target", "onClose", "children", "position", "className", "onExited"];
  var useUtilityClasses12 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["menu"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridMenuRoot = styled_default2(Popper_default, {
    name: "MuiDataGrid",
    slot: "Menu",
    overridesResolver: (_4, styles4) => styles4.menu
  })(({
    theme
  }) => ({
    zIndex: theme.zIndex.modal,
    [`& .${gridClasses.menuList}`]: {
      outline: 0
    }
  }));
  var transformOrigin = {
    "bottom-start": "top left",
    "bottom-end": "top right"
  };
  function GridMenu(props) {
    var _rootProps$slotProps;
    const {
      open,
      target,
      onClose,
      children,
      position: position2,
      className,
      onExited
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded31);
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const classes = useUtilityClasses12(rootProps);
    const savedFocusRef = React63.useRef(null);
    useEnhancedEffect_default(() => {
      if (open) {
        savedFocusRef.current = document.activeElement instanceof HTMLElement ? document.activeElement : null;
      } else {
        var _savedFocusRef$curren, _savedFocusRef$curren2;
        (_savedFocusRef$curren = savedFocusRef.current) == null || (_savedFocusRef$curren2 = _savedFocusRef$curren.focus) == null || _savedFocusRef$curren2.call(_savedFocusRef$curren);
        savedFocusRef.current = null;
      }
    }, [open]);
    React63.useEffect(() => {
      const eventName = open ? "menuOpen" : "menuClose";
      apiRef.current.publishEvent(eventName, {
        target
      });
    }, [apiRef, open, target]);
    const handleExited = (popperOnExited) => (node2) => {
      if (popperOnExited) {
        popperOnExited();
      }
      if (onExited) {
        onExited(node2);
      }
    };
    const handleClickAway = (event) => {
      if (event.target && (target === event.target || target != null && target.contains(event.target))) {
        return;
      }
      onClose(event);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(GridMenuRoot, _extends({
      as: rootProps.slots.basePopper,
      className: clsx_default(className, classes.root),
      ownerState: rootProps,
      open,
      anchorEl: target,
      transition: true,
      placement: position2
    }, other, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.basePopper, {
      children: ({
        TransitionProps,
        placement
      }) => /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(ClickAwayListener, {
        onClickAway: handleClickAway,
        mouseEvent: "onMouseDown",
        children: /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(Grow_default, _extends({}, TransitionProps, {
          style: {
            transformOrigin: transformOrigin[placement]
          },
          onExited: handleExited(TransitionProps == null ? void 0 : TransitionProps.onExited),
          children: /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(Paper_default, {
            children
          })
        }))
      })
    }));
  }
  true ? GridMenu.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    children: import_prop_types32.default.node,
    onClose: import_prop_types32.default.func.isRequired,
    onExited: import_prop_types32.default.func,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types32.default.bool.isRequired,
    position: import_prop_types32.default.oneOf(["bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    target: HTMLElementType
  } : void 0;

  // node_modules/@mui/x-data-grid/components/cell/GridActionsCell.js
  var import_jsx_runtime33 = __toESM(require_jsx_runtime());
  var import_jsx_runtime34 = __toESM(require_jsx_runtime());
  var _excluded34 = ["api", "colDef", "id", "hasFocus", "isEditable", "field", "value", "formattedValue", "row", "rowNode", "cellMode", "tabIndex", "position", "focusElementRef"];
  var hasActions = (colDef) => typeof colDef.getActions === "function";
  function GridActionsCell(props) {
    var _rootProps$slotProps;
    const {
      colDef,
      id,
      hasFocus,
      tabIndex,
      position: position2 = "bottom-end",
      focusElementRef
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded34);
    const [focusedButtonIndex, setFocusedButtonIndex] = React64.useState(-1);
    const [open, setOpen] = React64.useState(false);
    const apiRef = useGridApiContext();
    const rootRef = React64.useRef(null);
    const buttonRef = React64.useRef(null);
    const ignoreCallToFocus = React64.useRef(false);
    const touchRippleRefs = React64.useRef({});
    const theme = useTheme5();
    const menuId = useId();
    const buttonId = useId();
    const rootProps = useGridRootProps();
    if (!hasActions(colDef)) {
      throw new Error("MUI: Missing the `getActions` property in the `GridColDef`.");
    }
    const options = colDef.getActions(apiRef.current.getRowParams(id));
    const iconButtons = options.filter((option) => !option.props.showInMenu);
    const menuButtons = options.filter((option) => option.props.showInMenu);
    const numberOfButtons = iconButtons.length + (menuButtons.length ? 1 : 0);
    React64.useLayoutEffect(() => {
      if (!hasFocus) {
        Object.entries(touchRippleRefs.current).forEach(([index, ref]) => {
          ref == null || ref.stop({}, () => {
            delete touchRippleRefs.current[index];
          });
        });
      }
    }, [hasFocus]);
    React64.useEffect(() => {
      if (focusedButtonIndex < 0 || !rootRef.current) {
        return;
      }
      if (focusedButtonIndex >= rootRef.current.children.length) {
        return;
      }
      const child = rootRef.current.children[focusedButtonIndex];
      child.focus({
        preventScroll: true
      });
    }, [focusedButtonIndex]);
    React64.useEffect(() => {
      if (!hasFocus) {
        setFocusedButtonIndex(-1);
        ignoreCallToFocus.current = false;
      }
    }, [hasFocus]);
    React64.useImperativeHandle(focusElementRef, () => ({
      focus() {
        if (!ignoreCallToFocus.current) {
          const focusableButtonIndex = options.findIndex((o) => !o.props.disabled);
          setFocusedButtonIndex(focusableButtonIndex);
        }
      }
    }), [options]);
    React64.useEffect(() => {
      if (focusedButtonIndex >= numberOfButtons) {
        setFocusedButtonIndex(numberOfButtons - 1);
      }
    }, [focusedButtonIndex, numberOfButtons]);
    const showMenu = () => {
      setOpen(true);
      setFocusedButtonIndex(numberOfButtons - 1);
      ignoreCallToFocus.current = true;
    };
    const hideMenu = () => {
      setOpen(false);
    };
    const handleTouchRippleRef = (index) => (instance) => {
      touchRippleRefs.current[index] = instance;
    };
    const handleButtonClick = (index, onClick) => (event) => {
      setFocusedButtonIndex(index);
      ignoreCallToFocus.current = true;
      if (onClick) {
        onClick(event);
      }
    };
    const handleRootKeyDown = (event) => {
      if (numberOfButtons <= 1) {
        return;
      }
      const getNewIndex = (index, direction) => {
        var _options;
        if (index < 0 || index > options.length) {
          return index;
        }
        const rtlMod = theme.direction === "rtl" ? -1 : 1;
        const indexMod = (direction === "left" ? -1 : 1) * rtlMod;
        return (_options = options[index + indexMod]) != null && _options.props.disabled ? getNewIndex(index + indexMod, direction) : index + indexMod;
      };
      let newIndex = focusedButtonIndex;
      if (event.key === "ArrowRight") {
        newIndex = getNewIndex(focusedButtonIndex, "right");
      } else if (event.key === "ArrowLeft") {
        newIndex = getNewIndex(focusedButtonIndex, "left");
      }
      if (newIndex < 0 || newIndex >= numberOfButtons) {
        return;
      }
      if (newIndex !== focusedButtonIndex) {
        event.preventDefault();
        event.stopPropagation();
        setFocusedButtonIndex(newIndex);
      }
    };
    const handleListKeyDown = (event) => {
      if (event.key === "Tab") {
        event.preventDefault();
      }
      if (["Tab", "Escape"].includes(event.key)) {
        hideMenu();
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", _extends({
      role: "menu",
      ref: rootRef,
      tabIndex: -1,
      className: gridClasses.actionsCell,
      onKeyDown: handleRootKeyDown
    }, other, {
      children: [iconButtons.map((button, index) => /* @__PURE__ */ React64.cloneElement(button, {
        key: index,
        touchRippleRef: handleTouchRippleRef(index),
        onClick: handleButtonClick(index, button.props.onClick),
        tabIndex: focusedButtonIndex === index ? tabIndex : -1
      })), menuButtons.length > 0 && buttonId && /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(rootProps.slots.baseIconButton, _extends({
        ref: buttonRef,
        id: buttonId,
        "aria-label": apiRef.current.getLocaleText("actionsCellMore"),
        "aria-haspopup": "menu",
        "aria-expanded": open,
        "aria-controls": open ? menuId : void 0,
        role: "menuitem",
        size: "small",
        onClick: showMenu,
        touchRippleRef: handleTouchRippleRef(buttonId),
        tabIndex: focusedButtonIndex === iconButtons.length ? tabIndex : -1
      }, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseIconButton, {
        children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(rootProps.slots.moreActionsIcon, {
          fontSize: "small"
        })
      })), menuButtons.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(GridMenu, {
        open,
        target: buttonRef.current,
        position: position2,
        onClose: hideMenu,
        children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(MenuList_default, {
          id: menuId,
          className: gridClasses.menuList,
          onKeyDown: handleListKeyDown,
          "aria-labelledby": buttonId,
          variant: "menu",
          autoFocusItem: true,
          children: menuButtons.map((button, index) => /* @__PURE__ */ React64.cloneElement(button, {
            key: index,
            closeMenu: hideMenu
          }))
        })
      })]
    }));
  }
  true ? GridActionsCell.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    api: import_prop_types33.default.object,
    /**
     * The mode of the cell.
     */
    cellMode: import_prop_types33.default.oneOf(["edit", "view"]).isRequired,
    /**
     * The column of the row that the current cell belongs to.
     */
    colDef: import_prop_types33.default.object.isRequired,
    /**
     * The column field of the cell that triggered the event.
     */
    field: import_prop_types33.default.string.isRequired,
    /**
     * A ref allowing to set imperative focus.
     * It can be passed to the element that should receive focus.
     * @ignore - do not document.
     */
    focusElementRef: import_prop_types33.default.oneOfType([import_prop_types33.default.func, import_prop_types33.default.shape({
      current: import_prop_types33.default.shape({
        focus: import_prop_types33.default.func.isRequired
      })
    })]),
    /**
     * The cell value formatted with the column valueFormatter.
     */
    formattedValue: import_prop_types33.default.any,
    /**
     * If true, the cell is the active element.
     */
    hasFocus: import_prop_types33.default.bool.isRequired,
    /**
     * The grid row id.
     */
    id: import_prop_types33.default.oneOfType([import_prop_types33.default.number, import_prop_types33.default.string]).isRequired,
    /**
     * If true, the cell is editable.
     */
    isEditable: import_prop_types33.default.bool,
    position: import_prop_types33.default.oneOf(["bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    /**
     * The row model of the row that the current cell belongs to.
     */
    row: import_prop_types33.default.any.isRequired,
    /**
     * The node of the row that the current cell belongs to.
     */
    rowNode: import_prop_types33.default.object.isRequired,
    /**
     * the tabIndex value.
     */
    tabIndex: import_prop_types33.default.oneOf([-1, 0]).isRequired,
    /**
     * The cell value.
     * If the column has `valueGetter`, use `params.row` to directly access the fields.
     */
    value: import_prop_types33.default.any
  } : void 0;
  var renderActionsCell = (params) => /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(GridActionsCell, _extends({}, params));

  // node_modules/@mui/x-data-grid/components/cell/GridActionsCellItem.js
  init_extends();
  var React73 = __toESM(require_react());
  var import_prop_types42 = __toESM(require_prop_types());

  // node_modules/@mui/material/MenuItem/MenuItem.js
  init_extends();
  var React72 = __toESM(require_react());
  var import_prop_types41 = __toESM(require_prop_types());
  var import_colorManipulator4 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/ButtonBase/ButtonBase.js
  init_extends();
  var React67 = __toESM(require_react());
  var import_prop_types36 = __toESM(require_prop_types());

  // node_modules/@mui/material/utils/useEventCallback.js
  var useEventCallback_default2 = useEventCallback_default;

  // node_modules/@mui/material/utils/useIsFocusVisible.js
  var useIsFocusVisible_default = useIsFocusVisible;

  // node_modules/@mui/material/ButtonBase/TouchRipple.js
  init_extends();
  var React66 = __toESM(require_react());
  var import_prop_types35 = __toESM(require_prop_types());

  // node_modules/@mui/material/ButtonBase/Ripple.js
  var React65 = __toESM(require_react());
  var import_prop_types34 = __toESM(require_prop_types());
  var import_jsx_runtime35 = __toESM(require_jsx_runtime());
  function Ripple(props) {
    const {
      className,
      classes,
      pulsate = false,
      rippleX,
      rippleY,
      rippleSize,
      in: inProp,
      onExited,
      timeout: timeout2
    } = props;
    const [leaving, setLeaving] = React65.useState(false);
    const rippleClassName = clsx_default(className, classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);
    const rippleStyles = {
      width: rippleSize,
      height: rippleSize,
      top: -(rippleSize / 2) + rippleY,
      left: -(rippleSize / 2) + rippleX
    };
    const childClassName = clsx_default(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);
    if (!inProp && !leaving) {
      setLeaving(true);
    }
    React65.useEffect(() => {
      if (!inProp && onExited != null) {
        const timeoutId = setTimeout(onExited, timeout2);
        return () => {
          clearTimeout(timeoutId);
        };
      }
      return void 0;
    }, [onExited, inProp, timeout2]);
    return /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("span", {
      className: rippleClassName,
      style: rippleStyles,
      children: /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("span", {
        className: childClassName
      })
    });
  }
  true ? Ripple.propTypes = {
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types34.default.object.isRequired,
    className: import_prop_types34.default.string,
    /**
     * @ignore - injected from TransitionGroup
     */
    in: import_prop_types34.default.bool,
    /**
     * @ignore - injected from TransitionGroup
     */
    onExited: import_prop_types34.default.func,
    /**
     * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.
     */
    pulsate: import_prop_types34.default.bool,
    /**
     * Diameter of the ripple.
     */
    rippleSize: import_prop_types34.default.number,
    /**
     * Horizontal position of the ripple center.
     */
    rippleX: import_prop_types34.default.number,
    /**
     * Vertical position of the ripple center.
     */
    rippleY: import_prop_types34.default.number,
    /**
     * exit delay
     */
    timeout: import_prop_types34.default.number.isRequired
  } : void 0;
  var Ripple_default = Ripple;

  // node_modules/@mui/material/ButtonBase/touchRippleClasses.js
  var touchRippleClasses = generateUtilityClasses("MuiTouchRipple", ["root", "ripple", "rippleVisible", "ripplePulsate", "child", "childLeaving", "childPulsate"]);
  var touchRippleClasses_default = touchRippleClasses;

  // node_modules/@mui/material/ButtonBase/TouchRipple.js
  var import_jsx_runtime36 = __toESM(require_jsx_runtime());
  var _excluded35 = ["center", "classes", "className"];
  var _ = (t) => t;
  var _t;
  var _t2;
  var _t3;
  var _t4;
  var DURATION = 550;
  var DELAY_RIPPLE = 80;
  var enterKeyframe = (0, import_styled_engine5.keyframes)(_t || (_t = _`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`));
  var exitKeyframe = (0, import_styled_engine5.keyframes)(_t2 || (_t2 = _`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`));
  var pulsateKeyframe = (0, import_styled_engine5.keyframes)(_t3 || (_t3 = _`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`));
  var TouchRippleRoot = styled_default2("span", {
    name: "MuiTouchRipple",
    slot: "Root"
  })({
    overflow: "hidden",
    pointerEvents: "none",
    position: "absolute",
    zIndex: 0,
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    borderRadius: "inherit"
  });
  var TouchRippleRipple = styled_default2(Ripple_default, {
    name: "MuiTouchRipple",
    slot: "Ripple"
  })(_t4 || (_t4 = _`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`), touchRippleClasses_default.rippleVisible, enterKeyframe, DURATION, ({
    theme
  }) => theme.transitions.easing.easeInOut, touchRippleClasses_default.ripplePulsate, ({
    theme
  }) => theme.transitions.duration.shorter, touchRippleClasses_default.child, touchRippleClasses_default.childLeaving, exitKeyframe, DURATION, ({
    theme
  }) => theme.transitions.easing.easeInOut, touchRippleClasses_default.childPulsate, pulsateKeyframe, ({
    theme
  }) => theme.transitions.easing.easeInOut);
  var TouchRipple = /* @__PURE__ */ React66.forwardRef(function TouchRipple2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiTouchRipple"
    });
    const {
      center: centerProp = false,
      classes = {},
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded35);
    const [ripples, setRipples] = React66.useState([]);
    const nextKey = React66.useRef(0);
    const rippleCallback = React66.useRef(null);
    React66.useEffect(() => {
      if (rippleCallback.current) {
        rippleCallback.current();
        rippleCallback.current = null;
      }
    }, [ripples]);
    const ignoringMouseDown = React66.useRef(false);
    const startTimer = useTimeout();
    const startTimerCommit = React66.useRef(null);
    const container = React66.useRef(null);
    const startCommit = React66.useCallback((params) => {
      const {
        pulsate: pulsate2,
        rippleX,
        rippleY,
        rippleSize,
        cb
      } = params;
      setRipples((oldRipples) => [...oldRipples, /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(TouchRippleRipple, {
        classes: {
          ripple: clsx_default(classes.ripple, touchRippleClasses_default.ripple),
          rippleVisible: clsx_default(classes.rippleVisible, touchRippleClasses_default.rippleVisible),
          ripplePulsate: clsx_default(classes.ripplePulsate, touchRippleClasses_default.ripplePulsate),
          child: clsx_default(classes.child, touchRippleClasses_default.child),
          childLeaving: clsx_default(classes.childLeaving, touchRippleClasses_default.childLeaving),
          childPulsate: clsx_default(classes.childPulsate, touchRippleClasses_default.childPulsate)
        },
        timeout: DURATION,
        pulsate: pulsate2,
        rippleX,
        rippleY,
        rippleSize
      }, nextKey.current)]);
      nextKey.current += 1;
      rippleCallback.current = cb;
    }, [classes]);
    const start2 = React66.useCallback((event = {}, options = {}, cb = () => {
    }) => {
      const {
        pulsate: pulsate2 = false,
        center = centerProp || options.pulsate,
        fakeElement = false
        // For test purposes
      } = options;
      if ((event == null ? void 0 : event.type) === "mousedown" && ignoringMouseDown.current) {
        ignoringMouseDown.current = false;
        return;
      }
      if ((event == null ? void 0 : event.type) === "touchstart") {
        ignoringMouseDown.current = true;
      }
      const element = fakeElement ? null : container.current;
      const rect = element ? element.getBoundingClientRect() : {
        width: 0,
        height: 0,
        left: 0,
        top: 0
      };
      let rippleX;
      let rippleY;
      let rippleSize;
      if (center || event === void 0 || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {
        rippleX = Math.round(rect.width / 2);
        rippleY = Math.round(rect.height / 2);
      } else {
        const {
          clientX,
          clientY
        } = event.touches && event.touches.length > 0 ? event.touches[0] : event;
        rippleX = Math.round(clientX - rect.left);
        rippleY = Math.round(clientY - rect.top);
      }
      if (center) {
        rippleSize = Math.sqrt((2 * rect.width ** 2 + rect.height ** 2) / 3);
        if (rippleSize % 2 === 0) {
          rippleSize += 1;
        }
      } else {
        const sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
        const sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
        rippleSize = Math.sqrt(sizeX ** 2 + sizeY ** 2);
      }
      if (event != null && event.touches) {
        if (startTimerCommit.current === null) {
          startTimerCommit.current = () => {
            startCommit({
              pulsate: pulsate2,
              rippleX,
              rippleY,
              rippleSize,
              cb
            });
          };
          startTimer.start(DELAY_RIPPLE, () => {
            if (startTimerCommit.current) {
              startTimerCommit.current();
              startTimerCommit.current = null;
            }
          });
        }
      } else {
        startCommit({
          pulsate: pulsate2,
          rippleX,
          rippleY,
          rippleSize,
          cb
        });
      }
    }, [centerProp, startCommit, startTimer]);
    const pulsate = React66.useCallback(() => {
      start2({}, {
        pulsate: true
      });
    }, [start2]);
    const stop = React66.useCallback((event, cb) => {
      startTimer.clear();
      if ((event == null ? void 0 : event.type) === "touchend" && startTimerCommit.current) {
        startTimerCommit.current();
        startTimerCommit.current = null;
        startTimer.start(0, () => {
          stop(event, cb);
        });
        return;
      }
      startTimerCommit.current = null;
      setRipples((oldRipples) => {
        if (oldRipples.length > 0) {
          return oldRipples.slice(1);
        }
        return oldRipples;
      });
      rippleCallback.current = cb;
    }, [startTimer]);
    React66.useImperativeHandle(ref, () => ({
      pulsate,
      start: start2,
      stop
    }), [pulsate, start2, stop]);
    return /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(TouchRippleRoot, _extends({
      className: clsx_default(touchRippleClasses_default.root, classes.root, className),
      ref: container
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(TransitionGroup_default, {
        component: null,
        exit: true,
        children: ripples
      })
    }));
  });
  true ? TouchRipple.propTypes = {
    /**
     * If `true`, the ripple starts at the center of the component
     * rather than at the point of interaction.
     */
    center: import_prop_types35.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types35.default.object,
    /**
     * @ignore
     */
    className: import_prop_types35.default.string
  } : void 0;
  var TouchRipple_default = TouchRipple;

  // node_modules/@mui/material/ButtonBase/buttonBaseClasses.js
  function getButtonBaseUtilityClass(slot) {
    return generateUtilityClass("MuiButtonBase", slot);
  }
  var buttonBaseClasses = generateUtilityClasses("MuiButtonBase", ["root", "disabled", "focusVisible"]);
  var buttonBaseClasses_default = buttonBaseClasses;

  // node_modules/@mui/material/ButtonBase/ButtonBase.js
  var import_jsx_runtime37 = __toESM(require_jsx_runtime());
  var import_jsx_runtime38 = __toESM(require_jsx_runtime());
  var _excluded36 = ["action", "centerRipple", "children", "className", "component", "disabled", "disableRipple", "disableTouchRipple", "focusRipple", "focusVisibleClassName", "LinkComponent", "onBlur", "onClick", "onContextMenu", "onDragLeave", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseDown", "onMouseLeave", "onMouseUp", "onTouchEnd", "onTouchMove", "onTouchStart", "tabIndex", "TouchRippleProps", "touchRippleRef", "type"];
  var useUtilityClasses13 = (ownerState) => {
    const {
      disabled,
      focusVisible,
      focusVisibleClassName,
      classes
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", focusVisible && "focusVisible"]
    };
    const composedClasses = composeClasses(slots, getButtonBaseUtilityClass, classes);
    if (focusVisible && focusVisibleClassName) {
      composedClasses.root += ` ${focusVisibleClassName}`;
    }
    return composedClasses;
  };
  var ButtonBaseRoot = styled_default2("button", {
    name: "MuiButtonBase",
    slot: "Root",
    overridesResolver: (props, styles4) => styles4.root
  })({
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    position: "relative",
    boxSizing: "border-box",
    WebkitTapHighlightColor: "transparent",
    backgroundColor: "transparent",
    // Reset default value
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0,
    border: 0,
    margin: 0,
    // Remove the margin in Safari
    borderRadius: 0,
    padding: 0,
    // Remove the padding in Firefox
    cursor: "pointer",
    userSelect: "none",
    verticalAlign: "middle",
    MozAppearance: "none",
    // Reset
    WebkitAppearance: "none",
    // Reset
    textDecoration: "none",
    // So we take precedent over the style of a native <a /> element.
    color: "inherit",
    "&::-moz-focus-inner": {
      borderStyle: "none"
      // Remove Firefox dotted outline.
    },
    [`&.${buttonBaseClasses_default.disabled}`]: {
      pointerEvents: "none",
      // Disable link interactions
      cursor: "default"
    },
    "@media print": {
      colorAdjust: "exact"
    }
  });
  var ButtonBase = /* @__PURE__ */ React67.forwardRef(function ButtonBase2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiButtonBase"
    });
    const {
      action,
      centerRipple = false,
      children,
      className,
      component = "button",
      disabled = false,
      disableRipple = false,
      disableTouchRipple = false,
      focusRipple = false,
      LinkComponent = "a",
      onBlur,
      onClick,
      onContextMenu,
      onDragLeave,
      onFocus,
      onFocusVisible,
      onKeyDown,
      onKeyUp,
      onMouseDown,
      onMouseLeave,
      onMouseUp,
      onTouchEnd,
      onTouchMove,
      onTouchStart,
      tabIndex = 0,
      TouchRippleProps,
      touchRippleRef,
      type
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded36);
    const buttonRef = React67.useRef(null);
    const rippleRef = React67.useRef(null);
    const handleRippleRef = useForkRef_default(rippleRef, touchRippleRef);
    const {
      isFocusVisibleRef,
      onFocus: handleFocusVisible,
      onBlur: handleBlurVisible,
      ref: focusVisibleRef
    } = useIsFocusVisible_default();
    const [focusVisible, setFocusVisible] = React67.useState(false);
    if (disabled && focusVisible) {
      setFocusVisible(false);
    }
    React67.useImperativeHandle(action, () => ({
      focusVisible: () => {
        setFocusVisible(true);
        buttonRef.current.focus();
      }
    }), []);
    const [mountedState, setMountedState] = React67.useState(false);
    React67.useEffect(() => {
      setMountedState(true);
    }, []);
    const enableTouchRipple = mountedState && !disableRipple && !disabled;
    React67.useEffect(() => {
      if (focusVisible && focusRipple && !disableRipple && mountedState) {
        rippleRef.current.pulsate();
      }
    }, [disableRipple, focusRipple, focusVisible, mountedState]);
    function useRippleHandler(rippleAction, eventCallback, skipRippleAction = disableTouchRipple) {
      return useEventCallback_default2((event) => {
        if (eventCallback) {
          eventCallback(event);
        }
        const ignore = skipRippleAction;
        if (!ignore && rippleRef.current) {
          rippleRef.current[rippleAction](event);
        }
        return true;
      });
    }
    const handleMouseDown = useRippleHandler("start", onMouseDown);
    const handleContextMenu = useRippleHandler("stop", onContextMenu);
    const handleDragLeave = useRippleHandler("stop", onDragLeave);
    const handleMouseUp = useRippleHandler("stop", onMouseUp);
    const handleMouseLeave = useRippleHandler("stop", (event) => {
      if (focusVisible) {
        event.preventDefault();
      }
      if (onMouseLeave) {
        onMouseLeave(event);
      }
    });
    const handleTouchStart = useRippleHandler("start", onTouchStart);
    const handleTouchEnd = useRippleHandler("stop", onTouchEnd);
    const handleTouchMove = useRippleHandler("stop", onTouchMove);
    const handleBlur = useRippleHandler("stop", (event) => {
      handleBlurVisible(event);
      if (isFocusVisibleRef.current === false) {
        setFocusVisible(false);
      }
      if (onBlur) {
        onBlur(event);
      }
    }, false);
    const handleFocus = useEventCallback_default2((event) => {
      if (!buttonRef.current) {
        buttonRef.current = event.currentTarget;
      }
      handleFocusVisible(event);
      if (isFocusVisibleRef.current === true) {
        setFocusVisible(true);
        if (onFocusVisible) {
          onFocusVisible(event);
        }
      }
      if (onFocus) {
        onFocus(event);
      }
    });
    const isNonNativeButton = () => {
      const button = buttonRef.current;
      return component && component !== "button" && !(button.tagName === "A" && button.href);
    };
    const keydownRef = React67.useRef(false);
    const handleKeyDown2 = useEventCallback_default2((event) => {
      if (focusRipple && !keydownRef.current && focusVisible && rippleRef.current && event.key === " ") {
        keydownRef.current = true;
        rippleRef.current.stop(event, () => {
          rippleRef.current.start(event);
        });
      }
      if (event.target === event.currentTarget && isNonNativeButton() && event.key === " ") {
        event.preventDefault();
      }
      if (onKeyDown) {
        onKeyDown(event);
      }
      if (event.target === event.currentTarget && isNonNativeButton() && event.key === "Enter" && !disabled) {
        event.preventDefault();
        if (onClick) {
          onClick(event);
        }
      }
    });
    const handleKeyUp = useEventCallback_default2((event) => {
      if (focusRipple && event.key === " " && rippleRef.current && focusVisible && !event.defaultPrevented) {
        keydownRef.current = false;
        rippleRef.current.stop(event, () => {
          rippleRef.current.pulsate(event);
        });
      }
      if (onKeyUp) {
        onKeyUp(event);
      }
      if (onClick && event.target === event.currentTarget && isNonNativeButton() && event.key === " " && !event.defaultPrevented) {
        onClick(event);
      }
    });
    let ComponentProp = component;
    if (ComponentProp === "button" && (other.href || other.to)) {
      ComponentProp = LinkComponent;
    }
    const buttonProps = {};
    if (ComponentProp === "button") {
      buttonProps.type = type === void 0 ? "button" : type;
      buttonProps.disabled = disabled;
    } else {
      if (!other.href && !other.to) {
        buttonProps.role = "button";
      }
      if (disabled) {
        buttonProps["aria-disabled"] = disabled;
      }
    }
    const handleRef = useForkRef_default(ref, focusVisibleRef, buttonRef);
    if (true) {
      React67.useEffect(() => {
        if (enableTouchRipple && !rippleRef.current) {
          console.error(["MUI: The `component` prop provided to ButtonBase is invalid.", "Please make sure the children prop is rendered in this custom component."].join("\n"));
        }
      }, [enableTouchRipple]);
    }
    const ownerState = _extends({}, props, {
      centerRipple,
      component,
      disabled,
      disableRipple,
      disableTouchRipple,
      focusRipple,
      tabIndex,
      focusVisible
    });
    const classes = useUtilityClasses13(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)(ButtonBaseRoot, _extends({
      as: ComponentProp,
      className: clsx_default(classes.root, className),
      ownerState,
      onBlur: handleBlur,
      onClick,
      onContextMenu: handleContextMenu,
      onFocus: handleFocus,
      onKeyDown: handleKeyDown2,
      onKeyUp: handleKeyUp,
      onMouseDown: handleMouseDown,
      onMouseLeave: handleMouseLeave,
      onMouseUp: handleMouseUp,
      onDragLeave: handleDragLeave,
      onTouchEnd: handleTouchEnd,
      onTouchMove: handleTouchMove,
      onTouchStart: handleTouchStart,
      ref: handleRef,
      tabIndex: disabled ? -1 : tabIndex,
      type
    }, buttonProps, other, {
      children: [children, enableTouchRipple ? (
        /* TouchRipple is only needed client-side, x2 boost on the server. */
        /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(TouchRipple_default, _extends({
          ref: handleRippleRef,
          center: centerRipple
        }, TouchRippleProps))
      ) : null]
    }));
  });
  true ? ButtonBase.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * A ref for imperative actions.
     * It currently only supports `focusVisible()` action.
     */
    action: refType_default,
    /**
     * If `true`, the ripples are centered.
     * They won't start at the cursor interaction position.
     * @default false
     */
    centerRipple: import_prop_types36.default.bool,
    /**
     * The content of the component.
     */
    children: import_prop_types36.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types36.default.object,
    /**
     * @ignore
     */
    className: import_prop_types36.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: elementTypeAcceptingRef_default,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types36.default.bool,
    /**
     * If `true`, the ripple effect is disabled.
     *
     * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
     * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
     * @default false
     */
    disableRipple: import_prop_types36.default.bool,
    /**
     * If `true`, the touch ripple effect is disabled.
     * @default false
     */
    disableTouchRipple: import_prop_types36.default.bool,
    /**
     * If `true`, the base button will have a keyboard focus ripple.
     * @default false
     */
    focusRipple: import_prop_types36.default.bool,
    /**
     * This prop can help identify which element has keyboard focus.
     * The class name will be applied when the element gains the focus through keyboard interaction.
     * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
     * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
     * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
     * if needed.
     */
    focusVisibleClassName: import_prop_types36.default.string,
    /**
     * @ignore
     */
    href: import_prop_types36.default.any,
    /**
     * The component used to render a link when the `href` prop is provided.
     * @default 'a'
     */
    LinkComponent: import_prop_types36.default.elementType,
    /**
     * @ignore
     */
    onBlur: import_prop_types36.default.func,
    /**
     * @ignore
     */
    onClick: import_prop_types36.default.func,
    /**
     * @ignore
     */
    onContextMenu: import_prop_types36.default.func,
    /**
     * @ignore
     */
    onDragLeave: import_prop_types36.default.func,
    /**
     * @ignore
     */
    onFocus: import_prop_types36.default.func,
    /**
     * Callback fired when the component is focused with a keyboard.
     * We trigger a `onFocus` callback too.
     */
    onFocusVisible: import_prop_types36.default.func,
    /**
     * @ignore
     */
    onKeyDown: import_prop_types36.default.func,
    /**
     * @ignore
     */
    onKeyUp: import_prop_types36.default.func,
    /**
     * @ignore
     */
    onMouseDown: import_prop_types36.default.func,
    /**
     * @ignore
     */
    onMouseLeave: import_prop_types36.default.func,
    /**
     * @ignore
     */
    onMouseUp: import_prop_types36.default.func,
    /**
     * @ignore
     */
    onTouchEnd: import_prop_types36.default.func,
    /**
     * @ignore
     */
    onTouchMove: import_prop_types36.default.func,
    /**
     * @ignore
     */
    onTouchStart: import_prop_types36.default.func,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types36.default.oneOfType([import_prop_types36.default.arrayOf(import_prop_types36.default.oneOfType([import_prop_types36.default.func, import_prop_types36.default.object, import_prop_types36.default.bool])), import_prop_types36.default.func, import_prop_types36.default.object]),
    /**
     * @default 0
     */
    tabIndex: import_prop_types36.default.number,
    /**
     * Props applied to the `TouchRipple` element.
     */
    TouchRippleProps: import_prop_types36.default.object,
    /**
     * A ref that points to the `TouchRipple` element.
     */
    touchRippleRef: import_prop_types36.default.oneOfType([import_prop_types36.default.func, import_prop_types36.default.shape({
      current: import_prop_types36.default.shape({
        pulsate: import_prop_types36.default.func.isRequired,
        start: import_prop_types36.default.func.isRequired,
        stop: import_prop_types36.default.func.isRequired
      })
    })]),
    /**
     * @ignore
     */
    type: import_prop_types36.default.oneOfType([import_prop_types36.default.oneOf(["button", "reset", "submit"]), import_prop_types36.default.string])
  } : void 0;
  var ButtonBase_default = ButtonBase;

  // node_modules/@mui/material/Divider/Divider.js
  init_extends();
  var React68 = __toESM(require_react());
  var import_prop_types37 = __toESM(require_prop_types());
  var import_colorManipulator3 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/Divider/dividerClasses.js
  function getDividerUtilityClass(slot) {
    return generateUtilityClass("MuiDivider", slot);
  }
  var dividerClasses = generateUtilityClasses("MuiDivider", ["root", "absolute", "fullWidth", "inset", "middle", "flexItem", "light", "vertical", "withChildren", "withChildrenVertical", "textAlignRight", "textAlignLeft", "wrapper", "wrapperVertical"]);
  var dividerClasses_default = dividerClasses;

  // node_modules/@mui/material/Divider/Divider.js
  var import_jsx_runtime39 = __toESM(require_jsx_runtime());
  var _excluded37 = ["absolute", "children", "className", "component", "flexItem", "light", "orientation", "role", "textAlign", "variant"];
  var useUtilityClasses14 = (ownerState) => {
    const {
      absolute,
      children,
      classes,
      flexItem,
      light: light2,
      orientation,
      textAlign,
      variant
    } = ownerState;
    const slots = {
      root: ["root", absolute && "absolute", variant, light2 && "light", orientation === "vertical" && "vertical", flexItem && "flexItem", children && "withChildren", children && orientation === "vertical" && "withChildrenVertical", textAlign === "right" && orientation !== "vertical" && "textAlignRight", textAlign === "left" && orientation !== "vertical" && "textAlignLeft"],
      wrapper: ["wrapper", orientation === "vertical" && "wrapperVertical"]
    };
    return composeClasses(slots, getDividerUtilityClass, classes);
  };
  var DividerRoot = styled_default2("div", {
    name: "MuiDivider",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, ownerState.absolute && styles4.absolute, styles4[ownerState.variant], ownerState.light && styles4.light, ownerState.orientation === "vertical" && styles4.vertical, ownerState.flexItem && styles4.flexItem, ownerState.children && styles4.withChildren, ownerState.children && ownerState.orientation === "vertical" && styles4.withChildrenVertical, ownerState.textAlign === "right" && ownerState.orientation !== "vertical" && styles4.textAlignRight, ownerState.textAlign === "left" && ownerState.orientation !== "vertical" && styles4.textAlignLeft];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    margin: 0,
    // Reset browser default style.
    flexShrink: 0,
    borderWidth: 0,
    borderStyle: "solid",
    borderColor: (theme.vars || theme).palette.divider,
    borderBottomWidth: "thin"
  }, ownerState.absolute && {
    position: "absolute",
    bottom: 0,
    left: 0,
    width: "100%"
  }, ownerState.light && {
    borderColor: theme.vars ? `rgba(${theme.vars.palette.dividerChannel} / 0.08)` : (0, import_colorManipulator3.alpha)(theme.palette.divider, 0.08)
  }, ownerState.variant === "inset" && {
    marginLeft: 72
  }, ownerState.variant === "middle" && ownerState.orientation === "horizontal" && {
    marginLeft: theme.spacing(2),
    marginRight: theme.spacing(2)
  }, ownerState.variant === "middle" && ownerState.orientation === "vertical" && {
    marginTop: theme.spacing(1),
    marginBottom: theme.spacing(1)
  }, ownerState.orientation === "vertical" && {
    height: "100%",
    borderBottomWidth: 0,
    borderRightWidth: "thin"
  }, ownerState.flexItem && {
    alignSelf: "stretch",
    height: "auto"
  }), ({
    ownerState
  }) => _extends({}, ownerState.children && {
    display: "flex",
    whiteSpace: "nowrap",
    textAlign: "center",
    border: 0,
    borderTopStyle: "solid",
    borderLeftStyle: "solid",
    "&::before, &::after": {
      content: '""',
      alignSelf: "center"
    }
  }), ({
    theme,
    ownerState
  }) => _extends({}, ownerState.children && ownerState.orientation !== "vertical" && {
    "&::before, &::after": {
      width: "100%",
      borderTop: `thin solid ${(theme.vars || theme).palette.divider}`,
      borderTopStyle: "inherit"
    }
  }), ({
    theme,
    ownerState
  }) => _extends({}, ownerState.children && ownerState.orientation === "vertical" && {
    flexDirection: "column",
    "&::before, &::after": {
      height: "100%",
      borderLeft: `thin solid ${(theme.vars || theme).palette.divider}`,
      borderLeftStyle: "inherit"
    }
  }), ({
    ownerState
  }) => _extends({}, ownerState.textAlign === "right" && ownerState.orientation !== "vertical" && {
    "&::before": {
      width: "90%"
    },
    "&::after": {
      width: "10%"
    }
  }, ownerState.textAlign === "left" && ownerState.orientation !== "vertical" && {
    "&::before": {
      width: "10%"
    },
    "&::after": {
      width: "90%"
    }
  }));
  var DividerWrapper = styled_default2("span", {
    name: "MuiDivider",
    slot: "Wrapper",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.wrapper, ownerState.orientation === "vertical" && styles4.wrapperVertical];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    display: "inline-block",
    paddingLeft: `calc(${theme.spacing(1)} * 1.2)`,
    paddingRight: `calc(${theme.spacing(1)} * 1.2)`
  }, ownerState.orientation === "vertical" && {
    paddingTop: `calc(${theme.spacing(1)} * 1.2)`,
    paddingBottom: `calc(${theme.spacing(1)} * 1.2)`
  }));
  var Divider = /* @__PURE__ */ React68.forwardRef(function Divider2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiDivider"
    });
    const {
      absolute = false,
      children,
      className,
      component = children ? "div" : "hr",
      flexItem = false,
      light: light2 = false,
      orientation = "horizontal",
      role = component !== "hr" ? "separator" : void 0,
      textAlign = "center",
      variant = "fullWidth"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded37);
    const ownerState = _extends({}, props, {
      absolute,
      component,
      flexItem,
      light: light2,
      orientation,
      role,
      textAlign,
      variant
    });
    const classes = useUtilityClasses14(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(DividerRoot, _extends({
      as: component,
      className: clsx_default(classes.root, className),
      role,
      ref,
      ownerState
    }, other, {
      children: children ? /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(DividerWrapper, {
        className: classes.wrapper,
        ownerState,
        children
      }) : null
    }));
  });
  Divider.muiSkipListHighlight = true;
  true ? Divider.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Absolutely position the element.
     * @default false
     */
    absolute: import_prop_types37.default.bool,
    /**
     * The content of the component.
     */
    children: import_prop_types37.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types37.default.object,
    /**
     * @ignore
     */
    className: import_prop_types37.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types37.default.elementType,
    /**
     * If `true`, a vertical divider will have the correct height when used in flex container.
     * (By default, a vertical divider will have a calculated height of `0px` if it is the child of a flex container.)
     * @default false
     */
    flexItem: import_prop_types37.default.bool,
    /**
     * If `true`, the divider will have a lighter color.
     * @default false
     * @deprecated Use <Divider sx={{ opacity: 0.6 }} /> (or any opacity or color) instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)
     */
    light: import_prop_types37.default.bool,
    /**
     * The component orientation.
     * @default 'horizontal'
     */
    orientation: import_prop_types37.default.oneOf(["horizontal", "vertical"]),
    /**
     * @ignore
     */
    role: import_prop_types37.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types37.default.oneOfType([import_prop_types37.default.arrayOf(import_prop_types37.default.oneOfType([import_prop_types37.default.func, import_prop_types37.default.object, import_prop_types37.default.bool])), import_prop_types37.default.func, import_prop_types37.default.object]),
    /**
     * The text alignment.
     * @default 'center'
     */
    textAlign: import_prop_types37.default.oneOf(["center", "left", "right"]),
    /**
     * The variant to use.
     * @default 'fullWidth'
     */
    variant: import_prop_types37.default.oneOfType([import_prop_types37.default.oneOf(["fullWidth", "inset", "middle"]), import_prop_types37.default.string])
  } : void 0;
  var Divider_default = Divider;

  // node_modules/@mui/material/ListItemIcon/ListItemIcon.js
  init_extends();
  var React69 = __toESM(require_react());
  var import_prop_types38 = __toESM(require_prop_types());

  // node_modules/@mui/material/ListItemIcon/listItemIconClasses.js
  function getListItemIconUtilityClass(slot) {
    return generateUtilityClass("MuiListItemIcon", slot);
  }
  var listItemIconClasses = generateUtilityClasses("MuiListItemIcon", ["root", "alignItemsFlexStart"]);
  var listItemIconClasses_default = listItemIconClasses;

  // node_modules/@mui/material/ListItemIcon/ListItemIcon.js
  var import_jsx_runtime40 = __toESM(require_jsx_runtime());
  var _excluded38 = ["className"];
  var useUtilityClasses15 = (ownerState) => {
    const {
      alignItems,
      classes
    } = ownerState;
    const slots = {
      root: ["root", alignItems === "flex-start" && "alignItemsFlexStart"]
    };
    return composeClasses(slots, getListItemIconUtilityClass, classes);
  };
  var ListItemIconRoot = styled_default2("div", {
    name: "MuiListItemIcon",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, ownerState.alignItems === "flex-start" && styles4.alignItemsFlexStart];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    minWidth: 56,
    color: (theme.vars || theme).palette.action.active,
    flexShrink: 0,
    display: "inline-flex"
  }, ownerState.alignItems === "flex-start" && {
    marginTop: 8
  }));
  var ListItemIcon = /* @__PURE__ */ React69.forwardRef(function ListItemIcon2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiListItemIcon"
    });
    const {
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded38);
    const context = React69.useContext(ListContext_default);
    const ownerState = _extends({}, props, {
      alignItems: context.alignItems
    });
    const classes = useUtilityClasses15(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(ListItemIconRoot, _extends({
      className: clsx_default(classes.root, className),
      ownerState,
      ref
    }, other));
  });
  true ? ListItemIcon.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component, normally `Icon`, `SvgIcon`,
     * or a `@mui/icons-material` SVG icon element.
     */
    children: import_prop_types38.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types38.default.object,
    /**
     * @ignore
     */
    className: import_prop_types38.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.func, import_prop_types38.default.object, import_prop_types38.default.bool])), import_prop_types38.default.func, import_prop_types38.default.object])
  } : void 0;
  var ListItemIcon_default = ListItemIcon;

  // node_modules/@mui/material/ListItemText/ListItemText.js
  init_extends();
  var React71 = __toESM(require_react());
  var import_prop_types40 = __toESM(require_prop_types());

  // node_modules/@mui/material/Typography/Typography.js
  init_extends();
  var React70 = __toESM(require_react());
  var import_prop_types39 = __toESM(require_prop_types());
  var import_styleFunctionSx7 = __toESM(require_styleFunctionSx2());

  // node_modules/@mui/material/Typography/typographyClasses.js
  function getTypographyUtilityClass(slot) {
    return generateUtilityClass("MuiTypography", slot);
  }
  var typographyClasses = generateUtilityClasses("MuiTypography", ["root", "h1", "h2", "h3", "h4", "h5", "h6", "subtitle1", "subtitle2", "body1", "body2", "inherit", "button", "caption", "overline", "alignLeft", "alignRight", "alignCenter", "alignJustify", "noWrap", "gutterBottom", "paragraph"]);

  // node_modules/@mui/material/Typography/Typography.js
  var import_jsx_runtime41 = __toESM(require_jsx_runtime());
  var _excluded39 = ["align", "className", "component", "gutterBottom", "noWrap", "paragraph", "variant", "variantMapping"];
  var useUtilityClasses16 = (ownerState) => {
    const {
      align,
      gutterBottom,
      noWrap,
      paragraph,
      variant,
      classes
    } = ownerState;
    const slots = {
      root: ["root", variant, ownerState.align !== "inherit" && `align${capitalize_default(align)}`, gutterBottom && "gutterBottom", noWrap && "noWrap", paragraph && "paragraph"]
    };
    return composeClasses(slots, getTypographyUtilityClass, classes);
  };
  var TypographyRoot = styled_default2("span", {
    name: "MuiTypography",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, ownerState.variant && styles4[ownerState.variant], ownerState.align !== "inherit" && styles4[`align${capitalize_default(ownerState.align)}`], ownerState.noWrap && styles4.noWrap, ownerState.gutterBottom && styles4.gutterBottom, ownerState.paragraph && styles4.paragraph];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    margin: 0
  }, ownerState.variant === "inherit" && {
    // Some elements, like <button> on Chrome have default font that doesn't inherit, reset this.
    font: "inherit"
  }, ownerState.variant !== "inherit" && theme.typography[ownerState.variant], ownerState.align !== "inherit" && {
    textAlign: ownerState.align
  }, ownerState.noWrap && {
    overflow: "hidden",
    textOverflow: "ellipsis",
    whiteSpace: "nowrap"
  }, ownerState.gutterBottom && {
    marginBottom: "0.35em"
  }, ownerState.paragraph && {
    marginBottom: 16
  }));
  var defaultVariantMapping = {
    h1: "h1",
    h2: "h2",
    h3: "h3",
    h4: "h4",
    h5: "h5",
    h6: "h6",
    subtitle1: "h6",
    subtitle2: "h6",
    body1: "p",
    body2: "p",
    inherit: "p"
  };
  var colorTransformations = {
    primary: "primary.main",
    textPrimary: "text.primary",
    secondary: "secondary.main",
    textSecondary: "text.secondary",
    error: "error.main"
  };
  var transformDeprecatedColors = (color2) => {
    return colorTransformations[color2] || color2;
  };
  var Typography = /* @__PURE__ */ React70.forwardRef(function Typography2(inProps, ref) {
    const themeProps = useDefaultProps2({
      props: inProps,
      name: "MuiTypography"
    });
    const color2 = transformDeprecatedColors(themeProps.color);
    const props = (0, import_styleFunctionSx7.extendSxProp)(_extends({}, themeProps, {
      color: color2
    }));
    const {
      align = "inherit",
      className,
      component,
      gutterBottom = false,
      noWrap = false,
      paragraph = false,
      variant = "body1",
      variantMapping = defaultVariantMapping
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded39);
    const ownerState = _extends({}, props, {
      align,
      color: color2,
      className,
      component,
      gutterBottom,
      noWrap,
      paragraph,
      variant,
      variantMapping
    });
    const Component = component || (paragraph ? "p" : variantMapping[variant] || defaultVariantMapping[variant]) || "span";
    const classes = useUtilityClasses16(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(TypographyRoot, _extends({
      as: Component,
      ref,
      ownerState,
      className: clsx_default(classes.root, className)
    }, other));
  });
  true ? Typography.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Set the text-align on the component.
     * @default 'inherit'
     */
    align: import_prop_types39.default.oneOf(["center", "inherit", "justify", "left", "right"]),
    /**
     * The content of the component.
     */
    children: import_prop_types39.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types39.default.object,
    /**
     * @ignore
     */
    className: import_prop_types39.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types39.default.elementType,
    /**
     * If `true`, the text will have a bottom margin.
     * @default false
     */
    gutterBottom: import_prop_types39.default.bool,
    /**
     * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.
     *
     * Note that text overflow can only happen with block or inline-block level elements
     * (the element needs to have a width in order to overflow).
     * @default false
     */
    noWrap: import_prop_types39.default.bool,
    /**
     * If `true`, the element will be a paragraph element.
     * @default false
     */
    paragraph: import_prop_types39.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types39.default.oneOfType([import_prop_types39.default.arrayOf(import_prop_types39.default.oneOfType([import_prop_types39.default.func, import_prop_types39.default.object, import_prop_types39.default.bool])), import_prop_types39.default.func, import_prop_types39.default.object]),
    /**
     * Applies the theme typography styles.
     * @default 'body1'
     */
    variant: import_prop_types39.default.oneOfType([import_prop_types39.default.oneOf(["body1", "body2", "button", "caption", "h1", "h2", "h3", "h4", "h5", "h6", "inherit", "overline", "subtitle1", "subtitle2"]), import_prop_types39.default.string]),
    /**
     * The component maps the variant prop to a range of different HTML element types.
     * For instance, subtitle1 to `<h6>`.
     * If you wish to change that mapping, you can provide your own.
     * Alternatively, you can use the `component` prop.
     * @default {
     *   h1: 'h1',
     *   h2: 'h2',
     *   h3: 'h3',
     *   h4: 'h4',
     *   h5: 'h5',
     *   h6: 'h6',
     *   subtitle1: 'h6',
     *   subtitle2: 'h6',
     *   body1: 'p',
     *   body2: 'p',
     *   inherit: 'p',
     * }
     */
    variantMapping: import_prop_types39.default.object
  } : void 0;
  var Typography_default = Typography;

  // node_modules/@mui/material/ListItemText/listItemTextClasses.js
  function getListItemTextUtilityClass(slot) {
    return generateUtilityClass("MuiListItemText", slot);
  }
  var listItemTextClasses = generateUtilityClasses("MuiListItemText", ["root", "multiline", "dense", "inset", "primary", "secondary"]);
  var listItemTextClasses_default = listItemTextClasses;

  // node_modules/@mui/material/ListItemText/ListItemText.js
  var import_jsx_runtime42 = __toESM(require_jsx_runtime());
  var import_jsx_runtime43 = __toESM(require_jsx_runtime());
  var _excluded40 = ["children", "className", "disableTypography", "inset", "primary", "primaryTypographyProps", "secondary", "secondaryTypographyProps"];
  var useUtilityClasses17 = (ownerState) => {
    const {
      classes,
      inset,
      primary,
      secondary,
      dense
    } = ownerState;
    const slots = {
      root: ["root", inset && "inset", dense && "dense", primary && secondary && "multiline"],
      primary: ["primary"],
      secondary: ["secondary"]
    };
    return composeClasses(slots, getListItemTextUtilityClass, classes);
  };
  var ListItemTextRoot = styled_default2("div", {
    name: "MuiListItemText",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${listItemTextClasses_default.primary}`]: styles4.primary
      }, {
        [`& .${listItemTextClasses_default.secondary}`]: styles4.secondary
      }, styles4.root, ownerState.inset && styles4.inset, ownerState.primary && ownerState.secondary && styles4.multiline, ownerState.dense && styles4.dense];
    }
  })(({
    ownerState
  }) => _extends({
    flex: "1 1 auto",
    minWidth: 0,
    marginTop: 4,
    marginBottom: 4
  }, ownerState.primary && ownerState.secondary && {
    marginTop: 6,
    marginBottom: 6
  }, ownerState.inset && {
    paddingLeft: 56
  }));
  var ListItemText = /* @__PURE__ */ React71.forwardRef(function ListItemText2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiListItemText"
    });
    const {
      children,
      className,
      disableTypography = false,
      inset = false,
      primary: primaryProp,
      primaryTypographyProps,
      secondary: secondaryProp,
      secondaryTypographyProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded40);
    const {
      dense
    } = React71.useContext(ListContext_default);
    let primary = primaryProp != null ? primaryProp : children;
    let secondary = secondaryProp;
    const ownerState = _extends({}, props, {
      disableTypography,
      inset,
      primary: !!primary,
      secondary: !!secondary,
      dense
    });
    const classes = useUtilityClasses17(ownerState);
    if (primary != null && primary.type !== Typography_default && !disableTypography) {
      primary = /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(Typography_default, _extends({
        variant: dense ? "body2" : "body1",
        className: classes.primary,
        component: primaryTypographyProps != null && primaryTypographyProps.variant ? void 0 : "span",
        display: "block"
      }, primaryTypographyProps, {
        children: primary
      }));
    }
    if (secondary != null && secondary.type !== Typography_default && !disableTypography) {
      secondary = /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(Typography_default, _extends({
        variant: "body2",
        className: classes.secondary,
        color: "text.secondary",
        display: "block"
      }, secondaryTypographyProps, {
        children: secondary
      }));
    }
    return /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)(ListItemTextRoot, _extends({
      className: clsx_default(classes.root, className),
      ownerState,
      ref
    }, other, {
      children: [primary, secondary]
    }));
  });
  true ? ListItemText.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Alias for the `primary` prop.
     */
    children: import_prop_types40.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types40.default.object,
    /**
     * @ignore
     */
    className: import_prop_types40.default.string,
    /**
     * If `true`, the children won't be wrapped by a Typography component.
     * This can be useful to render an alternative Typography variant by wrapping
     * the `children` (or `primary`) text, and optional `secondary` text
     * with the Typography component.
     * @default false
     */
    disableTypography: import_prop_types40.default.bool,
    /**
     * If `true`, the children are indented.
     * This should be used if there is no left avatar or left icon.
     * @default false
     */
    inset: import_prop_types40.default.bool,
    /**
     * The main content element.
     */
    primary: import_prop_types40.default.node,
    /**
     * These props will be forwarded to the primary typography component
     * (as long as disableTypography is not `true`).
     */
    primaryTypographyProps: import_prop_types40.default.object,
    /**
     * The secondary content element.
     */
    secondary: import_prop_types40.default.node,
    /**
     * These props will be forwarded to the secondary typography component
     * (as long as disableTypography is not `true`).
     */
    secondaryTypographyProps: import_prop_types40.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types40.default.oneOfType([import_prop_types40.default.arrayOf(import_prop_types40.default.oneOfType([import_prop_types40.default.func, import_prop_types40.default.object, import_prop_types40.default.bool])), import_prop_types40.default.func, import_prop_types40.default.object])
  } : void 0;
  var ListItemText_default = ListItemText;

  // node_modules/@mui/material/MenuItem/menuItemClasses.js
  function getMenuItemUtilityClass(slot) {
    return generateUtilityClass("MuiMenuItem", slot);
  }
  var menuItemClasses = generateUtilityClasses("MuiMenuItem", ["root", "focusVisible", "dense", "disabled", "divider", "gutters", "selected"]);
  var menuItemClasses_default = menuItemClasses;

  // node_modules/@mui/material/MenuItem/MenuItem.js
  var import_jsx_runtime44 = __toESM(require_jsx_runtime());
  var _excluded41 = ["autoFocus", "component", "dense", "divider", "disableGutters", "focusVisibleClassName", "role", "tabIndex", "className"];
  var overridesResolver = (props, styles4) => {
    const {
      ownerState
    } = props;
    return [styles4.root, ownerState.dense && styles4.dense, ownerState.divider && styles4.divider, !ownerState.disableGutters && styles4.gutters];
  };
  var useUtilityClasses18 = (ownerState) => {
    const {
      disabled,
      dense,
      divider,
      disableGutters,
      selected,
      classes
    } = ownerState;
    const slots = {
      root: ["root", dense && "dense", disabled && "disabled", !disableGutters && "gutters", divider && "divider", selected && "selected"]
    };
    const composedClasses = composeClasses(slots, getMenuItemUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  var MenuItemRoot = styled_default2(ButtonBase_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    name: "MuiMenuItem",
    slot: "Root",
    overridesResolver
  })(({
    theme,
    ownerState
  }) => _extends({}, theme.typography.body1, {
    display: "flex",
    justifyContent: "flex-start",
    alignItems: "center",
    position: "relative",
    textDecoration: "none",
    minHeight: 48,
    paddingTop: 6,
    paddingBottom: 6,
    boxSizing: "border-box",
    whiteSpace: "nowrap"
  }, !ownerState.disableGutters && {
    paddingLeft: 16,
    paddingRight: 16
  }, ownerState.divider && {
    borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`,
    backgroundClip: "padding-box"
  }, {
    "&:hover": {
      textDecoration: "none",
      backgroundColor: (theme.vars || theme).palette.action.hover,
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    },
    [`&.${menuItemClasses_default.selected}`]: {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : (0, import_colorManipulator4.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity),
      [`&.${menuItemClasses_default.focusVisible}`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : (0, import_colorManipulator4.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
      }
    },
    [`&.${menuItemClasses_default.selected}:hover`]: {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : (0, import_colorManipulator4.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : (0, import_colorManipulator4.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity)
      }
    },
    [`&.${menuItemClasses_default.focusVisible}`]: {
      backgroundColor: (theme.vars || theme).palette.action.focus
    },
    [`&.${menuItemClasses_default.disabled}`]: {
      opacity: (theme.vars || theme).palette.action.disabledOpacity
    },
    [`& + .${dividerClasses_default.root}`]: {
      marginTop: theme.spacing(1),
      marginBottom: theme.spacing(1)
    },
    [`& + .${dividerClasses_default.inset}`]: {
      marginLeft: 52
    },
    [`& .${listItemTextClasses_default.root}`]: {
      marginTop: 0,
      marginBottom: 0
    },
    [`& .${listItemTextClasses_default.inset}`]: {
      paddingLeft: 36
    },
    [`& .${listItemIconClasses_default.root}`]: {
      minWidth: 36
    }
  }, !ownerState.dense && {
    [theme.breakpoints.up("sm")]: {
      minHeight: "auto"
    }
  }, ownerState.dense && _extends({
    minHeight: 32,
    // https://m2.material.io/components/menus#specs > Dense
    paddingTop: 4,
    paddingBottom: 4
  }, theme.typography.body2, {
    [`& .${listItemIconClasses_default.root} svg`]: {
      fontSize: "1.25rem"
    }
  })));
  var MenuItem = /* @__PURE__ */ React72.forwardRef(function MenuItem2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiMenuItem"
    });
    const {
      autoFocus = false,
      component = "li",
      dense = false,
      divider = false,
      disableGutters = false,
      focusVisibleClassName,
      role = "menuitem",
      tabIndex: tabIndexProp,
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded41);
    const context = React72.useContext(ListContext_default);
    const childContext = React72.useMemo(() => ({
      dense: dense || context.dense || false,
      disableGutters
    }), [context.dense, dense, disableGutters]);
    const menuItemRef = React72.useRef(null);
    useEnhancedEffect_default2(() => {
      if (autoFocus) {
        if (menuItemRef.current) {
          menuItemRef.current.focus();
        } else if (true) {
          console.error("MUI: Unable to set focus to a MenuItem whose component has not been rendered.");
        }
      }
    }, [autoFocus]);
    const ownerState = _extends({}, props, {
      dense: childContext.dense,
      divider,
      disableGutters
    });
    const classes = useUtilityClasses18(props);
    const handleRef = useForkRef_default(menuItemRef, ref);
    let tabIndex;
    if (!props.disabled) {
      tabIndex = tabIndexProp !== void 0 ? tabIndexProp : -1;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(ListContext_default.Provider, {
      value: childContext,
      children: /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(MenuItemRoot, _extends({
        ref: handleRef,
        role,
        tabIndex,
        component,
        focusVisibleClassName: clsx_default(classes.focusVisible, focusVisibleClassName),
        className: clsx_default(classes.root, className)
      }, other, {
        ownerState,
        classes
      }))
    });
  });
  true ? MenuItem.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * If `true`, the list item is focused during the first mount.
     * Focus will also be triggered if the value changes from false to true.
     * @default false
     */
    autoFocus: import_prop_types41.default.bool,
    /**
     * The content of the component.
     */
    children: import_prop_types41.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types41.default.object,
    /**
     * @ignore
     */
    className: import_prop_types41.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types41.default.elementType,
    /**
     * If `true`, compact vertical padding designed for keyboard and mouse input is used.
     * The prop defaults to the value inherited from the parent Menu component.
     * @default false
     */
    dense: import_prop_types41.default.bool,
    /**
     * @ignore
     */
    disabled: import_prop_types41.default.bool,
    /**
     * If `true`, the left and right padding is removed.
     * @default false
     */
    disableGutters: import_prop_types41.default.bool,
    /**
     * If `true`, a 1px light border is added to the bottom of the menu item.
     * @default false
     */
    divider: import_prop_types41.default.bool,
    /**
     * This prop can help identify which element has keyboard focus.
     * The class name will be applied when the element gains the focus through keyboard interaction.
     * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
     * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
     * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
     * if needed.
     */
    focusVisibleClassName: import_prop_types41.default.string,
    /**
     * @ignore
     */
    role: import_prop_types41.default.string,
    /**
     * If `true`, the component is selected.
     * @default false
     */
    selected: import_prop_types41.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types41.default.oneOfType([import_prop_types41.default.arrayOf(import_prop_types41.default.oneOfType([import_prop_types41.default.func, import_prop_types41.default.object, import_prop_types41.default.bool])), import_prop_types41.default.func, import_prop_types41.default.object]),
    /**
     * @default 0
     */
    tabIndex: import_prop_types41.default.number
  } : void 0;
  var MenuItem_default = MenuItem;

  // node_modules/@mui/x-data-grid/components/cell/GridActionsCellItem.js
  var import_jsx_runtime45 = __toESM(require_jsx_runtime());
  var import_jsx_runtime46 = __toESM(require_jsx_runtime());
  var _excluded43 = ["label", "icon", "showInMenu", "onClick"];
  var _excluded210 = ["label", "icon", "showInMenu", "onClick", "closeMenuOnClick", "closeMenu"];
  var GridActionsCellItem = /* @__PURE__ */ React73.forwardRef((props, ref) => {
    const rootProps = useGridRootProps();
    if (!props.showInMenu) {
      var _rootProps$slotProps;
      const {
        label: label2,
        icon: icon2,
        onClick: onClick2
      } = props, other2 = _objectWithoutPropertiesLoose(props, _excluded43);
      const handleClick2 = (event) => {
        onClick2 == null || onClick2(event);
      };
      return /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(rootProps.slots.baseIconButton, _extends({
        ref,
        size: "small",
        role: "menuitem",
        "aria-label": label2
      }, other2, {
        onClick: handleClick2
      }, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseIconButton, {
        children: /* @__PURE__ */ React73.cloneElement(icon2, {
          fontSize: "small"
        })
      }));
    }
    const {
      label,
      icon,
      onClick,
      closeMenuOnClick = true,
      closeMenu
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded210);
    const handleClick = (event) => {
      onClick == null || onClick(event);
      if (closeMenuOnClick) {
        closeMenu == null || closeMenu();
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)(MenuItem_default, _extends({
      ref
    }, other, {
      onClick: handleClick,
      children: [icon && /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(ListItemIcon_default, {
        children: icon
      }), label]
    }));
  });
  true ? GridActionsCellItem.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * from https://mui.com/material-ui/api/button-base/#ButtonBase-prop-component
     */
    component: import_prop_types42.default.elementType,
    icon: import_prop_types42.default.element,
    label: import_prop_types42.default.string.isRequired,
    showInMenu: import_prop_types42.default.bool
  } : void 0;

  // node_modules/@mui/x-data-grid/components/cell/GridSkeletonCell.js
  init_extends();
  var React75 = __toESM(require_react());
  var import_prop_types44 = __toESM(require_prop_types());

  // node_modules/@mui/material/Skeleton/Skeleton.js
  init_extends();
  var React74 = __toESM(require_react());
  var import_prop_types43 = __toESM(require_prop_types());

  // node_modules/@mui/material/Skeleton/skeletonClasses.js
  function getSkeletonUtilityClass(slot) {
    return generateUtilityClass("MuiSkeleton", slot);
  }
  var skeletonClasses = generateUtilityClasses("MuiSkeleton", ["root", "text", "rectangular", "rounded", "circular", "pulse", "wave", "withChildren", "fitContent", "heightAuto"]);

  // node_modules/@mui/material/Skeleton/Skeleton.js
  var import_jsx_runtime47 = __toESM(require_jsx_runtime());
  var _excluded44 = ["animation", "className", "component", "height", "style", "variant", "width"];
  var _2 = (t) => t;
  var _t5;
  var _t22;
  var _t32;
  var _t42;
  var useUtilityClasses19 = (ownerState) => {
    const {
      classes,
      variant,
      animation,
      hasChildren,
      width: width2,
      height: height2
    } = ownerState;
    const slots = {
      root: ["root", variant, animation, hasChildren && "withChildren", hasChildren && !width2 && "fitContent", hasChildren && !height2 && "heightAuto"]
    };
    return composeClasses(slots, getSkeletonUtilityClass, classes);
  };
  var pulseKeyframe = (0, import_styled_engine5.keyframes)(_t5 || (_t5 = _2`
  0% {
    opacity: 1;
  }

  50% {
    opacity: 0.4;
  }

  100% {
    opacity: 1;
  }
`));
  var waveKeyframe = (0, import_styled_engine5.keyframes)(_t22 || (_t22 = _2`
  0% {
    transform: translateX(-100%);
  }

  50% {
    /* +0.5s of delay between each loop */
    transform: translateX(100%);
  }

  100% {
    transform: translateX(100%);
  }
`));
  var SkeletonRoot = styled_default2("span", {
    name: "MuiSkeleton",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, styles4[ownerState.variant], ownerState.animation !== false && styles4[ownerState.animation], ownerState.hasChildren && styles4.withChildren, ownerState.hasChildren && !ownerState.width && styles4.fitContent, ownerState.hasChildren && !ownerState.height && styles4.heightAuto];
    }
  })(({
    theme,
    ownerState
  }) => {
    const radiusUnit = getUnit(theme.shape.borderRadius) || "px";
    const radiusValue = toUnitless(theme.shape.borderRadius);
    return _extends({
      display: "block",
      // Create a "on paper" color with sufficient contrast retaining the color
      backgroundColor: theme.vars ? theme.vars.palette.Skeleton.bg : alpha(theme.palette.text.primary, theme.palette.mode === "light" ? 0.11 : 0.13),
      height: "1.2em"
    }, ownerState.variant === "text" && {
      marginTop: 0,
      marginBottom: 0,
      height: "auto",
      transformOrigin: "0 55%",
      transform: "scale(1, 0.60)",
      borderRadius: `${radiusValue}${radiusUnit}/${Math.round(radiusValue / 0.6 * 10) / 10}${radiusUnit}`,
      "&:empty:before": {
        content: '"\\00a0"'
      }
    }, ownerState.variant === "circular" && {
      borderRadius: "50%"
    }, ownerState.variant === "rounded" && {
      borderRadius: (theme.vars || theme).shape.borderRadius
    }, ownerState.hasChildren && {
      "& > *": {
        visibility: "hidden"
      }
    }, ownerState.hasChildren && !ownerState.width && {
      maxWidth: "fit-content"
    }, ownerState.hasChildren && !ownerState.height && {
      height: "auto"
    });
  }, ({
    ownerState
  }) => ownerState.animation === "pulse" && (0, import_styled_engine5.css)(_t32 || (_t32 = _2`
      animation: ${0} 2s ease-in-out 0.5s infinite;
    `), pulseKeyframe), ({
    ownerState,
    theme
  }) => ownerState.animation === "wave" && (0, import_styled_engine5.css)(_t42 || (_t42 = _2`
      position: relative;
      overflow: hidden;

      /* Fix bug in Safari https://bugs.webkit.org/show_bug.cgi?id=68196 */
      -webkit-mask-image: -webkit-radial-gradient(white, black);

      &::after {
        animation: ${0} 2s linear 0.5s infinite;
        background: linear-gradient(
          90deg,
          transparent,
          ${0},
          transparent
        );
        content: '';
        position: absolute;
        transform: translateX(-100%); /* Avoid flash during server-side hydration */
        bottom: 0;
        left: 0;
        right: 0;
        top: 0;
      }
    `), waveKeyframe, (theme.vars || theme).palette.action.hover));
  var Skeleton = /* @__PURE__ */ React74.forwardRef(function Skeleton2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiSkeleton"
    });
    const {
      animation = "pulse",
      className,
      component = "span",
      height: height2,
      style: style4,
      variant = "text",
      width: width2
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded44);
    const ownerState = _extends({}, props, {
      animation,
      component,
      variant,
      hasChildren: Boolean(other.children)
    });
    const classes = useUtilityClasses19(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(SkeletonRoot, _extends({
      as: component,
      ref,
      className: clsx_default(classes.root, className),
      ownerState
    }, other, {
      style: _extends({
        width: width2,
        height: height2
      }, style4)
    }));
  });
  true ? Skeleton.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The animation.
     * If `false` the animation effect is disabled.
     * @default 'pulse'
     */
    animation: import_prop_types43.default.oneOf(["pulse", "wave", false]),
    /**
     * Optional children to infer width and height from.
     */
    children: import_prop_types43.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types43.default.object,
    /**
     * @ignore
     */
    className: import_prop_types43.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types43.default.elementType,
    /**
     * Height of the skeleton.
     * Useful when you don't want to adapt the skeleton to a text element but for instance a card.
     */
    height: import_prop_types43.default.oneOfType([import_prop_types43.default.number, import_prop_types43.default.string]),
    /**
     * @ignore
     */
    style: import_prop_types43.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types43.default.oneOfType([import_prop_types43.default.arrayOf(import_prop_types43.default.oneOfType([import_prop_types43.default.func, import_prop_types43.default.object, import_prop_types43.default.bool])), import_prop_types43.default.func, import_prop_types43.default.object]),
    /**
     * The type of content that will be rendered.
     * @default 'text'
     */
    variant: import_prop_types43.default.oneOfType([import_prop_types43.default.oneOf(["circular", "rectangular", "rounded", "text"]), import_prop_types43.default.string]),
    /**
     * Width of the skeleton.
     * Useful when the skeleton is inside an inline element with no width of its own.
     */
    width: import_prop_types43.default.oneOfType([import_prop_types43.default.number, import_prop_types43.default.string])
  } : void 0;
  var Skeleton_default = Skeleton;

  // node_modules/@mui/x-data-grid/components/cell/GridSkeletonCell.js
  var import_jsx_runtime48 = __toESM(require_jsx_runtime());
  var _excluded45 = ["field", "align", "width", "contentWidth"];
  var useUtilityClasses20 = (ownerState) => {
    const {
      align,
      classes
    } = ownerState;
    const slots = {
      root: ["cell", "cellSkeleton", `cell--text${capitalize(align)}`, "withBorderColor"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  function GridSkeletonCell(props) {
    const {
      align,
      width: width2,
      contentWidth
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded45);
    const rootProps = useGridRootProps();
    const ownerState = {
      classes: rootProps.classes,
      align
    };
    const classes = useUtilityClasses20(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("div", _extends({
      className: classes.root,
      style: {
        width: width2
      }
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(Skeleton_default, {
        width: `${contentWidth}%`
      })
    }));
  }
  true ? GridSkeletonCell.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    align: import_prop_types44.default.string.isRequired,
    contentWidth: import_prop_types44.default.number.isRequired,
    field: import_prop_types44.default.string.isRequired,
    width: import_prop_types44.default.number.isRequired
  } : void 0;

  // node_modules/@mui/x-data-grid/components/containers/GridRoot.js
  init_extends();
  var React76 = __toESM(require_react());
  var import_prop_types45 = __toESM(require_prop_types());

  // node_modules/@mui/x-data-grid/components/containers/GridRootStyles.js
  init_extends();
  function getBorderColor(theme) {
    if (theme.vars) {
      return theme.vars.palette.TableCell.border;
    }
    if (theme.palette.mode === "light") {
      return lighten(alpha(theme.palette.divider, 1), 0.88);
    }
    return darken(alpha(theme.palette.divider, 1), 0.68);
  }
  var columnHeadersStyles = {
    [`.${gridClasses.columnSeparator}, .${gridClasses["columnSeparator--resizing"]}`]: {
      visibility: "visible",
      width: "auto"
    }
  };
  var columnHeaderStyles = {
    [`& .${gridClasses.iconButtonContainer}`]: {
      visibility: "visible",
      width: "auto"
    },
    [`& .${gridClasses.menuIcon}`]: {
      width: "auto",
      visibility: "visible"
    }
  };
  var GridRootStyles = styled_default2("div", {
    name: "MuiDataGrid",
    slot: "Root",
    overridesResolver: (props, styles4) => [
      {
        [`&.${gridClasses.autoHeight}`]: styles4.autoHeight
      },
      {
        [`&.${gridClasses.aggregationColumnHeader}`]: styles4.aggregationColumnHeader
      },
      {
        [`&.${gridClasses["aggregationColumnHeader--alignLeft"]}`]: styles4["aggregationColumnHeader--alignLeft"]
      },
      {
        [`&.${gridClasses["aggregationColumnHeader--alignCenter"]}`]: styles4["aggregationColumnHeader--alignCenter"]
      },
      {
        [`&.${gridClasses["aggregationColumnHeader--alignRight"]}`]: styles4["aggregationColumnHeader--alignRight"]
      },
      {
        [`&.${gridClasses.aggregationColumnHeaderLabel}`]: styles4.aggregationColumnHeaderLabel
      },
      {
        [`&.${gridClasses["root--disableUserSelection"]} .${gridClasses.cell}`]: styles4["root--disableUserSelection"]
      },
      {
        [`&.${gridClasses.autosizing}`]: styles4.autosizing
      },
      {
        [`& .${gridClasses.editBooleanCell}`]: styles4.editBooleanCell
      },
      {
        [`& .${gridClasses["cell--editing"]}`]: styles4["cell--editing"]
      },
      {
        [`& .${gridClasses["cell--textCenter"]}`]: styles4["cell--textCenter"]
      },
      {
        [`& .${gridClasses["cell--textLeft"]}`]: styles4["cell--textLeft"]
      },
      {
        [`& .${gridClasses["cell--textRight"]}`]: styles4["cell--textRight"]
      },
      // TODO v6: Remove
      {
        [`& .${gridClasses["cell--withRenderer"]}`]: styles4["cell--withRenderer"]
      },
      {
        [`& .${gridClasses.cell}`]: styles4.cell
      },
      {
        [`& .${gridClasses["cell--rangeTop"]}`]: styles4["cell--rangeTop"]
      },
      {
        [`& .${gridClasses["cell--rangeBottom"]}`]: styles4["cell--rangeBottom"]
      },
      {
        [`& .${gridClasses["cell--rangeLeft"]}`]: styles4["cell--rangeLeft"]
      },
      {
        [`& .${gridClasses["cell--rangeRight"]}`]: styles4["cell--rangeRight"]
      },
      {
        [`& .${gridClasses["cell--withRightBorder"]}`]: styles4["cell--withRightBorder"]
      },
      {
        [`& .${gridClasses.cellContent}`]: styles4.cellContent
      },
      {
        [`& .${gridClasses.cellCheckbox}`]: styles4.cellCheckbox
      },
      {
        [`& .${gridClasses.cellSkeleton}`]: styles4.cellSkeleton
      },
      {
        [`& .${gridClasses.checkboxInput}`]: styles4.checkboxInput
      },
      {
        [`& .${gridClasses["columnHeader--alignCenter"]}`]: styles4["columnHeader--alignCenter"]
      },
      {
        [`& .${gridClasses["columnHeader--alignLeft"]}`]: styles4["columnHeader--alignLeft"]
      },
      {
        [`& .${gridClasses["columnHeader--alignRight"]}`]: styles4["columnHeader--alignRight"]
      },
      {
        [`& .${gridClasses["columnHeader--dragging"]}`]: styles4["columnHeader--dragging"]
      },
      {
        [`& .${gridClasses["columnHeader--moving"]}`]: styles4["columnHeader--moving"]
      },
      {
        [`& .${gridClasses["columnHeader--numeric"]}`]: styles4["columnHeader--numeric"]
      },
      {
        [`& .${gridClasses["columnHeader--sortable"]}`]: styles4["columnHeader--sortable"]
      },
      {
        [`& .${gridClasses["columnHeader--sorted"]}`]: styles4["columnHeader--sorted"]
      },
      {
        [`& .${gridClasses["columnHeader--withRightBorder"]}`]: styles4["columnHeader--withRightBorder"]
      },
      {
        [`& .${gridClasses.columnHeader}`]: styles4.columnHeader
      },
      {
        [`& .${gridClasses.headerFilterRow}`]: styles4.headerFilterRow
      },
      {
        [`& .${gridClasses.columnHeaderCheckbox}`]: styles4.columnHeaderCheckbox
      },
      {
        [`& .${gridClasses.columnHeaderDraggableContainer}`]: styles4.columnHeaderDraggableContainer
      },
      {
        [`& .${gridClasses.columnHeaderTitleContainer}`]: styles4.columnHeaderTitleContainer
      },
      {
        [`& .${gridClasses["columnSeparator--resizable"]}`]: styles4["columnSeparator--resizable"]
      },
      {
        [`& .${gridClasses["columnSeparator--resizing"]}`]: styles4["columnSeparator--resizing"]
      },
      {
        [`& .${gridClasses.columnSeparator}`]: styles4.columnSeparator
      },
      {
        [`& .${gridClasses.filterIcon}`]: styles4.filterIcon
      },
      {
        [`& .${gridClasses.iconSeparator}`]: styles4.iconSeparator
      },
      {
        [`& .${gridClasses.menuIcon}`]: styles4.menuIcon
      },
      {
        [`& .${gridClasses.menuIconButton}`]: styles4.menuIconButton
      },
      {
        [`& .${gridClasses.menuOpen}`]: styles4.menuOpen
      },
      {
        [`& .${gridClasses.menuList}`]: styles4.menuList
      },
      {
        [`& .${gridClasses["row--editable"]}`]: styles4["row--editable"]
      },
      {
        [`& .${gridClasses["row--editing"]}`]: styles4["row--editing"]
      },
      {
        [`& .${gridClasses["row--dragging"]}`]: styles4["row--dragging"]
      },
      {
        [`& .${gridClasses.row}`]: styles4.row
      },
      {
        [`& .${gridClasses.rowReorderCellPlaceholder}`]: styles4.rowReorderCellPlaceholder
      },
      {
        [`& .${gridClasses.rowReorderCell}`]: styles4.rowReorderCell
      },
      {
        [`& .${gridClasses["rowReorderCell--draggable"]}`]: styles4["rowReorderCell--draggable"]
      },
      {
        [`& .${gridClasses.sortIcon}`]: styles4.sortIcon
      },
      {
        [`& .${gridClasses.withBorderColor}`]: styles4.withBorderColor
      },
      {
        [`& .${gridClasses.treeDataGroupingCell}`]: styles4.treeDataGroupingCell
      },
      {
        [`& .${gridClasses.treeDataGroupingCellToggle}`]: styles4.treeDataGroupingCellToggle
      },
      {
        [`& .${gridClasses.detailPanelToggleCell}`]: styles4.detailPanelToggleCell
      },
      {
        [`& .${gridClasses["detailPanelToggleCell--expanded"]}`]: styles4["detailPanelToggleCell--expanded"]
      },
      styles4.root
    ]
  })(({
    theme
  }) => {
    const borderColor2 = getBorderColor(theme);
    const radius = theme.shape.borderRadius;
    const gridStyle = _extends({
      "--unstable_DataGrid-radius": typeof radius === "number" ? `${radius}px` : radius,
      "--unstable_DataGrid-headWeight": theme.typography.fontWeightMedium,
      "--unstable_DataGrid-overlayBackground": theme.vars ? `rgba(${theme.vars.palette.background.defaultChannel} / ${theme.vars.palette.action.disabledOpacity})` : alpha(theme.palette.background.default, theme.palette.action.disabledOpacity),
      "--DataGrid-cellOffsetMultiplier": 2,
      flex: 1,
      boxSizing: "border-box",
      position: "relative",
      borderWidth: "1px",
      borderStyle: "solid",
      borderColor: borderColor2,
      borderRadius: "var(--unstable_DataGrid-radius)",
      color: (theme.vars || theme).palette.text.primary
    }, theme.typography.body2, {
      outline: "none",
      height: "100%",
      display: "flex",
      minWidth: 0,
      // See https://github.com/mui/mui-x/issues/8547
      minHeight: 0,
      flexDirection: "column",
      overflowAnchor: "none",
      // Keep the same scrolling position
      [`&.${gridClasses.autoHeight}`]: {
        height: "auto",
        [`& .${gridClasses["row--lastVisible"]} .${gridClasses.cell}`]: {
          borderBottomColor: "transparent"
        }
      },
      [`&.${gridClasses.autosizing}`]: {
        [`& .${gridClasses.columnHeaderTitleContainerContent} > *`]: {
          overflow: "visible !important"
        },
        [`& .${gridClasses.cell} > *`]: {
          overflow: "visible !important",
          whiteSpace: "nowrap"
        },
        [`& .${gridClasses.groupingCriteriaCell}`]: {
          width: "unset"
        },
        [`& .${gridClasses.treeDataGroupingCell}`]: {
          width: "unset"
        }
      },
      [`& .${gridClasses["virtualScrollerContent--overflowed"]} .${gridClasses["row--lastVisible"]} .${gridClasses.cell}`]: {
        borderBottomColor: "transparent"
      },
      [`& .${gridClasses.columnHeader}, & .${gridClasses.cell}`]: {
        WebkitTapHighlightColor: "transparent",
        lineHeight: null,
        padding: "0 10px",
        boxSizing: "border-box"
      },
      [`& .${gridClasses.columnHeader}:focus-within, & .${gridClasses.cell}:focus-within`]: {
        outline: `solid ${theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / 0.5)` : alpha(theme.palette.primary.main, 0.5)} 1px`,
        outlineWidth: 1,
        outlineOffset: -1
      },
      [`& .${gridClasses.columnHeader}:focus, & .${gridClasses.cell}:focus`]: {
        outline: `solid ${theme.palette.primary.main} 1px`
      },
      [`& .${gridClasses.columnHeaderCheckbox}, & .${gridClasses.cellCheckbox}`]: {
        padding: 0,
        justifyContent: "center",
        alignItems: "center"
      },
      [`& .${gridClasses.columnHeader}`]: {
        position: "relative",
        display: "flex",
        alignItems: "center"
      },
      [`& .${gridClasses["columnHeader--sorted"]} .${gridClasses.iconButtonContainer}, & .${gridClasses["columnHeader--filtered"]} .${gridClasses.iconButtonContainer}`]: {
        visibility: "visible",
        width: "auto"
      },
      [`& .${gridClasses.columnHeader}:not(.${gridClasses["columnHeader--sorted"]}) .${gridClasses.sortIcon}`]: {
        opacity: 0,
        transition: theme.transitions.create(["opacity"], {
          duration: theme.transitions.duration.shorter
        })
      },
      [`& .${gridClasses.columnHeaderTitleContainer}`]: {
        display: "flex",
        alignItems: "center",
        minWidth: 0,
        flex: 1,
        whiteSpace: "nowrap",
        overflow: "hidden",
        // to anchor the aggregation label
        position: "relative"
      },
      [`& .${gridClasses.columnHeaderTitleContainerContent}`]: {
        overflow: "hidden",
        display: "flex",
        alignItems: "center"
      },
      [`& .${gridClasses["columnHeader--filledGroup"]} .${gridClasses.columnHeaderTitleContainer}`]: {
        borderBottomWidth: "1px",
        borderBottomStyle: "solid",
        boxSizing: "border-box"
      },
      [`& .${gridClasses["columnHeader--filledGroup"]}.${gridClasses["columnHeader--showColumnBorder"]} .${gridClasses.columnHeaderTitleContainer}`]: {
        borderBottom: `none`
      },
      [`& .${gridClasses["columnHeader--filledGroup"]}.${gridClasses["columnHeader--showColumnBorder"]}`]: {
        borderBottomWidth: "1px",
        borderBottomStyle: "solid",
        boxSizing: "border-box"
      },
      [`& .${gridClasses.headerFilterRow}`]: {
        borderTop: `1px solid ${borderColor2}`
      },
      [`& .${gridClasses.sortIcon}, & .${gridClasses.filterIcon}`]: {
        fontSize: "inherit"
      },
      [`& .${gridClasses["columnHeader--sortable"]}`]: {
        cursor: "pointer"
      },
      [`& .${gridClasses["columnHeader--alignCenter"]} .${gridClasses.columnHeaderTitleContainer}`]: {
        justifyContent: "center"
      },
      [`& .${gridClasses["columnHeader--alignRight"]} .${gridClasses.columnHeaderDraggableContainer}, & .${gridClasses["columnHeader--alignRight"]} .${gridClasses.columnHeaderTitleContainer}`]: {
        flexDirection: "row-reverse"
      },
      [`& .${gridClasses["columnHeader--alignCenter"]} .${gridClasses.menuIcon}, & .${gridClasses["columnHeader--alignRight"]} .${gridClasses.menuIcon}`]: {
        marginRight: "auto",
        marginLeft: -6
      },
      [`& .${gridClasses["columnHeader--alignRight"]} .${gridClasses.menuIcon}, & .${gridClasses["columnHeader--alignRight"]} .${gridClasses.menuIcon}`]: {
        marginRight: "auto",
        marginLeft: -10
      },
      [`& .${gridClasses["columnHeader--moving"]}`]: {
        backgroundColor: (theme.vars || theme).palette.action.hover
      },
      [`& .${gridClasses.columnSeparator}`]: {
        visibility: "hidden",
        position: "absolute",
        zIndex: 100,
        display: "flex",
        flexDirection: "column",
        justifyContent: "center",
        color: borderColor2
      },
      "@media (hover: hover)": {
        [`& .${gridClasses.columnHeaders}:hover`]: columnHeadersStyles,
        [`& .${gridClasses.columnHeader}:hover`]: columnHeaderStyles,
        [`& .${gridClasses.columnHeader}:not(.${gridClasses["columnHeader--sorted"]}):hover .${gridClasses.sortIcon}`]: {
          opacity: 0.5
        }
      },
      "@media (hover: none)": {
        [`& .${gridClasses.columnHeaders}`]: columnHeadersStyles,
        [`& .${gridClasses.columnHeader}`]: columnHeaderStyles
      },
      [`& .${gridClasses["columnSeparator--sideLeft"]}`]: {
        left: -12
      },
      [`& .${gridClasses["columnSeparator--sideRight"]}`]: {
        right: -12
      },
      [`& .${gridClasses["columnSeparator--resizable"]}`]: {
        cursor: "col-resize",
        touchAction: "none",
        "&:hover": {
          color: (theme.vars || theme).palette.text.primary,
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            color: borderColor2
          }
        },
        [`&.${gridClasses["columnSeparator--resizing"]}`]: {
          color: (theme.vars || theme).palette.text.primary
        },
        "& svg": {
          pointerEvents: "none"
        }
      },
      [`& .${gridClasses.iconSeparator}`]: {
        color: "inherit"
      },
      [`& .${gridClasses.menuIcon}`]: {
        width: 0,
        visibility: "hidden",
        fontSize: 20,
        marginRight: -10,
        display: "flex",
        alignItems: "center"
      },
      [`.${gridClasses.menuOpen}`]: {
        visibility: "visible",
        width: "auto"
      },
      [`& .${gridClasses.row}`]: {
        display: "flex",
        width: "fit-content",
        breakInside: "avoid",
        // Avoid the row to be broken in two different print pages.
        "&:hover, &.Mui-hovered": {
          backgroundColor: (theme.vars || theme).palette.action.hover,
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            backgroundColor: "transparent"
          }
        },
        "&.Mui-selected": {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
          "&:hover, &.Mui-hovered": {
            backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(
                ${theme.vars.palette.action.selectedOpacity} + 
                ${theme.vars.palette.action.hoverOpacity}
              ))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            "@media (hover: none)": {
              backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)
            }
          }
        }
      },
      [`& .${gridClasses.cell}`]: {
        display: "flex",
        alignItems: "center",
        borderBottom: "1px solid",
        "&.Mui-selected": {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
          "&:hover, &.Mui-hovered": {
            backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity + theme.palette.action.hoverOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
            // Reset on touch devices, it doesn't add specificity
            "@media (hover: none)": {
              backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)
            }
          }
        }
      },
      [`&.${gridClasses["root--disableUserSelection"]} .${gridClasses.cell}`]: {
        userSelect: "none"
      },
      [`& .${gridClasses.row}:not(.${gridClasses["row--dynamicHeight"]}) > .${gridClasses.cell}`]: {
        overflow: "hidden",
        whiteSpace: "nowrap"
      },
      [`& .${gridClasses.cellContent}`]: {
        overflow: "hidden",
        textOverflow: "ellipsis"
      },
      [`& .${gridClasses.cell}.${gridClasses["cell--selectionMode"]}`]: {
        cursor: "default"
      },
      [`& .${gridClasses.cell}.${gridClasses["cell--editing"]}`]: {
        padding: 1,
        display: "flex",
        boxShadow: theme.shadows[2],
        backgroundColor: (theme.vars || theme).palette.background.paper,
        "&:focus-within": {
          outline: `solid ${(theme.vars || theme).palette.primary.main} 1px`,
          outlineOffset: "-1px"
        }
      },
      [`& .${gridClasses["row--editing"]}`]: {
        boxShadow: theme.shadows[2]
      },
      [`& .${gridClasses["row--editing"]} .${gridClasses.cell}`]: {
        boxShadow: theme.shadows[0],
        backgroundColor: (theme.vars || theme).palette.background.paper
      },
      [`& .${gridClasses.editBooleanCell}`]: {
        display: "flex",
        height: "100%",
        width: "100%",
        alignItems: "center",
        justifyContent: "center"
      },
      [`& .${gridClasses.booleanCell}[data-value="true"]`]: {
        color: (theme.vars || theme).palette.text.secondary
      },
      [`& .${gridClasses.booleanCell}[data-value="false"]`]: {
        color: (theme.vars || theme).palette.text.disabled
      },
      [`& .${gridClasses.actionsCell}`]: {
        display: "inline-flex",
        alignItems: "center",
        gridGap: theme.spacing(1)
      },
      [`& .${gridClasses.rowReorderCell}`]: {
        display: "inline-flex",
        flex: 1,
        alignItems: "center",
        justifyContent: "center",
        opacity: (theme.vars || theme).palette.action.disabledOpacity
      },
      [`& .${gridClasses["rowReorderCell--draggable"]}`]: {
        cursor: "move",
        opacity: 1
      },
      [`& .${gridClasses.rowReorderCellContainer}`]: {
        padding: 0,
        alignItems: "stretch"
      },
      [`.${gridClasses.withBorderColor}`]: {
        borderColor: borderColor2
      },
      [`& .${gridClasses["cell--withRightBorder"]}`]: {
        borderRightWidth: "1px",
        borderRightStyle: "solid"
      },
      [`& .${gridClasses["columnHeader--withRightBorder"]}`]: {
        borderRightWidth: "1px",
        borderRightStyle: "solid"
      },
      [`& .${gridClasses["cell--textLeft"]}`]: {
        justifyContent: "flex-start"
      },
      [`& .${gridClasses["cell--textRight"]}`]: {
        justifyContent: "flex-end"
      },
      [`& .${gridClasses["cell--textCenter"]}`]: {
        justifyContent: "center"
      },
      [`& .${gridClasses.columnHeaderDraggableContainer}`]: {
        display: "flex",
        width: "100%",
        height: "100%"
      },
      [`& .${gridClasses.rowReorderCellPlaceholder}`]: {
        display: "none"
      },
      [`& .${gridClasses["columnHeader--dragging"]}, & .${gridClasses["row--dragging"]}`]: {
        background: (theme.vars || theme).palette.background.paper,
        padding: "0 12px",
        borderRadius: "var(--unstable_DataGrid-radius)",
        opacity: (theme.vars || theme).palette.action.disabledOpacity
      },
      [`& .${gridClasses["row--dragging"]}`]: {
        background: (theme.vars || theme).palette.background.paper,
        padding: "0 12px",
        borderRadius: "var(--unstable_DataGrid-radius)",
        opacity: (theme.vars || theme).palette.action.disabledOpacity,
        [`& .${gridClasses.rowReorderCellPlaceholder}`]: {
          display: "flex"
        }
      },
      [`& .${gridClasses.treeDataGroupingCell}`]: {
        display: "flex",
        alignItems: "center",
        width: "100%"
      },
      [`& .${gridClasses.treeDataGroupingCellToggle}`]: {
        flex: "0 0 28px",
        alignSelf: "stretch",
        marginRight: theme.spacing(2)
      },
      [`& .${gridClasses.groupingCriteriaCell}`]: {
        display: "flex",
        alignItems: "center",
        width: "100%"
      },
      [`& .${gridClasses.groupingCriteriaCellToggle}`]: {
        flex: "0 0 28px",
        alignSelf: "stretch",
        marginRight: theme.spacing(2)
      }
    });
    return gridStyle;
  });

  // node_modules/@mui/x-data-grid/components/containers/GridRoot.js
  var import_jsx_runtime49 = __toESM(require_jsx_runtime());
  var _excluded46 = ["children", "className"];
  var useUtilityClasses21 = (ownerState) => {
    const {
      autoHeight,
      density,
      classes
    } = ownerState;
    const slots = {
      root: ["root", autoHeight && "autoHeight", `root--density${capitalize(density)}`, "withBorderColor"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridRoot = /* @__PURE__ */ React76.forwardRef(function GridRoot2(props, ref) {
    var _rootProps$experiment;
    const rootProps = useGridRootProps();
    const {
      children,
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded46);
    const apiRef = useGridPrivateApiContext();
    const densityValue = useGridSelector(apiRef, gridDensityValueSelector);
    const rootContainerRef = React76.useRef(null);
    const handleRef = useForkRef(rootContainerRef, ref);
    const getAriaAttributes = (_rootProps$experiment = rootProps.experimentalFeatures) != null && _rootProps$experiment.ariaV7 ? null : useGridAriaAttributes;
    const ariaAttributes = typeof getAriaAttributes === "function" ? getAriaAttributes() : null;
    const ownerState = _extends({}, rootProps, {
      density: densityValue
    });
    const classes = useUtilityClasses21(ownerState);
    apiRef.current.register("public", {
      rootElementRef: rootContainerRef
    });
    const [mountedState, setMountedState] = React76.useState(false);
    useEnhancedEffect_default(() => {
      setMountedState(true);
    }, []);
    if (!mountedState) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(GridRootStyles, _extends({
      ref: handleRef,
      className: clsx_default(className, classes.root),
      ownerState
    }, ariaAttributes, other, {
      children
    }));
  });
  true ? GridRoot.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types45.default.oneOfType([import_prop_types45.default.arrayOf(import_prop_types45.default.oneOfType([import_prop_types45.default.func, import_prop_types45.default.object, import_prop_types45.default.bool])), import_prop_types45.default.func, import_prop_types45.default.object])
  } : void 0;

  // node_modules/@mui/x-data-grid/components/containers/GridFooterContainer.js
  init_extends();
  var React77 = __toESM(require_react());
  var import_prop_types46 = __toESM(require_prop_types());
  var import_jsx_runtime50 = __toESM(require_jsx_runtime());
  var _excluded47 = ["className"];
  var useUtilityClasses22 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["footerContainer", "withBorderColor"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridFooterContainerRoot = styled_default("div", {
    name: "MuiDataGrid",
    slot: "FooterContainer",
    overridesResolver: (props, styles4) => styles4.footerContainer
  })({
    display: "flex",
    justifyContent: "space-between",
    alignItems: "center",
    minHeight: 52,
    borderTop: "1px solid"
  });
  var GridFooterContainer = /* @__PURE__ */ React77.forwardRef(function GridFooterContainer2(props, ref) {
    const {
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded47);
    const rootProps = useGridRootProps();
    const classes = useUtilityClasses22(rootProps);
    return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(GridFooterContainerRoot, _extends({
      ref,
      className: clsx_default(classes.root, className),
      ownerState: rootProps
    }, other));
  });
  true ? GridFooterContainer.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    sx: import_prop_types46.default.oneOfType([import_prop_types46.default.arrayOf(import_prop_types46.default.oneOfType([import_prop_types46.default.func, import_prop_types46.default.object, import_prop_types46.default.bool])), import_prop_types46.default.func, import_prop_types46.default.object])
  } : void 0;

  // node_modules/@mui/x-data-grid/components/containers/GridOverlay.js
  init_extends();
  var React78 = __toESM(require_react());
  var import_prop_types47 = __toESM(require_prop_types());
  var import_jsx_runtime51 = __toESM(require_jsx_runtime());
  var _excluded48 = ["className"];
  var useUtilityClasses23 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["overlay"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridOverlayRoot = styled_default("div", {
    name: "MuiDataGrid",
    slot: "Overlay",
    overridesResolver: (_4, styles4) => styles4.overlay
  })({
    width: "100%",
    height: "100%",
    display: "flex",
    alignSelf: "center",
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "var(--unstable_DataGrid-overlayBackground)"
  });
  var GridOverlay = /* @__PURE__ */ React78.forwardRef(function GridOverlay2(props, ref) {
    const {
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded48);
    const rootProps = useGridRootProps();
    const classes = useUtilityClasses23(rootProps);
    return /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(GridOverlayRoot, _extends({
      ref,
      className: clsx_default(classes.root, className),
      ownerState: rootProps
    }, other));
  });
  true ? GridOverlay.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    sx: import_prop_types47.default.oneOfType([import_prop_types47.default.arrayOf(import_prop_types47.default.oneOfType([import_prop_types47.default.func, import_prop_types47.default.object, import_prop_types47.default.bool])), import_prop_types47.default.func, import_prop_types47.default.object])
  } : void 0;

  // node_modules/@mui/x-data-grid/components/containers/GridToolbarContainer.js
  init_extends();
  var React79 = __toESM(require_react());
  var import_prop_types48 = __toESM(require_prop_types());
  var import_jsx_runtime52 = __toESM(require_jsx_runtime());
  var _excluded49 = ["className", "children"];
  var useUtilityClasses24 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["toolbarContainer"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridToolbarContainerRoot = styled_default("div", {
    name: "MuiDataGrid",
    slot: "ToolbarContainer",
    overridesResolver: (_4, styles4) => styles4.toolbarContainer
  })(({
    theme
  }) => ({
    display: "flex",
    alignItems: "center",
    flexWrap: "wrap",
    gap: theme.spacing(1),
    padding: theme.spacing(0.5, 0.5, 0)
  }));
  var GridToolbarContainer = /* @__PURE__ */ React79.forwardRef(function GridToolbarContainer2(props, ref) {
    const {
      className,
      children
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded49);
    const rootProps = useGridRootProps();
    const classes = useUtilityClasses24(rootProps);
    if (!children) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(GridToolbarContainerRoot, _extends({
      ref,
      className: clsx_default(className, classes.root),
      ownerState: rootProps
    }, other, {
      children
    }));
  });
  true ? GridToolbarContainer.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    sx: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.func, import_prop_types48.default.object, import_prop_types48.default.bool])), import_prop_types48.default.func, import_prop_types48.default.object])
  } : void 0;

  // node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeaderItem.js
  init_extends();
  var React88 = __toESM(require_react());
  var import_prop_types54 = __toESM(require_prop_types());

  // node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeaderSortIcon.js
  init_extends();
  var React82 = __toESM(require_react());
  var import_prop_types50 = __toESM(require_prop_types());

  // node_modules/@mui/material/Badge/Badge.js
  init_extends();
  var React80 = __toESM(require_react());
  var import_prop_types49 = __toESM(require_prop_types());

  // node_modules/@mui/material/Badge/useBadge.js
  function useBadge(parameters) {
    const {
      badgeContent: badgeContentProp,
      invisible: invisibleProp = false,
      max: maxProp = 99,
      showZero = false
    } = parameters;
    const prevProps = usePreviousProps_default({
      badgeContent: badgeContentProp,
      max: maxProp
    });
    let invisible = invisibleProp;
    if (invisibleProp === false && badgeContentProp === 0 && !showZero) {
      invisible = true;
    }
    const {
      badgeContent,
      max: max2 = maxProp
    } = invisible ? prevProps : parameters;
    const displayValue = badgeContent && Number(badgeContent) > max2 ? `${max2}+` : badgeContent;
    return {
      badgeContent,
      invisible,
      max: max2,
      displayValue
    };
  }
  var useBadge_default = useBadge;

  // node_modules/@mui/material/Badge/badgeClasses.js
  function getBadgeUtilityClass(slot) {
    return generateUtilityClass("MuiBadge", slot);
  }
  var badgeClasses = generateUtilityClasses("MuiBadge", [
    "root",
    "badge",
    "dot",
    "standard",
    "anchorOriginTopRight",
    "anchorOriginBottomRight",
    "anchorOriginTopLeft",
    "anchorOriginBottomLeft",
    "invisible",
    "colorError",
    "colorInfo",
    "colorPrimary",
    "colorSecondary",
    "colorSuccess",
    "colorWarning",
    "overlapRectangular",
    "overlapCircular",
    // TODO: v6 remove the overlap value from these class keys
    "anchorOriginTopLeftCircular",
    "anchorOriginTopLeftRectangular",
    "anchorOriginTopRightCircular",
    "anchorOriginTopRightRectangular",
    "anchorOriginBottomLeftCircular",
    "anchorOriginBottomLeftRectangular",
    "anchorOriginBottomRightCircular",
    "anchorOriginBottomRightRectangular"
  ]);
  var badgeClasses_default = badgeClasses;

  // node_modules/@mui/material/Badge/Badge.js
  var import_jsx_runtime53 = __toESM(require_jsx_runtime());
  var import_jsx_runtime54 = __toESM(require_jsx_runtime());
  var _excluded50 = ["anchorOrigin", "className", "classes", "component", "components", "componentsProps", "children", "overlap", "color", "invisible", "max", "badgeContent", "slots", "slotProps", "showZero", "variant"];
  var RADIUS_STANDARD = 10;
  var RADIUS_DOT = 4;
  var useUtilityClasses25 = (ownerState) => {
    const {
      color: color2,
      anchorOrigin,
      invisible,
      overlap,
      variant,
      classes = {}
    } = ownerState;
    const slots = {
      root: ["root"],
      badge: ["badge", variant, invisible && "invisible", `anchorOrigin${capitalize_default(anchorOrigin.vertical)}${capitalize_default(anchorOrigin.horizontal)}`, `anchorOrigin${capitalize_default(anchorOrigin.vertical)}${capitalize_default(anchorOrigin.horizontal)}${capitalize_default(overlap)}`, `overlap${capitalize_default(overlap)}`, color2 !== "default" && `color${capitalize_default(color2)}`]
    };
    return composeClasses(slots, getBadgeUtilityClass, classes);
  };
  var BadgeRoot = styled_default2("span", {
    name: "MuiBadge",
    slot: "Root",
    overridesResolver: (props, styles4) => styles4.root
  })({
    position: "relative",
    display: "inline-flex",
    // For correct alignment with the text.
    verticalAlign: "middle",
    flexShrink: 0
  });
  var BadgeBadge = styled_default2("span", {
    name: "MuiBadge",
    slot: "Badge",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.badge, styles4[ownerState.variant], styles4[`anchorOrigin${capitalize_default(ownerState.anchorOrigin.vertical)}${capitalize_default(ownerState.anchorOrigin.horizontal)}${capitalize_default(ownerState.overlap)}`], ownerState.color !== "default" && styles4[`color${capitalize_default(ownerState.color)}`], ownerState.invisible && styles4.invisible];
    }
  })(({
    theme
  }) => {
    var _theme$vars;
    return {
      display: "flex",
      flexDirection: "row",
      flexWrap: "wrap",
      justifyContent: "center",
      alignContent: "center",
      alignItems: "center",
      position: "absolute",
      boxSizing: "border-box",
      fontFamily: theme.typography.fontFamily,
      fontWeight: theme.typography.fontWeightMedium,
      fontSize: theme.typography.pxToRem(12),
      minWidth: RADIUS_STANDARD * 2,
      lineHeight: 1,
      padding: "0 6px",
      height: RADIUS_STANDARD * 2,
      borderRadius: RADIUS_STANDARD,
      zIndex: 1,
      // Render the badge on top of potential ripples.
      transition: theme.transitions.create("transform", {
        easing: theme.transitions.easing.easeInOut,
        duration: theme.transitions.duration.enteringScreen
      }),
      variants: [...Object.keys(((_theme$vars = theme.vars) != null ? _theme$vars : theme).palette).filter((key) => {
        var _theme$vars2, _theme$vars3;
        return ((_theme$vars2 = theme.vars) != null ? _theme$vars2 : theme).palette[key].main && ((_theme$vars3 = theme.vars) != null ? _theme$vars3 : theme).palette[key].contrastText;
      }).map((color2) => ({
        props: {
          color: color2
        },
        style: {
          backgroundColor: (theme.vars || theme).palette[color2].main,
          color: (theme.vars || theme).palette[color2].contrastText
        }
      })), {
        props: {
          variant: "dot"
        },
        style: {
          borderRadius: RADIUS_DOT,
          height: RADIUS_DOT * 2,
          minWidth: RADIUS_DOT * 2,
          padding: 0
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.anchorOrigin.vertical === "top" && ownerState.anchorOrigin.horizontal === "right" && ownerState.overlap === "rectangular",
        style: {
          top: 0,
          right: 0,
          transform: "scale(1) translate(50%, -50%)",
          transformOrigin: "100% 0%",
          [`&.${badgeClasses_default.invisible}`]: {
            transform: "scale(0) translate(50%, -50%)"
          }
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.anchorOrigin.vertical === "bottom" && ownerState.anchorOrigin.horizontal === "right" && ownerState.overlap === "rectangular",
        style: {
          bottom: 0,
          right: 0,
          transform: "scale(1) translate(50%, 50%)",
          transformOrigin: "100% 100%",
          [`&.${badgeClasses_default.invisible}`]: {
            transform: "scale(0) translate(50%, 50%)"
          }
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.anchorOrigin.vertical === "top" && ownerState.anchorOrigin.horizontal === "left" && ownerState.overlap === "rectangular",
        style: {
          top: 0,
          left: 0,
          transform: "scale(1) translate(-50%, -50%)",
          transformOrigin: "0% 0%",
          [`&.${badgeClasses_default.invisible}`]: {
            transform: "scale(0) translate(-50%, -50%)"
          }
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.anchorOrigin.vertical === "bottom" && ownerState.anchorOrigin.horizontal === "left" && ownerState.overlap === "rectangular",
        style: {
          bottom: 0,
          left: 0,
          transform: "scale(1) translate(-50%, 50%)",
          transformOrigin: "0% 100%",
          [`&.${badgeClasses_default.invisible}`]: {
            transform: "scale(0) translate(-50%, 50%)"
          }
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.anchorOrigin.vertical === "top" && ownerState.anchorOrigin.horizontal === "right" && ownerState.overlap === "circular",
        style: {
          top: "14%",
          right: "14%",
          transform: "scale(1) translate(50%, -50%)",
          transformOrigin: "100% 0%",
          [`&.${badgeClasses_default.invisible}`]: {
            transform: "scale(0) translate(50%, -50%)"
          }
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.anchorOrigin.vertical === "bottom" && ownerState.anchorOrigin.horizontal === "right" && ownerState.overlap === "circular",
        style: {
          bottom: "14%",
          right: "14%",
          transform: "scale(1) translate(50%, 50%)",
          transformOrigin: "100% 100%",
          [`&.${badgeClasses_default.invisible}`]: {
            transform: "scale(0) translate(50%, 50%)"
          }
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.anchorOrigin.vertical === "top" && ownerState.anchorOrigin.horizontal === "left" && ownerState.overlap === "circular",
        style: {
          top: "14%",
          left: "14%",
          transform: "scale(1) translate(-50%, -50%)",
          transformOrigin: "0% 0%",
          [`&.${badgeClasses_default.invisible}`]: {
            transform: "scale(0) translate(-50%, -50%)"
          }
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.anchorOrigin.vertical === "bottom" && ownerState.anchorOrigin.horizontal === "left" && ownerState.overlap === "circular",
        style: {
          bottom: "14%",
          left: "14%",
          transform: "scale(1) translate(-50%, 50%)",
          transformOrigin: "0% 100%",
          [`&.${badgeClasses_default.invisible}`]: {
            transform: "scale(0) translate(-50%, 50%)"
          }
        }
      }, {
        props: {
          invisible: true
        },
        style: {
          transition: theme.transitions.create("transform", {
            easing: theme.transitions.easing.easeInOut,
            duration: theme.transitions.duration.leavingScreen
          })
        }
      }]
    };
  });
  var Badge = /* @__PURE__ */ React80.forwardRef(function Badge2(inProps, ref) {
    var _ref, _slots$root, _ref2, _slots$badge, _slotProps$root, _slotProps$badge;
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiBadge"
    });
    const {
      anchorOrigin: anchorOriginProp = {
        vertical: "top",
        horizontal: "right"
      },
      className,
      component,
      components = {},
      componentsProps = {},
      children,
      overlap: overlapProp = "rectangular",
      color: colorProp = "default",
      invisible: invisibleProp = false,
      max: maxProp = 99,
      badgeContent: badgeContentProp,
      slots,
      slotProps,
      showZero = false,
      variant: variantProp = "standard"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded50);
    const {
      badgeContent,
      invisible: invisibleFromHook,
      max: max2,
      displayValue: displayValueFromHook
    } = useBadge_default({
      max: maxProp,
      invisible: invisibleProp,
      badgeContent: badgeContentProp,
      showZero
    });
    const prevProps = usePreviousProps_default({
      anchorOrigin: anchorOriginProp,
      color: colorProp,
      overlap: overlapProp,
      variant: variantProp,
      badgeContent: badgeContentProp
    });
    const invisible = invisibleFromHook || badgeContent == null && variantProp !== "dot";
    const {
      color: color2 = colorProp,
      overlap = overlapProp,
      anchorOrigin = anchorOriginProp,
      variant = variantProp
    } = invisible ? prevProps : props;
    const displayValue = variant !== "dot" ? displayValueFromHook : void 0;
    const ownerState = _extends({}, props, {
      badgeContent,
      invisible,
      max: max2,
      displayValue,
      showZero,
      anchorOrigin,
      color: color2,
      overlap,
      variant
    });
    const classes = useUtilityClasses25(ownerState);
    const RootSlot = (_ref = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components.Root) != null ? _ref : BadgeRoot;
    const BadgeSlot = (_ref2 = (_slots$badge = slots == null ? void 0 : slots.badge) != null ? _slots$badge : components.Badge) != null ? _ref2 : BadgeBadge;
    const rootSlotProps = (_slotProps$root = slotProps == null ? void 0 : slotProps.root) != null ? _slotProps$root : componentsProps.root;
    const badgeSlotProps = (_slotProps$badge = slotProps == null ? void 0 : slotProps.badge) != null ? _slotProps$badge : componentsProps.badge;
    const rootProps = useSlotProps_default({
      elementType: RootSlot,
      externalSlotProps: rootSlotProps,
      externalForwardedProps: other,
      additionalProps: {
        ref,
        as: component
      },
      ownerState,
      className: clsx_default(rootSlotProps == null ? void 0 : rootSlotProps.className, classes.root, className)
    });
    const badgeProps = useSlotProps_default({
      elementType: BadgeSlot,
      externalSlotProps: badgeSlotProps,
      ownerState,
      className: clsx_default(classes.badge, badgeSlotProps == null ? void 0 : badgeSlotProps.className)
    });
    return /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)(RootSlot, _extends({}, rootProps, {
      children: [children, /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(BadgeSlot, _extends({}, badgeProps, {
        children: displayValue
      }))]
    }));
  });
  true ? Badge.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The anchor of the badge.
     * @default {
     *   vertical: 'top',
     *   horizontal: 'right',
     * }
     */
    anchorOrigin: import_prop_types49.default.shape({
      horizontal: import_prop_types49.default.oneOf(["left", "right"]).isRequired,
      vertical: import_prop_types49.default.oneOf(["bottom", "top"]).isRequired
    }),
    /**
     * The content rendered within the badge.
     */
    badgeContent: import_prop_types49.default.node,
    /**
     * The badge will be added relative to this node.
     */
    children: import_prop_types49.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types49.default.object,
    /**
     * @ignore
     */
    className: import_prop_types49.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'default'
     */
    color: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types49.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types49.default.elementType,
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: import_prop_types49.default.shape({
      Badge: import_prop_types49.default.elementType,
      Root: import_prop_types49.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: import_prop_types49.default.shape({
      badge: import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object]),
      root: import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object])
    }),
    /**
     * If `true`, the badge is invisible.
     * @default false
     */
    invisible: import_prop_types49.default.bool,
    /**
     * Max count to show.
     * @default 99
     */
    max: import_prop_types49.default.number,
    /**
     * Wrapped shape the badge should overlap.
     * @default 'rectangular'
     */
    overlap: import_prop_types49.default.oneOf(["circular", "rectangular"]),
    /**
     * Controls whether the badge is hidden when `badgeContent` is zero.
     * @default false
     */
    showZero: import_prop_types49.default.bool,
    /**
     * The props used for each slot inside the Badge.
     * @default {}
     */
    slotProps: import_prop_types49.default.shape({
      badge: import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object]),
      root: import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object])
    }),
    /**
     * The components used for each slot inside the Badge.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types49.default.shape({
      badge: import_prop_types49.default.elementType,
      root: import_prop_types49.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object, import_prop_types49.default.bool])), import_prop_types49.default.func, import_prop_types49.default.object]),
    /**
     * The variant to use.
     * @default 'standard'
     */
    variant: import_prop_types49.default.oneOfType([import_prop_types49.default.oneOf(["dot", "standard"]), import_prop_types49.default.string])
  } : void 0;
  var Badge_default = Badge;

  // node_modules/@mui/x-data-grid/components/columnHeaders/GridIconButtonContainer.js
  init_extends();
  var React81 = __toESM(require_react());
  var import_jsx_runtime55 = __toESM(require_jsx_runtime());
  var _excluded51 = ["className"];
  var useUtilityClasses26 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["iconButtonContainer"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridIconButtonContainerRoot = styled_default("div", {
    name: "MuiDataGrid",
    slot: "IconButtonContainer",
    overridesResolver: (props, styles4) => styles4.iconButtonContainer
  })(() => ({
    display: "flex",
    visibility: "hidden",
    width: 0
  }));
  var GridIconButtonContainer = /* @__PURE__ */ React81.forwardRef(function GridIconButtonContainer2(props, ref) {
    const {
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded51);
    const rootProps = useGridRootProps();
    const classes = useUtilityClasses26(rootProps);
    return /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(GridIconButtonContainerRoot, _extends({
      ref,
      className: clsx_default(classes.root, className),
      ownerState: rootProps
    }, other));
  });

  // node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeaderSortIcon.js
  var import_jsx_runtime56 = __toESM(require_jsx_runtime());
  var import_jsx_runtime57 = __toESM(require_jsx_runtime());
  var useUtilityClasses27 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      icon: ["sortIcon"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  function getIcon(icons, direction, className, sortingOrder) {
    let Icon;
    const iconProps = {};
    if (direction === "asc") {
      Icon = icons.columnSortedAscendingIcon;
    } else if (direction === "desc") {
      Icon = icons.columnSortedDescendingIcon;
    } else {
      Icon = icons.columnUnsortedIcon;
      iconProps.sortingOrder = sortingOrder;
    }
    return Icon ? /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(Icon, _extends({
      fontSize: "small",
      className
    }, iconProps)) : null;
  }
  function GridColumnHeaderSortIconRaw(props) {
    var _rootProps$slotProps;
    const {
      direction,
      index,
      sortingOrder
    } = props;
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const ownerState = _extends({}, props, {
      classes: rootProps.classes
    });
    const classes = useUtilityClasses27(ownerState);
    const iconElement = getIcon(rootProps.slots, direction, classes.icon, sortingOrder);
    if (!iconElement) {
      return null;
    }
    const iconButton = /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(rootProps.slots.baseIconButton, _extends({
      tabIndex: -1,
      "aria-label": apiRef.current.getLocaleText("columnHeaderSortIconLabel"),
      title: apiRef.current.getLocaleText("columnHeaderSortIconLabel"),
      size: "small"
    }, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseIconButton, {
      children: iconElement
    }));
    return /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)(GridIconButtonContainer, {
      children: [index != null && /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(Badge_default, {
        badgeContent: index,
        color: "default",
        children: iconButton
      }), index == null && iconButton]
    });
  }
  var GridColumnHeaderSortIcon = /* @__PURE__ */ React82.memo(GridColumnHeaderSortIconRaw);
  true ? GridColumnHeaderSortIconRaw.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    direction: import_prop_types50.default.oneOf(["asc", "desc"]),
    index: import_prop_types50.default.number,
    sortingOrder: import_prop_types50.default.arrayOf(import_prop_types50.default.oneOf(["asc", "desc"])).isRequired
  } : void 0;

  // node_modules/@mui/x-data-grid/components/columnHeaders/ColumnHeaderMenuIcon.js
  init_extends();
  var React83 = __toESM(require_react());
  var import_jsx_runtime58 = __toESM(require_jsx_runtime());
  var useUtilityClasses28 = (ownerState) => {
    const {
      classes,
      open
    } = ownerState;
    const slots = {
      root: ["menuIcon", open && "menuOpen"],
      button: ["menuIconButton"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var ColumnHeaderMenuIcon = /* @__PURE__ */ React83.memo((props) => {
    var _rootProps$slotProps, _rootProps$slotProps2;
    const {
      colDef,
      open,
      columnMenuId,
      columnMenuButtonId,
      iconButtonRef
    } = props;
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const ownerState = _extends({}, props, {
      classes: rootProps.classes
    });
    const classes = useUtilityClasses28(ownerState);
    const handleMenuIconClick = React83.useCallback((event) => {
      event.preventDefault();
      event.stopPropagation();
      apiRef.current.toggleColumnMenu(colDef.field);
    }, [apiRef, colDef.field]);
    return /* @__PURE__ */ (0, import_jsx_runtime58.jsx)("div", {
      className: classes.root,
      children: /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(rootProps.slots.baseTooltip, _extends({
        title: apiRef.current.getLocaleText("columnMenuLabel"),
        enterDelay: 1e3
      }, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseTooltip, {
        children: /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(rootProps.slots.baseIconButton, _extends({
          ref: iconButtonRef,
          tabIndex: -1,
          className: classes.button,
          "aria-label": apiRef.current.getLocaleText("columnMenuLabel"),
          size: "small",
          onClick: handleMenuIconClick,
          "aria-haspopup": "menu",
          "aria-expanded": open,
          "aria-controls": open ? columnMenuId : void 0,
          id: columnMenuButtonId
        }, (_rootProps$slotProps2 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps2.baseIconButton, {
          children: /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(rootProps.slots.columnMenuIcon, {
            fontSize: "small"
          })
        }))
      }))
    });
  });

  // node_modules/@mui/x-data-grid/components/menu/columnMenu/GridColumnHeaderMenu.js
  init_extends();
  var React84 = __toESM(require_react());
  var import_prop_types51 = __toESM(require_prop_types());
  var import_jsx_runtime59 = __toESM(require_jsx_runtime());
  function GridColumnHeaderMenu({
    columnMenuId,
    columnMenuButtonId,
    ContentComponent,
    contentComponentProps,
    field,
    open,
    target,
    onExited
  }) {
    const apiRef = useGridApiContext();
    const colDef = apiRef.current.getColumn(field);
    const hideMenu = useEventCallback_default((event) => {
      if (event) {
        event.stopPropagation();
        if (target != null && target.contains(event.target)) {
          return;
        }
      }
      apiRef.current.hideColumnMenu();
    });
    if (!target || !colDef) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(GridMenu, {
      placement: `bottom-${colDef.align === "right" ? "start" : "end"}`,
      open,
      target,
      onClose: hideMenu,
      onExited,
      children: /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(ContentComponent, _extends({
        colDef,
        hideMenu,
        open,
        id: columnMenuId,
        labelledby: columnMenuButtonId
      }, contentComponentProps))
    });
  }
  true ? GridColumnHeaderMenu.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    columnMenuButtonId: import_prop_types51.default.string,
    columnMenuId: import_prop_types51.default.string,
    ContentComponent: import_prop_types51.default.elementType.isRequired,
    contentComponentProps: import_prop_types51.default.any,
    field: import_prop_types51.default.string.isRequired,
    onExited: import_prop_types51.default.func,
    open: import_prop_types51.default.bool.isRequired,
    target: HTMLElementType
  } : void 0;

  // node_modules/@mui/x-data-grid/components/columnHeaders/GridGenericColumnHeaderItem.js
  init_extends();
  var React87 = __toESM(require_react());

  // node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeaderTitle.js
  init_extends();
  var React85 = __toESM(require_react());
  var import_prop_types52 = __toESM(require_prop_types());
  var import_jsx_runtime60 = __toESM(require_jsx_runtime());
  var _excluded52 = ["className"];
  var useUtilityClasses29 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["columnHeaderTitle"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridColumnHeaderTitleRoot = styled_default("div", {
    name: "MuiDataGrid",
    slot: "ColumnHeaderTitle",
    overridesResolver: (props, styles4) => styles4.columnHeaderTitle
  })({
    textOverflow: "ellipsis",
    overflow: "hidden",
    whiteSpace: "nowrap",
    fontWeight: "var(--unstable_DataGrid-headWeight)"
  });
  var ColumnHeaderInnerTitle = /* @__PURE__ */ React85.forwardRef(function ColumnHeaderInnerTitle2(props, ref) {
    const {
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded52);
    const rootProps = useGridRootProps();
    const classes = useUtilityClasses29(rootProps);
    return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(GridColumnHeaderTitleRoot, _extends({
      ref,
      className: clsx_default(classes.root, className),
      ownerState: rootProps
    }, other));
  });
  function GridColumnHeaderTitle(props) {
    var _rootProps$slotProps;
    const {
      label,
      description
    } = props;
    const rootProps = useGridRootProps();
    const titleRef = React85.useRef(null);
    const [tooltip, setTooltip] = React85.useState("");
    const handleMouseOver = React85.useCallback(() => {
      if (!description && titleRef != null && titleRef.current) {
        const isOver = isOverflown(titleRef.current);
        if (isOver) {
          setTooltip(label);
        } else {
          setTooltip("");
        }
      }
    }, [description, label]);
    return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(rootProps.slots.baseTooltip, _extends({
      title: description || tooltip
    }, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseTooltip, {
      children: /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(ColumnHeaderInnerTitle, {
        onMouseOver: handleMouseOver,
        ref: titleRef,
        children: label
      })
    }));
  }
  true ? GridColumnHeaderTitle.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    columnWidth: import_prop_types52.default.number.isRequired,
    description: import_prop_types52.default.node,
    label: import_prop_types52.default.string.isRequired
  } : void 0;

  // node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeaderSeparator.js
  init_extends();
  var React86 = __toESM(require_react());
  var import_prop_types53 = __toESM(require_prop_types());
  var import_jsx_runtime61 = __toESM(require_jsx_runtime());
  var _excluded53 = ["resizable", "resizing", "height", "side"];
  var GridColumnHeaderSeparatorSides = /* @__PURE__ */ function(GridColumnHeaderSeparatorSides2) {
    GridColumnHeaderSeparatorSides2["Left"] = "left";
    GridColumnHeaderSeparatorSides2["Right"] = "right";
    return GridColumnHeaderSeparatorSides2;
  }(GridColumnHeaderSeparatorSides || {});
  var useUtilityClasses30 = (ownerState) => {
    const {
      resizable,
      resizing,
      classes,
      side
    } = ownerState;
    const slots = {
      root: ["columnSeparator", resizable && "columnSeparator--resizable", resizing && "columnSeparator--resizing", side && `columnSeparator--side${capitalize(side)}`],
      icon: ["iconSeparator"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  function GridColumnHeaderSeparatorRaw(props) {
    const {
      height: height2,
      side = GridColumnHeaderSeparatorSides.Right
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded53);
    const rootProps = useGridRootProps();
    const ownerState = _extends({}, props, {
      side,
      classes: rootProps.classes
    });
    const classes = useUtilityClasses30(ownerState);
    const stopClick = React86.useCallback((event) => {
      event.preventDefault();
      event.stopPropagation();
    }, []);
    return (
      // eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions
      /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("div", _extends({
        className: classes.root,
        style: {
          minHeight: height2,
          opacity: rootProps.showColumnVerticalBorder ? 0 : 1
        }
      }, other, {
        onClick: stopClick,
        children: /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(rootProps.slots.columnResizeIcon, {
          className: classes.icon
        })
      }))
    );
  }
  var GridColumnHeaderSeparator = /* @__PURE__ */ React86.memo(GridColumnHeaderSeparatorRaw);
  true ? GridColumnHeaderSeparatorRaw.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    height: import_prop_types53.default.number.isRequired,
    resizable: import_prop_types53.default.bool.isRequired,
    resizing: import_prop_types53.default.bool.isRequired,
    side: import_prop_types53.default.oneOf(["left", "right"])
  } : void 0;

  // node_modules/@mui/x-data-grid/components/columnHeaders/GridGenericColumnHeaderItem.js
  var import_jsx_runtime62 = __toESM(require_jsx_runtime());
  var import_jsx_runtime63 = __toESM(require_jsx_runtime());
  var _excluded54 = ["classes", "columnMenuOpen", "colIndex", "height", "isResizing", "sortDirection", "hasFocus", "tabIndex", "separatorSide", "isDraggable", "headerComponent", "description", "elementId", "width", "columnMenuIconButton", "columnMenu", "columnTitleIconButtons", "headerClassName", "label", "resizable", "draggableContainerProps", "columnHeaderSeparatorProps"];
  var GridGenericColumnHeaderItem = /* @__PURE__ */ React87.forwardRef(function GridGenericColumnHeaderItem2(props, ref) {
    const {
      classes,
      columnMenuOpen,
      colIndex,
      height: height2,
      isResizing,
      sortDirection,
      hasFocus,
      tabIndex,
      separatorSide,
      isDraggable,
      headerComponent,
      description,
      width: width2,
      columnMenuIconButton = null,
      columnMenu = null,
      columnTitleIconButtons = null,
      headerClassName,
      label,
      resizable,
      draggableContainerProps,
      columnHeaderSeparatorProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded54);
    const apiRef = useGridPrivateApiContext();
    const rootProps = useGridRootProps();
    const headerCellRef = React87.useRef(null);
    const [showColumnMenuIcon, setShowColumnMenuIcon] = React87.useState(columnMenuOpen);
    const handleRef = useForkRef(headerCellRef, ref);
    let ariaSort = "none";
    if (sortDirection != null) {
      ariaSort = sortDirection === "asc" ? "ascending" : "descending";
    }
    React87.useEffect(() => {
      if (!showColumnMenuIcon) {
        setShowColumnMenuIcon(columnMenuOpen);
      }
    }, [showColumnMenuIcon, columnMenuOpen]);
    React87.useLayoutEffect(() => {
      const columnMenuState = apiRef.current.state.columnMenu;
      if (hasFocus && !columnMenuState.open) {
        const focusableElement = headerCellRef.current.querySelector('[tabindex="0"]');
        const elementToFocus = focusableElement || headerCellRef.current;
        elementToFocus == null || elementToFocus.focus();
        apiRef.current.columnHeadersContainerElementRef.current.scrollLeft = 0;
      }
    }, [apiRef, hasFocus]);
    return /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", _extends({
      ref: handleRef,
      className: clsx_default(classes.root, headerClassName),
      style: {
        height: height2,
        width: width2,
        minWidth: width2,
        maxWidth: width2
      },
      role: "columnheader",
      tabIndex,
      "aria-colindex": colIndex + 1,
      "aria-sort": ariaSort,
      "aria-label": headerComponent == null ? label : void 0
    }, other, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", _extends({
        className: classes.draggableContainer,
        draggable: isDraggable,
        role: "presentation"
      }, draggableContainerProps, {
        children: [/* @__PURE__ */ (0, import_jsx_runtime63.jsxs)("div", {
          className: classes.titleContainer,
          role: "presentation",
          children: [/* @__PURE__ */ (0, import_jsx_runtime62.jsx)("div", {
            className: classes.titleContainerContent,
            children: headerComponent !== void 0 ? headerComponent : /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(GridColumnHeaderTitle, {
              label,
              description,
              columnWidth: width2
            })
          }), columnTitleIconButtons]
        }), columnMenuIconButton]
      })), /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(GridColumnHeaderSeparator, _extends({
        resizable: !rootProps.disableColumnResize && !!resizable,
        resizing: isResizing,
        height: height2,
        side: separatorSide
      }, columnHeaderSeparatorProps)), columnMenu]
    }));
  });

  // node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeaderItem.js
  var import_jsx_runtime64 = __toESM(require_jsx_runtime());
  var import_jsx_runtime65 = __toESM(require_jsx_runtime());
  var useUtilityClasses31 = (ownerState) => {
    const {
      colDef,
      classes,
      isDragging,
      sortDirection,
      showRightBorder,
      filterItemsCounter
    } = ownerState;
    const isColumnSorted = sortDirection != null;
    const isColumnFiltered = filterItemsCounter != null && filterItemsCounter > 0;
    const isColumnNumeric = colDef.type === "number";
    const slots = {
      root: ["columnHeader", colDef.headerAlign === "left" && "columnHeader--alignLeft", colDef.headerAlign === "center" && "columnHeader--alignCenter", colDef.headerAlign === "right" && "columnHeader--alignRight", colDef.sortable && "columnHeader--sortable", isDragging && "columnHeader--moving", isColumnSorted && "columnHeader--sorted", isColumnFiltered && "columnHeader--filtered", isColumnNumeric && "columnHeader--numeric", "withBorderColor", showRightBorder && "columnHeader--withRightBorder"],
      draggableContainer: ["columnHeaderDraggableContainer"],
      titleContainer: ["columnHeaderTitleContainer"],
      titleContainerContent: ["columnHeaderTitleContainerContent"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  function GridColumnHeaderItem(props) {
    var _rootProps$slotProps, _colDef$sortingOrder, _rootProps$slotProps2, _colDef$headerName;
    const {
      colDef,
      columnMenuOpen,
      colIndex,
      headerHeight,
      isResizing,
      sortDirection,
      sortIndex,
      filterItemsCounter,
      hasFocus,
      tabIndex,
      disableReorder,
      separatorSide
    } = props;
    const apiRef = useGridPrivateApiContext();
    const rootProps = useGridRootProps();
    const headerCellRef = React88.useRef(null);
    const columnMenuId = useId();
    const columnMenuButtonId = useId();
    const iconButtonRef = React88.useRef(null);
    const [showColumnMenuIcon, setShowColumnMenuIcon] = React88.useState(columnMenuOpen);
    const isDraggable = React88.useMemo(() => !rootProps.disableColumnReorder && !disableReorder && !colDef.disableReorder, [rootProps.disableColumnReorder, disableReorder, colDef.disableReorder]);
    let headerComponent;
    if (colDef.renderHeader) {
      headerComponent = colDef.renderHeader(apiRef.current.getColumnHeaderParams(colDef.field));
    }
    const ownerState = _extends({}, props, {
      classes: rootProps.classes,
      showRightBorder: rootProps.showColumnVerticalBorder
    });
    const classes = useUtilityClasses31(ownerState);
    const publish = React88.useCallback((eventName) => (event) => {
      if (isEventTargetInPortal(event)) {
        return;
      }
      apiRef.current.publishEvent(eventName, apiRef.current.getColumnHeaderParams(colDef.field), event);
    }, [apiRef, colDef.field]);
    const mouseEventsHandlers = React88.useMemo(() => ({
      onClick: publish("columnHeaderClick"),
      onDoubleClick: publish("columnHeaderDoubleClick"),
      onMouseOver: publish("columnHeaderOver"),
      // TODO remove as it's not used
      onMouseOut: publish("columnHeaderOut"),
      // TODO remove as it's not used
      onMouseEnter: publish("columnHeaderEnter"),
      // TODO remove as it's not used
      onMouseLeave: publish("columnHeaderLeave"),
      // TODO remove as it's not used
      onKeyDown: publish("columnHeaderKeyDown"),
      onFocus: publish("columnHeaderFocus"),
      onBlur: publish("columnHeaderBlur")
    }), [publish]);
    const draggableEventHandlers = React88.useMemo(() => isDraggable ? {
      onDragStart: publish("columnHeaderDragStart"),
      onDragEnter: publish("columnHeaderDragEnter"),
      onDragOver: publish("columnHeaderDragOver"),
      onDragEnd: publish("columnHeaderDragEnd")
    } : {}, [isDraggable, publish]);
    const columnHeaderSeparatorProps = React88.useMemo(() => ({
      onMouseDown: publish("columnSeparatorMouseDown"),
      onDoubleClick: publish("columnSeparatorDoubleClick")
    }), [publish]);
    React88.useEffect(() => {
      if (!showColumnMenuIcon) {
        setShowColumnMenuIcon(columnMenuOpen);
      }
    }, [showColumnMenuIcon, columnMenuOpen]);
    const handleExited = React88.useCallback(() => {
      setShowColumnMenuIcon(false);
    }, []);
    const columnMenuIconButton = !rootProps.disableColumnMenu && !colDef.disableColumnMenu && /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(ColumnHeaderMenuIcon, {
      colDef,
      columnMenuId,
      columnMenuButtonId,
      open: showColumnMenuIcon,
      iconButtonRef
    });
    const columnMenu = /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(GridColumnHeaderMenu, {
      columnMenuId,
      columnMenuButtonId,
      field: colDef.field,
      open: columnMenuOpen,
      target: iconButtonRef.current,
      ContentComponent: rootProps.slots.columnMenu,
      contentComponentProps: (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.columnMenu,
      onExited: handleExited
    });
    const sortingOrder = (_colDef$sortingOrder = colDef.sortingOrder) != null ? _colDef$sortingOrder : rootProps.sortingOrder;
    const columnTitleIconButtons = /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)(React88.Fragment, {
      children: [!rootProps.disableColumnFilter && /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(rootProps.slots.columnHeaderFilterIconButton, _extends({
        field: colDef.field,
        counter: filterItemsCounter
      }, (_rootProps$slotProps2 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps2.columnHeaderFilterIconButton)), colDef.sortable && !colDef.hideSortIcons && /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(GridColumnHeaderSortIcon, {
        direction: sortDirection,
        index: sortIndex,
        sortingOrder
      })]
    });
    React88.useLayoutEffect(() => {
      const columnMenuState = apiRef.current.state.columnMenu;
      if (hasFocus && !columnMenuState.open) {
        var _apiRef$current$colum;
        const focusableElement = headerCellRef.current.querySelector('[tabindex="0"]');
        const elementToFocus = focusableElement || headerCellRef.current;
        elementToFocus == null || elementToFocus.focus();
        if ((_apiRef$current$colum = apiRef.current.columnHeadersContainerElementRef) != null && _apiRef$current$colum.current) {
          apiRef.current.columnHeadersContainerElementRef.current.scrollLeft = 0;
        }
      }
    }, [apiRef, hasFocus]);
    const headerClassName = typeof colDef.headerClassName === "function" ? colDef.headerClassName({
      field: colDef.field,
      colDef
    }) : colDef.headerClassName;
    const label = (_colDef$headerName = colDef.headerName) != null ? _colDef$headerName : colDef.field;
    return /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(GridGenericColumnHeaderItem, _extends({
      ref: headerCellRef,
      classes,
      columnMenuOpen,
      colIndex,
      height: headerHeight,
      isResizing,
      sortDirection,
      hasFocus,
      tabIndex,
      separatorSide,
      isDraggable,
      headerComponent,
      description: colDef.description,
      elementId: colDef.field,
      width: colDef.computedWidth,
      columnMenuIconButton,
      columnTitleIconButtons,
      headerClassName,
      label,
      resizable: !rootProps.disableColumnResize && !!colDef.resizable,
      "data-field": colDef.field,
      columnMenu,
      draggableContainerProps: draggableEventHandlers,
      columnHeaderSeparatorProps
    }, mouseEventsHandlers));
  }
  true ? GridColumnHeaderItem.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    colDef: import_prop_types54.default.object.isRequired,
    colIndex: import_prop_types54.default.number.isRequired,
    columnMenuOpen: import_prop_types54.default.bool.isRequired,
    disableReorder: import_prop_types54.default.bool,
    filterItemsCounter: import_prop_types54.default.number,
    hasFocus: import_prop_types54.default.bool,
    headerHeight: import_prop_types54.default.number.isRequired,
    isDragging: import_prop_types54.default.bool.isRequired,
    isResizing: import_prop_types54.default.bool.isRequired,
    separatorSide: import_prop_types54.default.oneOf(["left", "right"]),
    sortDirection: import_prop_types54.default.oneOf(["asc", "desc"]),
    sortIndex: import_prop_types54.default.number,
    tabIndex: import_prop_types54.default.oneOf([-1, 0]).isRequired
  } : void 0;

  // node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeaderFilterIconButton.js
  init_extends();
  var React94 = __toESM(require_react());
  var import_prop_types55 = __toESM(require_prop_types());

  // node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterState.js
  var getDefaultGridFilterModel = () => ({
    items: [],
    logicOperator: GridLogicOperator.And,
    quickFilterValues: [],
    quickFilterLogicOperator: GridLogicOperator.And
  });

  // node_modules/@mui/x-data-grid/hooks/utils/useGridApiEventHandler.js
  var React89 = __toESM(require_react());

  // node_modules/@mui/x-data-grid/utils/cleanupTracking/TimerBasedCleanupTracking.js
  var CLEANUP_TIMER_LOOP_MILLIS = 1e3;
  var TimerBasedCleanupTracking = class {
    constructor(timeout2 = CLEANUP_TIMER_LOOP_MILLIS) {
      this.timeouts = /* @__PURE__ */ new Map();
      this.cleanupTimeout = CLEANUP_TIMER_LOOP_MILLIS;
      this.cleanupTimeout = timeout2;
    }
    register(object, unsubscribe, unregisterToken) {
      if (!this.timeouts) {
        this.timeouts = /* @__PURE__ */ new Map();
      }
      const timeout2 = setTimeout(() => {
        if (typeof unsubscribe === "function") {
          unsubscribe();
        }
        this.timeouts.delete(unregisterToken.cleanupToken);
      }, this.cleanupTimeout);
      this.timeouts.set(unregisterToken.cleanupToken, timeout2);
    }
    unregister(unregisterToken) {
      const timeout2 = this.timeouts.get(unregisterToken.cleanupToken);
      if (timeout2) {
        this.timeouts.delete(unregisterToken.cleanupToken);
        clearTimeout(timeout2);
      }
    }
    reset() {
      if (this.timeouts) {
        this.timeouts.forEach((value, key) => {
          this.unregister({
            cleanupToken: key
          });
        });
        this.timeouts = void 0;
      }
    }
  };

  // node_modules/@mui/x-data-grid/utils/cleanupTracking/FinalizationRegistryBasedCleanupTracking.js
  var FinalizationRegistryBasedCleanupTracking = class {
    constructor() {
      this.registry = new FinalizationRegistry((unsubscribe) => {
        if (typeof unsubscribe === "function") {
          unsubscribe();
        }
      });
    }
    register(object, unsubscribe, unregisterToken) {
      this.registry.register(object, unsubscribe, unregisterToken);
    }
    unregister(unregisterToken) {
      this.registry.unregister(unregisterToken);
    }
    // eslint-disable-next-line class-methods-use-this
    reset() {
    }
  };

  // node_modules/@mui/x-data-grid/hooks/utils/useGridApiEventHandler.js
  var GridSignature = /* @__PURE__ */ function(GridSignature2) {
    GridSignature2["DataGrid"] = "DataGrid";
    GridSignature2["DataGridPro"] = "DataGridPro";
    return GridSignature2;
  }(GridSignature || {});
  var ObjectToBeRetainedByReact = class {
  };
  function createUseGridApiEventHandler(registryContainer2) {
    let cleanupTokensCounter = 0;
    return function useGridApiEventHandler2(apiRef, eventName, handler, options) {
      if (registryContainer2.registry === null) {
        registryContainer2.registry = typeof FinalizationRegistry !== "undefined" ? new FinalizationRegistryBasedCleanupTracking() : new TimerBasedCleanupTracking();
      }
      const [objectRetainedByReact] = React89.useState(new ObjectToBeRetainedByReact());
      const subscription = React89.useRef(null);
      const handlerRef = React89.useRef();
      handlerRef.current = handler;
      const cleanupTokenRef = React89.useRef(null);
      if (!subscription.current && handlerRef.current) {
        const enhancedHandler = (params, event, details) => {
          if (!event.defaultMuiPrevented) {
            var _handlerRef$current;
            (_handlerRef$current = handlerRef.current) == null || _handlerRef$current.call(handlerRef, params, event, details);
          }
        };
        subscription.current = apiRef.current.subscribeEvent(eventName, enhancedHandler, options);
        cleanupTokensCounter += 1;
        cleanupTokenRef.current = {
          cleanupToken: cleanupTokensCounter
        };
        registryContainer2.registry.register(
          objectRetainedByReact,
          // The callback below will be called once this reference stops being retained
          () => {
            var _subscription$current;
            (_subscription$current = subscription.current) == null || _subscription$current.call(subscription);
            subscription.current = null;
            cleanupTokenRef.current = null;
          },
          cleanupTokenRef.current
        );
      } else if (!handlerRef.current && subscription.current) {
        subscription.current();
        subscription.current = null;
        if (cleanupTokenRef.current) {
          registryContainer2.registry.unregister(cleanupTokenRef.current);
          cleanupTokenRef.current = null;
        }
      }
      React89.useEffect(() => {
        if (!subscription.current && handlerRef.current) {
          const enhancedHandler = (params, event, details) => {
            if (!event.defaultMuiPrevented) {
              var _handlerRef$current2;
              (_handlerRef$current2 = handlerRef.current) == null || _handlerRef$current2.call(handlerRef, params, event, details);
            }
          };
          subscription.current = apiRef.current.subscribeEvent(eventName, enhancedHandler, options);
        }
        if (cleanupTokenRef.current && registryContainer2.registry) {
          registryContainer2.registry.unregister(cleanupTokenRef.current);
          cleanupTokenRef.current = null;
        }
        return () => {
          var _subscription$current2;
          (_subscription$current2 = subscription.current) == null || _subscription$current2.call(subscription);
          subscription.current = null;
        };
      }, [apiRef, eventName, options]);
    };
  }
  var registryContainer = {
    registry: null
  };
  var unstable_resetCleanupTracking = () => {
    var _registryContainer$re;
    (_registryContainer$re = registryContainer.registry) == null || _registryContainer$re.reset();
    registryContainer.registry = null;
  };
  var useGridApiEventHandler = createUseGridApiEventHandler(registryContainer);
  var optionsSubscriberOptions = {
    isFirst: true
  };
  function useGridApiOptionHandler(apiRef, eventName, handler) {
    useGridApiEventHandler(apiRef, eventName, handler, optionsSubscriberOptions);
  }

  // node_modules/@mui/x-data-grid/hooks/utils/useGridLogger.js
  var React90 = __toESM(require_react());
  function useGridLogger(privateApiRef, name) {
    const logger = React90.useRef(null);
    if (logger.current) {
      return logger.current;
    }
    const newLogger = privateApiRef.current.getLogger(name);
    logger.current = newLogger;
    return newLogger;
  }

  // node_modules/@mui/x-data-grid/hooks/utils/useGridNativeEventListener.js
  var React91 = __toESM(require_react());

  // node_modules/@mui/x-data-grid/utils/utils.js
  function isNumber(value) {
    return typeof value === "number" && !Number.isNaN(value);
  }
  function isFunction(value) {
    return typeof value === "function";
  }
  function isObject(value) {
    return typeof value === "object" && value !== null;
  }
  function localStorageAvailable() {
    try {
      const key = "__some_random_key_you_are_not_going_to_use__";
      window.localStorage.setItem(key, key);
      window.localStorage.removeItem(key);
      return true;
    } catch (err) {
      return false;
    }
  }
  function escapeRegExp(value) {
    return value.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
  }
  var clamp2 = (value, min2, max2) => Math.max(min2, Math.min(max2, value));
  function isDeepEqual(a, b) {
    if (a === b) {
      return true;
    }
    if (a && b && typeof a === "object" && typeof b === "object") {
      if (a.constructor !== b.constructor) {
        return false;
      }
      if (Array.isArray(a)) {
        const length3 = a.length;
        if (length3 !== b.length) {
          return false;
        }
        for (let i = 0; i < length3; i += 1) {
          if (!isDeepEqual(a[i], b[i])) {
            return false;
          }
        }
        return true;
      }
      if (a instanceof Map && b instanceof Map) {
        if (a.size !== b.size) {
          return false;
        }
        const entriesA = Array.from(a.entries());
        for (let i = 0; i < entriesA.length; i += 1) {
          if (!b.has(entriesA[i][0])) {
            return false;
          }
        }
        for (let i = 0; i < entriesA.length; i += 1) {
          const entryA = entriesA[i];
          if (!isDeepEqual(entryA[1], b.get(entryA[0]))) {
            return false;
          }
        }
        return true;
      }
      if (a instanceof Set && b instanceof Set) {
        if (a.size !== b.size) {
          return false;
        }
        const entries = Array.from(a.entries());
        for (let i = 0; i < entries.length; i += 1) {
          if (!b.has(entries[i][0])) {
            return false;
          }
        }
        return true;
      }
      if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
        const length3 = a.length;
        if (length3 !== b.length) {
          return false;
        }
        for (let i = 0; i < length3; i += 1) {
          if (a[i] !== b[i]) {
            return false;
          }
        }
        return true;
      }
      if (a.constructor === RegExp) {
        return a.source === b.source && a.flags === b.flags;
      }
      if (a.valueOf !== Object.prototype.valueOf) {
        return a.valueOf() === b.valueOf();
      }
      if (a.toString !== Object.prototype.toString) {
        return a.toString() === b.toString();
      }
      const keys = Object.keys(a);
      const length2 = keys.length;
      if (length2 !== Object.keys(b).length) {
        return false;
      }
      for (let i = 0; i < length2; i += 1) {
        if (!Object.prototype.hasOwnProperty.call(b, keys[i])) {
          return false;
        }
      }
      for (let i = 0; i < length2; i += 1) {
        const key = keys[i];
        if (!isDeepEqual(a[key], b[key])) {
          return false;
        }
      }
      return true;
    }
    return a !== a && b !== b;
  }
  function mulberry32(a) {
    return () => {
      let t = a += 1831565813;
      t = Math.imul(t ^ t >>> 15, t | 1);
      t ^= t + Math.imul(t ^ t >>> 7, t | 61);
      return ((t ^ t >>> 14) >>> 0) / 4294967296;
    };
  }
  function randomNumberBetween(seed, min2, max2) {
    const random = mulberry32(seed);
    return () => min2 + (max2 - min2) * random();
  }
  function deepClone(obj) {
    if (typeof structuredClone === "function") {
      return structuredClone(obj);
    }
    return JSON.parse(JSON.stringify(obj));
  }

  // node_modules/@mui/x-data-grid/hooks/utils/useGridNativeEventListener.js
  var useGridNativeEventListener = (apiRef, ref, eventName, handler, options) => {
    const logger = useGridLogger(apiRef, "useNativeEventListener");
    const [added, setAdded] = React91.useState(false);
    const handlerRef = React91.useRef(handler);
    const wrapHandler = React91.useCallback((event) => {
      return handlerRef.current && handlerRef.current(event);
    }, []);
    React91.useEffect(() => {
      handlerRef.current = handler;
    }, [handler]);
    React91.useEffect(() => {
      let targetElement;
      if (isFunction(ref)) {
        targetElement = ref();
      } else {
        targetElement = ref && ref.current ? ref.current : null;
      }
      if (targetElement && eventName && !added) {
        logger.debug(`Binding native ${eventName} event`);
        targetElement.addEventListener(eventName, wrapHandler, options);
        const boundElem = targetElement;
        setAdded(true);
        const unsubscribe = () => {
          logger.debug(`Clearing native ${eventName} event`);
          boundElem.removeEventListener(eventName, wrapHandler, options);
        };
        apiRef.current.subscribeEvent("unmount", unsubscribe);
      }
    }, [ref, wrapHandler, eventName, added, logger, options, apiRef]);
  };

  // node_modules/@mui/x-data-grid/hooks/utils/useFirstRender.js
  var React92 = __toESM(require_react());
  var useFirstRender = (callback) => {
    const isFirstRender = React92.useRef(true);
    if (isFirstRender.current) {
      isFirstRender.current = false;
      callback();
    }
  };

  // node_modules/@mui/x-data-grid/hooks/features/pagination/gridPaginationUtils.js
  var MAX_PAGE_SIZE = 100;
  var defaultPageSize = (autoPageSize) => autoPageSize ? 0 : 100;
  var getPageCount = (rowCount, pageSize2) => {
    if (pageSize2 > 0 && rowCount > 0) {
      return Math.ceil(rowCount / pageSize2);
    }
    return 0;
  };
  var noRowCountInServerMode = buildWarning(["MUI: the 'rowCount' prop is undefined while using paginationMode='server'", "For more detail, see http://mui.com/components/data-grid/pagination/#basic-implementation"], "error");
  var getDefaultGridPaginationModel = (autoPageSize) => ({
    page: 0,
    pageSize: autoPageSize ? 0 : 100
  });
  var getValidPage = (page, pageCount = 0) => {
    if (pageCount === 0) {
      return page;
    }
    return Math.max(Math.min(page, pageCount - 1), 0);
  };
  var throwIfPageSizeExceedsTheLimit = (pageSize2, signatureProp) => {
    if (signatureProp === GridSignature.DataGrid && pageSize2 > MAX_PAGE_SIZE) {
      throw new Error(["MUI: `pageSize` cannot exceed 100 in the MIT version of the DataGrid.", "You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature."].join("\n"));
    }
  };

  // node_modules/@mui/x-data-grid/hooks/features/pagination/gridPaginationSelector.js
  var gridPaginationSelector = (state) => state.pagination;
  var gridPaginationModelSelector = createSelector2(gridPaginationSelector, (pagination) => pagination.paginationModel);
  var gridPaginationRowCountSelector = createSelector2(gridPaginationSelector, (pagination) => pagination.rowCount);
  var gridPageSelector = createSelector2(gridPaginationModelSelector, (paginationModel) => paginationModel.page);
  var gridPageSizeSelector = createSelector2(gridPaginationModelSelector, (paginationModel) => paginationModel.pageSize);
  var gridPageCountSelector = createSelector2(gridPageSizeSelector, gridPaginationRowCountSelector, (pageSize2, rowCount) => getPageCount(rowCount, pageSize2));
  var gridPaginationRowRangeSelector = createSelectorMemoized(gridPaginationModelSelector, gridRowTreeSelector, gridRowMaximumTreeDepthSelector, gridExpandedSortedRowEntriesSelector, gridFilteredSortedTopLevelRowEntriesSelector, (paginationModel, rowTree, rowTreeDepth, visibleSortedRowEntries, visibleSortedTopLevelRowEntries) => {
    const visibleTopLevelRowCount = visibleSortedTopLevelRowEntries.length;
    const topLevelFirstRowIndex = Math.min(paginationModel.pageSize * paginationModel.page, visibleTopLevelRowCount - 1);
    const topLevelLastRowIndex = Math.min(topLevelFirstRowIndex + paginationModel.pageSize - 1, visibleTopLevelRowCount - 1);
    if (topLevelFirstRowIndex === -1 || topLevelLastRowIndex === -1) {
      return null;
    }
    if (rowTreeDepth < 2) {
      return {
        firstRowIndex: topLevelFirstRowIndex,
        lastRowIndex: topLevelLastRowIndex
      };
    }
    const topLevelFirstRow = visibleSortedTopLevelRowEntries[topLevelFirstRowIndex];
    const topLevelRowsInCurrentPageCount = topLevelLastRowIndex - topLevelFirstRowIndex + 1;
    const firstRowIndex = visibleSortedRowEntries.findIndex((row) => row.id === topLevelFirstRow.id);
    let lastRowIndex = firstRowIndex;
    let topLevelRowAdded = 0;
    while (lastRowIndex < visibleSortedRowEntries.length && topLevelRowAdded <= topLevelRowsInCurrentPageCount) {
      var _rowTree$row$id;
      const row = visibleSortedRowEntries[lastRowIndex];
      const depth = (_rowTree$row$id = rowTree[row.id]) == null ? void 0 : _rowTree$row$id.depth;
      if (depth === void 0) {
        lastRowIndex += 1;
      } else {
        if (topLevelRowAdded < topLevelRowsInCurrentPageCount || depth > 0) {
          lastRowIndex += 1;
        }
        if (depth === 0) {
          topLevelRowAdded += 1;
        }
      }
    }
    return {
      firstRowIndex,
      lastRowIndex: lastRowIndex - 1
    };
  });
  var gridPaginatedVisibleSortedGridRowEntriesSelector = createSelectorMemoized(gridExpandedSortedRowEntriesSelector, gridPaginationRowRangeSelector, (visibleSortedRowEntries, paginationRange) => {
    if (!paginationRange) {
      return [];
    }
    return visibleSortedRowEntries.slice(paginationRange.firstRowIndex, paginationRange.lastRowIndex + 1);
  });
  var gridPaginatedVisibleSortedGridRowIdsSelector = createSelectorMemoized(gridExpandedSortedRowIdsSelector, gridPaginationRowRangeSelector, (visibleSortedRowIds, paginationRange) => {
    if (!paginationRange) {
      return [];
    }
    return visibleSortedRowIds.slice(paginationRange.firstRowIndex, paginationRange.lastRowIndex + 1);
  });

  // node_modules/@mui/x-data-grid/hooks/features/preferencesPanel/gridPreferencePanelSelector.js
  var gridPreferencePanelStateSelector = (state) => state.preferencePanel;

  // node_modules/@mui/x-data-grid/hooks/features/preferencesPanel/gridPreferencePanelsValue.js
  var GridPreferencePanelsValue = /* @__PURE__ */ function(GridPreferencePanelsValue2) {
    GridPreferencePanelsValue2["filters"] = "filters";
    GridPreferencePanelsValue2["columns"] = "columns";
    return GridPreferencePanelsValue2;
  }(GridPreferencePanelsValue || {});

  // node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsMetaSelector.js
  var gridRowsMetaSelector = (state) => state.rowsMeta;

  // node_modules/@mui/x-data-grid/hooks/features/rowSelection/gridRowSelectionSelector.js
  var gridRowSelectionStateSelector = (state) => state.rowSelection;
  var selectedGridRowsCountSelector = createSelector2(gridRowSelectionStateSelector, (selection) => selection.length);
  var selectedGridRowsSelector = createSelectorMemoized(gridRowSelectionStateSelector, gridRowsLookupSelector, (selectedRows, rowsLookup) => new Map(selectedRows.map((id) => [id, rowsLookup[id]])));
  var selectedIdsLookupSelector = createSelectorMemoized(gridRowSelectionStateSelector, (selection) => selection.reduce((lookup, rowId) => {
    lookup[rowId] = rowId;
    return lookup;
  }, {}));

  // node_modules/@mui/x-data-grid/hooks/features/sorting/gridSortingUtils.js
  init_extends();
  var sortModelDisableMultiColumnsSortingWarning = buildWarning(["MUI: The `sortModel` can only contain a single item when the `disableMultipleColumnsSorting` prop is set to `true`.", "If you are using the community version of the `DataGrid`, this prop is always `true`."], "error");
  var sanitizeSortModel = (model, disableMultipleColumnsSorting) => {
    if (disableMultipleColumnsSorting && model.length > 1) {
      sortModelDisableMultiColumnsSortingWarning();
      return [model[0]];
    }
    return model;
  };
  var mergeStateWithSortModel = (sortModel, disableMultipleColumnsSorting) => (state) => _extends({}, state, {
    sorting: _extends({}, state.sorting, {
      sortModel: sanitizeSortModel(sortModel, disableMultipleColumnsSorting)
    })
  });
  var isDesc = (direction) => direction === "desc";
  var parseSortItem = (sortItem, apiRef) => {
    const column2 = apiRef.current.getColumn(sortItem.field);
    if (!column2) {
      return null;
    }
    const comparator = isDesc(sortItem.sort) ? (...args) => -1 * column2.sortComparator(...args) : column2.sortComparator;
    const getSortCellParams = (id) => ({
      id,
      field: column2.field,
      rowNode: apiRef.current.getRowNode(id),
      value: apiRef.current.getCellValue(id, column2.field),
      api: apiRef.current
    });
    return {
      getSortCellParams,
      comparator
    };
  };
  var compareRows = (parsedSortItems, row1, row2) => {
    return parsedSortItems.reduce((res, item, index) => {
      if (res !== 0) {
        return res;
      }
      const sortCellParams1 = row1.params[index];
      const sortCellParams2 = row2.params[index];
      res = item.comparator(sortCellParams1.value, sortCellParams2.value, sortCellParams1, sortCellParams2);
      return res;
    }, 0);
  };
  var buildAggregatedSortingApplier = (sortModel, apiRef) => {
    const comparatorList = sortModel.map((item) => parseSortItem(item, apiRef)).filter((comparator) => !!comparator);
    if (comparatorList.length === 0) {
      return null;
    }
    return (rowList) => rowList.map((node2) => ({
      node: node2,
      params: comparatorList.map((el) => el.getSortCellParams(node2.id))
    })).sort((a, b) => compareRows(comparatorList, a, b)).map((row) => row.node.id);
  };
  var getNextGridSortDirection = (sortingOrder, current) => {
    const currentIdx = sortingOrder.indexOf(current);
    if (!current || currentIdx === -1 || currentIdx + 1 === sortingOrder.length) {
      return sortingOrder[0];
    }
    return sortingOrder[currentIdx + 1];
  };
  var gridNillComparator = (v1, v2) => {
    if (v1 == null && v2 != null) {
      return -1;
    }
    if (v2 == null && v1 != null) {
      return 1;
    }
    if (v1 == null && v2 == null) {
      return 0;
    }
    return null;
  };
  var collator = new Intl.Collator();
  var gridStringOrNumberComparator = (value1, value2) => {
    const nillResult = gridNillComparator(value1, value2);
    if (nillResult !== null) {
      return nillResult;
    }
    if (typeof value1 === "string") {
      return collator.compare(value1.toString(), value2.toString());
    }
    return value1 - value2;
  };
  var gridNumberComparator = (value1, value2) => {
    const nillResult = gridNillComparator(value1, value2);
    if (nillResult !== null) {
      return nillResult;
    }
    return Number(value1) - Number(value2);
  };
  var gridDateComparator = (value1, value2) => {
    const nillResult = gridNillComparator(value1, value2);
    if (nillResult !== null) {
      return nillResult;
    }
    if (value1 > value2) {
      return 1;
    }
    if (value1 < value2) {
      return -1;
    }
    return 0;
  };

  // node_modules/@mui/x-data-grid/hooks/features/headerFiltering/gridHeaderFilteringSelectors.js
  var unstable_gridHeaderFilteringStateSelector = (state) => state.headerFiltering;
  var unstable_gridHeaderFilteringEditFieldSelector = createSelector2(unstable_gridHeaderFilteringStateSelector, (headerFilteringState) => headerFilteringState.editing);
  var unstable_gridHeaderFilteringMenuSelector = createSelector2(unstable_gridHeaderFilteringStateSelector, (headerFilteringState) => headerFilteringState.menuOpen);

  // node_modules/@mui/x-data-grid/hooks/features/virtualization/useGridVirtualization.js
  init_extends();
  var React93 = __toESM(require_react());
  var virtualizationStateInitializer = (state, props) => {
    const virtualization = {
      enabled: !props.disableVirtualization,
      enabledForColumns: true
    };
    return _extends({}, state, {
      virtualization
    });
  };
  function useGridVirtualization(apiRef, props) {
    const setVirtualization = (enabled) => {
      apiRef.current.setState((state) => _extends({}, state, {
        virtualization: _extends({}, state.virtualization, {
          enabled
        })
      }));
    };
    const setColumnVirtualization = (enabled) => {
      apiRef.current.setState((state) => _extends({}, state, {
        virtualization: _extends({}, state.virtualization, {
          enabledForColumns: enabled
        })
      }));
    };
    const api = {
      unstable_setVirtualization: setVirtualization,
      unstable_setColumnVirtualization: setColumnVirtualization
    };
    useGridApiMethod(apiRef, api, "public");
    React93.useEffect(() => {
      setVirtualization(!props.disableVirtualization);
    }, [props.disableVirtualization]);
  }

  // node_modules/@mui/x-data-grid/hooks/features/virtualization/gridVirtualizationSelectors.js
  var gridVirtualizationSelector = (state) => state.virtualization;
  var gridVirtualizationEnabledSelector = createSelector2(gridVirtualizationSelector, (state) => state.enabled);
  var gridVirtualizationColumnEnabledSelector = createSelector2(gridVirtualizationSelector, (state) => state.enabledForColumns);

  // node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeaderFilterIconButton.js
  var import_jsx_runtime66 = __toESM(require_jsx_runtime());
  var import_jsx_runtime67 = __toESM(require_jsx_runtime());
  var useUtilityClasses32 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      icon: ["filterIcon"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  function GridColumnHeaderFilterIconButton(props) {
    var _rootProps$slotProps, _rootProps$slotProps2;
    const {
      counter,
      field,
      onClick
    } = props;
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const ownerState = _extends({}, props, {
      classes: rootProps.classes
    });
    const classes = useUtilityClasses32(ownerState);
    const preferencePanel = useGridSelector(apiRef, gridPreferencePanelStateSelector);
    const labelId = useId();
    const panelId = useId();
    const toggleFilter = React94.useCallback((event) => {
      event.preventDefault();
      event.stopPropagation();
      const {
        open: open2,
        openedPanelValue
      } = gridPreferencePanelStateSelector(apiRef.current.state);
      if (open2 && openedPanelValue === GridPreferencePanelsValue.filters) {
        apiRef.current.hideFilterPanel();
      } else {
        apiRef.current.showFilterPanel(void 0, panelId, labelId);
      }
      if (onClick) {
        onClick(apiRef.current.getColumnHeaderParams(field), event);
      }
    }, [apiRef, field, onClick, panelId, labelId]);
    if (!counter) {
      return null;
    }
    const open = preferencePanel.open && preferencePanel.labelId === labelId;
    const iconButton = /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(rootProps.slots.baseIconButton, _extends({
      id: labelId,
      onClick: toggleFilter,
      color: "default",
      "aria-label": apiRef.current.getLocaleText("columnHeaderFiltersLabel"),
      size: "small",
      tabIndex: -1,
      "aria-haspopup": "menu",
      "aria-expanded": open,
      "aria-controls": open ? panelId : void 0
    }, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseIconButton, {
      children: /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(rootProps.slots.columnFilteredIcon, {
        className: classes.icon,
        fontSize: "small"
      })
    }));
    return /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(rootProps.slots.baseTooltip, _extends({
      title: apiRef.current.getLocaleText("columnHeaderFiltersTooltipActive")(counter),
      enterDelay: 1e3
    }, (_rootProps$slotProps2 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps2.baseTooltip, {
      children: /* @__PURE__ */ (0, import_jsx_runtime67.jsxs)(GridIconButtonContainer, {
        children: [counter > 1 && /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(Badge_default, {
          badgeContent: counter,
          color: "default",
          children: iconButton
        }), counter === 1 && iconButton]
      })
    }));
  }
  true ? GridColumnHeaderFilterIconButton.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    counter: import_prop_types55.default.number,
    field: import_prop_types55.default.string.isRequired,
    onClick: import_prop_types55.default.func
  } : void 0;

  // node_modules/@mui/x-data-grid/components/columnSelection/GridCellCheckboxRenderer.js
  init_extends();
  var React95 = __toESM(require_react());
  var import_prop_types56 = __toESM(require_prop_types());
  var import_jsx_runtime68 = __toESM(require_jsx_runtime());
  var _excluded55 = ["field", "id", "value", "formattedValue", "row", "rowNode", "colDef", "isEditable", "cellMode", "hasFocus", "tabIndex", "api"];
  var useUtilityClasses33 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["checkboxInput"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridCellCheckboxForwardRef = /* @__PURE__ */ React95.forwardRef(function GridCellCheckboxRenderer(props, ref) {
    var _rootProps$slotProps;
    const {
      field,
      id,
      value: isChecked,
      rowNode,
      hasFocus,
      tabIndex
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded55);
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const ownerState = {
      classes: rootProps.classes
    };
    const classes = useUtilityClasses33(ownerState);
    const checkboxElement = React95.useRef(null);
    const rippleRef = React95.useRef(null);
    const handleRef = useForkRef(checkboxElement, ref);
    const element = apiRef.current.getCellElement(id, field);
    const handleChange = (event) => {
      const params = {
        value: event.target.checked,
        id
      };
      apiRef.current.publishEvent("rowSelectionCheckboxChange", params, event);
    };
    React95.useLayoutEffect(() => {
      if (tabIndex === 0 && element) {
        element.tabIndex = -1;
      }
    }, [element, tabIndex]);
    React95.useEffect(() => {
      if (hasFocus) {
        var _checkboxElement$curr;
        const input = (_checkboxElement$curr = checkboxElement.current) == null ? void 0 : _checkboxElement$curr.querySelector("input");
        input == null || input.focus({
          preventScroll: true
        });
      } else if (rippleRef.current) {
        rippleRef.current.stop({});
      }
    }, [hasFocus]);
    const handleKeyDown2 = React95.useCallback((event) => {
      if (isSpaceKey(event.key)) {
        event.stopPropagation();
      }
    }, []);
    if (rowNode.type === "footer" || rowNode.type === "pinnedRow") {
      return null;
    }
    const isSelectable = apiRef.current.isRowSelectable(id);
    const label = apiRef.current.getLocaleText(isChecked ? "checkboxSelectionUnselectRow" : "checkboxSelectionSelectRow");
    return /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(rootProps.slots.baseCheckbox, _extends({
      ref: handleRef,
      tabIndex,
      checked: isChecked,
      onChange: handleChange,
      className: classes.root,
      inputProps: {
        "aria-label": label
      },
      onKeyDown: handleKeyDown2,
      disabled: !isSelectable,
      touchRippleRef: rippleRef
    }, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseCheckbox, other));
  });
  true ? GridCellCheckboxForwardRef.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * GridApi that let you manipulate the grid.
     */
    api: import_prop_types56.default.object.isRequired,
    /**
     * The mode of the cell.
     */
    cellMode: import_prop_types56.default.oneOf(["edit", "view"]).isRequired,
    /**
     * The column of the row that the current cell belongs to.
     */
    colDef: import_prop_types56.default.object.isRequired,
    /**
     * The column field of the cell that triggered the event.
     */
    field: import_prop_types56.default.string.isRequired,
    /**
     * A ref allowing to set imperative focus.
     * It can be passed to the element that should receive focus.
     * @ignore - do not document.
     */
    focusElementRef: import_prop_types56.default.oneOfType([import_prop_types56.default.func, import_prop_types56.default.shape({
      current: import_prop_types56.default.shape({
        focus: import_prop_types56.default.func.isRequired
      })
    })]),
    /**
     * The cell value formatted with the column valueFormatter.
     */
    formattedValue: import_prop_types56.default.any,
    /**
     * If true, the cell is the active element.
     */
    hasFocus: import_prop_types56.default.bool.isRequired,
    /**
     * The grid row id.
     */
    id: import_prop_types56.default.oneOfType([import_prop_types56.default.number, import_prop_types56.default.string]).isRequired,
    /**
     * If true, the cell is editable.
     */
    isEditable: import_prop_types56.default.bool,
    /**
     * The row model of the row that the current cell belongs to.
     */
    row: import_prop_types56.default.any.isRequired,
    /**
     * The node of the row that the current cell belongs to.
     */
    rowNode: import_prop_types56.default.object.isRequired,
    /**
     * the tabIndex value.
     */
    tabIndex: import_prop_types56.default.oneOf([-1, 0]).isRequired,
    /**
     * The cell value.
     * If the column has `valueGetter`, use `params.row` to directly access the fields.
     */
    value: import_prop_types56.default.any
  } : void 0;
  var GridCellCheckboxRenderer2 = GridCellCheckboxForwardRef;

  // node_modules/@mui/x-data-grid/components/columnSelection/GridHeaderCheckbox.js
  init_extends();
  var React96 = __toESM(require_react());
  var import_prop_types57 = __toESM(require_prop_types());
  var import_jsx_runtime69 = __toESM(require_jsx_runtime());
  var _excluded56 = ["field", "colDef"];
  var useUtilityClasses34 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["checkboxInput"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridHeaderCheckbox = /* @__PURE__ */ React96.forwardRef(function GridHeaderCheckbox2(props, ref) {
    var _rootProps$slotProps;
    const other = _objectWithoutPropertiesLoose(props, _excluded56);
    const [, forceUpdate] = React96.useState(false);
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const ownerState = {
      classes: rootProps.classes
    };
    const classes = useUtilityClasses34(ownerState);
    const tabIndexState = useGridSelector(apiRef, gridTabIndexColumnHeaderSelector);
    const selection = useGridSelector(apiRef, gridRowSelectionStateSelector);
    const visibleRowIds = useGridSelector(apiRef, gridExpandedSortedRowIdsSelector);
    const paginatedVisibleRowIds = useGridSelector(apiRef, gridPaginatedVisibleSortedGridRowIdsSelector);
    const filteredSelection = React96.useMemo(() => {
      if (typeof rootProps.isRowSelectable !== "function") {
        return selection;
      }
      return selection.filter((id) => {
        if (!apiRef.current.getRow(id)) {
          return false;
        }
        return rootProps.isRowSelectable(apiRef.current.getRowParams(id));
      });
    }, [apiRef, rootProps.isRowSelectable, selection]);
    const selectionCandidates = React96.useMemo(() => {
      const rowIds = !rootProps.pagination || !rootProps.checkboxSelectionVisibleOnly ? visibleRowIds : paginatedVisibleRowIds;
      return rowIds.reduce((acc, id) => {
        acc[id] = true;
        return acc;
      }, {});
    }, [rootProps.pagination, rootProps.checkboxSelectionVisibleOnly, paginatedVisibleRowIds, visibleRowIds]);
    const currentSelectionSize = React96.useMemo(() => filteredSelection.filter((id) => selectionCandidates[id]).length, [filteredSelection, selectionCandidates]);
    const isIndeterminate = currentSelectionSize > 0 && currentSelectionSize < Object.keys(selectionCandidates).length;
    const isChecked = currentSelectionSize > 0;
    const handleChange = (event) => {
      const params = {
        value: event.target.checked
      };
      apiRef.current.publishEvent("headerSelectionCheckboxChange", params);
    };
    const tabIndex = tabIndexState !== null && tabIndexState.field === props.field ? 0 : -1;
    React96.useLayoutEffect(() => {
      const element = apiRef.current.getColumnHeaderElement(props.field);
      if (tabIndex === 0 && element) {
        element.tabIndex = -1;
      }
    }, [tabIndex, apiRef, props.field]);
    const handleKeyDown2 = React96.useCallback((event) => {
      if (event.key === " ") {
        apiRef.current.publishEvent("headerSelectionCheckboxChange", {
          value: !isChecked
        });
      }
    }, [apiRef, isChecked]);
    const handleSelectionChange = React96.useCallback(() => {
      forceUpdate((p) => !p);
    }, []);
    React96.useEffect(() => {
      return apiRef.current.subscribeEvent("rowSelectionChange", handleSelectionChange);
    }, [apiRef, handleSelectionChange]);
    const label = apiRef.current.getLocaleText(isChecked ? "checkboxSelectionUnselectAllRows" : "checkboxSelectionSelectAllRows");
    return /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(rootProps.slots.baseCheckbox, _extends({
      ref,
      indeterminate: isIndeterminate,
      checked: isChecked,
      onChange: handleChange,
      className: classes.root,
      inputProps: {
        "aria-label": label
      },
      tabIndex,
      onKeyDown: handleKeyDown2
    }, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseCheckbox, other));
  });
  true ? GridHeaderCheckbox.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * The column of the current header component.
     */
    colDef: import_prop_types57.default.object.isRequired,
    /**
     * The column field of the column that triggered the event
     */
    field: import_prop_types57.default.string.isRequired
  } : void 0;

  // node_modules/@mui/x-data-grid/material/icons/index.js
  var React99 = __toESM(require_react());

  // node_modules/@mui/material/utils/createSvgIcon.js
  init_extends();
  var React98 = __toESM(require_react());

  // node_modules/@mui/material/SvgIcon/SvgIcon.js
  init_extends();
  var React97 = __toESM(require_react());
  var import_prop_types58 = __toESM(require_prop_types());

  // node_modules/@mui/material/SvgIcon/svgIconClasses.js
  function getSvgIconUtilityClass(slot) {
    return generateUtilityClass("MuiSvgIcon", slot);
  }
  var svgIconClasses = generateUtilityClasses("MuiSvgIcon", ["root", "colorPrimary", "colorSecondary", "colorAction", "colorError", "colorDisabled", "fontSizeInherit", "fontSizeSmall", "fontSizeMedium", "fontSizeLarge"]);

  // node_modules/@mui/material/SvgIcon/SvgIcon.js
  var import_jsx_runtime70 = __toESM(require_jsx_runtime());
  var import_jsx_runtime71 = __toESM(require_jsx_runtime());
  var _excluded57 = ["children", "className", "color", "component", "fontSize", "htmlColor", "inheritViewBox", "titleAccess", "viewBox"];
  var useUtilityClasses35 = (ownerState) => {
    const {
      color: color2,
      fontSize,
      classes
    } = ownerState;
    const slots = {
      root: ["root", color2 !== "inherit" && `color${capitalize_default(color2)}`, `fontSize${capitalize_default(fontSize)}`]
    };
    return composeClasses(slots, getSvgIconUtilityClass, classes);
  };
  var SvgIconRoot = styled_default2("svg", {
    name: "MuiSvgIcon",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, ownerState.color !== "inherit" && styles4[`color${capitalize_default(ownerState.color)}`], styles4[`fontSize${capitalize_default(ownerState.fontSize)}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    var _theme$transitions, _theme$transitions$cr, _theme$transitions2, _theme$typography, _theme$typography$pxT, _theme$typography2, _theme$typography2$px, _theme$typography3, _theme$typography3$px, _palette$ownerState$c, _palette, _palette2, _palette3;
    return {
      userSelect: "none",
      width: "1em",
      height: "1em",
      display: "inline-block",
      // the <svg> will define the property that has `currentColor`
      // for example heroicons uses fill="none" and stroke="currentColor"
      fill: ownerState.hasSvgAsChild ? void 0 : "currentColor",
      flexShrink: 0,
      transition: (_theme$transitions = theme.transitions) == null || (_theme$transitions$cr = _theme$transitions.create) == null ? void 0 : _theme$transitions$cr.call(_theme$transitions, "fill", {
        duration: (_theme$transitions2 = theme.transitions) == null || (_theme$transitions2 = _theme$transitions2.duration) == null ? void 0 : _theme$transitions2.shorter
      }),
      fontSize: {
        inherit: "inherit",
        small: ((_theme$typography = theme.typography) == null || (_theme$typography$pxT = _theme$typography.pxToRem) == null ? void 0 : _theme$typography$pxT.call(_theme$typography, 20)) || "1.25rem",
        medium: ((_theme$typography2 = theme.typography) == null || (_theme$typography2$px = _theme$typography2.pxToRem) == null ? void 0 : _theme$typography2$px.call(_theme$typography2, 24)) || "1.5rem",
        large: ((_theme$typography3 = theme.typography) == null || (_theme$typography3$px = _theme$typography3.pxToRem) == null ? void 0 : _theme$typography3$px.call(_theme$typography3, 35)) || "2.1875rem"
      }[ownerState.fontSize],
      // TODO v5 deprecate, v6 remove for sx
      color: (_palette$ownerState$c = (_palette = (theme.vars || theme).palette) == null || (_palette = _palette[ownerState.color]) == null ? void 0 : _palette.main) != null ? _palette$ownerState$c : {
        action: (_palette2 = (theme.vars || theme).palette) == null || (_palette2 = _palette2.action) == null ? void 0 : _palette2.active,
        disabled: (_palette3 = (theme.vars || theme).palette) == null || (_palette3 = _palette3.action) == null ? void 0 : _palette3.disabled,
        inherit: void 0
      }[ownerState.color]
    };
  });
  var SvgIcon = /* @__PURE__ */ React97.forwardRef(function SvgIcon2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiSvgIcon"
    });
    const {
      children,
      className,
      color: color2 = "inherit",
      component = "svg",
      fontSize = "medium",
      htmlColor,
      inheritViewBox = false,
      titleAccess,
      viewBox = "0 0 24 24"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded57);
    const hasSvgAsChild = /* @__PURE__ */ React97.isValidElement(children) && children.type === "svg";
    const ownerState = _extends({}, props, {
      color: color2,
      component,
      fontSize,
      instanceFontSize: inProps.fontSize,
      inheritViewBox,
      viewBox,
      hasSvgAsChild
    });
    const more = {};
    if (!inheritViewBox) {
      more.viewBox = viewBox;
    }
    const classes = useUtilityClasses35(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(SvgIconRoot, _extends({
      as: component,
      className: clsx_default(classes.root, className),
      focusable: "false",
      color: htmlColor,
      "aria-hidden": titleAccess ? void 0 : true,
      role: titleAccess ? "img" : void 0,
      ref
    }, more, other, hasSvgAsChild && children.props, {
      ownerState,
      children: [hasSvgAsChild ? children.props.children : children, titleAccess ? /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("title", {
        children: titleAccess
      }) : null]
    }));
  });
  true ? SvgIcon.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Node passed into the SVG element.
     */
    children: import_prop_types58.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types58.default.object,
    /**
     * @ignore
     */
    className: import_prop_types58.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * You can use the `htmlColor` prop to apply a color attribute to the SVG element.
     * @default 'inherit'
     */
    color: import_prop_types58.default.oneOfType([import_prop_types58.default.oneOf(["inherit", "action", "disabled", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types58.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types58.default.elementType,
    /**
     * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
     * @default 'medium'
     */
    fontSize: import_prop_types58.default.oneOfType([import_prop_types58.default.oneOf(["inherit", "large", "medium", "small"]), import_prop_types58.default.string]),
    /**
     * Applies a color attribute to the SVG element.
     */
    htmlColor: import_prop_types58.default.string,
    /**
     * If `true`, the root node will inherit the custom `component`'s viewBox and the `viewBox`
     * prop will be ignored.
     * Useful when you want to reference a custom `component` and have `SvgIcon` pass that
     * `component`'s viewBox to the root node.
     * @default false
     */
    inheritViewBox: import_prop_types58.default.bool,
    /**
     * The shape-rendering attribute. The behavior of the different options is described on the
     * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).
     * If you are having issues with blurry icons you should investigate this prop.
     */
    shapeRendering: import_prop_types58.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types58.default.oneOfType([import_prop_types58.default.arrayOf(import_prop_types58.default.oneOfType([import_prop_types58.default.func, import_prop_types58.default.object, import_prop_types58.default.bool])), import_prop_types58.default.func, import_prop_types58.default.object]),
    /**
     * Provides a human-readable title for the element that contains it.
     * https://www.w3.org/TR/SVG-access/#Equivalent
     */
    titleAccess: import_prop_types58.default.string,
    /**
     * Allows you to redefine what the coordinates without units mean inside an SVG element.
     * For example, if the SVG element is 500 (width) by 200 (height),
     * and you pass viewBox="0 0 50 20",
     * this means that the coordinates inside the SVG will go from the top left corner (0,0)
     * to bottom right (50,20) and each unit will be worth 10px.
     * @default '0 0 24 24'
     */
    viewBox: import_prop_types58.default.string
  } : void 0;
  SvgIcon.muiName = "SvgIcon";
  var SvgIcon_default = SvgIcon;

  // node_modules/@mui/material/utils/createSvgIcon.js
  var import_jsx_runtime72 = __toESM(require_jsx_runtime());
  function createSvgIcon(path, displayName) {
    function Component(props, ref) {
      return /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(SvgIcon_default, _extends({
        "data-testid": `${displayName}Icon`,
        ref
      }, props, {
        children: path
      }));
    }
    if (true) {
      Component.displayName = `${displayName}Icon`;
    }
    Component.muiName = SvgIcon_default.muiName;
    return /* @__PURE__ */ React98.memo(/* @__PURE__ */ React98.forwardRef(Component));
  }

  // node_modules/@mui/material/utils/debounce.js
  var debounce_default = debounce;

  // node_modules/@mui/material/utils/isMuiElement.js
  var isMuiElement_default = isMuiElement;

  // node_modules/@mui/material/utils/ownerWindow.js
  var ownerWindow_default = ownerWindow;

  // node_modules/@mui/material/utils/useId.js
  var useId_default = useId;

  // node_modules/@mui/material/utils/unsupportedProp.js
  var unsupportedProp_default = unsupportedProp;

  // node_modules/@mui/material/utils/useControlled.js
  var useControlled_default = useControlled;

  // node_modules/@mui/x-data-grid/material/icons/index.js
  var import_jsx_runtime73 = __toESM(require_jsx_runtime());
  var GridArrowUpwardIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime73.jsx)("path", {
    d: "M4 12l1.41 1.41L11 7.83V20h2V7.83l5.58 5.59L20 12l-8-8-8 8z"
  }), "ArrowUpward");
  var GridArrowDownwardIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime73.jsx)("path", {
    d: "M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z"
  }), "ArrowDownward");
  var GridKeyboardArrowRight = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime73.jsx)("path", {
    d: "M8.59 16.59 13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"
  }), "KeyboardArrowRight");
  var GridExpandMoreIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime73.jsx)("path", {
    d: "M16.59 8.59 12 13.17 7.41 8.59 6 10l6 6 6-6z"
  }), "ExpandMore");
  var GridFilterListIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime73.jsx)("path", {
    d: "M10 18h4v-2h-4v2zM3 6v2h18V6H3zm3 7h12v-2H6v2z"
  }), "FilterList");
  var GridFilterAltIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime73.jsx)("path", {
    d: "M4.25 5.61C6.27 8.2 10 13 10 13v6c0 .55.45 1 1 1h2c.55 0 1-.45 1-1v-6s3.72-4.8 5.74-7.39c.51-.66.04-1.61-.79-1.61H5.04c-.83 0-1.3.95-.79 1.61z"
  }), "FilterAlt");
  var GridSearchIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime73.jsx)("path", {
    d: "M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"
  }), "Search");
  var GridMenuIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime73.jsx)("path", {
    d: "M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"
  }), "Menu");
  var GridCheckCircleIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime73.jsx)("path", {
    d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
  }), "CheckCircle");
  var GridColumnIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime73.jsx)("path", {
    d: "M6 5H3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h3c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1zm14 0h-3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h3c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1zm-7 0h-3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h3c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1z"
  }), "ColumnIcon");
  var GridSeparatorIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime73.jsx)("path", {
    d: "M11 19V5h2v14z"
  }), "Separator");
  var GridViewHeadlineIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime73.jsx)("path", {
    d: "M4 15h16v-2H4v2zm0 4h16v-2H4v2zm0-8h16V9H4v2zm0-6v2h16V5H4z"
  }), "ViewHeadline");
  var GridTableRowsIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime73.jsx)("path", {
    d: "M21,8H3V4h18V8z M21,10H3v4h18V10z M21,16H3v4h18V16z"
  }), "TableRows");
  var GridViewStreamIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime73.jsx)("path", {
    d: "M4 18h17v-6H4v6zM4 5v6h17V5H4z"
  }), "ViewStream");
  var GridTripleDotsVerticalIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime73.jsx)("path", {
    d: "M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
  }), "TripleDotsVertical");
  var GridCloseIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime73.jsx)("path", {
    d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
  }), "Close");
  var GridAddIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime73.jsx)("path", {
    d: "M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"
  }), "Add");
  var GridRemoveIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime73.jsx)("path", {
    d: "M19 13H5v-2h14v2z"
  }), "Remove");
  var GridLoadIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime73.jsx)("path", {
    d: "M12 4V1L8 5l4 4V6c3.31 0 6 2.69 6 6 0 1.01-.25 1.97-.7 2.8l1.46 1.46C19.54 15.03 20 13.57 20 12c0-4.42-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6 0-1.01.25-1.97.7-2.8L5.24 7.74C4.46 8.97 4 10.43 4 12c0 4.42 3.58 8 8 8v3l4-4-4-4v3z"
  }), "Load");
  var GridDragIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime73.jsx)("path", {
    d: "M11 18c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2zm-2-8c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm6 4c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
  }), "Drag");
  var GridSaveAltIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime73.jsx)("path", {
    d: "M19 12v7H5v-7H3v7c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v-7h-2zm-6 .67l2.59-2.58L17 11.5l-5 5-5-5 1.41-1.41L11 12.67V3h2z"
  }), "SaveAlt");
  var GridCheckIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime73.jsx)("path", {
    d: "M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"
  }), "Check");
  var GridMoreVertIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime73.jsx)("path", {
    d: "M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
  }), "MoreVert");
  var GridVisibilityOffIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime73.jsx)("path", {
    d: "M12 7c2.76 0 5 2.24 5 5 0 .65-.13 1.26-.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74.25-3.98.7l2.16 2.16C10.74 7.13 11.35 7 12 7zM2 4.27l2.28 2.28.46.46C3.08 8.3 1.78 10.02 1 12c1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-.3 4.38-.84l.42.42L19.73 22 21 20.73 3.27 3 2 4.27zM7.53 9.8l1.55 1.55c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3 .22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53-2.76 0-5-2.24-5-5 0-.79.2-1.53.53-2.2zm4.31-.78l3.15 3.15.02-.16c0-1.66-1.34-3-3-3l-.17.01z"
  }), "VisibilityOff");
  var GridViewColumnIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime73.jsx)("g", {
    children: /* @__PURE__ */ (0, import_jsx_runtime73.jsx)("path", {
      d: "M14.67,5v14H9.33V5H14.67z M15.67,19H21V5h-5.33V19z M8.33,19V5H3v14H8.33z"
    })
  }), "ViewColumn");
  var GridClearIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime73.jsx)("path", {
    d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
  }), "Clear");
  var GridDeleteIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime73.jsx)("path", {
    d: "M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"
  }), "Delete");
  var GridDeleteForeverIcon = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime73.jsx)("path", {
    d: "M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zm2.46-7.12l1.41-1.41L12 12.59l2.12-2.12 1.41 1.41L13.41 14l2.12 2.12-1.41 1.41L12 15.41l-2.12 2.12-1.41-1.41L10.59 14l-2.13-2.12zM15.5 4l-1-1h-5l-1 1H5v2h14V4z"
  }), "Delete");

  // node_modules/@mui/x-data-grid/components/menu/columnMenu/GridColumnMenuContainer.js
  init_extends();
  var import_prop_types59 = __toESM(require_prop_types());
  var React100 = __toESM(require_react());
  var import_jsx_runtime74 = __toESM(require_jsx_runtime());
  var _excluded58 = ["hideMenu", "colDef", "id", "labelledby", "className", "children", "open"];
  var StyledMenuList = styled_default2(MenuList_default)(() => ({
    minWidth: 248
  }));
  var GridColumnMenuContainer = /* @__PURE__ */ React100.forwardRef(function GridColumnMenuContainer2(props, ref) {
    const {
      hideMenu,
      id,
      labelledby,
      className,
      children,
      open
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded58);
    const handleListKeyDown = React100.useCallback((event) => {
      if (isTabKey(event.key)) {
        event.preventDefault();
      }
      if (isHideMenuKey(event.key)) {
        hideMenu(event);
      }
    }, [hideMenu]);
    return /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(StyledMenuList, _extends({
      id,
      ref,
      className: clsx_default(gridClasses.menuList, className),
      "aria-labelledby": labelledby,
      onKeyDown: handleListKeyDown,
      autoFocus: open
    }, other, {
      children
    }));
  });
  true ? GridColumnMenuContainer.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    colDef: import_prop_types59.default.object.isRequired,
    hideMenu: import_prop_types59.default.func.isRequired,
    id: import_prop_types59.default.string,
    labelledby: import_prop_types59.default.string,
    open: import_prop_types59.default.bool.isRequired
  } : void 0;

  // node_modules/@mui/x-data-grid/components/menu/columnMenu/GridColumnMenu.js
  init_extends();
  var React107 = __toESM(require_react());
  var import_prop_types65 = __toESM(require_prop_types());

  // node_modules/@mui/x-data-grid/hooks/features/columnMenu/useGridColumnMenuSlots.js
  init_extends();
  var React101 = __toESM(require_react());
  var _excluded59 = ["displayOrder"];
  var useGridColumnMenuSlots = (props) => {
    const apiRef = useGridPrivateApiContext();
    const {
      defaultSlots: defaultSlots2,
      defaultSlotProps,
      slots = {},
      slotProps = {},
      hideMenu,
      colDef,
      addDividers = true
    } = props;
    const processedComponents = React101.useMemo(() => _extends({}, defaultSlots2, slots), [defaultSlots2, slots]);
    const processedSlotProps = React101.useMemo(() => {
      if (!slotProps || Object.keys(slotProps).length === 0) {
        return defaultSlotProps;
      }
      const mergedProps = _extends({}, slotProps);
      Object.entries(defaultSlotProps).forEach(([key, currentSlotProps]) => {
        mergedProps[key] = _extends({}, currentSlotProps, slotProps[key] || {});
      });
      return mergedProps;
    }, [defaultSlotProps, slotProps]);
    const defaultItems = apiRef.current.unstable_applyPipeProcessors("columnMenu", [], props.colDef);
    const userItems = React101.useMemo(() => {
      const defaultComponentKeys = Object.keys(defaultSlots2);
      return Object.keys(slots).filter((key) => !defaultComponentKeys.includes(key));
    }, [slots, defaultSlots2]);
    return React101.useMemo(() => {
      const uniqueItems = Array.from(/* @__PURE__ */ new Set([...defaultItems, ...userItems]));
      const cleansedItems = uniqueItems.filter((key) => processedComponents[key] != null);
      const sorted = cleansedItems.sort((a, b) => {
        const leftItemProps = processedSlotProps[a];
        const rightItemProps = processedSlotProps[b];
        const leftDisplayOrder = Number.isFinite(leftItemProps == null ? void 0 : leftItemProps.displayOrder) ? leftItemProps.displayOrder : 100;
        const rightDisplayOrder = Number.isFinite(rightItemProps == null ? void 0 : rightItemProps.displayOrder) ? rightItemProps.displayOrder : 100;
        return leftDisplayOrder - rightDisplayOrder;
      });
      return sorted.reduce((acc, key, index) => {
        let itemProps = {
          colDef,
          onClick: hideMenu
        };
        const processedComponentProps = processedSlotProps[key];
        if (processedComponentProps) {
          const customProps = _objectWithoutPropertiesLoose(processedComponentProps, _excluded59);
          itemProps = _extends({}, itemProps, customProps);
        }
        return addDividers && index !== sorted.length - 1 ? [...acc, [processedComponents[key], itemProps], [Divider_default, {}]] : [...acc, [processedComponents[key], itemProps]];
      }, []);
    }, [addDividers, colDef, defaultItems, hideMenu, processedComponents, processedSlotProps, userItems]);
  };

  // node_modules/@mui/x-data-grid/components/menu/columnMenu/menuItems/GridColumnMenuColumnsItem.js
  init_extends();
  var React104 = __toESM(require_react());
  var import_prop_types62 = __toESM(require_prop_types());

  // node_modules/@mui/x-data-grid/components/menu/columnMenu/menuItems/GridColumnMenuHideItem.js
  var React102 = __toESM(require_react());
  var import_prop_types60 = __toESM(require_prop_types());
  var import_jsx_runtime75 = __toESM(require_jsx_runtime());
  var import_jsx_runtime76 = __toESM(require_jsx_runtime());
  function GridColumnMenuHideItem(props) {
    const {
      colDef,
      onClick
    } = props;
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);
    const columnsWithMenu = visibleColumns.filter((col) => col.disableColumnMenu !== true);
    const disabled = columnsWithMenu.length === 1;
    const toggleColumn = React102.useCallback((event) => {
      if (disabled) {
        return;
      }
      apiRef.current.setColumnVisibility(colDef.field, false);
      onClick(event);
    }, [apiRef, colDef.field, onClick, disabled]);
    if (rootProps.disableColumnSelector) {
      return null;
    }
    if (colDef.hideable === false) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime76.jsxs)(MenuItem_default, {
      onClick: toggleColumn,
      disabled,
      children: [/* @__PURE__ */ (0, import_jsx_runtime75.jsx)(ListItemIcon_default, {
        children: /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(rootProps.slots.columnMenuHideIcon, {
          fontSize: "small"
        })
      }), /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(ListItemText_default, {
        children: apiRef.current.getLocaleText("columnMenuHideColumn")
      })]
    });
  }
  true ? GridColumnMenuHideItem.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    colDef: import_prop_types60.default.object.isRequired,
    onClick: import_prop_types60.default.func.isRequired
  } : void 0;

  // node_modules/@mui/x-data-grid/components/menu/columnMenu/menuItems/GridColumnMenuManageItem.js
  var React103 = __toESM(require_react());
  var import_prop_types61 = __toESM(require_prop_types());
  var import_jsx_runtime77 = __toESM(require_jsx_runtime());
  var import_jsx_runtime78 = __toESM(require_jsx_runtime());
  function GridColumnMenuManageItem(props) {
    const {
      onClick
    } = props;
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const showColumns = React103.useCallback((event) => {
      onClick(event);
      apiRef.current.showPreferences(GridPreferencePanelsValue.columns);
    }, [apiRef, onClick]);
    if (rootProps.disableColumnSelector) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime78.jsxs)(MenuItem_default, {
      onClick: showColumns,
      children: [/* @__PURE__ */ (0, import_jsx_runtime77.jsx)(ListItemIcon_default, {
        children: /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(rootProps.slots.columnMenuManageColumnsIcon, {
          fontSize: "small"
        })
      }), /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(ListItemText_default, {
        children: apiRef.current.getLocaleText("columnMenuManageColumns")
      })]
    });
  }
  true ? GridColumnMenuManageItem.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    colDef: import_prop_types61.default.object.isRequired,
    onClick: import_prop_types61.default.func.isRequired
  } : void 0;

  // node_modules/@mui/x-data-grid/components/menu/columnMenu/menuItems/GridColumnMenuColumnsItem.js
  var import_jsx_runtime79 = __toESM(require_jsx_runtime());
  var import_jsx_runtime80 = __toESM(require_jsx_runtime());
  function GridColumnMenuColumnsItem(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)(React104.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime79.jsx)(GridColumnMenuHideItem, _extends({}, props)), /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(GridColumnMenuManageItem, _extends({}, props))]
    });
  }
  true ? GridColumnMenuColumnsItem.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    colDef: import_prop_types62.default.object.isRequired,
    onClick: import_prop_types62.default.func.isRequired
  } : void 0;

  // node_modules/@mui/x-data-grid/components/menu/columnMenu/menuItems/GridColumnMenuFilterItem.js
  var React105 = __toESM(require_react());
  var import_prop_types63 = __toESM(require_prop_types());
  var import_jsx_runtime81 = __toESM(require_jsx_runtime());
  var import_jsx_runtime82 = __toESM(require_jsx_runtime());
  function GridColumnMenuFilterItem(props) {
    const {
      colDef,
      onClick
    } = props;
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const showFilter = React105.useCallback((event) => {
      onClick(event);
      apiRef.current.showFilterPanel(colDef.field);
    }, [apiRef, colDef.field, onClick]);
    if (rootProps.disableColumnFilter || !colDef.filterable) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime82.jsxs)(MenuItem_default, {
      onClick: showFilter,
      children: [/* @__PURE__ */ (0, import_jsx_runtime81.jsx)(ListItemIcon_default, {
        children: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(rootProps.slots.columnMenuFilterIcon, {
          fontSize: "small"
        })
      }), /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(ListItemText_default, {
        children: apiRef.current.getLocaleText("columnMenuFilter")
      })]
    });
  }
  true ? GridColumnMenuFilterItem.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    colDef: import_prop_types63.default.object.isRequired,
    onClick: import_prop_types63.default.func.isRequired
  } : void 0;

  // node_modules/@mui/x-data-grid/components/menu/columnMenu/menuItems/GridColumnMenuSortItem.js
  var React106 = __toESM(require_react());
  var import_prop_types64 = __toESM(require_prop_types());
  var import_jsx_runtime83 = __toESM(require_jsx_runtime());
  var import_jsx_runtime84 = __toESM(require_jsx_runtime());
  function GridColumnMenuSortItem(props) {
    var _colDef$sortingOrder;
    const {
      colDef,
      onClick
    } = props;
    const apiRef = useGridApiContext();
    const sortModel = useGridSelector(apiRef, gridSortModelSelector);
    const rootProps = useGridRootProps();
    const sortDirection = React106.useMemo(() => {
      if (!colDef) {
        return null;
      }
      const sortItem = sortModel.find((item) => item.field === colDef.field);
      return sortItem == null ? void 0 : sortItem.sort;
    }, [colDef, sortModel]);
    const sortingOrder = (_colDef$sortingOrder = colDef.sortingOrder) != null ? _colDef$sortingOrder : rootProps.sortingOrder;
    const onSortMenuItemClick = React106.useCallback((event) => {
      onClick(event);
      const direction = event.currentTarget.getAttribute("data-value") || null;
      apiRef.current.sortColumn(colDef, direction === sortDirection ? null : direction);
    }, [apiRef, colDef, onClick, sortDirection]);
    if (!colDef || !colDef.sortable || !sortingOrder.some((item) => !!item)) {
      return null;
    }
    const getLabel = (key) => {
      const label = apiRef.current.getLocaleText(key);
      return typeof label === "function" ? label(colDef) : label;
    };
    return /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)(React106.Fragment, {
      children: [sortingOrder.includes("asc") && sortDirection !== "asc" ? /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)(MenuItem_default, {
        onClick: onSortMenuItemClick,
        "data-value": "asc",
        children: [/* @__PURE__ */ (0, import_jsx_runtime83.jsx)(ListItemIcon_default, {
          children: /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(rootProps.slots.columnMenuSortAscendingIcon, {
            fontSize: "small"
          })
        }), /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(ListItemText_default, {
          children: getLabel("columnMenuSortAsc")
        })]
      }) : null, sortingOrder.includes("desc") && sortDirection !== "desc" ? /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)(MenuItem_default, {
        onClick: onSortMenuItemClick,
        "data-value": "desc",
        children: [/* @__PURE__ */ (0, import_jsx_runtime83.jsx)(ListItemIcon_default, {
          children: /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(rootProps.slots.columnMenuSortDescendingIcon, {
            fontSize: "small"
          })
        }), /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(ListItemText_default, {
          children: getLabel("columnMenuSortDesc")
        })]
      }) : null, sortingOrder.includes(null) && sortDirection != null ? /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)(MenuItem_default, {
        onClick: onSortMenuItemClick,
        children: [/* @__PURE__ */ (0, import_jsx_runtime83.jsx)(ListItemIcon_default, {}), /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(ListItemText_default, {
          children: apiRef.current.getLocaleText("columnMenuUnsort")
        })]
      }) : null]
    });
  }
  true ? GridColumnMenuSortItem.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    colDef: import_prop_types64.default.object.isRequired,
    onClick: import_prop_types64.default.func.isRequired
  } : void 0;

  // node_modules/@mui/x-data-grid/components/menu/columnMenu/GridColumnMenu.js
  var import_jsx_runtime85 = __toESM(require_jsx_runtime());
  var _excluded60 = ["defaultSlots", "defaultSlotProps", "slots", "slotProps"];
  var GRID_COLUMN_MENU_SLOTS = {
    columnMenuSortItem: GridColumnMenuSortItem,
    columnMenuFilterItem: GridColumnMenuFilterItem,
    columnMenuColumnsItem: GridColumnMenuColumnsItem
  };
  var GRID_COLUMN_MENU_SLOT_PROPS = {
    columnMenuSortItem: {
      displayOrder: 10
    },
    columnMenuFilterItem: {
      displayOrder: 20
    },
    columnMenuColumnsItem: {
      displayOrder: 30
    }
  };
  var GridGenericColumnMenu = /* @__PURE__ */ React107.forwardRef(function GridGenericColumnMenu2(props, ref) {
    const {
      defaultSlots: defaultSlots2,
      defaultSlotProps,
      slots,
      slotProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded60);
    const orderedSlots = useGridColumnMenuSlots(_extends({}, other, {
      defaultSlots: defaultSlots2,
      defaultSlotProps,
      slots,
      slotProps
    }));
    return /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(GridColumnMenuContainer, _extends({
      ref
    }, other, {
      children: orderedSlots.map(([Component, otherProps], index) => /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(Component, _extends({}, otherProps), index))
    }));
  });
  var GridColumnMenu = /* @__PURE__ */ React107.forwardRef(function GridColumnMenu2(props, ref) {
    return /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(GridGenericColumnMenu, _extends({}, props, {
      ref,
      defaultSlots: GRID_COLUMN_MENU_SLOTS,
      defaultSlotProps: GRID_COLUMN_MENU_SLOT_PROPS
    }));
  });
  true ? GridColumnMenu.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    colDef: import_prop_types65.default.object.isRequired,
    hideMenu: import_prop_types65.default.func.isRequired,
    id: import_prop_types65.default.string,
    labelledby: import_prop_types65.default.string,
    open: import_prop_types65.default.bool.isRequired,
    /**
     * Could be used to pass new props or override props specific to a column menu component
     * e.g. `displayOrder`
     */
    slotProps: import_prop_types65.default.object,
    /**
     * `slots` could be used to add new and (or) override default column menu items
     * If you register a nee component you must pass it's `displayOrder` in `slotProps`
     * or it will be placed in the end of the list
     */
    slots: import_prop_types65.default.object
  } : void 0;

  // node_modules/@mui/x-data-grid/components/panel/GridColumnsPanel.js
  init_extends();
  var React118 = __toESM(require_react());
  var import_prop_types77 = __toESM(require_prop_types());

  // node_modules/@mui/material/IconButton/IconButton.js
  init_extends();
  var React108 = __toESM(require_react());
  var import_prop_types66 = __toESM(require_prop_types());
  var import_colorManipulator5 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/IconButton/iconButtonClasses.js
  function getIconButtonUtilityClass(slot) {
    return generateUtilityClass("MuiIconButton", slot);
  }
  var iconButtonClasses = generateUtilityClasses("MuiIconButton", ["root", "disabled", "colorInherit", "colorPrimary", "colorSecondary", "colorError", "colorInfo", "colorSuccess", "colorWarning", "edgeStart", "edgeEnd", "sizeSmall", "sizeMedium", "sizeLarge"]);
  var iconButtonClasses_default = iconButtonClasses;

  // node_modules/@mui/material/IconButton/IconButton.js
  var import_jsx_runtime86 = __toESM(require_jsx_runtime());
  var _excluded61 = ["edge", "children", "className", "color", "disabled", "disableFocusRipple", "size"];
  var useUtilityClasses36 = (ownerState) => {
    const {
      classes,
      disabled,
      color: color2,
      edge,
      size
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", color2 !== "default" && `color${capitalize_default(color2)}`, edge && `edge${capitalize_default(edge)}`, `size${capitalize_default(size)}`]
    };
    return composeClasses(slots, getIconButtonUtilityClass, classes);
  };
  var IconButtonRoot = styled_default2(ButtonBase_default, {
    name: "MuiIconButton",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, ownerState.color !== "default" && styles4[`color${capitalize_default(ownerState.color)}`], ownerState.edge && styles4[`edge${capitalize_default(ownerState.edge)}`], styles4[`size${capitalize_default(ownerState.size)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    textAlign: "center",
    flex: "0 0 auto",
    fontSize: theme.typography.pxToRem(24),
    padding: 8,
    borderRadius: "50%",
    overflow: "visible",
    // Explicitly set the default value to solve a bug on IE11.
    color: (theme.vars || theme).palette.action.active,
    transition: theme.transitions.create("background-color", {
      duration: theme.transitions.duration.shortest
    })
  }, !ownerState.disableRipple && {
    "&:hover": {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, import_colorManipulator5.alpha)(theme.palette.action.active, theme.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    }
  }, ownerState.edge === "start" && {
    marginLeft: ownerState.size === "small" ? -3 : -12
  }, ownerState.edge === "end" && {
    marginRight: ownerState.size === "small" ? -3 : -12
  }), ({
    theme,
    ownerState
  }) => {
    var _palette;
    const palette2 = (_palette = (theme.vars || theme).palette) == null ? void 0 : _palette[ownerState.color];
    return _extends({}, ownerState.color === "inherit" && {
      color: "inherit"
    }, ownerState.color !== "inherit" && ownerState.color !== "default" && _extends({
      color: palette2 == null ? void 0 : palette2.main
    }, !ownerState.disableRipple && {
      "&:hover": _extends({}, palette2 && {
        backgroundColor: theme.vars ? `rgba(${palette2.mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, import_colorManipulator5.alpha)(palette2.main, theme.palette.action.hoverOpacity)
      }, {
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      })
    }), ownerState.size === "small" && {
      padding: 5,
      fontSize: theme.typography.pxToRem(18)
    }, ownerState.size === "large" && {
      padding: 12,
      fontSize: theme.typography.pxToRem(28)
    }, {
      [`&.${iconButtonClasses_default.disabled}`]: {
        backgroundColor: "transparent",
        color: (theme.vars || theme).palette.action.disabled
      }
    });
  });
  var IconButton = /* @__PURE__ */ React108.forwardRef(function IconButton2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiIconButton"
    });
    const {
      edge = false,
      children,
      className,
      color: color2 = "default",
      disabled = false,
      disableFocusRipple = false,
      size = "medium"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded61);
    const ownerState = _extends({}, props, {
      edge,
      color: color2,
      disabled,
      disableFocusRipple,
      size
    });
    const classes = useUtilityClasses36(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(IconButtonRoot, _extends({
      className: clsx_default(classes.root, className),
      centerRipple: true,
      focusRipple: !disableFocusRipple,
      disabled,
      ref
    }, other, {
      ownerState,
      children
    }));
  });
  true ? IconButton.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The icon to display.
     */
    children: chainPropTypes(import_prop_types66.default.node, (props) => {
      const found = React108.Children.toArray(props.children).some((child) => /* @__PURE__ */ React108.isValidElement(child) && child.props.onClick);
      if (found) {
        return new Error(["MUI: You are providing an onClick event listener to a child of a button element.", "Prefer applying it to the IconButton directly.", "This guarantees that the whole <button> will be responsive to click events."].join("\n"));
      }
      return null;
    }),
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types66.default.object,
    /**
     * @ignore
     */
    className: import_prop_types66.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'default'
     */
    color: import_prop_types66.default.oneOfType([import_prop_types66.default.oneOf(["inherit", "default", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types66.default.string]),
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types66.default.bool,
    /**
     * If `true`, the  keyboard focus ripple is disabled.
     * @default false
     */
    disableFocusRipple: import_prop_types66.default.bool,
    /**
     * If `true`, the ripple effect is disabled.
     *
     * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
     * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
     * @default false
     */
    disableRipple: import_prop_types66.default.bool,
    /**
     * If given, uses a negative margin to counteract the padding on one
     * side (this is often helpful for aligning the left or right
     * side of the icon with content above or below, without ruining the border
     * size and shape).
     * @default false
     */
    edge: import_prop_types66.default.oneOf(["end", "start", false]),
    /**
     * The size of the component.
     * `small` is equivalent to the dense button styling.
     * @default 'medium'
     */
    size: import_prop_types66.default.oneOfType([import_prop_types66.default.oneOf(["small", "medium", "large"]), import_prop_types66.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types66.default.oneOfType([import_prop_types66.default.arrayOf(import_prop_types66.default.oneOfType([import_prop_types66.default.func, import_prop_types66.default.object, import_prop_types66.default.bool])), import_prop_types66.default.func, import_prop_types66.default.object])
  } : void 0;
  var IconButton_default = IconButton;

  // node_modules/@mui/material/Switch/Switch.js
  init_extends();
  var React110 = __toESM(require_react());
  var import_prop_types68 = __toESM(require_prop_types());
  var import_colorManipulator6 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/internal/SwitchBase.js
  init_extends();
  var React109 = __toESM(require_react());
  var import_prop_types67 = __toESM(require_prop_types());

  // node_modules/@mui/material/internal/switchBaseClasses.js
  function getSwitchBaseUtilityClass(slot) {
    return generateUtilityClass("PrivateSwitchBase", slot);
  }
  var switchBaseClasses = generateUtilityClasses("PrivateSwitchBase", ["root", "checked", "disabled", "input", "edgeStart", "edgeEnd"]);

  // node_modules/@mui/material/internal/SwitchBase.js
  var import_jsx_runtime87 = __toESM(require_jsx_runtime());
  var import_jsx_runtime88 = __toESM(require_jsx_runtime());
  var _excluded62 = ["autoFocus", "checked", "checkedIcon", "className", "defaultChecked", "disabled", "disableFocusRipple", "edge", "icon", "id", "inputProps", "inputRef", "name", "onBlur", "onChange", "onFocus", "readOnly", "required", "tabIndex", "type", "value"];
  var useUtilityClasses37 = (ownerState) => {
    const {
      classes,
      checked,
      disabled,
      edge
    } = ownerState;
    const slots = {
      root: ["root", checked && "checked", disabled && "disabled", edge && `edge${capitalize_default(edge)}`],
      input: ["input"]
    };
    return composeClasses(slots, getSwitchBaseUtilityClass, classes);
  };
  var SwitchBaseRoot = styled_default2(ButtonBase_default, {
    name: "MuiSwitchBase"
  })(({
    ownerState
  }) => _extends({
    padding: 9,
    borderRadius: "50%"
  }, ownerState.edge === "start" && {
    marginLeft: ownerState.size === "small" ? -3 : -12
  }, ownerState.edge === "end" && {
    marginRight: ownerState.size === "small" ? -3 : -12
  }));
  var SwitchBaseInput = styled_default2("input", {
    name: "MuiSwitchBase",
    shouldForwardProp: rootShouldForwardProp_default
  })({
    cursor: "inherit",
    position: "absolute",
    opacity: 0,
    width: "100%",
    height: "100%",
    top: 0,
    left: 0,
    margin: 0,
    padding: 0,
    zIndex: 1
  });
  var SwitchBase = /* @__PURE__ */ React109.forwardRef(function SwitchBase2(props, ref) {
    const {
      autoFocus,
      checked: checkedProp,
      checkedIcon,
      className,
      defaultChecked,
      disabled: disabledProp,
      disableFocusRipple = false,
      edge = false,
      icon,
      id,
      inputProps,
      inputRef,
      name,
      onBlur,
      onChange,
      onFocus,
      readOnly,
      required = false,
      tabIndex,
      type,
      value
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded62);
    const [checked, setCheckedState] = useControlled_default({
      controlled: checkedProp,
      default: Boolean(defaultChecked),
      name: "SwitchBase",
      state: "checked"
    });
    const muiFormControl = useFormControl();
    const handleFocus = (event) => {
      if (onFocus) {
        onFocus(event);
      }
      if (muiFormControl && muiFormControl.onFocus) {
        muiFormControl.onFocus(event);
      }
    };
    const handleBlur = (event) => {
      if (onBlur) {
        onBlur(event);
      }
      if (muiFormControl && muiFormControl.onBlur) {
        muiFormControl.onBlur(event);
      }
    };
    const handleInputChange = (event) => {
      if (event.nativeEvent.defaultPrevented) {
        return;
      }
      const newChecked = event.target.checked;
      setCheckedState(newChecked);
      if (onChange) {
        onChange(event, newChecked);
      }
    };
    let disabled = disabledProp;
    if (muiFormControl) {
      if (typeof disabled === "undefined") {
        disabled = muiFormControl.disabled;
      }
    }
    const hasLabelFor = type === "checkbox" || type === "radio";
    const ownerState = _extends({}, props, {
      checked,
      disabled,
      disableFocusRipple,
      edge
    });
    const classes = useUtilityClasses37(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime88.jsxs)(SwitchBaseRoot, _extends({
      component: "span",
      className: clsx_default(classes.root, className),
      centerRipple: true,
      focusRipple: !disableFocusRipple,
      disabled,
      tabIndex: null,
      role: void 0,
      onFocus: handleFocus,
      onBlur: handleBlur,
      ownerState,
      ref
    }, other, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime87.jsx)(SwitchBaseInput, _extends({
        autoFocus,
        checked: checkedProp,
        defaultChecked,
        className: classes.input,
        disabled,
        id: hasLabelFor ? id : void 0,
        name,
        onChange: handleInputChange,
        readOnly,
        ref: inputRef,
        required,
        ownerState,
        tabIndex,
        type
      }, type === "checkbox" && value === void 0 ? {} : {
        value
      }, inputProps)), checked ? checkedIcon : icon]
    }));
  });
  true ? SwitchBase.propTypes = {
    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: import_prop_types67.default.bool,
    /**
     * If `true`, the component is checked.
     */
    checked: import_prop_types67.default.bool,
    /**
     * The icon to display when the component is checked.
     */
    checkedIcon: import_prop_types67.default.node.isRequired,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types67.default.object,
    /**
     * @ignore
     */
    className: import_prop_types67.default.string,
    /**
     * @ignore
     */
    defaultChecked: import_prop_types67.default.bool,
    /**
     * If `true`, the component is disabled.
     */
    disabled: import_prop_types67.default.bool,
    /**
     * If `true`, the  keyboard focus ripple is disabled.
     * @default false
     */
    disableFocusRipple: import_prop_types67.default.bool,
    /**
     * If given, uses a negative margin to counteract the padding on one
     * side (this is often helpful for aligning the left or right
     * side of the icon with content above or below, without ruining the border
     * size and shape).
     * @default false
     */
    edge: import_prop_types67.default.oneOf(["end", "start", false]),
    /**
     * The icon to display when the component is unchecked.
     */
    icon: import_prop_types67.default.node.isRequired,
    /**
     * The id of the `input` element.
     */
    id: import_prop_types67.default.string,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     */
    inputProps: import_prop_types67.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType_default,
    /*
     * @ignore
     */
    name: import_prop_types67.default.string,
    /**
     * @ignore
     */
    onBlur: import_prop_types67.default.func,
    /**
     * Callback fired when the state is changed.
     *
     * @param {object} event The event source of the callback.
     * You can pull out the new checked state by accessing `event.target.checked` (boolean).
     */
    onChange: import_prop_types67.default.func,
    /**
     * @ignore
     */
    onFocus: import_prop_types67.default.func,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: import_prop_types67.default.bool,
    /**
     * If `true`, the `input` element is required.
     */
    required: import_prop_types67.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types67.default.object,
    /**
     * @ignore
     */
    tabIndex: import_prop_types67.default.oneOfType([import_prop_types67.default.number, import_prop_types67.default.string]),
    /**
     * The input component prop `type`.
     */
    type: import_prop_types67.default.string.isRequired,
    /**
     * The value of the component.
     */
    value: import_prop_types67.default.any
  } : void 0;
  var SwitchBase_default = SwitchBase;

  // node_modules/@mui/material/Switch/switchClasses.js
  function getSwitchUtilityClass(slot) {
    return generateUtilityClass("MuiSwitch", slot);
  }
  var switchClasses = generateUtilityClasses("MuiSwitch", ["root", "edgeStart", "edgeEnd", "switchBase", "colorPrimary", "colorSecondary", "sizeSmall", "sizeMedium", "checked", "disabled", "input", "thumb", "track"]);
  var switchClasses_default = switchClasses;

  // node_modules/@mui/material/Switch/Switch.js
  var import_jsx_runtime89 = __toESM(require_jsx_runtime());
  var import_jsx_runtime90 = __toESM(require_jsx_runtime());
  var _excluded63 = ["className", "color", "edge", "size", "sx"];
  var useUtilityClasses38 = (ownerState) => {
    const {
      classes,
      edge,
      size,
      color: color2,
      checked,
      disabled
    } = ownerState;
    const slots = {
      root: ["root", edge && `edge${capitalize_default(edge)}`, `size${capitalize_default(size)}`],
      switchBase: ["switchBase", `color${capitalize_default(color2)}`, checked && "checked", disabled && "disabled"],
      thumb: ["thumb"],
      track: ["track"],
      input: ["input"]
    };
    const composedClasses = composeClasses(slots, getSwitchUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  var SwitchRoot = styled_default2("span", {
    name: "MuiSwitch",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, ownerState.edge && styles4[`edge${capitalize_default(ownerState.edge)}`], styles4[`size${capitalize_default(ownerState.size)}`]];
    }
  })({
    display: "inline-flex",
    width: 34 + 12 * 2,
    height: 14 + 12 * 2,
    overflow: "hidden",
    padding: 12,
    boxSizing: "border-box",
    position: "relative",
    flexShrink: 0,
    zIndex: 0,
    // Reset the stacking context.
    verticalAlign: "middle",
    // For correct alignment with the text.
    "@media print": {
      colorAdjust: "exact"
    },
    variants: [{
      props: {
        edge: "start"
      },
      style: {
        marginLeft: -8
      }
    }, {
      props: {
        edge: "end"
      },
      style: {
        marginRight: -8
      }
    }, {
      props: {
        size: "small"
      },
      style: {
        width: 40,
        height: 24,
        padding: 7,
        [`& .${switchClasses_default.thumb}`]: {
          width: 16,
          height: 16
        },
        [`& .${switchClasses_default.switchBase}`]: {
          padding: 4,
          [`&.${switchClasses_default.checked}`]: {
            transform: "translateX(16px)"
          }
        }
      }
    }]
  });
  var SwitchSwitchBase = styled_default2(SwitchBase_default, {
    name: "MuiSwitch",
    slot: "SwitchBase",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.switchBase, {
        [`& .${switchClasses_default.input}`]: styles4.input
      }, ownerState.color !== "default" && styles4[`color${capitalize_default(ownerState.color)}`]];
    }
  })(({
    theme
  }) => ({
    position: "absolute",
    top: 0,
    left: 0,
    zIndex: 1,
    // Render above the focus ripple.
    color: theme.vars ? theme.vars.palette.Switch.defaultColor : `${theme.palette.mode === "light" ? theme.palette.common.white : theme.palette.grey[300]}`,
    transition: theme.transitions.create(["left", "transform"], {
      duration: theme.transitions.duration.shortest
    }),
    [`&.${switchClasses_default.checked}`]: {
      transform: "translateX(20px)"
    },
    [`&.${switchClasses_default.disabled}`]: {
      color: theme.vars ? theme.vars.palette.Switch.defaultDisabledColor : `${theme.palette.mode === "light" ? theme.palette.grey[100] : theme.palette.grey[600]}`
    },
    [`&.${switchClasses_default.checked} + .${switchClasses_default.track}`]: {
      opacity: 0.5
    },
    [`&.${switchClasses_default.disabled} + .${switchClasses_default.track}`]: {
      opacity: theme.vars ? theme.vars.opacity.switchTrackDisabled : `${theme.palette.mode === "light" ? 0.12 : 0.2}`
    },
    [`& .${switchClasses_default.input}`]: {
      left: "-100%",
      width: "300%"
    }
  }), ({
    theme
  }) => ({
    "&:hover": {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, import_colorManipulator6.alpha)(theme.palette.action.active, theme.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    },
    variants: [...Object.entries(theme.palette).filter(([, value]) => value.main && value.light).map(([color2]) => ({
      props: {
        color: color2
      },
      style: {
        [`&.${switchClasses_default.checked}`]: {
          color: (theme.vars || theme).palette[color2].main,
          "&:hover": {
            backgroundColor: theme.vars ? `rgba(${theme.vars.palette[color2].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, import_colorManipulator6.alpha)(theme.palette[color2].main, theme.palette.action.hoverOpacity),
            "@media (hover: none)": {
              backgroundColor: "transparent"
            }
          },
          [`&.${switchClasses_default.disabled}`]: {
            color: theme.vars ? theme.vars.palette.Switch[`${color2}DisabledColor`] : `${theme.palette.mode === "light" ? (0, import_colorManipulator6.lighten)(theme.palette[color2].main, 0.62) : (0, import_colorManipulator6.darken)(theme.palette[color2].main, 0.55)}`
          }
        },
        [`&.${switchClasses_default.checked} + .${switchClasses_default.track}`]: {
          backgroundColor: (theme.vars || theme).palette[color2].main
        }
      }
    }))]
  }));
  var SwitchTrack = styled_default2("span", {
    name: "MuiSwitch",
    slot: "Track",
    overridesResolver: (props, styles4) => styles4.track
  })(({
    theme
  }) => ({
    height: "100%",
    width: "100%",
    borderRadius: 14 / 2,
    zIndex: -1,
    transition: theme.transitions.create(["opacity", "background-color"], {
      duration: theme.transitions.duration.shortest
    }),
    backgroundColor: theme.vars ? theme.vars.palette.common.onBackground : `${theme.palette.mode === "light" ? theme.palette.common.black : theme.palette.common.white}`,
    opacity: theme.vars ? theme.vars.opacity.switchTrack : `${theme.palette.mode === "light" ? 0.38 : 0.3}`
  }));
  var SwitchThumb = styled_default2("span", {
    name: "MuiSwitch",
    slot: "Thumb",
    overridesResolver: (props, styles4) => styles4.thumb
  })(({
    theme
  }) => ({
    boxShadow: (theme.vars || theme).shadows[1],
    backgroundColor: "currentColor",
    width: 20,
    height: 20,
    borderRadius: "50%"
  }));
  var Switch = /* @__PURE__ */ React110.forwardRef(function Switch2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiSwitch"
    });
    const {
      className,
      color: color2 = "primary",
      edge = false,
      size = "medium",
      sx
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded63);
    const ownerState = _extends({}, props, {
      color: color2,
      edge,
      size
    });
    const classes = useUtilityClasses38(ownerState);
    const icon = /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(SwitchThumb, {
      className: classes.thumb,
      ownerState
    });
    return /* @__PURE__ */ (0, import_jsx_runtime90.jsxs)(SwitchRoot, {
      className: clsx_default(classes.root, className),
      sx,
      ownerState,
      children: [/* @__PURE__ */ (0, import_jsx_runtime89.jsx)(SwitchSwitchBase, _extends({
        type: "checkbox",
        icon,
        checkedIcon: icon,
        ref,
        ownerState
      }, other, {
        classes: _extends({}, classes, {
          root: classes.switchBase
        })
      })), /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(SwitchTrack, {
        className: classes.track,
        ownerState
      })]
    });
  });
  true ? Switch.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * If `true`, the component is checked.
     */
    checked: import_prop_types68.default.bool,
    /**
     * The icon to display when the component is checked.
     */
    checkedIcon: import_prop_types68.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types68.default.object,
    /**
     * @ignore
     */
    className: import_prop_types68.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'primary'
     */
    color: import_prop_types68.default.oneOfType([import_prop_types68.default.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types68.default.string]),
    /**
     * The default checked state. Use when the component is not controlled.
     */
    defaultChecked: import_prop_types68.default.bool,
    /**
     * If `true`, the component is disabled.
     */
    disabled: import_prop_types68.default.bool,
    /**
     * If `true`, the ripple effect is disabled.
     * @default false
     */
    disableRipple: import_prop_types68.default.bool,
    /**
     * If given, uses a negative margin to counteract the padding on one
     * side (this is often helpful for aligning the left or right
     * side of the icon with content above or below, without ruining the border
     * size and shape).
     * @default false
     */
    edge: import_prop_types68.default.oneOf(["end", "start", false]),
    /**
     * The icon to display when the component is unchecked.
     */
    icon: import_prop_types68.default.node,
    /**
     * The id of the `input` element.
     */
    id: import_prop_types68.default.string,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     */
    inputProps: import_prop_types68.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType_default,
    /**
     * Callback fired when the state is changed.
     *
     * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     * You can pull out the new checked state by accessing `event.target.checked` (boolean).
     */
    onChange: import_prop_types68.default.func,
    /**
     * If `true`, the `input` element is required.
     * @default false
     */
    required: import_prop_types68.default.bool,
    /**
     * The size of the component.
     * `small` is equivalent to the dense switch styling.
     * @default 'medium'
     */
    size: import_prop_types68.default.oneOfType([import_prop_types68.default.oneOf(["medium", "small"]), import_prop_types68.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types68.default.oneOfType([import_prop_types68.default.arrayOf(import_prop_types68.default.oneOfType([import_prop_types68.default.func, import_prop_types68.default.object, import_prop_types68.default.bool])), import_prop_types68.default.func, import_prop_types68.default.object]),
    /**
     * The value of the component. The DOM API casts this to a string.
     * The browser uses "on" as the default value.
     */
    value: import_prop_types68.default.any
  } : void 0;
  var Switch_default = Switch;

  // node_modules/@mui/material/FormControlLabel/FormControlLabel.js
  init_extends();
  var React112 = __toESM(require_react());
  var import_prop_types71 = __toESM(require_prop_types());

  // node_modules/@mui/material/FormControl/FormControl.js
  init_extends();
  var React111 = __toESM(require_react());
  var import_prop_types69 = __toESM(require_prop_types());

  // node_modules/@mui/material/FormControl/formControlClasses.js
  function getFormControlUtilityClasses(slot) {
    return generateUtilityClass("MuiFormControl", slot);
  }
  var formControlClasses = generateUtilityClasses("MuiFormControl", ["root", "marginNone", "marginNormal", "marginDense", "fullWidth", "disabled"]);

  // node_modules/@mui/material/FormControl/FormControl.js
  var import_jsx_runtime91 = __toESM(require_jsx_runtime());
  var _excluded64 = ["children", "className", "color", "component", "disabled", "error", "focused", "fullWidth", "hiddenLabel", "margin", "required", "size", "variant"];
  var useUtilityClasses39 = (ownerState) => {
    const {
      classes,
      margin: margin2,
      fullWidth
    } = ownerState;
    const slots = {
      root: ["root", margin2 !== "none" && `margin${capitalize_default(margin2)}`, fullWidth && "fullWidth"]
    };
    return composeClasses(slots, getFormControlUtilityClasses, classes);
  };
  var FormControlRoot = styled_default2("div", {
    name: "MuiFormControl",
    slot: "Root",
    overridesResolver: ({
      ownerState
    }, styles4) => {
      return _extends({}, styles4.root, styles4[`margin${capitalize_default(ownerState.margin)}`], ownerState.fullWidth && styles4.fullWidth);
    }
  })(({
    ownerState
  }) => _extends({
    display: "inline-flex",
    flexDirection: "column",
    position: "relative",
    // Reset fieldset default style.
    minWidth: 0,
    padding: 0,
    margin: 0,
    border: 0,
    verticalAlign: "top"
  }, ownerState.margin === "normal" && {
    marginTop: 16,
    marginBottom: 8
  }, ownerState.margin === "dense" && {
    marginTop: 8,
    marginBottom: 4
  }, ownerState.fullWidth && {
    width: "100%"
  }));
  var FormControl = /* @__PURE__ */ React111.forwardRef(function FormControl2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiFormControl"
    });
    const {
      children,
      className,
      color: color2 = "primary",
      component = "div",
      disabled = false,
      error = false,
      focused: visuallyFocused,
      fullWidth = false,
      hiddenLabel = false,
      margin: margin2 = "none",
      required = false,
      size = "medium",
      variant = "outlined"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded64);
    const ownerState = _extends({}, props, {
      color: color2,
      component,
      disabled,
      error,
      fullWidth,
      hiddenLabel,
      margin: margin2,
      required,
      size,
      variant
    });
    const classes = useUtilityClasses39(ownerState);
    const [adornedStart, setAdornedStart] = React111.useState(() => {
      let initialAdornedStart = false;
      if (children) {
        React111.Children.forEach(children, (child) => {
          if (!isMuiElement_default(child, ["Input", "Select"])) {
            return;
          }
          const input = isMuiElement_default(child, ["Select"]) ? child.props.input : child;
          if (input && isAdornedStart(input.props)) {
            initialAdornedStart = true;
          }
        });
      }
      return initialAdornedStart;
    });
    const [filled, setFilled] = React111.useState(() => {
      let initialFilled = false;
      if (children) {
        React111.Children.forEach(children, (child) => {
          if (!isMuiElement_default(child, ["Input", "Select"])) {
            return;
          }
          if (isFilled(child.props, true) || isFilled(child.props.inputProps, true)) {
            initialFilled = true;
          }
        });
      }
      return initialFilled;
    });
    const [focusedState, setFocused] = React111.useState(false);
    if (disabled && focusedState) {
      setFocused(false);
    }
    const focused = visuallyFocused !== void 0 && !disabled ? visuallyFocused : focusedState;
    let registerEffect;
    if (true) {
      const registeredInput = React111.useRef(false);
      registerEffect = () => {
        if (registeredInput.current) {
          console.error(["MUI: There are multiple `InputBase` components inside a FormControl.", "This creates visual inconsistencies, only use one `InputBase`."].join("\n"));
        }
        registeredInput.current = true;
        return () => {
          registeredInput.current = false;
        };
      };
    }
    const childContext = React111.useMemo(() => {
      return {
        adornedStart,
        setAdornedStart,
        color: color2,
        disabled,
        error,
        filled,
        focused,
        fullWidth,
        hiddenLabel,
        size,
        onBlur: () => {
          setFocused(false);
        },
        onEmpty: () => {
          setFilled(false);
        },
        onFilled: () => {
          setFilled(true);
        },
        onFocus: () => {
          setFocused(true);
        },
        registerEffect,
        required,
        variant
      };
    }, [adornedStart, color2, disabled, error, filled, focused, fullWidth, hiddenLabel, registerEffect, required, size, variant]);
    return /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(FormControlContext_default.Provider, {
      value: childContext,
      children: /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(FormControlRoot, _extends({
        as: component,
        ownerState,
        className: clsx_default(classes.root, className),
        ref
      }, other, {
        children
      }))
    });
  });
  true ? FormControl.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types69.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types69.default.object,
    /**
     * @ignore
     */
    className: import_prop_types69.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'primary'
     */
    color: import_prop_types69.default.oneOfType([import_prop_types69.default.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), import_prop_types69.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types69.default.elementType,
    /**
     * If `true`, the label, input and helper text should be displayed in a disabled state.
     * @default false
     */
    disabled: import_prop_types69.default.bool,
    /**
     * If `true`, the label is displayed in an error state.
     * @default false
     */
    error: import_prop_types69.default.bool,
    /**
     * If `true`, the component is displayed in focused state.
     */
    focused: import_prop_types69.default.bool,
    /**
     * If `true`, the component will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types69.default.bool,
    /**
     * If `true`, the label is hidden.
     * This is used to increase density for a `FilledInput`.
     * Be sure to add `aria-label` to the `input` element.
     * @default false
     */
    hiddenLabel: import_prop_types69.default.bool,
    /**
     * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
     * @default 'none'
     */
    margin: import_prop_types69.default.oneOf(["dense", "none", "normal"]),
    /**
     * If `true`, the label will indicate that the `input` is required.
     * @default false
     */
    required: import_prop_types69.default.bool,
    /**
     * The size of the component.
     * @default 'medium'
     */
    size: import_prop_types69.default.oneOfType([import_prop_types69.default.oneOf(["medium", "small"]), import_prop_types69.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types69.default.oneOfType([import_prop_types69.default.arrayOf(import_prop_types69.default.oneOfType([import_prop_types69.default.func, import_prop_types69.default.object, import_prop_types69.default.bool])), import_prop_types69.default.func, import_prop_types69.default.object]),
    /**
     * The variant to use.
     * @default 'outlined'
     */
    variant: import_prop_types69.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  var FormControl_default = FormControl;

  // node_modules/@mui/material/Stack/Stack.js
  var import_prop_types70 = __toESM(require_prop_types());
  var Stack = createStack({
    createStyledComponent: styled_default2("div", {
      name: "MuiStack",
      slot: "Root",
      overridesResolver: (props, styles4) => styles4.root
    }),
    useThemeProps: (inProps) => useDefaultProps2({
      props: inProps,
      name: "MuiStack"
    })
  });
  true ? Stack.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types70.default.node,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types70.default.elementType,
    /**
     * Defines the `flex-direction` style property.
     * It is applied for all screen sizes.
     * @default 'column'
     */
    direction: import_prop_types70.default.oneOfType([import_prop_types70.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), import_prop_types70.default.arrayOf(import_prop_types70.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), import_prop_types70.default.object]),
    /**
     * Add an element between each child.
     */
    divider: import_prop_types70.default.node,
    /**
     * Defines the space between immediate children.
     * @default 0
     */
    spacing: import_prop_types70.default.oneOfType([import_prop_types70.default.arrayOf(import_prop_types70.default.oneOfType([import_prop_types70.default.number, import_prop_types70.default.string])), import_prop_types70.default.number, import_prop_types70.default.object, import_prop_types70.default.string]),
    /**
     * The system prop, which allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types70.default.oneOfType([import_prop_types70.default.arrayOf(import_prop_types70.default.oneOfType([import_prop_types70.default.func, import_prop_types70.default.object, import_prop_types70.default.bool])), import_prop_types70.default.func, import_prop_types70.default.object]),
    /**
     * If `true`, the CSS flexbox `gap` is used instead of applying `margin` to children.
     *
     * While CSS `gap` removes the [known limitations](https://mui.com/joy-ui/react-stack/#limitations),
     * it is not fully supported in some browsers. We recommend checking https://caniuse.com/?search=flex%20gap before using this flag.
     *
     * To enable this flag globally, follow the [theme's default props](https://mui.com/material-ui/customization/theme-components/#default-props) configuration.
     * @default false
     */
    useFlexGap: import_prop_types70.default.bool
  } : void 0;
  var Stack_default = Stack;

  // node_modules/@mui/material/FormControlLabel/formControlLabelClasses.js
  function getFormControlLabelUtilityClasses(slot) {
    return generateUtilityClass("MuiFormControlLabel", slot);
  }
  var formControlLabelClasses = generateUtilityClasses("MuiFormControlLabel", ["root", "labelPlacementStart", "labelPlacementTop", "labelPlacementBottom", "disabled", "label", "error", "required", "asterisk"]);
  var formControlLabelClasses_default = formControlLabelClasses;

  // node_modules/@mui/material/FormControlLabel/FormControlLabel.js
  var import_jsx_runtime92 = __toESM(require_jsx_runtime());
  var import_jsx_runtime93 = __toESM(require_jsx_runtime());
  var _excluded65 = ["checked", "className", "componentsProps", "control", "disabled", "disableTypography", "inputRef", "label", "labelPlacement", "name", "onChange", "required", "slotProps", "value"];
  var useUtilityClasses40 = (ownerState) => {
    const {
      classes,
      disabled,
      labelPlacement,
      error,
      required
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", `labelPlacement${capitalize_default(labelPlacement)}`, error && "error", required && "required"],
      label: ["label", disabled && "disabled"],
      asterisk: ["asterisk", error && "error"]
    };
    return composeClasses(slots, getFormControlLabelUtilityClasses, classes);
  };
  var FormControlLabelRoot = styled_default2("label", {
    name: "MuiFormControlLabel",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${formControlLabelClasses_default.label}`]: styles4.label
      }, styles4.root, styles4[`labelPlacement${capitalize_default(ownerState.labelPlacement)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    display: "inline-flex",
    alignItems: "center",
    cursor: "pointer",
    // For correct alignment with the text.
    verticalAlign: "middle",
    WebkitTapHighlightColor: "transparent",
    marginLeft: -11,
    marginRight: 16,
    // used for row presentation of radio/checkbox
    [`&.${formControlLabelClasses_default.disabled}`]: {
      cursor: "default"
    }
  }, ownerState.labelPlacement === "start" && {
    flexDirection: "row-reverse",
    marginLeft: 16,
    // used for row presentation of radio/checkbox
    marginRight: -11
  }, ownerState.labelPlacement === "top" && {
    flexDirection: "column-reverse",
    marginLeft: 16
  }, ownerState.labelPlacement === "bottom" && {
    flexDirection: "column",
    marginLeft: 16
  }, {
    [`& .${formControlLabelClasses_default.label}`]: {
      [`&.${formControlLabelClasses_default.disabled}`]: {
        color: (theme.vars || theme).palette.text.disabled
      }
    }
  }));
  var AsteriskComponent = styled_default2("span", {
    name: "MuiFormControlLabel",
    slot: "Asterisk",
    overridesResolver: (props, styles4) => styles4.asterisk
  })(({
    theme
  }) => ({
    [`&.${formControlLabelClasses_default.error}`]: {
      color: (theme.vars || theme).palette.error.main
    }
  }));
  var FormControlLabel = /* @__PURE__ */ React112.forwardRef(function FormControlLabel2(inProps, ref) {
    var _ref, _slotProps$typography;
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiFormControlLabel"
    });
    const {
      className,
      componentsProps = {},
      control,
      disabled: disabledProp,
      disableTypography,
      label: labelProp,
      labelPlacement = "end",
      required: requiredProp,
      slotProps = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded65);
    const muiFormControl = useFormControl();
    const disabled = (_ref = disabledProp != null ? disabledProp : control.props.disabled) != null ? _ref : muiFormControl == null ? void 0 : muiFormControl.disabled;
    const required = requiredProp != null ? requiredProp : control.props.required;
    const controlProps = {
      disabled,
      required
    };
    ["checked", "name", "onChange", "value", "inputRef"].forEach((key) => {
      if (typeof control.props[key] === "undefined" && typeof props[key] !== "undefined") {
        controlProps[key] = props[key];
      }
    });
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["error"]
    });
    const ownerState = _extends({}, props, {
      disabled,
      labelPlacement,
      required,
      error: fcs.error
    });
    const classes = useUtilityClasses40(ownerState);
    const typographySlotProps = (_slotProps$typography = slotProps.typography) != null ? _slotProps$typography : componentsProps.typography;
    let label = labelProp;
    if (label != null && label.type !== Typography_default && !disableTypography) {
      label = /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(Typography_default, _extends({
        component: "span"
      }, typographySlotProps, {
        className: clsx_default(classes.label, typographySlotProps == null ? void 0 : typographySlotProps.className),
        children: label
      }));
    }
    return /* @__PURE__ */ (0, import_jsx_runtime93.jsxs)(FormControlLabelRoot, _extends({
      className: clsx_default(classes.root, className),
      ownerState,
      ref
    }, other, {
      children: [/* @__PURE__ */ React112.cloneElement(control, controlProps), required ? /* @__PURE__ */ (0, import_jsx_runtime93.jsxs)(Stack_default, {
        display: "block",
        children: [label, /* @__PURE__ */ (0, import_jsx_runtime93.jsxs)(AsteriskComponent, {
          ownerState,
          "aria-hidden": true,
          className: classes.asterisk,
          children: ["\u2009", "*"]
        })]
      }) : label]
    }));
  });
  true ? FormControlLabel.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * If `true`, the component appears selected.
     */
    checked: import_prop_types71.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types71.default.object,
    /**
     * @ignore
     */
    className: import_prop_types71.default.string,
    /**
     * The props used for each slot inside.
     * @default {}
     */
    componentsProps: import_prop_types71.default.shape({
      typography: import_prop_types71.default.object
    }),
    /**
     * A control element. For instance, it can be a `Radio`, a `Switch` or a `Checkbox`.
     */
    control: import_prop_types71.default.element.isRequired,
    /**
     * If `true`, the control is disabled.
     */
    disabled: import_prop_types71.default.bool,
    /**
     * If `true`, the label is rendered as it is passed without an additional typography node.
     */
    disableTypography: import_prop_types71.default.bool,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType_default,
    /**
     * A text or an element to be used in an enclosing label element.
     */
    label: import_prop_types71.default.node,
    /**
     * The position of the label.
     * @default 'end'
     */
    labelPlacement: import_prop_types71.default.oneOf(["bottom", "end", "start", "top"]),
    /**
     * @ignore
     */
    name: import_prop_types71.default.string,
    /**
     * Callback fired when the state is changed.
     *
     * @param {React.SyntheticEvent} event The event source of the callback.
     * You can pull out the new checked state by accessing `event.target.checked` (boolean).
     */
    onChange: import_prop_types71.default.func,
    /**
     * If `true`, the label will indicate that the `input` is required.
     */
    required: import_prop_types71.default.bool,
    /**
     * The props used for each slot inside.
     * @default {}
     */
    slotProps: import_prop_types71.default.shape({
      typography: import_prop_types71.default.object
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types71.default.oneOfType([import_prop_types71.default.arrayOf(import_prop_types71.default.oneOfType([import_prop_types71.default.func, import_prop_types71.default.object, import_prop_types71.default.bool])), import_prop_types71.default.func, import_prop_types71.default.object]),
    /**
     * The value of the component.
     */
    value: import_prop_types71.default.any
  } : void 0;
  var FormControlLabel_default = FormControlLabel;

  // node_modules/@mui/x-data-grid/components/panel/GridPanelContent.js
  init_extends();
  var React113 = __toESM(require_react());
  var import_prop_types72 = __toESM(require_prop_types());
  var import_jsx_runtime94 = __toESM(require_jsx_runtime());
  var _excluded66 = ["className"];
  var useUtilityClasses41 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["panelContent"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridPanelContentRoot = styled_default("div", {
    name: "MuiDataGrid",
    slot: "PanelContent",
    overridesResolver: (props, styles4) => styles4.panelContent
  })({
    display: "flex",
    flexDirection: "column",
    overflow: "auto",
    flex: "1 1",
    maxHeight: 400
  });
  function GridPanelContent(props) {
    const {
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded66);
    const rootProps = useGridRootProps();
    const classes = useUtilityClasses41(rootProps);
    return /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(GridPanelContentRoot, _extends({
      className: clsx_default(className, classes.root),
      ownerState: rootProps
    }, other));
  }
  true ? GridPanelContent.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    sx: import_prop_types72.default.oneOfType([import_prop_types72.default.arrayOf(import_prop_types72.default.oneOfType([import_prop_types72.default.func, import_prop_types72.default.object, import_prop_types72.default.bool])), import_prop_types72.default.func, import_prop_types72.default.object])
  } : void 0;

  // node_modules/@mui/x-data-grid/components/panel/GridPanelFooter.js
  init_extends();
  var React114 = __toESM(require_react());
  var import_prop_types73 = __toESM(require_prop_types());
  var import_jsx_runtime95 = __toESM(require_jsx_runtime());
  var _excluded67 = ["className"];
  var useUtilityClasses42 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["panelFooter"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridPanelFooterRoot = styled_default("div", {
    name: "MuiDataGrid",
    slot: "PanelFooter",
    overridesResolver: (props, styles4) => styles4.panelFooter
  })(({
    theme
  }) => ({
    padding: theme.spacing(0.5),
    display: "flex",
    justifyContent: "space-between"
  }));
  function GridPanelFooter(props) {
    const {
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded67);
    const rootProps = useGridRootProps();
    const classes = useUtilityClasses42(rootProps);
    return /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(GridPanelFooterRoot, _extends({
      className: clsx_default(className, classes.root),
      ownerState: rootProps
    }, other));
  }
  true ? GridPanelFooter.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    sx: import_prop_types73.default.oneOfType([import_prop_types73.default.arrayOf(import_prop_types73.default.oneOfType([import_prop_types73.default.func, import_prop_types73.default.object, import_prop_types73.default.bool])), import_prop_types73.default.func, import_prop_types73.default.object])
  } : void 0;

  // node_modules/@mui/x-data-grid/components/panel/GridPanelHeader.js
  init_extends();
  var React115 = __toESM(require_react());
  var import_prop_types74 = __toESM(require_prop_types());
  var import_jsx_runtime96 = __toESM(require_jsx_runtime());
  var _excluded68 = ["className"];
  var useUtilityClasses43 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["panelHeader"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridPanelHeaderRoot = styled_default("div", {
    name: "MuiDataGrid",
    slot: "PanelHeader",
    overridesResolver: (props, styles4) => styles4.panelHeader
  })(({
    theme
  }) => ({
    padding: theme.spacing(1)
  }));
  function GridPanelHeader(props) {
    const {
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded68);
    const rootProps = useGridRootProps();
    const classes = useUtilityClasses43(rootProps);
    return /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(GridPanelHeaderRoot, _extends({
      className: clsx_default(className, classes.root),
      ownerState: rootProps
    }, other));
  }
  true ? GridPanelHeader.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    sx: import_prop_types74.default.oneOfType([import_prop_types74.default.arrayOf(import_prop_types74.default.oneOfType([import_prop_types74.default.func, import_prop_types74.default.object, import_prop_types74.default.bool])), import_prop_types74.default.func, import_prop_types74.default.object])
  } : void 0;

  // node_modules/@mui/x-data-grid/components/panel/GridPanelWrapper.js
  init_extends();
  var React117 = __toESM(require_react());
  var import_prop_types76 = __toESM(require_prop_types());

  // node_modules/@mui/material/Unstable_TrapFocus/FocusTrap.js
  var React116 = __toESM(require_react());
  var import_prop_types75 = __toESM(require_prop_types());
  var import_jsx_runtime97 = __toESM(require_jsx_runtime());
  var import_jsx_runtime98 = __toESM(require_jsx_runtime());
  var candidatesSelector = ["input", "select", "textarea", "a[href]", "button", "[tabindex]", "audio[controls]", "video[controls]", '[contenteditable]:not([contenteditable="false"])'].join(",");
  function getTabIndex(node2) {
    const tabindexAttr = parseInt(node2.getAttribute("tabindex") || "", 10);
    if (!Number.isNaN(tabindexAttr)) {
      return tabindexAttr;
    }
    if (node2.contentEditable === "true" || (node2.nodeName === "AUDIO" || node2.nodeName === "VIDEO" || node2.nodeName === "DETAILS") && node2.getAttribute("tabindex") === null) {
      return 0;
    }
    return node2.tabIndex;
  }
  function isNonTabbableRadio(node2) {
    if (node2.tagName !== "INPUT" || node2.type !== "radio") {
      return false;
    }
    if (!node2.name) {
      return false;
    }
    const getRadio = (selector) => node2.ownerDocument.querySelector(`input[type="radio"]${selector}`);
    let roving = getRadio(`[name="${node2.name}"]:checked`);
    if (!roving) {
      roving = getRadio(`[name="${node2.name}"]`);
    }
    return roving !== node2;
  }
  function isNodeMatchingSelectorFocusable(node2) {
    if (node2.disabled || node2.tagName === "INPUT" && node2.type === "hidden" || isNonTabbableRadio(node2)) {
      return false;
    }
    return true;
  }
  function defaultGetTabbable(root) {
    const regularTabNodes = [];
    const orderedTabNodes = [];
    Array.from(root.querySelectorAll(candidatesSelector)).forEach((node2, i) => {
      const nodeTabIndex = getTabIndex(node2);
      if (nodeTabIndex === -1 || !isNodeMatchingSelectorFocusable(node2)) {
        return;
      }
      if (nodeTabIndex === 0) {
        regularTabNodes.push(node2);
      } else {
        orderedTabNodes.push({
          documentOrder: i,
          tabIndex: nodeTabIndex,
          node: node2
        });
      }
    });
    return orderedTabNodes.sort((a, b) => a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex).map((a) => a.node).concat(regularTabNodes);
  }
  function defaultIsEnabled() {
    return true;
  }
  function FocusTrap(props) {
    const {
      children,
      disableAutoFocus = false,
      disableEnforceFocus = false,
      disableRestoreFocus = false,
      getTabbable = defaultGetTabbable,
      isEnabled: isEnabled2 = defaultIsEnabled,
      open
    } = props;
    const ignoreNextEnforceFocus = React116.useRef(false);
    const sentinelStart = React116.useRef(null);
    const sentinelEnd = React116.useRef(null);
    const nodeToRestore = React116.useRef(null);
    const reactFocusEventTarget = React116.useRef(null);
    const activated = React116.useRef(false);
    const rootRef = React116.useRef(null);
    const handleRef = useForkRef(getReactElementRef(children), rootRef);
    const lastKeydown = React116.useRef(null);
    React116.useEffect(() => {
      if (!open || !rootRef.current) {
        return;
      }
      activated.current = !disableAutoFocus;
    }, [disableAutoFocus, open]);
    React116.useEffect(() => {
      if (!open || !rootRef.current) {
        return;
      }
      const doc = ownerDocument(rootRef.current);
      if (!rootRef.current.contains(doc.activeElement)) {
        if (!rootRef.current.hasAttribute("tabIndex")) {
          if (true) {
            console.error(["MUI: The modal content node does not accept focus.", 'For the benefit of assistive technologies, the tabIndex of the node is being set to "-1".'].join("\n"));
          }
          rootRef.current.setAttribute("tabIndex", "-1");
        }
        if (activated.current) {
          rootRef.current.focus();
        }
      }
      return () => {
        if (!disableRestoreFocus) {
          if (nodeToRestore.current && nodeToRestore.current.focus) {
            ignoreNextEnforceFocus.current = true;
            nodeToRestore.current.focus();
          }
          nodeToRestore.current = null;
        }
      };
    }, [open]);
    React116.useEffect(() => {
      if (!open || !rootRef.current) {
        return;
      }
      const doc = ownerDocument(rootRef.current);
      const loopFocus = (nativeEvent) => {
        lastKeydown.current = nativeEvent;
        if (disableEnforceFocus || !isEnabled2() || nativeEvent.key !== "Tab") {
          return;
        }
        if (doc.activeElement === rootRef.current && nativeEvent.shiftKey) {
          ignoreNextEnforceFocus.current = true;
          if (sentinelEnd.current) {
            sentinelEnd.current.focus();
          }
        }
      };
      const contain = () => {
        const rootElement = rootRef.current;
        if (rootElement === null) {
          return;
        }
        if (!doc.hasFocus() || !isEnabled2() || ignoreNextEnforceFocus.current) {
          ignoreNextEnforceFocus.current = false;
          return;
        }
        if (rootElement.contains(doc.activeElement)) {
          return;
        }
        if (disableEnforceFocus && doc.activeElement !== sentinelStart.current && doc.activeElement !== sentinelEnd.current) {
          return;
        }
        if (doc.activeElement !== reactFocusEventTarget.current) {
          reactFocusEventTarget.current = null;
        } else if (reactFocusEventTarget.current !== null) {
          return;
        }
        if (!activated.current) {
          return;
        }
        let tabbable = [];
        if (doc.activeElement === sentinelStart.current || doc.activeElement === sentinelEnd.current) {
          tabbable = getTabbable(rootRef.current);
        }
        if (tabbable.length > 0) {
          var _lastKeydown$current, _lastKeydown$current2;
          const isShiftTab = Boolean(((_lastKeydown$current = lastKeydown.current) == null ? void 0 : _lastKeydown$current.shiftKey) && ((_lastKeydown$current2 = lastKeydown.current) == null ? void 0 : _lastKeydown$current2.key) === "Tab");
          const focusNext = tabbable[0];
          const focusPrevious = tabbable[tabbable.length - 1];
          if (typeof focusNext !== "string" && typeof focusPrevious !== "string") {
            if (isShiftTab) {
              focusPrevious.focus();
            } else {
              focusNext.focus();
            }
          }
        } else {
          rootElement.focus();
        }
      };
      doc.addEventListener("focusin", contain);
      doc.addEventListener("keydown", loopFocus, true);
      const interval = setInterval(() => {
        if (doc.activeElement && doc.activeElement.tagName === "BODY") {
          contain();
        }
      }, 50);
      return () => {
        clearInterval(interval);
        doc.removeEventListener("focusin", contain);
        doc.removeEventListener("keydown", loopFocus, true);
      };
    }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled2, open, getTabbable]);
    const onFocus = (event) => {
      if (nodeToRestore.current === null) {
        nodeToRestore.current = event.relatedTarget;
      }
      activated.current = true;
      reactFocusEventTarget.current = event.target;
      const childrenPropsHandler = children.props.onFocus;
      if (childrenPropsHandler) {
        childrenPropsHandler(event);
      }
    };
    const handleFocusSentinel = (event) => {
      if (nodeToRestore.current === null) {
        nodeToRestore.current = event.relatedTarget;
      }
      activated.current = true;
    };
    return /* @__PURE__ */ (0, import_jsx_runtime98.jsxs)(React116.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime97.jsx)("div", {
        tabIndex: open ? 0 : -1,
        onFocus: handleFocusSentinel,
        ref: sentinelStart,
        "data-testid": "sentinelStart"
      }), /* @__PURE__ */ React116.cloneElement(children, {
        ref: handleRef,
        onFocus
      }), /* @__PURE__ */ (0, import_jsx_runtime97.jsx)("div", {
        tabIndex: open ? 0 : -1,
        onFocus: handleFocusSentinel,
        ref: sentinelEnd,
        "data-testid": "sentinelEnd"
      })]
    });
  }
  true ? FocusTrap.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * A single child content element.
     */
    children: elementAcceptingRef_default,
    /**
     * If `true`, the focus trap will not automatically shift focus to itself when it opens, and
     * replace it to the last focused element when it closes.
     * This also works correctly with any focus trap children that have the `disableAutoFocus` prop.
     *
     * Generally this should never be set to `true` as it makes the focus trap less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableAutoFocus: import_prop_types75.default.bool,
    /**
     * If `true`, the focus trap will not prevent focus from leaving the focus trap while open.
     *
     * Generally this should never be set to `true` as it makes the focus trap less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableEnforceFocus: import_prop_types75.default.bool,
    /**
     * If `true`, the focus trap will not restore focus to previously focused element once
     * focus trap is hidden or unmounted.
     * @default false
     */
    disableRestoreFocus: import_prop_types75.default.bool,
    /**
     * Returns an array of ordered tabbable nodes (i.e. in tab order) within the root.
     * For instance, you can provide the "tabbable" npm dependency.
     * @param {HTMLElement} root
     */
    getTabbable: import_prop_types75.default.func,
    /**
     * This prop extends the `open` prop.
     * It allows to toggle the open state without having to wait for a rerender when changing the `open` prop.
     * This prop should be memoized.
     * It can be used to support multiple focus trap mounted at the same time.
     * @default function defaultIsEnabled(): boolean {
     *   return true;
     * }
     */
    isEnabled: import_prop_types75.default.func,
    /**
     * If `true`, focus is locked.
     */
    open: import_prop_types75.default.bool.isRequired
  } : void 0;
  if (true) {
    FocusTrap["propTypes"] = exactProp(FocusTrap.propTypes);
  }
  var FocusTrap_default = FocusTrap;

  // node_modules/@mui/x-data-grid/components/panel/GridPanelWrapper.js
  var import_jsx_runtime99 = __toESM(require_jsx_runtime());
  var _excluded69 = ["className", "slotProps"];
  var useUtilityClasses44 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["panelWrapper"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridPanelWrapperRoot = styled_default2("div", {
    name: "MuiDataGrid",
    slot: "PanelWrapper",
    overridesResolver: (props, styles4) => styles4.panelWrapper
  })({
    display: "flex",
    flexDirection: "column",
    flex: 1,
    "&:focus": {
      outline: 0
    }
  });
  var isEnabled = () => true;
  var GridPanelWrapper = /* @__PURE__ */ React117.forwardRef(function GridPanelWrapper2(props, ref) {
    const {
      className,
      slotProps = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded69);
    const rootProps = useGridRootProps();
    const classes = useUtilityClasses44(rootProps);
    return /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(FocusTrap_default, _extends({
      open: true,
      disableEnforceFocus: true,
      isEnabled
    }, slotProps.TrapFocus, {
      children: /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(GridPanelWrapperRoot, _extends({
        ref,
        tabIndex: -1,
        className: clsx_default(className, classes.root),
        ownerState: rootProps
      }, other))
    }));
  });
  true ? GridPanelWrapper.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    slotProps: import_prop_types76.default.object
  } : void 0;

  // node_modules/@mui/x-data-grid/constants/envConstants.js
  var GRID_EXPERIMENTAL_ENABLED = false;

  // node_modules/@mui/x-data-grid/components/panel/GridColumnsPanel.js
  var import_jsx_runtime100 = __toESM(require_jsx_runtime());
  var import_jsx_runtime101 = __toESM(require_jsx_runtime());
  var _excluded70 = ["sort", "searchPredicate", "autoFocusSearchField", "disableHideAllButton", "disableShowAllButton", "getTogglableColumns"];
  var useUtilityClasses45 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["columnsPanel"],
      columnsPanelRow: ["columnsPanelRow"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridColumnsPanelRoot = styled_default2("div", {
    name: "MuiDataGrid",
    slot: "ColumnsPanel",
    overridesResolver: (props, styles4) => styles4.columnsPanel
  })({
    padding: "8px 0px 8px 8px"
  });
  var GridColumnsPanelRowRoot = styled_default2("div", {
    name: "MuiDataGrid",
    slot: "ColumnsPanelRow",
    overridesResolver: (props, styles4) => styles4.columnsPanelRow
  })(({
    theme
  }) => ({
    display: "flex",
    justifyContent: "space-between",
    padding: "1px 8px 1px 7px",
    [`& .${switchClasses_default.root}`]: {
      marginRight: theme.spacing(0.5)
    }
  }));
  var GridIconButtonRoot = styled_default2(IconButton_default)({
    justifyContent: "flex-end"
  });
  var collator2 = new Intl.Collator();
  var defaultSearchPredicate = (column2, searchValue) => {
    return (column2.headerName || column2.field).toLowerCase().indexOf(searchValue) > -1;
  };
  function GridColumnsPanel(props) {
    var _rootProps$slotProps, _rootProps$slotProps3, _rootProps$slotProps4;
    const apiRef = useGridApiContext();
    const searchInputRef = React118.useRef(null);
    const columns = useGridSelector(apiRef, gridColumnDefinitionsSelector);
    const columnVisibilityModel = useGridSelector(apiRef, gridColumnVisibilityModelSelector);
    const rootProps = useGridRootProps();
    const [searchValue, setSearchValue] = React118.useState("");
    const classes = useUtilityClasses45(rootProps);
    const {
      sort,
      searchPredicate = defaultSearchPredicate,
      autoFocusSearchField = true,
      disableHideAllButton = false,
      disableShowAllButton = false,
      getTogglableColumns
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded70);
    const sortedColumns = React118.useMemo(() => {
      switch (sort) {
        case "asc":
          return [...columns].sort((a, b) => collator2.compare(a.headerName || a.field, b.headerName || b.field));
        case "desc":
          return [...columns].sort((a, b) => -collator2.compare(a.headerName || a.field, b.headerName || b.field));
        default:
          return columns;
      }
    }, [columns, sort]);
    const toggleColumn = (event) => {
      const {
        name: field
      } = event.target;
      apiRef.current.setColumnVisibility(field, columnVisibilityModel[field] === false);
    };
    const toggleAllColumns = React118.useCallback((isVisible) => {
      const currentModel = gridColumnVisibilityModelSelector(apiRef);
      const newModel = _extends({}, currentModel);
      const togglableColumns = getTogglableColumns ? getTogglableColumns(columns) : null;
      columns.forEach((col) => {
        if (col.hideable && (togglableColumns == null || togglableColumns.includes(col.field))) {
          if (isVisible) {
            delete newModel[col.field];
          } else {
            newModel[col.field] = false;
          }
        }
      });
      return apiRef.current.setColumnVisibilityModel(newModel);
    }, [apiRef, columns, getTogglableColumns]);
    const handleSearchValueChange = React118.useCallback((event) => {
      setSearchValue(event.target.value);
    }, []);
    const currentColumns = React118.useMemo(() => {
      const togglableColumns = getTogglableColumns ? getTogglableColumns(sortedColumns) : null;
      const togglableSortedColumns = togglableColumns ? sortedColumns.filter(({
        field
      }) => togglableColumns.includes(field)) : sortedColumns;
      if (!searchValue) {
        return togglableSortedColumns;
      }
      return togglableSortedColumns.filter((column2) => searchPredicate(column2, searchValue.toLowerCase()));
    }, [sortedColumns, searchValue, searchPredicate, getTogglableColumns]);
    const firstSwitchRef = React118.useRef(null);
    React118.useEffect(() => {
      if (autoFocusSearchField) {
        searchInputRef.current.focus();
      } else if (firstSwitchRef.current && typeof firstSwitchRef.current.focus === "function") {
        firstSwitchRef.current.focus();
      }
    }, [autoFocusSearchField]);
    let firstHideableColumnFound = false;
    const isFirstHideableColumn = (column2) => {
      if (firstHideableColumnFound === false && column2.hideable !== false) {
        firstHideableColumnFound = true;
        return true;
      }
      return false;
    };
    return /* @__PURE__ */ (0, import_jsx_runtime101.jsxs)(GridPanelWrapper, _extends({}, other, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime100.jsx)(GridPanelHeader, {
        children: /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(rootProps.slots.baseTextField, _extends({
          label: apiRef.current.getLocaleText("columnsPanelTextFieldLabel"),
          placeholder: apiRef.current.getLocaleText("columnsPanelTextFieldPlaceholder"),
          inputRef: searchInputRef,
          value: searchValue,
          onChange: handleSearchValueChange,
          variant: "standard",
          fullWidth: true
        }, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseTextField))
      }), /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(GridPanelContent, {
        children: /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(GridColumnsPanelRoot, {
          className: classes.root,
          ownerState: rootProps,
          children: currentColumns.map((column2) => {
            var _rootProps$slotProps2;
            return /* @__PURE__ */ (0, import_jsx_runtime101.jsxs)(GridColumnsPanelRowRoot, {
              className: classes.columnsPanelRow,
              ownerState: rootProps,
              children: [/* @__PURE__ */ (0, import_jsx_runtime100.jsx)(FormControlLabel_default, {
                control: /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(rootProps.slots.baseSwitch, _extends({
                  disabled: column2.hideable === false,
                  checked: columnVisibilityModel[column2.field] !== false,
                  onClick: toggleColumn,
                  name: column2.field,
                  size: "small",
                  inputRef: isFirstHideableColumn(column2) ? firstSwitchRef : void 0
                }, (_rootProps$slotProps2 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps2.baseSwitch)),
                label: column2.headerName || column2.field
              }), !rootProps.disableColumnReorder && GRID_EXPERIMENTAL_ENABLED && /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(GridIconButtonRoot, {
                draggable: true,
                "aria-label": apiRef.current.getLocaleText("columnsPanelDragIconLabel"),
                title: apiRef.current.getLocaleText("columnsPanelDragIconLabel"),
                size: "small",
                disabled: true,
                children: /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(rootProps.slots.columnReorderIcon, {})
              })]
            }, column2.field);
          })
        })
      }), disableShowAllButton && disableHideAllButton ? null : /* @__PURE__ */ (0, import_jsx_runtime101.jsxs)(GridPanelFooter, {
        children: [!disableHideAllButton ? /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(rootProps.slots.baseButton, _extends({
          onClick: () => toggleAllColumns(false)
        }, (_rootProps$slotProps3 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps3.baseButton, {
          disabled: disableHideAllButton,
          children: apiRef.current.getLocaleText("columnsPanelHideAllButton")
        })) : /* @__PURE__ */ (0, import_jsx_runtime100.jsx)("span", {}), !disableShowAllButton ? /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(rootProps.slots.baseButton, _extends({
          onClick: () => toggleAllColumns(true)
        }, (_rootProps$slotProps4 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps4.baseButton, {
          disabled: disableShowAllButton,
          children: apiRef.current.getLocaleText("columnsPanelShowAllButton")
        })) : null]
      })]
    }));
  }
  true ? GridColumnsPanel.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * If `true`, the column search field will be focused automatically.
     * If `false`, the first column switch input will be focused automatically.
     * This helps to avoid input keyboard panel to popup automatically on touch devices.
     * @default true
     */
    autoFocusSearchField: import_prop_types77.default.bool,
    /**
     * If `true`, the `Hide all` button will not be displayed.
     * @default false
     */
    disableHideAllButton: import_prop_types77.default.bool,
    /**
     * If `true`, the `Show all` button will be disabled
     * @default false
     */
    disableShowAllButton: import_prop_types77.default.bool,
    /**
     * Returns the list of togglable columns.
     * If used, only those columns will be displayed in the panel
     * which are passed as the return value of the function.
     * @param {GridColDef[]} columns The `ColDef` list of all columns.
     * @returns {GridColDef['field'][]} The list of togglable columns' field names.
     */
    getTogglableColumns: import_prop_types77.default.func,
    searchPredicate: import_prop_types77.default.func,
    slotProps: import_prop_types77.default.object,
    sort: import_prop_types77.default.oneOf(["asc", "desc"])
  } : void 0;

  // node_modules/@mui/x-data-grid/components/panel/GridPanel.js
  init_extends();
  var React119 = __toESM(require_react());
  var import_prop_types78 = __toESM(require_prop_types());
  var import_jsx_runtime102 = __toESM(require_jsx_runtime());
  var _excluded71 = ["children", "className", "classes"];
  var gridPanelClasses = generateUtilityClasses("MuiDataGrid", ["panel", "paper"]);
  var GridPanelRoot = styled_default2(Popper_default, {
    name: "MuiDataGrid",
    slot: "Panel",
    overridesResolver: (props, styles4) => styles4.panel
  })(({
    theme
  }) => ({
    zIndex: theme.zIndex.modal
  }));
  var GridPaperRoot = styled_default2(Paper_default, {
    name: "MuiDataGrid",
    slot: "Paper",
    overridesResolver: (props, styles4) => styles4.paper
  })(({
    theme
  }) => ({
    backgroundColor: (theme.vars || theme).palette.background.paper,
    minWidth: 300,
    maxHeight: 450,
    display: "flex"
  }));
  var GridPanel = /* @__PURE__ */ React119.forwardRef((props, ref) => {
    const {
      children,
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded71);
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const classes = gridPanelClasses;
    const [isPlaced, setIsPlaced] = React119.useState(false);
    const handleClickAway = React119.useCallback(() => {
      apiRef.current.hidePreferences();
    }, [apiRef]);
    const handleKeyDown2 = React119.useCallback((event) => {
      if (isEscapeKey(event.key)) {
        apiRef.current.hidePreferences();
      }
    }, [apiRef]);
    const modifiers = React119.useMemo(() => [{
      name: "flip",
      enabled: true,
      options: {
        rootBoundary: "document"
      }
    }, {
      name: "isPlaced",
      enabled: true,
      phase: "main",
      fn: () => {
        setIsPlaced(true);
      },
      effect: () => () => {
        setIsPlaced(false);
      }
    }], []);
    const [anchorEl, setAnchorEl] = React119.useState(null);
    React119.useEffect(() => {
      var _apiRef$current$rootE;
      const columnHeadersElement = (_apiRef$current$rootE = apiRef.current.rootElementRef) == null || (_apiRef$current$rootE = _apiRef$current$rootE.current) == null ? void 0 : _apiRef$current$rootE.querySelector(`.${gridClasses.columnHeaders}`);
      if (columnHeadersElement) {
        setAnchorEl(columnHeadersElement);
      }
    }, [apiRef]);
    if (!anchorEl) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime102.jsx)(GridPanelRoot, _extends({
      ref,
      placement: "bottom-start",
      className: clsx_default(className, classes.panel),
      ownerState: rootProps,
      anchorEl,
      modifiers
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime102.jsx)(ClickAwayListener, {
        mouseEvent: "onMouseUp",
        onClickAway: handleClickAway,
        children: /* @__PURE__ */ (0, import_jsx_runtime102.jsx)(GridPaperRoot, {
          className: classes.paper,
          ownerState: rootProps,
          elevation: 8,
          onKeyDown: handleKeyDown2,
          children: isPlaced && children
        })
      })
    }));
  });
  true ? GridPanel.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * Popper render function or node.
     */
    children: import_prop_types78.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types78.default.object,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types78.default.bool.isRequired,
    ownerState: import_prop_types78.default.object
  } : void 0;

  // node_modules/@mui/x-data-grid/components/panel/GridPreferencesPanel.js
  init_extends();
  var React120 = __toESM(require_react());
  var import_jsx_runtime103 = __toESM(require_jsx_runtime());
  var GridPreferencesPanel = /* @__PURE__ */ React120.forwardRef(function GridPreferencesPanel2(props, ref) {
    var _preferencePanelState, _rootProps$slotProps, _rootProps$slotProps2;
    const apiRef = useGridApiContext();
    const columns = useGridSelector(apiRef, gridColumnDefinitionsSelector);
    const rootProps = useGridRootProps();
    const preferencePanelState = useGridSelector(apiRef, gridPreferencePanelStateSelector);
    const panelContent = apiRef.current.unstable_applyPipeProcessors("preferencePanel", null, (_preferencePanelState = preferencePanelState.openedPanelValue) != null ? _preferencePanelState : GridPreferencePanelsValue.filters);
    return /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(rootProps.slots.panel, _extends({
      ref,
      as: rootProps.slots.basePopper,
      open: columns.length > 0 && preferencePanelState.open,
      id: preferencePanelState.panelId,
      "aria-labelledby": preferencePanelState.labelId
    }, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.panel, props, (_rootProps$slotProps2 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps2.basePopper, {
      children: panelContent
    }));
  });

  // node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterForm.js
  init_extends();
  var React121 = __toESM(require_react());
  var import_prop_types79 = __toESM(require_prop_types());
  var import_jsx_runtime104 = __toESM(require_jsx_runtime());
  var import_react9 = __toESM(require_react());
  var import_jsx_runtime105 = __toESM(require_jsx_runtime());
  var _excluded72 = ["item", "hasMultipleFilters", "deleteFilter", "applyFilterChanges", "multiFilterOperator", "showMultiFilterOperators", "disableMultiFilterOperator", "applyMultiFilterOperatorChanges", "focusElementRef", "logicOperators", "columnsSort", "filterColumns", "deleteIconProps", "logicOperatorInputProps", "operatorInputProps", "columnInputProps", "valueInputProps", "children"];
  var _excluded211 = ["InputComponentProps"];
  var useUtilityClasses46 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["filterForm"],
      deleteIcon: ["filterFormDeleteIcon"],
      logicOperatorInput: ["filterFormLogicOperatorInput"],
      columnInput: ["filterFormColumnInput"],
      operatorInput: ["filterFormOperatorInput"],
      valueInput: ["filterFormValueInput"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridFilterFormRoot = styled_default2("div", {
    name: "MuiDataGrid",
    slot: "FilterForm",
    overridesResolver: (props, styles4) => styles4.filterForm
  })(({
    theme
  }) => ({
    display: "flex",
    padding: theme.spacing(1)
  }));
  var FilterFormDeleteIcon = styled_default2("div", {
    name: "MuiDataGrid",
    slot: "FilterFormDeleteIcon",
    overridesResolver: (_4, styles4) => styles4.filterFormDeleteIcon
  })(({
    theme
  }) => ({
    flexShrink: 0,
    justifyContent: "flex-end",
    marginRight: theme.spacing(0.5),
    marginBottom: theme.spacing(0.2)
  }));
  var FilterFormLogicOperatorInput = styled_default2("div", {
    name: "MuiDataGrid",
    slot: "FilterFormLogicOperatorInput",
    overridesResolver: (_4, styles4) => styles4.filterFormLogicOperatorInput
  })({
    minWidth: 55,
    marginRight: 5,
    justifyContent: "end"
  });
  var FilterFormColumnInput = styled_default2("div", {
    name: "MuiDataGrid",
    slot: "FilterFormColumnInput",
    overridesResolver: (_4, styles4) => styles4.filterFormColumnInput
  })({
    width: 150
  });
  var FilterFormOperatorInput = styled_default2("div", {
    name: "MuiDataGrid",
    slot: "FilterFormOperatorInput",
    overridesResolver: (_4, styles4) => styles4.filterFormOperatorInput
  })({
    width: 120
  });
  var FilterFormValueInput = styled_default2("div", {
    name: "MuiDataGrid",
    slot: "FilterFormValueInput",
    overridesResolver: (_4, styles4) => styles4.filterFormValueInput
  })({
    width: 190
  });
  var getLogicOperatorLocaleKey = (logicOperator) => {
    switch (logicOperator) {
      case GridLogicOperator.And:
        return "filterPanelOperatorAnd";
      case GridLogicOperator.Or:
        return "filterPanelOperatorOr";
      default:
        throw new Error("MUI: Invalid `logicOperator` property in the `GridFilterPanel`.");
    }
  };
  var getColumnLabel = (col) => col.headerName || col.field;
  var collator3 = new Intl.Collator();
  var GridFilterForm = /* @__PURE__ */ React121.forwardRef(function GridFilterForm2(props, ref) {
    var _rootProps$slotProps, _rootProps$slotProps2, _baseSelectProps$nati, _rootProps$slotProps3, _rootProps$slotProps4, _rootProps$slotProps5, _rootProps$slotProps6, _rootProps$slotProps7, _rootProps$slotProps8, _currentColumn$filter2;
    const {
      item,
      hasMultipleFilters,
      deleteFilter,
      applyFilterChanges,
      multiFilterOperator,
      showMultiFilterOperators,
      disableMultiFilterOperator,
      applyMultiFilterOperatorChanges,
      focusElementRef,
      logicOperators = [GridLogicOperator.And, GridLogicOperator.Or],
      columnsSort,
      filterColumns,
      deleteIconProps = {},
      logicOperatorInputProps = {},
      operatorInputProps = {},
      columnInputProps = {},
      valueInputProps = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded72);
    const apiRef = useGridApiContext();
    const filterableColumns = useGridSelector(apiRef, gridFilterableColumnDefinitionsSelector);
    const filterModel = useGridSelector(apiRef, gridFilterModelSelector);
    const columnSelectId = useId();
    const columnSelectLabelId = useId();
    const operatorSelectId = useId();
    const operatorSelectLabelId = useId();
    const rootProps = useGridRootProps();
    const classes = useUtilityClasses46(rootProps);
    const valueRef = React121.useRef(null);
    const filterSelectorRef = React121.useRef(null);
    const hasLogicOperatorColumn = hasMultipleFilters && logicOperators.length > 0;
    const baseFormControlProps = ((_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseFormControl) || {};
    const baseSelectProps = ((_rootProps$slotProps2 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps2.baseSelect) || {};
    const isBaseSelectNative = (_baseSelectProps$nati = baseSelectProps.native) != null ? _baseSelectProps$nati : true;
    const baseInputLabelProps = ((_rootProps$slotProps3 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps3.baseInputLabel) || {};
    const baseSelectOptionProps = ((_rootProps$slotProps4 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps4.baseSelectOption) || {};
    const {
      InputComponentProps
    } = valueInputProps, valueInputPropsOther = _objectWithoutPropertiesLoose(valueInputProps, _excluded211);
    const filteredColumns = React121.useMemo(() => {
      if (filterColumns === void 0 || typeof filterColumns !== "function") {
        return filterableColumns;
      }
      const filteredFields = filterColumns({
        field: item.field,
        columns: filterableColumns,
        currentFilters: (filterModel == null ? void 0 : filterModel.items) || []
      });
      return filterableColumns.filter((column2) => filteredFields.includes(column2.field));
    }, [filterColumns, filterModel == null ? void 0 : filterModel.items, filterableColumns, item.field]);
    const sortedFilteredColumns = React121.useMemo(() => {
      switch (columnsSort) {
        case "asc":
          return filteredColumns.sort((a, b) => collator3.compare(getColumnLabel(a), getColumnLabel(b)));
        case "desc":
          return filteredColumns.sort((a, b) => -collator3.compare(getColumnLabel(a), getColumnLabel(b)));
        default:
          return filteredColumns;
      }
    }, [filteredColumns, columnsSort]);
    const currentColumn = item.field ? apiRef.current.getColumn(item.field) : null;
    const currentOperator = React121.useMemo(() => {
      var _currentColumn$filter;
      if (!item.operator || !currentColumn) {
        return null;
      }
      return (_currentColumn$filter = currentColumn.filterOperators) == null ? void 0 : _currentColumn$filter.find((operator) => operator.value === item.operator);
    }, [item, currentColumn]);
    const changeColumn = React121.useCallback((event) => {
      const field = event.target.value;
      const column2 = apiRef.current.getColumn(field);
      if (column2.field === currentColumn.field) {
        return;
      }
      const newOperator = column2.filterOperators.find((operator) => operator.value === item.operator) || column2.filterOperators[0];
      const eraseItemValue = !newOperator.InputComponent || newOperator.InputComponent !== (currentOperator == null ? void 0 : currentOperator.InputComponent) || column2.type !== currentColumn.type;
      applyFilterChanges(_extends({}, item, {
        field,
        operator: newOperator.value,
        value: eraseItemValue ? void 0 : item.value
      }));
    }, [apiRef, applyFilterChanges, item, currentColumn, currentOperator]);
    const changeOperator = React121.useCallback((event) => {
      const operator = event.target.value;
      const newOperator = currentColumn == null ? void 0 : currentColumn.filterOperators.find((op) => op.value === operator);
      const eraseItemValue = !(newOperator != null && newOperator.InputComponent) || (newOperator == null ? void 0 : newOperator.InputComponent) !== (currentOperator == null ? void 0 : currentOperator.InputComponent);
      applyFilterChanges(_extends({}, item, {
        operator,
        value: eraseItemValue ? void 0 : item.value
      }));
    }, [applyFilterChanges, item, currentColumn, currentOperator]);
    const changeLogicOperator = React121.useCallback((event) => {
      const logicOperator = event.target.value === GridLogicOperator.And.toString() ? GridLogicOperator.And : GridLogicOperator.Or;
      applyMultiFilterOperatorChanges(logicOperator);
    }, [applyMultiFilterOperatorChanges]);
    const handleDeleteFilter = () => {
      if (rootProps.disableMultipleColumnsFiltering) {
        if (item.value === void 0) {
          deleteFilter(item);
        } else {
          applyFilterChanges(_extends({}, item, {
            value: void 0
          }));
        }
      } else {
        deleteFilter(item);
      }
    };
    React121.useImperativeHandle(focusElementRef, () => ({
      focus: () => {
        if (currentOperator != null && currentOperator.InputComponent) {
          var _valueRef$current;
          valueRef == null || (_valueRef$current = valueRef.current) == null || _valueRef$current.focus();
        } else {
          filterSelectorRef.current.focus();
        }
      }
    }), [currentOperator]);
    return /* @__PURE__ */ (0, import_jsx_runtime105.jsxs)(GridFilterFormRoot, _extends({
      ref,
      className: classes.root,
      "data-id": item.id,
      ownerState: rootProps
    }, other, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime104.jsx)(FilterFormDeleteIcon, _extends({
        variant: "standard",
        as: rootProps.slots.baseFormControl
      }, baseFormControlProps, deleteIconProps, {
        className: clsx_default(classes.deleteIcon, baseFormControlProps.className, deleteIconProps.className),
        ownerState: rootProps,
        children: /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(rootProps.slots.baseIconButton, _extends({
          "aria-label": apiRef.current.getLocaleText("filterPanelDeleteIconLabel"),
          title: apiRef.current.getLocaleText("filterPanelDeleteIconLabel"),
          onClick: handleDeleteFilter,
          size: "small"
        }, (_rootProps$slotProps5 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps5.baseIconButton, {
          children: /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(rootProps.slots.filterPanelDeleteIcon, {
            fontSize: "small"
          })
        }))
      })), /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(FilterFormLogicOperatorInput, _extends({
        variant: "standard",
        as: rootProps.slots.baseFormControl
      }, baseFormControlProps, logicOperatorInputProps, {
        sx: _extends({
          display: hasLogicOperatorColumn ? "flex" : "none",
          visibility: showMultiFilterOperators ? "visible" : "hidden"
        }, baseFormControlProps.sx || {}, logicOperatorInputProps.sx || {}),
        className: clsx_default(classes.logicOperatorInput, baseFormControlProps.className, logicOperatorInputProps.className),
        ownerState: rootProps,
        children: /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(rootProps.slots.baseSelect, _extends({
          inputProps: {
            "aria-label": apiRef.current.getLocaleText("filterPanelLogicOperator")
          },
          value: multiFilterOperator,
          onChange: changeLogicOperator,
          disabled: !!disableMultiFilterOperator || logicOperators.length === 1,
          native: isBaseSelectNative
        }, (_rootProps$slotProps6 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps6.baseSelect, {
          children: logicOperators.map((logicOperator) => /* @__PURE__ */ (0, import_react9.createElement)(rootProps.slots.baseSelectOption, _extends({}, baseSelectOptionProps, {
            native: isBaseSelectNative,
            key: logicOperator.toString(),
            value: logicOperator.toString()
          }), apiRef.current.getLocaleText(getLogicOperatorLocaleKey(logicOperator))))
        }))
      })), /* @__PURE__ */ (0, import_jsx_runtime105.jsxs)(FilterFormColumnInput, _extends({
        variant: "standard",
        as: rootProps.slots.baseFormControl
      }, baseFormControlProps, columnInputProps, {
        className: clsx_default(classes.columnInput, baseFormControlProps.className, columnInputProps.className),
        ownerState: rootProps,
        children: [/* @__PURE__ */ (0, import_jsx_runtime104.jsx)(rootProps.slots.baseInputLabel, _extends({}, baseInputLabelProps, {
          htmlFor: columnSelectId,
          id: columnSelectLabelId,
          children: apiRef.current.getLocaleText("filterPanelColumns")
        })), /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(rootProps.slots.baseSelect, _extends({
          labelId: columnSelectLabelId,
          id: columnSelectId,
          label: apiRef.current.getLocaleText("filterPanelColumns"),
          value: item.field || "",
          onChange: changeColumn,
          native: isBaseSelectNative
        }, (_rootProps$slotProps7 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps7.baseSelect, {
          children: sortedFilteredColumns.map((col) => /* @__PURE__ */ (0, import_react9.createElement)(rootProps.slots.baseSelectOption, _extends({}, baseSelectOptionProps, {
            native: isBaseSelectNative,
            key: col.field,
            value: col.field
          }), getColumnLabel(col)))
        }))]
      })), /* @__PURE__ */ (0, import_jsx_runtime105.jsxs)(FilterFormOperatorInput, _extends({
        variant: "standard",
        as: rootProps.slots.baseFormControl
      }, baseFormControlProps, operatorInputProps, {
        className: clsx_default(classes.operatorInput, baseFormControlProps.className, operatorInputProps.className),
        ownerState: rootProps,
        children: [/* @__PURE__ */ (0, import_jsx_runtime104.jsx)(rootProps.slots.baseInputLabel, _extends({}, baseInputLabelProps, {
          htmlFor: operatorSelectId,
          id: operatorSelectLabelId,
          children: apiRef.current.getLocaleText("filterPanelOperator")
        })), /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(rootProps.slots.baseSelect, _extends({
          labelId: operatorSelectLabelId,
          label: apiRef.current.getLocaleText("filterPanelOperator"),
          id: operatorSelectId,
          value: item.operator,
          onChange: changeOperator,
          native: isBaseSelectNative,
          inputRef: filterSelectorRef
        }, (_rootProps$slotProps8 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps8.baseSelect, {
          children: currentColumn == null || (_currentColumn$filter2 = currentColumn.filterOperators) == null ? void 0 : _currentColumn$filter2.map((operator) => /* @__PURE__ */ (0, import_react9.createElement)(rootProps.slots.baseSelectOption, _extends({}, baseSelectOptionProps, {
            native: isBaseSelectNative,
            key: operator.value,
            value: operator.value
          }), operator.label || apiRef.current.getLocaleText(`filterOperator${capitalize(operator.value)}`)))
        }))]
      })), /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(FilterFormValueInput, _extends({
        variant: "standard",
        as: rootProps.slots.baseFormControl
      }, baseFormControlProps, valueInputPropsOther, {
        className: clsx_default(classes.valueInput, baseFormControlProps.className, valueInputPropsOther.className),
        ownerState: rootProps,
        children: currentOperator != null && currentOperator.InputComponent ? /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(currentOperator.InputComponent, _extends({
          apiRef,
          item,
          applyValue: applyFilterChanges,
          focusElementRef: valueRef
        }, currentOperator.InputComponentProps, InputComponentProps)) : null
      }))]
    }));
  });
  true ? GridFilterForm.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * Callback called when the operator, column field or value is changed.
     * @param {GridFilterItem} item The updated [[GridFilterItem]].
     */
    applyFilterChanges: import_prop_types79.default.func.isRequired,
    /**
     * Callback called when the logic operator is changed.
     * @param {GridLogicOperator} operator The new logic operator.
     */
    applyMultiFilterOperatorChanges: import_prop_types79.default.func.isRequired,
    /**
     * @ignore - do not document.
     */
    children: import_prop_types79.default.node,
    /**
     * Props passed to the column input component.
     * @default {}
     */
    columnInputProps: import_prop_types79.default.any,
    /**
     * Changes how the options in the columns selector should be ordered.
     * If not specified, the order is derived from the `columns` prop.
     */
    columnsSort: import_prop_types79.default.oneOf(["asc", "desc"]),
    /**
     * Callback called when the delete button is clicked.
     * @param {GridFilterItem} item The deleted [[GridFilterItem]].
     */
    deleteFilter: import_prop_types79.default.func.isRequired,
    /**
     * Props passed to the delete icon.
     * @default {}
     */
    deleteIconProps: import_prop_types79.default.any,
    /**
     * If `true`, disables the logic operator field but still renders it.
     */
    disableMultiFilterOperator: import_prop_types79.default.bool,
    /**
     * Allows to filter the columns displayed in the filter form.
     * @param {FilterColumnsArgs} args The columns of the grid and name of field.
     * @returns {GridColDef['field'][]} The filtered fields array.
     */
    filterColumns: import_prop_types79.default.func,
    /**
     * A ref allowing to set imperative focus.
     * It can be passed to the el
     */
    focusElementRef: import_prop_types79.default.oneOfType([import_prop_types79.default.func, import_prop_types79.default.object]),
    /**
     * If `true`, the logic operator field is rendered.
     * The field will be invisible if `showMultiFilterOperators` is also `true`.
     */
    hasMultipleFilters: import_prop_types79.default.bool.isRequired,
    /**
     * The [[GridFilterItem]] representing this form.
     */
    item: import_prop_types79.default.shape({
      field: import_prop_types79.default.string.isRequired,
      id: import_prop_types79.default.oneOfType([import_prop_types79.default.number, import_prop_types79.default.string]),
      operator: import_prop_types79.default.string.isRequired,
      value: import_prop_types79.default.any
    }).isRequired,
    /**
     * Props passed to the logic operator input component.
     * @default {}
     */
    logicOperatorInputProps: import_prop_types79.default.any,
    /**
     * Sets the available logic operators.
     * @default [GridLogicOperator.And, GridLogicOperator.Or]
     */
    logicOperators: import_prop_types79.default.arrayOf(import_prop_types79.default.oneOf(["and", "or"]).isRequired),
    /**
     * The current logic operator applied.
     */
    multiFilterOperator: import_prop_types79.default.oneOf(["and", "or"]),
    /**
     * Props passed to the operator input component.
     * @default {}
     */
    operatorInputProps: import_prop_types79.default.any,
    /**
     * If `true`, the logic operator field is visible.
     */
    showMultiFilterOperators: import_prop_types79.default.bool,
    /**
     * Props passed to the value input component.
     * @default {}
     */
    valueInputProps: import_prop_types79.default.any
  } : void 0;

  // node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterInputValue.js
  init_extends();
  var React122 = __toESM(require_react());
  var import_prop_types80 = __toESM(require_prop_types());

  // node_modules/@mui/x-data-grid/hooks/utils/useTimeout.js
  var Timeout2 = class _Timeout {
    constructor() {
      this.currentId = 0;
      this.clear = () => {
        if (this.currentId !== 0) {
          clearTimeout(this.currentId);
          this.currentId = 0;
        }
      };
      this.disposeEffect = () => {
        return this.clear;
      };
    }
    static create() {
      return new _Timeout();
    }
    start(delay, fn2) {
      this.clear();
      this.currentId = setTimeout(fn2, delay);
    }
  };
  function useTimeout2() {
    const timeout2 = useLazyRef2(Timeout2.create).current;
    useOnMount2(timeout2.disposeEffect);
    return timeout2;
  }

  // node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterInputValue.js
  var import_jsx_runtime106 = __toESM(require_jsx_runtime());
  var _excluded73 = ["item", "applyValue", "type", "apiRef", "focusElementRef", "tabIndex", "disabled", "isFilterActive", "clearButton", "InputProps", "variant"];
  function GridFilterInputValue(props) {
    var _item$value, _rootProps$slotProps;
    const {
      item,
      applyValue,
      type,
      apiRef,
      focusElementRef,
      tabIndex,
      disabled,
      clearButton,
      InputProps,
      variant = "standard"
    } = props, others = _objectWithoutPropertiesLoose(props, _excluded73);
    const filterTimeout = useTimeout2();
    const [filterValueState, setFilterValueState] = React122.useState((_item$value = item.value) != null ? _item$value : "");
    const [applying, setIsApplying] = React122.useState(false);
    const id = useId();
    const rootProps = useGridRootProps();
    const onFilterChange = React122.useCallback((event) => {
      const {
        value
      } = event.target;
      setFilterValueState(String(value));
      setIsApplying(true);
      filterTimeout.start(rootProps.filterDebounceMs, () => {
        const newItem = _extends({}, item, {
          value,
          fromInput: id
        });
        applyValue(newItem);
        setIsApplying(false);
      });
    }, [id, applyValue, item, rootProps.filterDebounceMs, filterTimeout]);
    React122.useEffect(() => {
      const itemPlusTag = item;
      if (itemPlusTag.fromInput !== id || item.value === void 0) {
        var _item$value2;
        setFilterValueState(String((_item$value2 = item.value) != null ? _item$value2 : ""));
      }
    }, [id, item]);
    return /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(rootProps.slots.baseTextField, _extends({
      id,
      label: apiRef.current.getLocaleText("filterPanelInputLabel"),
      placeholder: apiRef.current.getLocaleText("filterPanelInputPlaceholder"),
      value: filterValueState,
      onChange: onFilterChange,
      variant,
      type: type || "text",
      InputProps: _extends({}, applying || clearButton ? {
        endAdornment: applying ? /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(rootProps.slots.loadIcon, {
          fontSize: "small",
          color: "action"
        }) : clearButton
      } : {}, {
        disabled
      }, InputProps, {
        inputProps: _extends({
          tabIndex
        }, InputProps == null ? void 0 : InputProps.inputProps)
      }),
      InputLabelProps: {
        shrink: true
      },
      inputRef: focusElementRef
    }, others, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseTextField));
  }
  true ? GridFilterInputValue.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    apiRef: import_prop_types80.default.shape({
      current: import_prop_types80.default.object.isRequired
    }).isRequired,
    applyValue: import_prop_types80.default.func.isRequired,
    clearButton: import_prop_types80.default.node,
    focusElementRef: import_prop_types80.default.oneOfType([import_prop_types80.default.func, import_prop_types80.default.object]),
    /**
     * It is `true` if the filter either has a value or an operator with no value
     * required is selected (e.g. `isEmpty`)
     */
    isFilterActive: import_prop_types80.default.bool,
    item: import_prop_types80.default.shape({
      field: import_prop_types80.default.string.isRequired,
      id: import_prop_types80.default.oneOfType([import_prop_types80.default.number, import_prop_types80.default.string]),
      operator: import_prop_types80.default.string.isRequired,
      value: import_prop_types80.default.any
    }).isRequired
  } : void 0;

  // node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterInputDate.js
  init_extends();
  var React123 = __toESM(require_react());
  var import_prop_types81 = __toESM(require_prop_types());
  var import_jsx_runtime107 = __toESM(require_jsx_runtime());
  var _excluded74 = ["item", "applyValue", "type", "apiRef", "focusElementRef", "InputProps", "isFilterActive", "clearButton", "tabIndex", "disabled"];
  function GridFilterInputDate(props) {
    var _item$value, _rootProps$slotProps;
    const {
      item,
      applyValue,
      type,
      apiRef,
      focusElementRef,
      InputProps,
      clearButton,
      tabIndex,
      disabled
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded74);
    const filterTimeout = useTimeout2();
    const [filterValueState, setFilterValueState] = React123.useState((_item$value = item.value) != null ? _item$value : "");
    const [applying, setIsApplying] = React123.useState(false);
    const id = useId();
    const rootProps = useGridRootProps();
    const onFilterChange = React123.useCallback((event) => {
      const value = event.target.value;
      setFilterValueState(String(value));
      setIsApplying(true);
      filterTimeout.start(rootProps.filterDebounceMs, () => {
        applyValue(_extends({}, item, {
          value
        }));
        setIsApplying(false);
      });
    }, [applyValue, item, rootProps.filterDebounceMs, filterTimeout]);
    React123.useEffect(() => {
      var _item$value2;
      const itemValue = (_item$value2 = item.value) != null ? _item$value2 : "";
      setFilterValueState(String(itemValue));
    }, [item.value]);
    return /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(rootProps.slots.baseTextField, _extends({
      fullWidth: true,
      id,
      label: apiRef.current.getLocaleText("filterPanelInputLabel"),
      placeholder: apiRef.current.getLocaleText("filterPanelInputPlaceholder"),
      value: filterValueState,
      onChange: onFilterChange,
      variant: "standard",
      type: type || "text",
      InputLabelProps: {
        shrink: true
      },
      inputRef: focusElementRef,
      InputProps: _extends({}, applying || clearButton ? {
        endAdornment: applying ? /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(rootProps.slots.loadIcon, {
          fontSize: "small",
          color: "action"
        }) : clearButton
      } : {}, {
        disabled
      }, InputProps, {
        inputProps: _extends({
          max: type === "datetime-local" ? "9999-12-31T23:59" : "9999-12-31",
          tabIndex
        }, InputProps == null ? void 0 : InputProps.inputProps)
      })
    }, other, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseTextField));
  }
  true ? GridFilterInputDate.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    apiRef: import_prop_types81.default.shape({
      current: import_prop_types81.default.object.isRequired
    }).isRequired,
    applyValue: import_prop_types81.default.func.isRequired,
    clearButton: import_prop_types81.default.node,
    focusElementRef: import_prop_types81.default.oneOfType([import_prop_types81.default.func, import_prop_types81.default.object]),
    /**
     * It is `true` if the filter either has a value or an operator with no value
     * required is selected (e.g. `isEmpty`)
     */
    isFilterActive: import_prop_types81.default.bool,
    item: import_prop_types81.default.shape({
      field: import_prop_types81.default.string.isRequired,
      id: import_prop_types81.default.oneOfType([import_prop_types81.default.number, import_prop_types81.default.string]),
      operator: import_prop_types81.default.string.isRequired,
      value: import_prop_types81.default.any
    }).isRequired
  } : void 0;

  // node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterInputSingleSelect.js
  init_extends();
  var React124 = __toESM(require_react());
  var import_prop_types82 = __toESM(require_prop_types());
  var import_react10 = __toESM(require_react());
  var import_jsx_runtime108 = __toESM(require_jsx_runtime());
  var import_jsx_runtime109 = __toESM(require_jsx_runtime());
  var _excluded75 = ["item", "applyValue", "type", "apiRef", "focusElementRef", "getOptionLabel", "getOptionValue", "placeholder", "tabIndex", "label", "variant", "isFilterActive", "clearButton", "InputLabelProps"];
  var renderSingleSelectOptions = ({
    column: {
      valueOptions,
      field
    },
    OptionComponent,
    getOptionLabel,
    getOptionValue,
    isSelectNative,
    baseSelectOptionProps
  }) => {
    const iterableColumnValues = typeof valueOptions === "function" ? ["", ...valueOptions({
      field
    })] : ["", ...valueOptions || []];
    return iterableColumnValues.map((option) => {
      const value = getOptionValue(option);
      const label = getOptionLabel(option);
      return /* @__PURE__ */ (0, import_react10.createElement)(OptionComponent, _extends({}, baseSelectOptionProps, {
        native: isSelectNative,
        key: value,
        value
      }), label);
    });
  };
  var SingleSelectOperatorContainer = styled_default2("div")({
    display: "flex",
    alignItems: "flex-end",
    width: "100%",
    [`& button`]: {
      margin: "auto 0px 5px 5px"
    }
  });
  function GridFilterInputSingleSelect(props) {
    var _item$value, _rootProps$slotProps$, _rootProps$slotProps, _resolvedColumn, _resolvedColumn2, _rootProps$slotProps2, _rootProps$slotProps3, _rootProps$slotProps4;
    const {
      item,
      applyValue,
      type,
      apiRef,
      focusElementRef,
      getOptionLabel: getOptionLabelProp,
      getOptionValue: getOptionValueProp,
      placeholder,
      tabIndex,
      label: labelProp,
      variant = "standard",
      clearButton
    } = props, others = _objectWithoutPropertiesLoose(props, _excluded75);
    const [filterValueState, setFilterValueState] = React124.useState((_item$value = item.value) != null ? _item$value : "");
    const id = useId();
    const labelId = useId();
    const rootProps = useGridRootProps();
    const isSelectNative = (_rootProps$slotProps$ = (_rootProps$slotProps = rootProps.slotProps) == null || (_rootProps$slotProps = _rootProps$slotProps.baseSelect) == null ? void 0 : _rootProps$slotProps.native) != null ? _rootProps$slotProps$ : true;
    let resolvedColumn = null;
    if (item.field) {
      const column2 = apiRef.current.getColumn(item.field);
      if (isSingleSelectColDef(column2)) {
        resolvedColumn = column2;
      }
    }
    const getOptionValue = getOptionValueProp || ((_resolvedColumn = resolvedColumn) == null ? void 0 : _resolvedColumn.getOptionValue);
    const getOptionLabel = getOptionLabelProp || ((_resolvedColumn2 = resolvedColumn) == null ? void 0 : _resolvedColumn2.getOptionLabel);
    const currentValueOptions = React124.useMemo(() => {
      if (!resolvedColumn) {
        return void 0;
      }
      return typeof resolvedColumn.valueOptions === "function" ? resolvedColumn.valueOptions({
        field: resolvedColumn.field
      }) : resolvedColumn.valueOptions;
    }, [resolvedColumn]);
    const onFilterChange = React124.useCallback((event) => {
      let value = event.target.value;
      value = getValueFromValueOptions(value, currentValueOptions, getOptionValue);
      setFilterValueState(String(value));
      applyValue(_extends({}, item, {
        value
      }));
    }, [currentValueOptions, getOptionValue, applyValue, item]);
    React124.useEffect(() => {
      var _itemValue;
      let itemValue;
      if (currentValueOptions !== void 0) {
        itemValue = getValueFromValueOptions(item.value, currentValueOptions, getOptionValue);
        if (itemValue !== item.value) {
          applyValue(_extends({}, item, {
            value: itemValue
          }));
          return;
        }
      } else {
        itemValue = item.value;
      }
      itemValue = (_itemValue = itemValue) != null ? _itemValue : "";
      setFilterValueState(String(itemValue));
    }, [item, currentValueOptions, applyValue, getOptionValue]);
    if (!isSingleSelectColDef(resolvedColumn)) {
      return null;
    }
    if (!isSingleSelectColDef(resolvedColumn)) {
      return null;
    }
    const label = labelProp != null ? labelProp : apiRef.current.getLocaleText("filterPanelInputLabel");
    return /* @__PURE__ */ (0, import_jsx_runtime109.jsxs)(SingleSelectOperatorContainer, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime109.jsxs)(rootProps.slots.baseFormControl, {
        children: [/* @__PURE__ */ (0, import_jsx_runtime108.jsx)(rootProps.slots.baseInputLabel, _extends({}, (_rootProps$slotProps2 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps2.baseInputLabel, {
          id: labelId,
          htmlFor: id,
          shrink: true,
          variant,
          children: label
        })), /* @__PURE__ */ (0, import_jsx_runtime108.jsx)(rootProps.slots.baseSelect, _extends({
          id,
          label,
          labelId,
          value: filterValueState,
          onChange: onFilterChange,
          variant,
          type: type || "text",
          inputProps: {
            tabIndex,
            ref: focusElementRef,
            placeholder: placeholder != null ? placeholder : apiRef.current.getLocaleText("filterPanelInputPlaceholder")
          },
          native: isSelectNative,
          notched: variant === "outlined" ? true : void 0
        }, others, (_rootProps$slotProps3 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps3.baseSelect, {
          children: renderSingleSelectOptions({
            column: resolvedColumn,
            OptionComponent: rootProps.slots.baseSelectOption,
            getOptionLabel,
            getOptionValue,
            isSelectNative,
            baseSelectOptionProps: (_rootProps$slotProps4 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps4.baseSelectOption
          })
        }))]
      }), clearButton]
    });
  }
  true ? GridFilterInputSingleSelect.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    apiRef: import_prop_types82.default.shape({
      current: import_prop_types82.default.object.isRequired
    }).isRequired,
    applyValue: import_prop_types82.default.func.isRequired,
    clearButton: import_prop_types82.default.node,
    focusElementRef: import_prop_types82.default.oneOfType([import_prop_types82.default.func, import_prop_types82.default.object]),
    /**
     * Used to determine the label displayed for a given value option.
     * @param {ValueOptions} value The current value option.
     * @returns {string} The text to be displayed.
     */
    getOptionLabel: import_prop_types82.default.func,
    /**
     * Used to determine the value used for a value option.
     * @param {ValueOptions} value The current value option.
     * @returns {string} The value to be used.
     */
    getOptionValue: import_prop_types82.default.func,
    /**
     * It is `true` if the filter either has a value or an operator with no value
     * required is selected (e.g. `isEmpty`)
     */
    isFilterActive: import_prop_types82.default.bool,
    item: import_prop_types82.default.shape({
      field: import_prop_types82.default.string.isRequired,
      id: import_prop_types82.default.oneOfType([import_prop_types82.default.number, import_prop_types82.default.string]),
      operator: import_prop_types82.default.string.isRequired,
      value: import_prop_types82.default.any
    }).isRequired
  } : void 0;

  // node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterInputBoolean.js
  init_extends();
  var React125 = __toESM(require_react());
  var import_prop_types83 = __toESM(require_prop_types());
  var import_jsx_runtime110 = __toESM(require_jsx_runtime());
  var import_jsx_runtime111 = __toESM(require_jsx_runtime());
  var _excluded76 = ["item", "applyValue", "apiRef", "focusElementRef", "isFilterActive", "clearButton", "tabIndex", "label", "variant", "InputLabelProps"];
  var BooleanOperatorContainer = styled_default2("div")({
    display: "flex",
    alignItems: "center",
    width: "100%",
    [`& button`]: {
      margin: "auto 0px 5px 5px"
    }
  });
  function GridFilterInputBoolean(props) {
    var _rootProps$slotProps, _baseSelectProps$nati, _rootProps$slotProps2, _rootProps$slotProps3;
    const {
      item,
      applyValue,
      apiRef,
      focusElementRef,
      clearButton,
      tabIndex,
      label: labelProp,
      variant = "standard"
    } = props, others = _objectWithoutPropertiesLoose(props, _excluded76);
    const [filterValueState, setFilterValueState] = React125.useState(item.value || "");
    const rootProps = useGridRootProps();
    const labelId = useId();
    const selectId = useId();
    const baseSelectProps = ((_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseSelect) || {};
    const isSelectNative = (_baseSelectProps$nati = baseSelectProps.native) != null ? _baseSelectProps$nati : true;
    const baseSelectOptionProps = ((_rootProps$slotProps2 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps2.baseSelectOption) || {};
    const onFilterChange = React125.useCallback((event) => {
      const value = event.target.value;
      setFilterValueState(value);
      applyValue(_extends({}, item, {
        value
      }));
    }, [applyValue, item]);
    React125.useEffect(() => {
      setFilterValueState(item.value || "");
    }, [item.value]);
    const label = labelProp != null ? labelProp : apiRef.current.getLocaleText("filterPanelInputLabel");
    return /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)(BooleanOperatorContainer, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime111.jsxs)(rootProps.slots.baseFormControl, {
        fullWidth: true,
        children: [/* @__PURE__ */ (0, import_jsx_runtime110.jsx)(rootProps.slots.baseInputLabel, _extends({}, (_rootProps$slotProps3 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps3.baseInputLabel, {
          id: labelId,
          shrink: true,
          variant,
          children: label
        })), /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)(rootProps.slots.baseSelect, _extends({
          labelId,
          id: selectId,
          label,
          value: filterValueState,
          onChange: onFilterChange,
          variant,
          notched: variant === "outlined" ? true : void 0,
          native: isSelectNative,
          displayEmpty: true,
          inputProps: {
            ref: focusElementRef,
            tabIndex
          }
        }, others, baseSelectProps, {
          children: [/* @__PURE__ */ (0, import_jsx_runtime110.jsx)(rootProps.slots.baseSelectOption, _extends({}, baseSelectOptionProps, {
            native: isSelectNative,
            value: "",
            children: apiRef.current.getLocaleText("filterValueAny")
          })), /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(rootProps.slots.baseSelectOption, _extends({}, baseSelectOptionProps, {
            native: isSelectNative,
            value: "true",
            children: apiRef.current.getLocaleText("filterValueTrue")
          })), /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(rootProps.slots.baseSelectOption, _extends({}, baseSelectOptionProps, {
            native: isSelectNative,
            value: "false",
            children: apiRef.current.getLocaleText("filterValueFalse")
          }))]
        }))]
      }), clearButton]
    });
  }
  true ? GridFilterInputBoolean.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    apiRef: import_prop_types83.default.shape({
      current: import_prop_types83.default.object.isRequired
    }).isRequired,
    applyValue: import_prop_types83.default.func.isRequired,
    clearButton: import_prop_types83.default.node,
    focusElementRef: refType_default,
    /**
     * It is `true` if the filter either has a value or an operator with no value
     * required is selected (e.g. `isEmpty`)
     */
    isFilterActive: import_prop_types83.default.bool,
    item: import_prop_types83.default.shape({
      field: import_prop_types83.default.string.isRequired,
      id: import_prop_types83.default.oneOfType([import_prop_types83.default.number, import_prop_types83.default.string]),
      operator: import_prop_types83.default.string.isRequired,
      value: import_prop_types83.default.any
    }).isRequired
  } : void 0;

  // node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterPanel.js
  init_extends();
  var React126 = __toESM(require_react());
  var import_prop_types84 = __toESM(require_prop_types());
  var import_jsx_runtime112 = __toESM(require_jsx_runtime());
  var import_jsx_runtime113 = __toESM(require_jsx_runtime());
  var _excluded77 = ["logicOperators", "columnsSort", "filterFormProps", "getColumnForNewFilter", "children", "disableAddFilterButton", "disableRemoveAllButton"];
  var getGridFilter = (col) => ({
    field: col.field,
    operator: col.filterOperators[0].value,
    id: Math.round(Math.random() * 1e5)
  });
  var GridFilterPanel = /* @__PURE__ */ React126.forwardRef(function GridFilterPanel2(props, ref) {
    var _rootProps$slotProps, _rootProps$slotProps2;
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const filterModel = useGridSelector(apiRef, gridFilterModelSelector);
    const filterableColumns = useGridSelector(apiRef, gridFilterableColumnDefinitionsSelector);
    const lastFilterRef = React126.useRef(null);
    const placeholderFilter = React126.useRef(null);
    const {
      logicOperators = [GridLogicOperator.And, GridLogicOperator.Or],
      columnsSort,
      filterFormProps,
      getColumnForNewFilter,
      disableAddFilterButton = false,
      disableRemoveAllButton = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded77);
    const applyFilter = apiRef.current.upsertFilterItem;
    const applyFilterLogicOperator = React126.useCallback((operator) => {
      apiRef.current.setFilterLogicOperator(operator);
    }, [apiRef]);
    const getDefaultFilter = React126.useCallback(() => {
      let nextColumnWithOperator;
      if (getColumnForNewFilter && typeof getColumnForNewFilter === "function") {
        const nextFieldName = getColumnForNewFilter({
          currentFilters: (filterModel == null ? void 0 : filterModel.items) || [],
          columns: filterableColumns
        });
        if (nextFieldName === null) {
          return null;
        }
        nextColumnWithOperator = filterableColumns.find(({
          field
        }) => field === nextFieldName);
      } else {
        nextColumnWithOperator = filterableColumns.find((colDef) => {
          var _colDef$filterOperato;
          return (_colDef$filterOperato = colDef.filterOperators) == null ? void 0 : _colDef$filterOperato.length;
        });
      }
      if (!nextColumnWithOperator) {
        return null;
      }
      return getGridFilter(nextColumnWithOperator);
    }, [filterModel == null ? void 0 : filterModel.items, filterableColumns, getColumnForNewFilter]);
    const getNewFilter = React126.useCallback(() => {
      if (getColumnForNewFilter === void 0 || typeof getColumnForNewFilter !== "function") {
        return getDefaultFilter();
      }
      const currentFilters = filterModel.items.length ? filterModel.items : [getDefaultFilter()].filter(Boolean);
      const nextColumnFieldName = getColumnForNewFilter({
        currentFilters,
        columns: filterableColumns
      });
      if (nextColumnFieldName === null) {
        return null;
      }
      const nextColumnWithOperator = filterableColumns.find(({
        field
      }) => field === nextColumnFieldName);
      if (!nextColumnWithOperator) {
        return null;
      }
      return getGridFilter(nextColumnWithOperator);
    }, [filterModel.items, filterableColumns, getColumnForNewFilter, getDefaultFilter]);
    const items = React126.useMemo(() => {
      if (filterModel.items.length) {
        return filterModel.items;
      }
      if (!placeholderFilter.current) {
        placeholderFilter.current = getDefaultFilter();
      }
      return placeholderFilter.current ? [placeholderFilter.current] : [];
    }, [filterModel.items, getDefaultFilter]);
    const hasMultipleFilters = items.length > 1;
    const addNewFilter = () => {
      const newFilter = getNewFilter();
      if (!newFilter) {
        return;
      }
      apiRef.current.upsertFilterItems([...items, newFilter]);
    };
    const deleteFilter = React126.useCallback((item) => {
      const shouldCloseFilterPanel = items.length === 1;
      apiRef.current.deleteFilterItem(item);
      if (shouldCloseFilterPanel) {
        apiRef.current.hideFilterPanel();
      }
    }, [apiRef, items.length]);
    const handleRemoveAll = () => {
      if (items.length === 1 && items[0].value === void 0) {
        apiRef.current.deleteFilterItem(items[0]);
        apiRef.current.hideFilterPanel();
      }
      apiRef.current.setFilterModel(_extends({}, filterModel, {
        items: []
      }));
    };
    React126.useEffect(() => {
      if (logicOperators.length > 0 && filterModel.logicOperator && !logicOperators.includes(filterModel.logicOperator)) {
        applyFilterLogicOperator(logicOperators[0]);
      }
    }, [logicOperators, applyFilterLogicOperator, filterModel.logicOperator]);
    React126.useEffect(() => {
      if (items.length > 0) {
        lastFilterRef.current.focus();
      }
    }, [items.length]);
    return /* @__PURE__ */ (0, import_jsx_runtime113.jsxs)(GridPanelWrapper, _extends({
      ref
    }, other, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime112.jsx)(GridPanelContent, {
        children: items.map((item, index) => /* @__PURE__ */ (0, import_jsx_runtime112.jsx)(GridFilterForm, _extends({
          item,
          applyFilterChanges: applyFilter,
          deleteFilter,
          hasMultipleFilters,
          showMultiFilterOperators: index > 0,
          multiFilterOperator: filterModel.logicOperator,
          disableMultiFilterOperator: index !== 1,
          applyMultiFilterOperatorChanges: applyFilterLogicOperator,
          focusElementRef: index === items.length - 1 ? lastFilterRef : null,
          logicOperators,
          columnsSort
        }, filterFormProps), item.id == null ? index : item.id))
      }), !rootProps.disableMultipleColumnsFiltering && !(disableAddFilterButton && disableRemoveAllButton) ? /* @__PURE__ */ (0, import_jsx_runtime113.jsxs)(GridPanelFooter, {
        children: [!disableAddFilterButton ? /* @__PURE__ */ (0, import_jsx_runtime112.jsx)(rootProps.slots.baseButton, _extends({
          onClick: addNewFilter,
          startIcon: /* @__PURE__ */ (0, import_jsx_runtime112.jsx)(rootProps.slots.filterPanelAddIcon, {})
        }, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseButton, {
          children: apiRef.current.getLocaleText("filterPanelAddFilter")
        })) : /* @__PURE__ */ (0, import_jsx_runtime112.jsx)("span", {}), !disableRemoveAllButton ? /* @__PURE__ */ (0, import_jsx_runtime112.jsx)(rootProps.slots.baseButton, _extends({
          onClick: handleRemoveAll,
          startIcon: /* @__PURE__ */ (0, import_jsx_runtime112.jsx)(rootProps.slots.filterPanelRemoveAllIcon, {})
        }, (_rootProps$slotProps2 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps2.baseButton, {
          children: apiRef.current.getLocaleText("filterPanelRemoveAll")
        })) : null]
      }) : null]
    }));
  });
  true ? GridFilterPanel.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * @ignore - do not document.
     */
    children: import_prop_types84.default.node,
    /**
     * Changes how the options in the columns selector should be ordered.
     * If not specified, the order is derived from the `columns` prop.
     */
    columnsSort: import_prop_types84.default.oneOf(["asc", "desc"]),
    /**
     * If `true`, the `Add filter` button will not be displayed.
     * @default false
     */
    disableAddFilterButton: import_prop_types84.default.bool,
    /**
     * If `true`, the `Remove all` button will be disabled
     * @default false
     */
    disableRemoveAllButton: import_prop_types84.default.bool,
    /**
     * Props passed to each filter form.
     */
    filterFormProps: import_prop_types84.default.shape({
      columnInputProps: import_prop_types84.default.any,
      columnsSort: import_prop_types84.default.oneOf(["asc", "desc"]),
      deleteIconProps: import_prop_types84.default.any,
      filterColumns: import_prop_types84.default.func,
      logicOperatorInputProps: import_prop_types84.default.any,
      operatorInputProps: import_prop_types84.default.any,
      valueInputProps: import_prop_types84.default.any
    }),
    /**
     * Function that returns the next filter item to be picked as default filter.
     * @param {GetColumnForNewFilterArgs} args Currently configured filters and columns.
     * @returns {GridColDef['field']} The field to be used for the next filter or `null` to prevent adding a filter.
     */
    getColumnForNewFilter: import_prop_types84.default.func,
    /**
     * Sets the available logic operators.
     * @default [GridLogicOperator.And, GridLogicOperator.Or]
     */
    logicOperators: import_prop_types84.default.arrayOf(import_prop_types84.default.oneOf(["and", "or"]).isRequired),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types84.default.oneOfType([import_prop_types84.default.arrayOf(import_prop_types84.default.oneOfType([import_prop_types84.default.func, import_prop_types84.default.object, import_prop_types84.default.bool])), import_prop_types84.default.func, import_prop_types84.default.object])
  } : void 0;

  // node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterInputMultipleValue.js
  init_extends();
  var React134 = __toESM(require_react());
  var import_prop_types88 = __toESM(require_prop_types());

  // node_modules/@mui/material/Autocomplete/Autocomplete.js
  init_extends();
  var React133 = __toESM(require_react());
  var import_prop_types87 = __toESM(require_prop_types());
  var import_colorManipulator8 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/useAutocomplete/useAutocomplete.js
  init_extends();
  var React127 = __toESM(require_react());
  function stripDiacritics(string) {
    return typeof string.normalize !== "undefined" ? string.normalize("NFD").replace(/[\u0300-\u036f]/g, "") : string;
  }
  function createFilterOptions(config = {}) {
    const {
      ignoreAccents = true,
      ignoreCase = true,
      limit,
      matchFrom = "any",
      stringify: stringify2,
      trim: trim2 = false
    } = config;
    return (options, {
      inputValue,
      getOptionLabel
    }) => {
      let input = trim2 ? inputValue.trim() : inputValue;
      if (ignoreCase) {
        input = input.toLowerCase();
      }
      if (ignoreAccents) {
        input = stripDiacritics(input);
      }
      const filteredOptions = !input ? options : options.filter((option) => {
        let candidate = (stringify2 || getOptionLabel)(option);
        if (ignoreCase) {
          candidate = candidate.toLowerCase();
        }
        if (ignoreAccents) {
          candidate = stripDiacritics(candidate);
        }
        return matchFrom === "start" ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;
      });
      return typeof limit === "number" ? filteredOptions.slice(0, limit) : filteredOptions;
    };
  }
  function findIndex(array, comp) {
    for (let i = 0; i < array.length; i += 1) {
      if (comp(array[i])) {
        return i;
      }
    }
    return -1;
  }
  var defaultFilterOptions = createFilterOptions();
  var pageSize = 5;
  var defaultIsActiveElementInListbox = (listboxRef) => {
    var _listboxRef$current$p;
    return listboxRef.current !== null && ((_listboxRef$current$p = listboxRef.current.parentElement) == null ? void 0 : _listboxRef$current$p.contains(document.activeElement));
  };
  var MULTIPLE_DEFAULT_VALUE = [];
  function useAutocomplete(props) {
    const {
      // eslint-disable-next-line @typescript-eslint/naming-convention
      unstable_isActiveElementInListbox = defaultIsActiveElementInListbox,
      // eslint-disable-next-line @typescript-eslint/naming-convention
      unstable_classNamePrefix = "Mui",
      autoComplete = false,
      autoHighlight = false,
      autoSelect = false,
      blurOnSelect = false,
      clearOnBlur = !props.freeSolo,
      clearOnEscape = false,
      componentName = "useAutocomplete",
      defaultValue = props.multiple ? MULTIPLE_DEFAULT_VALUE : null,
      disableClearable = false,
      disableCloseOnSelect = false,
      disabled: disabledProp,
      disabledItemsFocusable = false,
      disableListWrap = false,
      filterOptions = defaultFilterOptions,
      filterSelectedOptions = false,
      freeSolo = false,
      getOptionDisabled,
      getOptionKey,
      getOptionLabel: getOptionLabelProp = (option) => {
        var _option$label;
        return (_option$label = option.label) != null ? _option$label : option;
      },
      groupBy,
      handleHomeEndKeys = !props.freeSolo,
      id: idProp,
      includeInputInList = false,
      inputValue: inputValueProp,
      isOptionEqualToValue = (option, value2) => option === value2,
      multiple = false,
      onChange,
      onClose,
      onHighlightChange,
      onInputChange,
      onOpen,
      open: openProp,
      openOnFocus = false,
      options,
      readOnly = false,
      selectOnFocus = !props.freeSolo,
      value: valueProp
    } = props;
    const id = useId(idProp);
    let getOptionLabel = getOptionLabelProp;
    getOptionLabel = (option) => {
      const optionLabel = getOptionLabelProp(option);
      if (typeof optionLabel !== "string") {
        if (true) {
          const erroneousReturn = optionLabel === void 0 ? "undefined" : `${typeof optionLabel} (${optionLabel})`;
          console.error(`MUI: The \`getOptionLabel\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);
        }
        return String(optionLabel);
      }
      return optionLabel;
    };
    const ignoreFocus = React127.useRef(false);
    const firstFocus = React127.useRef(true);
    const inputRef = React127.useRef(null);
    const listboxRef = React127.useRef(null);
    const [anchorEl, setAnchorEl] = React127.useState(null);
    const [focusedTag, setFocusedTag] = React127.useState(-1);
    const defaultHighlighted = autoHighlight ? 0 : -1;
    const highlightedIndexRef = React127.useRef(defaultHighlighted);
    const [value, setValueState] = useControlled({
      controlled: valueProp,
      default: defaultValue,
      name: componentName
    });
    const [inputValue, setInputValueState] = useControlled({
      controlled: inputValueProp,
      default: "",
      name: componentName,
      state: "inputValue"
    });
    const [focused, setFocused] = React127.useState(false);
    const resetInputValue = React127.useCallback((event, newValue) => {
      const isOptionSelected = multiple ? value.length < newValue.length : newValue !== null;
      if (!isOptionSelected && !clearOnBlur) {
        return;
      }
      let newInputValue;
      if (multiple) {
        newInputValue = "";
      } else if (newValue == null) {
        newInputValue = "";
      } else {
        const optionLabel = getOptionLabel(newValue);
        newInputValue = typeof optionLabel === "string" ? optionLabel : "";
      }
      if (inputValue === newInputValue) {
        return;
      }
      setInputValueState(newInputValue);
      if (onInputChange) {
        onInputChange(event, newInputValue, "reset");
      }
    }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value]);
    const [open, setOpenState] = useControlled({
      controlled: openProp,
      default: false,
      name: componentName,
      state: "open"
    });
    const [inputPristine, setInputPristine] = React127.useState(true);
    const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);
    const popupOpen = open && !readOnly;
    const filteredOptions = popupOpen ? filterOptions(
      options.filter((option) => {
        if (filterSelectedOptions && (multiple ? value : [value]).some((value2) => value2 !== null && isOptionEqualToValue(option, value2))) {
          return false;
        }
        return true;
      }),
      // we use the empty string to manipulate `filterOptions` to not filter any options
      // i.e. the filter predicate always returns true
      {
        inputValue: inputValueIsSelectedValue && inputPristine ? "" : inputValue,
        getOptionLabel
      }
    ) : [];
    const previousProps = usePreviousProps_default({
      filteredOptions,
      value,
      inputValue
    });
    React127.useEffect(() => {
      const valueChange = value !== previousProps.value;
      if (focused && !valueChange) {
        return;
      }
      if (freeSolo && !valueChange) {
        return;
      }
      resetInputValue(null, value);
    }, [value, resetInputValue, focused, previousProps.value, freeSolo]);
    const listboxAvailable = open && filteredOptions.length > 0 && !readOnly;
    if (true) {
      if (value !== null && !freeSolo && options.length > 0) {
        const missingValue = (multiple ? value : [value]).filter((value2) => !options.some((option) => isOptionEqualToValue(option, value2)));
        if (missingValue.length > 0) {
          console.warn([`MUI: The value provided to ${componentName} is invalid.`, `None of the options match with \`${missingValue.length > 1 ? JSON.stringify(missingValue) : JSON.stringify(missingValue[0])}\`.`, "You can use the `isOptionEqualToValue` prop to customize the equality test."].join("\n"));
        }
      }
    }
    const focusTag = useEventCallback_default((tagToFocus) => {
      if (tagToFocus === -1) {
        inputRef.current.focus();
      } else {
        anchorEl.querySelector(`[data-tag-index="${tagToFocus}"]`).focus();
      }
    });
    React127.useEffect(() => {
      if (multiple && focusedTag > value.length - 1) {
        setFocusedTag(-1);
        focusTag(-1);
      }
    }, [value, multiple, focusedTag, focusTag]);
    function validOptionIndex(index, direction) {
      if (!listboxRef.current || index < 0 || index >= filteredOptions.length) {
        return -1;
      }
      let nextFocus = index;
      while (true) {
        const option = listboxRef.current.querySelector(`[data-option-index="${nextFocus}"]`);
        const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute("aria-disabled") === "true";
        if (option && option.hasAttribute("tabindex") && !nextFocusDisabled) {
          return nextFocus;
        }
        if (direction === "next") {
          nextFocus = (nextFocus + 1) % filteredOptions.length;
        } else {
          nextFocus = (nextFocus - 1 + filteredOptions.length) % filteredOptions.length;
        }
        if (nextFocus === index) {
          return -1;
        }
      }
    }
    const setHighlightedIndex = useEventCallback_default(({
      event,
      index,
      reason = "auto"
    }) => {
      highlightedIndexRef.current = index;
      if (index === -1) {
        inputRef.current.removeAttribute("aria-activedescendant");
      } else {
        inputRef.current.setAttribute("aria-activedescendant", `${id}-option-${index}`);
      }
      if (onHighlightChange) {
        onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);
      }
      if (!listboxRef.current) {
        return;
      }
      const prev2 = listboxRef.current.querySelector(`[role="option"].${unstable_classNamePrefix}-focused`);
      if (prev2) {
        prev2.classList.remove(`${unstable_classNamePrefix}-focused`);
        prev2.classList.remove(`${unstable_classNamePrefix}-focusVisible`);
      }
      let listboxNode = listboxRef.current;
      if (listboxRef.current.getAttribute("role") !== "listbox") {
        listboxNode = listboxRef.current.parentElement.querySelector('[role="listbox"]');
      }
      if (!listboxNode) {
        return;
      }
      if (index === -1) {
        listboxNode.scrollTop = 0;
        return;
      }
      const option = listboxRef.current.querySelector(`[data-option-index="${index}"]`);
      if (!option) {
        return;
      }
      option.classList.add(`${unstable_classNamePrefix}-focused`);
      if (reason === "keyboard") {
        option.classList.add(`${unstable_classNamePrefix}-focusVisible`);
      }
      if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== "mouse" && reason !== "touch") {
        const element = option;
        const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;
        const elementBottom = element.offsetTop + element.offsetHeight;
        if (elementBottom > scrollBottom) {
          listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;
        } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {
          listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);
        }
      }
    });
    const changeHighlightedIndex = useEventCallback_default(({
      event,
      diff,
      direction = "next",
      reason = "auto"
    }) => {
      if (!popupOpen) {
        return;
      }
      const getNextIndex = () => {
        const maxIndex = filteredOptions.length - 1;
        if (diff === "reset") {
          return defaultHighlighted;
        }
        if (diff === "start") {
          return 0;
        }
        if (diff === "end") {
          return maxIndex;
        }
        const newIndex = highlightedIndexRef.current + diff;
        if (newIndex < 0) {
          if (newIndex === -1 && includeInputInList) {
            return -1;
          }
          if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {
            return 0;
          }
          return maxIndex;
        }
        if (newIndex > maxIndex) {
          if (newIndex === maxIndex + 1 && includeInputInList) {
            return -1;
          }
          if (disableListWrap || Math.abs(diff) > 1) {
            return maxIndex;
          }
          return 0;
        }
        return newIndex;
      };
      const nextIndex = validOptionIndex(getNextIndex(), direction);
      setHighlightedIndex({
        index: nextIndex,
        reason,
        event
      });
      if (autoComplete && diff !== "reset") {
        if (nextIndex === -1) {
          inputRef.current.value = inputValue;
        } else {
          const option = getOptionLabel(filteredOptions[nextIndex]);
          inputRef.current.value = option;
          const index = option.toLowerCase().indexOf(inputValue.toLowerCase());
          if (index === 0 && inputValue.length > 0) {
            inputRef.current.setSelectionRange(inputValue.length, option.length);
          }
        }
      }
    });
    const getPreviousHighlightedOptionIndex = () => {
      const isSameValue = (value1, value2) => {
        const label1 = value1 ? getOptionLabel(value1) : "";
        const label2 = value2 ? getOptionLabel(value2) : "";
        return label1 === label2;
      };
      if (highlightedIndexRef.current !== -1 && previousProps.filteredOptions && previousProps.filteredOptions.length !== filteredOptions.length && previousProps.inputValue === inputValue && (multiple ? value.length === previousProps.value.length && previousProps.value.every((val, i) => getOptionLabel(value[i]) === getOptionLabel(val)) : isSameValue(previousProps.value, value))) {
        const previousHighlightedOption = previousProps.filteredOptions[highlightedIndexRef.current];
        if (previousHighlightedOption) {
          return findIndex(filteredOptions, (option) => {
            return getOptionLabel(option) === getOptionLabel(previousHighlightedOption);
          });
        }
      }
      return -1;
    };
    const syncHighlightedIndex = React127.useCallback(() => {
      if (!popupOpen) {
        return;
      }
      const previousHighlightedOptionIndex = getPreviousHighlightedOptionIndex();
      if (previousHighlightedOptionIndex !== -1) {
        highlightedIndexRef.current = previousHighlightedOptionIndex;
        return;
      }
      const valueItem = multiple ? value[0] : value;
      if (filteredOptions.length === 0 || valueItem == null) {
        changeHighlightedIndex({
          diff: "reset"
        });
        return;
      }
      if (!listboxRef.current) {
        return;
      }
      if (valueItem != null) {
        const currentOption = filteredOptions[highlightedIndexRef.current];
        if (multiple && currentOption && findIndex(value, (val) => isOptionEqualToValue(currentOption, val)) !== -1) {
          return;
        }
        const itemIndex = findIndex(filteredOptions, (optionItem) => isOptionEqualToValue(optionItem, valueItem));
        if (itemIndex === -1) {
          changeHighlightedIndex({
            diff: "reset"
          });
        } else {
          setHighlightedIndex({
            index: itemIndex
          });
        }
        return;
      }
      if (highlightedIndexRef.current >= filteredOptions.length - 1) {
        setHighlightedIndex({
          index: filteredOptions.length - 1
        });
        return;
      }
      setHighlightedIndex({
        index: highlightedIndexRef.current
      });
    }, [
      // Only sync the highlighted index when the option switch between empty and not
      filteredOptions.length,
      // Don't sync the highlighted index with the value when multiple
      // eslint-disable-next-line react-hooks/exhaustive-deps
      multiple ? false : value,
      filterSelectedOptions,
      changeHighlightedIndex,
      setHighlightedIndex,
      popupOpen,
      inputValue,
      multiple
    ]);
    const handleListboxRef = useEventCallback_default((node2) => {
      setRef(listboxRef, node2);
      if (!node2) {
        return;
      }
      syncHighlightedIndex();
    });
    if (true) {
      React127.useEffect(() => {
        if (!inputRef.current || inputRef.current.nodeName !== "INPUT") {
          if (inputRef.current && inputRef.current.nodeName === "TEXTAREA") {
            console.warn([`A textarea element was provided to ${componentName} where input was expected.`, `This is not a supported scenario but it may work under certain conditions.`, `A textarea keyboard navigation may conflict with Autocomplete controls (for example enter and arrow keys).`, `Make sure to test keyboard navigation and add custom event handlers if necessary.`].join("\n"));
          } else {
            console.error([`MUI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`, `Instead, ${componentName} expects an input element.`, "", componentName === "useAutocomplete" ? "Make sure you have bound getInputProps correctly and that the normal ref/effect resolutions order is guaranteed." : "Make sure you have customized the input component correctly."].join("\n"));
          }
        }
      }, [componentName]);
    }
    React127.useEffect(() => {
      syncHighlightedIndex();
    }, [syncHighlightedIndex]);
    const handleOpen = (event) => {
      if (open) {
        return;
      }
      setOpenState(true);
      setInputPristine(true);
      if (onOpen) {
        onOpen(event);
      }
    };
    const handleClose = (event, reason) => {
      if (!open) {
        return;
      }
      setOpenState(false);
      if (onClose) {
        onClose(event, reason);
      }
    };
    const handleValue = (event, newValue, reason, details) => {
      if (multiple) {
        if (value.length === newValue.length && value.every((val, i) => val === newValue[i])) {
          return;
        }
      } else if (value === newValue) {
        return;
      }
      if (onChange) {
        onChange(event, newValue, reason, details);
      }
      setValueState(newValue);
    };
    const isTouch = React127.useRef(false);
    const selectNewValue = (event, option, reasonProp = "selectOption", origin = "options") => {
      let reason = reasonProp;
      let newValue = option;
      if (multiple) {
        newValue = Array.isArray(value) ? value.slice() : [];
        if (true) {
          const matches = newValue.filter((val) => isOptionEqualToValue(option, val));
          if (matches.length > 1) {
            console.error([`MUI: The \`isOptionEqualToValue\` method of ${componentName} does not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${matches.length} matches.`].join("\n"));
          }
        }
        const itemIndex = findIndex(newValue, (valueItem) => isOptionEqualToValue(option, valueItem));
        if (itemIndex === -1) {
          newValue.push(option);
        } else if (origin !== "freeSolo") {
          newValue.splice(itemIndex, 1);
          reason = "removeOption";
        }
      }
      resetInputValue(event, newValue);
      handleValue(event, newValue, reason, {
        option
      });
      if (!disableCloseOnSelect && (!event || !event.ctrlKey && !event.metaKey)) {
        handleClose(event, reason);
      }
      if (blurOnSelect === true || blurOnSelect === "touch" && isTouch.current || blurOnSelect === "mouse" && !isTouch.current) {
        inputRef.current.blur();
      }
    };
    function validTagIndex(index, direction) {
      if (index === -1) {
        return -1;
      }
      let nextFocus = index;
      while (true) {
        if (direction === "next" && nextFocus === value.length || direction === "previous" && nextFocus === -1) {
          return -1;
        }
        const option = anchorEl.querySelector(`[data-tag-index="${nextFocus}"]`);
        if (!option || !option.hasAttribute("tabindex") || option.disabled || option.getAttribute("aria-disabled") === "true") {
          nextFocus += direction === "next" ? 1 : -1;
        } else {
          return nextFocus;
        }
      }
    }
    const handleFocusTag = (event, direction) => {
      if (!multiple) {
        return;
      }
      if (inputValue === "") {
        handleClose(event, "toggleInput");
      }
      let nextTag = focusedTag;
      if (focusedTag === -1) {
        if (inputValue === "" && direction === "previous") {
          nextTag = value.length - 1;
        }
      } else {
        nextTag += direction === "next" ? 1 : -1;
        if (nextTag < 0) {
          nextTag = 0;
        }
        if (nextTag === value.length) {
          nextTag = -1;
        }
      }
      nextTag = validTagIndex(nextTag, direction);
      setFocusedTag(nextTag);
      focusTag(nextTag);
    };
    const handleClear = (event) => {
      ignoreFocus.current = true;
      setInputValueState("");
      if (onInputChange) {
        onInputChange(event, "", "clear");
      }
      handleValue(event, multiple ? [] : null, "clear");
    };
    const handleKeyDown2 = (other) => (event) => {
      if (other.onKeyDown) {
        other.onKeyDown(event);
      }
      if (event.defaultMuiPrevented) {
        return;
      }
      if (focusedTag !== -1 && ["ArrowLeft", "ArrowRight"].indexOf(event.key) === -1) {
        setFocusedTag(-1);
        focusTag(-1);
      }
      if (event.which !== 229) {
        switch (event.key) {
          case "Home":
            if (popupOpen && handleHomeEndKeys) {
              event.preventDefault();
              changeHighlightedIndex({
                diff: "start",
                direction: "next",
                reason: "keyboard",
                event
              });
            }
            break;
          case "End":
            if (popupOpen && handleHomeEndKeys) {
              event.preventDefault();
              changeHighlightedIndex({
                diff: "end",
                direction: "previous",
                reason: "keyboard",
                event
              });
            }
            break;
          case "PageUp":
            event.preventDefault();
            changeHighlightedIndex({
              diff: -pageSize,
              direction: "previous",
              reason: "keyboard",
              event
            });
            handleOpen(event);
            break;
          case "PageDown":
            event.preventDefault();
            changeHighlightedIndex({
              diff: pageSize,
              direction: "next",
              reason: "keyboard",
              event
            });
            handleOpen(event);
            break;
          case "ArrowDown":
            event.preventDefault();
            changeHighlightedIndex({
              diff: 1,
              direction: "next",
              reason: "keyboard",
              event
            });
            handleOpen(event);
            break;
          case "ArrowUp":
            event.preventDefault();
            changeHighlightedIndex({
              diff: -1,
              direction: "previous",
              reason: "keyboard",
              event
            });
            handleOpen(event);
            break;
          case "ArrowLeft":
            handleFocusTag(event, "previous");
            break;
          case "ArrowRight":
            handleFocusTag(event, "next");
            break;
          case "Enter":
            if (highlightedIndexRef.current !== -1 && popupOpen) {
              const option = filteredOptions[highlightedIndexRef.current];
              const disabled = getOptionDisabled ? getOptionDisabled(option) : false;
              event.preventDefault();
              if (disabled) {
                return;
              }
              selectNewValue(event, option, "selectOption");
              if (autoComplete) {
                inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);
              }
            } else if (freeSolo && inputValue !== "" && inputValueIsSelectedValue === false) {
              if (multiple) {
                event.preventDefault();
              }
              selectNewValue(event, inputValue, "createOption", "freeSolo");
            }
            break;
          case "Escape":
            if (popupOpen) {
              event.preventDefault();
              event.stopPropagation();
              handleClose(event, "escape");
            } else if (clearOnEscape && (inputValue !== "" || multiple && value.length > 0)) {
              event.preventDefault();
              event.stopPropagation();
              handleClear(event);
            }
            break;
          case "Backspace":
            if (multiple && !readOnly && inputValue === "" && value.length > 0) {
              const index = focusedTag === -1 ? value.length - 1 : focusedTag;
              const newValue = value.slice();
              newValue.splice(index, 1);
              handleValue(event, newValue, "removeOption", {
                option: value[index]
              });
            }
            break;
          case "Delete":
            if (multiple && !readOnly && inputValue === "" && value.length > 0 && focusedTag !== -1) {
              const index = focusedTag;
              const newValue = value.slice();
              newValue.splice(index, 1);
              handleValue(event, newValue, "removeOption", {
                option: value[index]
              });
            }
            break;
          default:
        }
      }
    };
    const handleFocus = (event) => {
      setFocused(true);
      if (openOnFocus && !ignoreFocus.current) {
        handleOpen(event);
      }
    };
    const handleBlur = (event) => {
      if (unstable_isActiveElementInListbox(listboxRef)) {
        inputRef.current.focus();
        return;
      }
      setFocused(false);
      firstFocus.current = true;
      ignoreFocus.current = false;
      if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {
        selectNewValue(event, filteredOptions[highlightedIndexRef.current], "blur");
      } else if (autoSelect && freeSolo && inputValue !== "") {
        selectNewValue(event, inputValue, "blur", "freeSolo");
      } else if (clearOnBlur) {
        resetInputValue(event, value);
      }
      handleClose(event, "blur");
    };
    const handleInputChange = (event) => {
      const newValue = event.target.value;
      if (inputValue !== newValue) {
        setInputValueState(newValue);
        setInputPristine(false);
        if (onInputChange) {
          onInputChange(event, newValue, "input");
        }
      }
      if (newValue === "") {
        if (!disableClearable && !multiple) {
          handleValue(event, null, "clear");
        }
      } else {
        handleOpen(event);
      }
    };
    const handleOptionMouseMove = (event) => {
      const index = Number(event.currentTarget.getAttribute("data-option-index"));
      if (highlightedIndexRef.current !== index) {
        setHighlightedIndex({
          event,
          index,
          reason: "mouse"
        });
      }
    };
    const handleOptionTouchStart = (event) => {
      setHighlightedIndex({
        event,
        index: Number(event.currentTarget.getAttribute("data-option-index")),
        reason: "touch"
      });
      isTouch.current = true;
    };
    const handleOptionClick = (event) => {
      const index = Number(event.currentTarget.getAttribute("data-option-index"));
      selectNewValue(event, filteredOptions[index], "selectOption");
      isTouch.current = false;
    };
    const handleTagDelete = (index) => (event) => {
      const newValue = value.slice();
      newValue.splice(index, 1);
      handleValue(event, newValue, "removeOption", {
        option: value[index]
      });
    };
    const handlePopupIndicator = (event) => {
      if (open) {
        handleClose(event, "toggleInput");
      } else {
        handleOpen(event);
      }
    };
    const handleMouseDown = (event) => {
      if (!event.currentTarget.contains(event.target)) {
        return;
      }
      if (event.target.getAttribute("id") !== id) {
        event.preventDefault();
      }
    };
    const handleClick = (event) => {
      if (!event.currentTarget.contains(event.target)) {
        return;
      }
      inputRef.current.focus();
      if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {
        inputRef.current.select();
      }
      firstFocus.current = false;
    };
    const handleInputMouseDown = (event) => {
      if (!disabledProp && (inputValue === "" || !open)) {
        handlePopupIndicator(event);
      }
    };
    let dirty = freeSolo && inputValue.length > 0;
    dirty = dirty || (multiple ? value.length > 0 : value !== null);
    let groupedOptions = filteredOptions;
    if (groupBy) {
      const indexBy = /* @__PURE__ */ new Map();
      let warn = false;
      groupedOptions = filteredOptions.reduce((acc, option, index) => {
        const group = groupBy(option);
        if (acc.length > 0 && acc[acc.length - 1].group === group) {
          acc[acc.length - 1].options.push(option);
        } else {
          if (true) {
            if (indexBy.get(group) && !warn) {
              console.warn(`MUI: The options provided combined with the \`groupBy\` method of ${componentName} returns duplicated headers.`, "You can solve the issue by sorting the options with the output of `groupBy`.");
              warn = true;
            }
            indexBy.set(group, true);
          }
          acc.push({
            key: index,
            index,
            group,
            options: [option]
          });
        }
        return acc;
      }, []);
    }
    if (disabledProp && focused) {
      handleBlur();
    }
    return {
      getRootProps: (other = {}) => _extends({
        "aria-owns": listboxAvailable ? `${id}-listbox` : null
      }, other, {
        onKeyDown: handleKeyDown2(other),
        onMouseDown: handleMouseDown,
        onClick: handleClick
      }),
      getInputLabelProps: () => ({
        id: `${id}-label`,
        htmlFor: id
      }),
      getInputProps: () => ({
        id,
        value: inputValue,
        onBlur: handleBlur,
        onFocus: handleFocus,
        onChange: handleInputChange,
        onMouseDown: handleInputMouseDown,
        // if open then this is handled imperatively so don't let react override
        // only have an opinion about this when closed
        "aria-activedescendant": popupOpen ? "" : null,
        "aria-autocomplete": autoComplete ? "both" : "list",
        "aria-controls": listboxAvailable ? `${id}-listbox` : void 0,
        "aria-expanded": listboxAvailable,
        // Disable browser's suggestion that might overlap with the popup.
        // Handle autocomplete but not autofill.
        autoComplete: "off",
        ref: inputRef,
        autoCapitalize: "none",
        spellCheck: "false",
        role: "combobox",
        disabled: disabledProp
      }),
      getClearProps: () => ({
        tabIndex: -1,
        type: "button",
        onClick: handleClear
      }),
      getPopupIndicatorProps: () => ({
        tabIndex: -1,
        type: "button",
        onClick: handlePopupIndicator
      }),
      getTagProps: ({
        index
      }) => _extends({
        key: index,
        "data-tag-index": index,
        tabIndex: -1
      }, !readOnly && {
        onDelete: handleTagDelete(index)
      }),
      getListboxProps: () => ({
        role: "listbox",
        id: `${id}-listbox`,
        "aria-labelledby": `${id}-label`,
        ref: handleListboxRef,
        onMouseDown: (event) => {
          event.preventDefault();
        }
      }),
      getOptionProps: ({
        index,
        option
      }) => {
        var _getOptionKey;
        const selected = (multiple ? value : [value]).some((value2) => value2 != null && isOptionEqualToValue(option, value2));
        const disabled = getOptionDisabled ? getOptionDisabled(option) : false;
        return {
          key: (_getOptionKey = getOptionKey == null ? void 0 : getOptionKey(option)) != null ? _getOptionKey : getOptionLabel(option),
          tabIndex: -1,
          role: "option",
          id: `${id}-option-${index}`,
          onMouseMove: handleOptionMouseMove,
          onClick: handleOptionClick,
          onTouchStart: handleOptionTouchStart,
          "data-option-index": index,
          "aria-disabled": disabled,
          "aria-selected": selected
        };
      },
      id,
      inputValue,
      value,
      dirty,
      expanded: popupOpen && anchorEl,
      popupOpen,
      focused: focused || focusedTag !== -1,
      anchorEl,
      setAnchorEl,
      focusedTag,
      groupedOptions
    };
  }
  var useAutocomplete_default = useAutocomplete;

  // node_modules/@mui/material/ListSubheader/ListSubheader.js
  init_extends();
  var React128 = __toESM(require_react());
  var import_prop_types85 = __toESM(require_prop_types());

  // node_modules/@mui/material/ListSubheader/listSubheaderClasses.js
  function getListSubheaderUtilityClass(slot) {
    return generateUtilityClass("MuiListSubheader", slot);
  }
  var listSubheaderClasses = generateUtilityClasses("MuiListSubheader", ["root", "colorPrimary", "colorInherit", "gutters", "inset", "sticky"]);

  // node_modules/@mui/material/ListSubheader/ListSubheader.js
  var import_jsx_runtime114 = __toESM(require_jsx_runtime());
  var _excluded78 = ["className", "color", "component", "disableGutters", "disableSticky", "inset"];
  var useUtilityClasses47 = (ownerState) => {
    const {
      classes,
      color: color2,
      disableGutters,
      inset,
      disableSticky
    } = ownerState;
    const slots = {
      root: ["root", color2 !== "default" && `color${capitalize_default(color2)}`, !disableGutters && "gutters", inset && "inset", !disableSticky && "sticky"]
    };
    return composeClasses(slots, getListSubheaderUtilityClass, classes);
  };
  var ListSubheaderRoot = styled_default2("li", {
    name: "MuiListSubheader",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, ownerState.color !== "default" && styles4[`color${capitalize_default(ownerState.color)}`], !ownerState.disableGutters && styles4.gutters, ownerState.inset && styles4.inset, !ownerState.disableSticky && styles4.sticky];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    boxSizing: "border-box",
    lineHeight: "48px",
    listStyle: "none",
    color: (theme.vars || theme).palette.text.secondary,
    fontFamily: theme.typography.fontFamily,
    fontWeight: theme.typography.fontWeightMedium,
    fontSize: theme.typography.pxToRem(14)
  }, ownerState.color === "primary" && {
    color: (theme.vars || theme).palette.primary.main
  }, ownerState.color === "inherit" && {
    color: "inherit"
  }, !ownerState.disableGutters && {
    paddingLeft: 16,
    paddingRight: 16
  }, ownerState.inset && {
    paddingLeft: 72
  }, !ownerState.disableSticky && {
    position: "sticky",
    top: 0,
    zIndex: 1,
    backgroundColor: (theme.vars || theme).palette.background.paper
  }));
  var ListSubheader = /* @__PURE__ */ React128.forwardRef(function ListSubheader2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiListSubheader"
    });
    const {
      className,
      color: color2 = "default",
      component = "li",
      disableGutters = false,
      disableSticky = false,
      inset = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded78);
    const ownerState = _extends({}, props, {
      color: color2,
      component,
      disableGutters,
      disableSticky,
      inset
    });
    const classes = useUtilityClasses47(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime114.jsx)(ListSubheaderRoot, _extends({
      as: component,
      className: clsx_default(classes.root, className),
      ref,
      ownerState
    }, other));
  });
  ListSubheader.muiSkipListHighlight = true;
  true ? ListSubheader.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types85.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types85.default.object,
    /**
     * @ignore
     */
    className: import_prop_types85.default.string,
    /**
     * The color of the component. It supports those theme colors that make sense for this component.
     * @default 'default'
     */
    color: import_prop_types85.default.oneOf(["default", "inherit", "primary"]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types85.default.elementType,
    /**
     * If `true`, the List Subheader will not have gutters.
     * @default false
     */
    disableGutters: import_prop_types85.default.bool,
    /**
     * If `true`, the List Subheader will not stick to the top during scroll.
     * @default false
     */
    disableSticky: import_prop_types85.default.bool,
    /**
     * If `true`, the List Subheader is indented.
     * @default false
     */
    inset: import_prop_types85.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types85.default.oneOfType([import_prop_types85.default.arrayOf(import_prop_types85.default.oneOfType([import_prop_types85.default.func, import_prop_types85.default.object, import_prop_types85.default.bool])), import_prop_types85.default.func, import_prop_types85.default.object])
  } : void 0;
  var ListSubheader_default = ListSubheader;

  // node_modules/@mui/material/Chip/Chip.js
  init_extends();
  var React130 = __toESM(require_react());
  var import_prop_types86 = __toESM(require_prop_types());
  var import_colorManipulator7 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/internal/svg-icons/Cancel.js
  var React129 = __toESM(require_react());
  var import_jsx_runtime115 = __toESM(require_jsx_runtime());
  var Cancel_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime115.jsx)("path", {
    d: "M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"
  }), "Cancel");

  // node_modules/@mui/material/Chip/chipClasses.js
  function getChipUtilityClass(slot) {
    return generateUtilityClass("MuiChip", slot);
  }
  var chipClasses = generateUtilityClasses("MuiChip", ["root", "sizeSmall", "sizeMedium", "colorError", "colorInfo", "colorPrimary", "colorSecondary", "colorSuccess", "colorWarning", "disabled", "clickable", "clickableColorPrimary", "clickableColorSecondary", "deletable", "deletableColorPrimary", "deletableColorSecondary", "outlined", "filled", "outlinedPrimary", "outlinedSecondary", "filledPrimary", "filledSecondary", "avatar", "avatarSmall", "avatarMedium", "avatarColorPrimary", "avatarColorSecondary", "icon", "iconSmall", "iconMedium", "iconColorPrimary", "iconColorSecondary", "label", "labelSmall", "labelMedium", "deleteIcon", "deleteIconSmall", "deleteIconMedium", "deleteIconColorPrimary", "deleteIconColorSecondary", "deleteIconOutlinedColorPrimary", "deleteIconOutlinedColorSecondary", "deleteIconFilledColorPrimary", "deleteIconFilledColorSecondary", "focusVisible"]);
  var chipClasses_default = chipClasses;

  // node_modules/@mui/material/Chip/Chip.js
  var import_jsx_runtime116 = __toESM(require_jsx_runtime());
  var import_jsx_runtime117 = __toESM(require_jsx_runtime());
  var _excluded79 = ["avatar", "className", "clickable", "color", "component", "deleteIcon", "disabled", "icon", "label", "onClick", "onDelete", "onKeyDown", "onKeyUp", "size", "variant", "tabIndex", "skipFocusWhenDisabled"];
  var useUtilityClasses48 = (ownerState) => {
    const {
      classes,
      disabled,
      size,
      color: color2,
      iconColor,
      onDelete,
      clickable,
      variant
    } = ownerState;
    const slots = {
      root: ["root", variant, disabled && "disabled", `size${capitalize_default(size)}`, `color${capitalize_default(color2)}`, clickable && "clickable", clickable && `clickableColor${capitalize_default(color2)}`, onDelete && "deletable", onDelete && `deletableColor${capitalize_default(color2)}`, `${variant}${capitalize_default(color2)}`],
      label: ["label", `label${capitalize_default(size)}`],
      avatar: ["avatar", `avatar${capitalize_default(size)}`, `avatarColor${capitalize_default(color2)}`],
      icon: ["icon", `icon${capitalize_default(size)}`, `iconColor${capitalize_default(iconColor)}`],
      deleteIcon: ["deleteIcon", `deleteIcon${capitalize_default(size)}`, `deleteIconColor${capitalize_default(color2)}`, `deleteIcon${capitalize_default(variant)}Color${capitalize_default(color2)}`]
    };
    return composeClasses(slots, getChipUtilityClass, classes);
  };
  var ChipRoot = styled_default2("div", {
    name: "MuiChip",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      const {
        color: color2,
        iconColor,
        clickable,
        onDelete,
        size,
        variant
      } = ownerState;
      return [{
        [`& .${chipClasses_default.avatar}`]: styles4.avatar
      }, {
        [`& .${chipClasses_default.avatar}`]: styles4[`avatar${capitalize_default(size)}`]
      }, {
        [`& .${chipClasses_default.avatar}`]: styles4[`avatarColor${capitalize_default(color2)}`]
      }, {
        [`& .${chipClasses_default.icon}`]: styles4.icon
      }, {
        [`& .${chipClasses_default.icon}`]: styles4[`icon${capitalize_default(size)}`]
      }, {
        [`& .${chipClasses_default.icon}`]: styles4[`iconColor${capitalize_default(iconColor)}`]
      }, {
        [`& .${chipClasses_default.deleteIcon}`]: styles4.deleteIcon
      }, {
        [`& .${chipClasses_default.deleteIcon}`]: styles4[`deleteIcon${capitalize_default(size)}`]
      }, {
        [`& .${chipClasses_default.deleteIcon}`]: styles4[`deleteIconColor${capitalize_default(color2)}`]
      }, {
        [`& .${chipClasses_default.deleteIcon}`]: styles4[`deleteIcon${capitalize_default(variant)}Color${capitalize_default(color2)}`]
      }, styles4.root, styles4[`size${capitalize_default(size)}`], styles4[`color${capitalize_default(color2)}`], clickable && styles4.clickable, clickable && color2 !== "default" && styles4[`clickableColor${capitalize_default(color2)})`], onDelete && styles4.deletable, onDelete && color2 !== "default" && styles4[`deletableColor${capitalize_default(color2)}`], styles4[variant], styles4[`${variant}${capitalize_default(color2)}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    const textColor = theme.palette.mode === "light" ? theme.palette.grey[700] : theme.palette.grey[300];
    return _extends({
      maxWidth: "100%",
      fontFamily: theme.typography.fontFamily,
      fontSize: theme.typography.pxToRem(13),
      display: "inline-flex",
      alignItems: "center",
      justifyContent: "center",
      height: 32,
      color: (theme.vars || theme).palette.text.primary,
      backgroundColor: (theme.vars || theme).palette.action.selected,
      borderRadius: 32 / 2,
      whiteSpace: "nowrap",
      transition: theme.transitions.create(["background-color", "box-shadow"]),
      // reset cursor explicitly in case ButtonBase is used
      cursor: "unset",
      // We disable the focus ring for mouse, touch and keyboard users.
      outline: 0,
      textDecoration: "none",
      border: 0,
      // Remove `button` border
      padding: 0,
      // Remove `button` padding
      verticalAlign: "middle",
      boxSizing: "border-box",
      [`&.${chipClasses_default.disabled}`]: {
        opacity: (theme.vars || theme).palette.action.disabledOpacity,
        pointerEvents: "none"
      },
      [`& .${chipClasses_default.avatar}`]: {
        marginLeft: 5,
        marginRight: -6,
        width: 24,
        height: 24,
        color: theme.vars ? theme.vars.palette.Chip.defaultAvatarColor : textColor,
        fontSize: theme.typography.pxToRem(12)
      },
      [`& .${chipClasses_default.avatarColorPrimary}`]: {
        color: (theme.vars || theme).palette.primary.contrastText,
        backgroundColor: (theme.vars || theme).palette.primary.dark
      },
      [`& .${chipClasses_default.avatarColorSecondary}`]: {
        color: (theme.vars || theme).palette.secondary.contrastText,
        backgroundColor: (theme.vars || theme).palette.secondary.dark
      },
      [`& .${chipClasses_default.avatarSmall}`]: {
        marginLeft: 4,
        marginRight: -4,
        width: 18,
        height: 18,
        fontSize: theme.typography.pxToRem(10)
      },
      [`& .${chipClasses_default.icon}`]: _extends({
        marginLeft: 5,
        marginRight: -6
      }, ownerState.size === "small" && {
        fontSize: 18,
        marginLeft: 4,
        marginRight: -4
      }, ownerState.iconColor === ownerState.color && _extends({
        color: theme.vars ? theme.vars.palette.Chip.defaultIconColor : textColor
      }, ownerState.color !== "default" && {
        color: "inherit"
      })),
      [`& .${chipClasses_default.deleteIcon}`]: _extends({
        WebkitTapHighlightColor: "transparent",
        color: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / 0.26)` : (0, import_colorManipulator7.alpha)(theme.palette.text.primary, 0.26),
        fontSize: 22,
        cursor: "pointer",
        margin: "0 5px 0 -6px",
        "&:hover": {
          color: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / 0.4)` : (0, import_colorManipulator7.alpha)(theme.palette.text.primary, 0.4)
        }
      }, ownerState.size === "small" && {
        fontSize: 16,
        marginRight: 4,
        marginLeft: -4
      }, ownerState.color !== "default" && {
        color: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].contrastTextChannel} / 0.7)` : (0, import_colorManipulator7.alpha)(theme.palette[ownerState.color].contrastText, 0.7),
        "&:hover, &:active": {
          color: (theme.vars || theme).palette[ownerState.color].contrastText
        }
      })
    }, ownerState.size === "small" && {
      height: 24
    }, ownerState.color !== "default" && {
      backgroundColor: (theme.vars || theme).palette[ownerState.color].main,
      color: (theme.vars || theme).palette[ownerState.color].contrastText
    }, ownerState.onDelete && {
      [`&.${chipClasses_default.focusVisible}`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : (0, import_colorManipulator7.alpha)(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
      }
    }, ownerState.onDelete && ownerState.color !== "default" && {
      [`&.${chipClasses_default.focusVisible}`]: {
        backgroundColor: (theme.vars || theme).palette[ownerState.color].dark
      }
    });
  }, ({
    theme,
    ownerState
  }) => _extends({}, ownerState.clickable && {
    userSelect: "none",
    WebkitTapHighlightColor: "transparent",
    cursor: "pointer",
    "&:hover": {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : (0, import_colorManipulator7.alpha)(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity)
    },
    [`&.${chipClasses_default.focusVisible}`]: {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : (0, import_colorManipulator7.alpha)(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
    },
    "&:active": {
      boxShadow: (theme.vars || theme).shadows[1]
    }
  }, ownerState.clickable && ownerState.color !== "default" && {
    [`&:hover, &.${chipClasses_default.focusVisible}`]: {
      backgroundColor: (theme.vars || theme).palette[ownerState.color].dark
    }
  }), ({
    theme,
    ownerState
  }) => _extends({}, ownerState.variant === "outlined" && {
    backgroundColor: "transparent",
    border: theme.vars ? `1px solid ${theme.vars.palette.Chip.defaultBorder}` : `1px solid ${theme.palette.mode === "light" ? theme.palette.grey[400] : theme.palette.grey[700]}`,
    [`&.${chipClasses_default.clickable}:hover`]: {
      backgroundColor: (theme.vars || theme).palette.action.hover
    },
    [`&.${chipClasses_default.focusVisible}`]: {
      backgroundColor: (theme.vars || theme).palette.action.focus
    },
    [`& .${chipClasses_default.avatar}`]: {
      marginLeft: 4
    },
    [`& .${chipClasses_default.avatarSmall}`]: {
      marginLeft: 2
    },
    [`& .${chipClasses_default.icon}`]: {
      marginLeft: 4
    },
    [`& .${chipClasses_default.iconSmall}`]: {
      marginLeft: 2
    },
    [`& .${chipClasses_default.deleteIcon}`]: {
      marginRight: 5
    },
    [`& .${chipClasses_default.deleteIconSmall}`]: {
      marginRight: 3
    }
  }, ownerState.variant === "outlined" && ownerState.color !== "default" && {
    color: (theme.vars || theme).palette[ownerState.color].main,
    border: `1px solid ${theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.7)` : (0, import_colorManipulator7.alpha)(theme.palette[ownerState.color].main, 0.7)}`,
    [`&.${chipClasses_default.clickable}:hover`]: {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, import_colorManipulator7.alpha)(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity)
    },
    [`&.${chipClasses_default.focusVisible}`]: {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.focusOpacity})` : (0, import_colorManipulator7.alpha)(theme.palette[ownerState.color].main, theme.palette.action.focusOpacity)
    },
    [`& .${chipClasses_default.deleteIcon}`]: {
      color: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.7)` : (0, import_colorManipulator7.alpha)(theme.palette[ownerState.color].main, 0.7),
      "&:hover, &:active": {
        color: (theme.vars || theme).palette[ownerState.color].main
      }
    }
  }));
  var ChipLabel = styled_default2("span", {
    name: "MuiChip",
    slot: "Label",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      const {
        size
      } = ownerState;
      return [styles4.label, styles4[`label${capitalize_default(size)}`]];
    }
  })(({
    ownerState
  }) => _extends({
    overflow: "hidden",
    textOverflow: "ellipsis",
    paddingLeft: 12,
    paddingRight: 12,
    whiteSpace: "nowrap"
  }, ownerState.variant === "outlined" && {
    paddingLeft: 11,
    paddingRight: 11
  }, ownerState.size === "small" && {
    paddingLeft: 8,
    paddingRight: 8
  }, ownerState.size === "small" && ownerState.variant === "outlined" && {
    paddingLeft: 7,
    paddingRight: 7
  }));
  function isDeleteKeyboardEvent(keyboardEvent) {
    return keyboardEvent.key === "Backspace" || keyboardEvent.key === "Delete";
  }
  var Chip = /* @__PURE__ */ React130.forwardRef(function Chip2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiChip"
    });
    const {
      avatar: avatarProp,
      className,
      clickable: clickableProp,
      color: color2 = "default",
      component: ComponentProp,
      deleteIcon: deleteIconProp,
      disabled = false,
      icon: iconProp,
      label,
      onClick,
      onDelete,
      onKeyDown,
      onKeyUp,
      size = "medium",
      variant = "filled",
      tabIndex,
      skipFocusWhenDisabled = false
      // TODO v6: Rename to `focusableWhenDisabled`.
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded79);
    const chipRef = React130.useRef(null);
    const handleRef = useForkRef_default(chipRef, ref);
    const handleDeleteIconClick = (event) => {
      event.stopPropagation();
      if (onDelete) {
        onDelete(event);
      }
    };
    const handleKeyDown2 = (event) => {
      if (event.currentTarget === event.target && isDeleteKeyboardEvent(event)) {
        event.preventDefault();
      }
      if (onKeyDown) {
        onKeyDown(event);
      }
    };
    const handleKeyUp = (event) => {
      if (event.currentTarget === event.target) {
        if (onDelete && isDeleteKeyboardEvent(event)) {
          onDelete(event);
        } else if (event.key === "Escape" && chipRef.current) {
          chipRef.current.blur();
        }
      }
      if (onKeyUp) {
        onKeyUp(event);
      }
    };
    const clickable = clickableProp !== false && onClick ? true : clickableProp;
    const component = clickable || onDelete ? ButtonBase_default : ComponentProp || "div";
    const ownerState = _extends({}, props, {
      component,
      disabled,
      size,
      color: color2,
      iconColor: /* @__PURE__ */ React130.isValidElement(iconProp) ? iconProp.props.color || color2 : color2,
      onDelete: !!onDelete,
      clickable,
      variant
    });
    const classes = useUtilityClasses48(ownerState);
    const moreProps = component === ButtonBase_default ? _extends({
      component: ComponentProp || "div",
      focusVisibleClassName: classes.focusVisible
    }, onDelete && {
      disableRipple: true
    }) : {};
    let deleteIcon = null;
    if (onDelete) {
      deleteIcon = deleteIconProp && /* @__PURE__ */ React130.isValidElement(deleteIconProp) ? /* @__PURE__ */ React130.cloneElement(deleteIconProp, {
        className: clsx_default(deleteIconProp.props.className, classes.deleteIcon),
        onClick: handleDeleteIconClick
      }) : /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(Cancel_default, {
        className: clsx_default(classes.deleteIcon),
        onClick: handleDeleteIconClick
      });
    }
    let avatar = null;
    if (avatarProp && /* @__PURE__ */ React130.isValidElement(avatarProp)) {
      avatar = /* @__PURE__ */ React130.cloneElement(avatarProp, {
        className: clsx_default(classes.avatar, avatarProp.props.className)
      });
    }
    let icon = null;
    if (iconProp && /* @__PURE__ */ React130.isValidElement(iconProp)) {
      icon = /* @__PURE__ */ React130.cloneElement(iconProp, {
        className: clsx_default(classes.icon, iconProp.props.className)
      });
    }
    if (true) {
      if (avatar && icon) {
        console.error("MUI: The Chip component can not handle the avatar and the icon prop at the same time. Pick one.");
      }
    }
    return /* @__PURE__ */ (0, import_jsx_runtime117.jsxs)(ChipRoot, _extends({
      as: component,
      className: clsx_default(classes.root, className),
      disabled: clickable && disabled ? true : void 0,
      onClick,
      onKeyDown: handleKeyDown2,
      onKeyUp: handleKeyUp,
      ref: handleRef,
      tabIndex: skipFocusWhenDisabled && disabled ? -1 : tabIndex,
      ownerState
    }, moreProps, other, {
      children: [avatar || icon, /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(ChipLabel, {
        className: clsx_default(classes.label),
        ownerState,
        children: label
      }), deleteIcon]
    }));
  });
  true ? Chip.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The Avatar element to display.
     */
    avatar: import_prop_types86.default.element,
    /**
     * This prop isn't supported.
     * Use the `component` prop if you need to change the children structure.
     */
    children: unsupportedProp_default,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types86.default.object,
    /**
     * @ignore
     */
    className: import_prop_types86.default.string,
    /**
     * If `true`, the chip will appear clickable, and will raise when pressed,
     * even if the onClick prop is not defined.
     * If `false`, the chip will not appear clickable, even if onClick prop is defined.
     * This can be used, for example,
     * along with the component prop to indicate an anchor Chip is clickable.
     * Note: this controls the UI and does not affect the onClick event.
     */
    clickable: import_prop_types86.default.bool,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'default'
     */
    color: import_prop_types86.default.oneOfType([import_prop_types86.default.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types86.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types86.default.elementType,
    /**
     * Override the default delete icon element. Shown only if `onDelete` is set.
     */
    deleteIcon: import_prop_types86.default.element,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types86.default.bool,
    /**
     * Icon element.
     */
    icon: import_prop_types86.default.element,
    /**
     * The content of the component.
     */
    label: import_prop_types86.default.node,
    /**
     * @ignore
     */
    onClick: import_prop_types86.default.func,
    /**
     * Callback fired when the delete icon is clicked.
     * If set, the delete icon will be shown.
     */
    onDelete: import_prop_types86.default.func,
    /**
     * @ignore
     */
    onKeyDown: import_prop_types86.default.func,
    /**
     * @ignore
     */
    onKeyUp: import_prop_types86.default.func,
    /**
     * The size of the component.
     * @default 'medium'
     */
    size: import_prop_types86.default.oneOfType([import_prop_types86.default.oneOf(["medium", "small"]), import_prop_types86.default.string]),
    /**
     * If `true`, allows the disabled chip to escape focus.
     * If `false`, allows the disabled chip to receive focus.
     * @default false
     */
    skipFocusWhenDisabled: import_prop_types86.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types86.default.oneOfType([import_prop_types86.default.arrayOf(import_prop_types86.default.oneOfType([import_prop_types86.default.func, import_prop_types86.default.object, import_prop_types86.default.bool])), import_prop_types86.default.func, import_prop_types86.default.object]),
    /**
     * @ignore
     */
    tabIndex: import_prop_types86.default.number,
    /**
     * The variant to use.
     * @default 'filled'
     */
    variant: import_prop_types86.default.oneOfType([import_prop_types86.default.oneOf(["filled", "outlined"]), import_prop_types86.default.string])
  } : void 0;
  var Chip_default = Chip;

  // node_modules/@mui/material/Input/inputClasses.js
  init_extends();
  function getInputUtilityClass(slot) {
    return generateUtilityClass("MuiInput", slot);
  }
  var inputClasses = _extends({}, inputBaseClasses_default, generateUtilityClasses("MuiInput", ["root", "underline", "input"]));
  var inputClasses_default = inputClasses;

  // node_modules/@mui/material/OutlinedInput/outlinedInputClasses.js
  init_extends();
  function getOutlinedInputUtilityClass(slot) {
    return generateUtilityClass("MuiOutlinedInput", slot);
  }
  var outlinedInputClasses = _extends({}, inputBaseClasses_default, generateUtilityClasses("MuiOutlinedInput", ["root", "notchedOutline", "input"]));
  var outlinedInputClasses_default = outlinedInputClasses;

  // node_modules/@mui/material/FilledInput/filledInputClasses.js
  init_extends();
  function getFilledInputUtilityClass(slot) {
    return generateUtilityClass("MuiFilledInput", slot);
  }
  var filledInputClasses = _extends({}, inputBaseClasses_default, generateUtilityClasses("MuiFilledInput", ["root", "underline", "input"]));
  var filledInputClasses_default = filledInputClasses;

  // node_modules/@mui/material/internal/svg-icons/Close.js
  var React131 = __toESM(require_react());
  var import_jsx_runtime118 = __toESM(require_jsx_runtime());
  var Close_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime118.jsx)("path", {
    d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
  }), "Close");

  // node_modules/@mui/material/internal/svg-icons/ArrowDropDown.js
  var React132 = __toESM(require_react());
  var import_jsx_runtime119 = __toESM(require_jsx_runtime());
  var ArrowDropDown_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime119.jsx)("path", {
    d: "M7 10l5 5 5-5z"
  }), "ArrowDropDown");

  // node_modules/@mui/material/Autocomplete/autocompleteClasses.js
  function getAutocompleteUtilityClass(slot) {
    return generateUtilityClass("MuiAutocomplete", slot);
  }
  var autocompleteClasses = generateUtilityClasses("MuiAutocomplete", ["root", "expanded", "fullWidth", "focused", "focusVisible", "tag", "tagSizeSmall", "tagSizeMedium", "hasPopupIcon", "hasClearIcon", "inputRoot", "input", "inputFocused", "endAdornment", "clearIndicator", "popupIndicator", "popupIndicatorOpen", "popper", "popperDisablePortal", "paper", "listbox", "loading", "noOptions", "option", "groupLabel", "groupUl"]);
  var autocompleteClasses_default = autocompleteClasses;

  // node_modules/@mui/material/Autocomplete/Autocomplete.js
  var import_jsx_runtime120 = __toESM(require_jsx_runtime());
  var import_jsx_runtime121 = __toESM(require_jsx_runtime());
  var _ClearIcon;
  var _ArrowDropDownIcon;
  var _excluded80 = ["autoComplete", "autoHighlight", "autoSelect", "blurOnSelect", "ChipProps", "className", "clearIcon", "clearOnBlur", "clearOnEscape", "clearText", "closeText", "componentsProps", "defaultValue", "disableClearable", "disableCloseOnSelect", "disabled", "disabledItemsFocusable", "disableListWrap", "disablePortal", "filterOptions", "filterSelectedOptions", "forcePopupIcon", "freeSolo", "fullWidth", "getLimitTagsText", "getOptionDisabled", "getOptionKey", "getOptionLabel", "isOptionEqualToValue", "groupBy", "handleHomeEndKeys", "id", "includeInputInList", "inputValue", "limitTags", "ListboxComponent", "ListboxProps", "loading", "loadingText", "multiple", "noOptionsText", "onChange", "onClose", "onHighlightChange", "onInputChange", "onOpen", "open", "openOnFocus", "openText", "options", "PaperComponent", "PopperComponent", "popupIcon", "readOnly", "renderGroup", "renderInput", "renderOption", "renderTags", "selectOnFocus", "size", "slotProps", "value"];
  var _excluded212 = ["ref"];
  var _excluded310 = ["key"];
  var _excluded410 = ["key"];
  var useUtilityClasses49 = (ownerState) => {
    const {
      classes,
      disablePortal,
      expanded,
      focused,
      fullWidth,
      hasClearIcon,
      hasPopupIcon,
      inputFocused,
      popupOpen,
      size
    } = ownerState;
    const slots = {
      root: ["root", expanded && "expanded", focused && "focused", fullWidth && "fullWidth", hasClearIcon && "hasClearIcon", hasPopupIcon && "hasPopupIcon"],
      inputRoot: ["inputRoot"],
      input: ["input", inputFocused && "inputFocused"],
      tag: ["tag", `tagSize${capitalize_default(size)}`],
      endAdornment: ["endAdornment"],
      clearIndicator: ["clearIndicator"],
      popupIndicator: ["popupIndicator", popupOpen && "popupIndicatorOpen"],
      popper: ["popper", disablePortal && "popperDisablePortal"],
      paper: ["paper"],
      listbox: ["listbox"],
      loading: ["loading"],
      noOptions: ["noOptions"],
      option: ["option"],
      groupLabel: ["groupLabel"],
      groupUl: ["groupUl"]
    };
    return composeClasses(slots, getAutocompleteUtilityClass, classes);
  };
  var AutocompleteRoot = styled_default2("div", {
    name: "MuiAutocomplete",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      const {
        fullWidth,
        hasClearIcon,
        hasPopupIcon,
        inputFocused,
        size
      } = ownerState;
      return [{
        [`& .${autocompleteClasses_default.tag}`]: styles4.tag
      }, {
        [`& .${autocompleteClasses_default.tag}`]: styles4[`tagSize${capitalize_default(size)}`]
      }, {
        [`& .${autocompleteClasses_default.inputRoot}`]: styles4.inputRoot
      }, {
        [`& .${autocompleteClasses_default.input}`]: styles4.input
      }, {
        [`& .${autocompleteClasses_default.input}`]: inputFocused && styles4.inputFocused
      }, styles4.root, fullWidth && styles4.fullWidth, hasPopupIcon && styles4.hasPopupIcon, hasClearIcon && styles4.hasClearIcon];
    }
  })({
    [`&.${autocompleteClasses_default.focused} .${autocompleteClasses_default.clearIndicator}`]: {
      visibility: "visible"
    },
    /* Avoid double tap issue on iOS */
    "@media (pointer: fine)": {
      [`&:hover .${autocompleteClasses_default.clearIndicator}`]: {
        visibility: "visible"
      }
    },
    [`& .${autocompleteClasses_default.tag}`]: {
      margin: 3,
      maxWidth: "calc(100% - 6px)"
    },
    [`& .${autocompleteClasses_default.inputRoot}`]: {
      [`.${autocompleteClasses_default.hasPopupIcon}&, .${autocompleteClasses_default.hasClearIcon}&`]: {
        paddingRight: 26 + 4
      },
      [`.${autocompleteClasses_default.hasPopupIcon}.${autocompleteClasses_default.hasClearIcon}&`]: {
        paddingRight: 52 + 4
      },
      [`& .${autocompleteClasses_default.input}`]: {
        width: 0,
        minWidth: 30
      }
    },
    [`& .${inputClasses_default.root}`]: {
      paddingBottom: 1,
      "& .MuiInput-input": {
        padding: "4px 4px 4px 0px"
      }
    },
    [`& .${inputClasses_default.root}.${inputBaseClasses_default.sizeSmall}`]: {
      [`& .${inputClasses_default.input}`]: {
        padding: "2px 4px 3px 0"
      }
    },
    [`& .${outlinedInputClasses_default.root}`]: {
      padding: 9,
      [`.${autocompleteClasses_default.hasPopupIcon}&, .${autocompleteClasses_default.hasClearIcon}&`]: {
        paddingRight: 26 + 4 + 9
      },
      [`.${autocompleteClasses_default.hasPopupIcon}.${autocompleteClasses_default.hasClearIcon}&`]: {
        paddingRight: 52 + 4 + 9
      },
      [`& .${autocompleteClasses_default.input}`]: {
        padding: "7.5px 4px 7.5px 5px"
      },
      [`& .${autocompleteClasses_default.endAdornment}`]: {
        right: 9
      }
    },
    [`& .${outlinedInputClasses_default.root}.${inputBaseClasses_default.sizeSmall}`]: {
      // Don't specify paddingRight, as it overrides the default value set when there is only
      // one of the popup or clear icon as the specificity is equal so the latter one wins
      paddingTop: 6,
      paddingBottom: 6,
      paddingLeft: 6,
      [`& .${autocompleteClasses_default.input}`]: {
        padding: "2.5px 4px 2.5px 8px"
      }
    },
    [`& .${filledInputClasses_default.root}`]: {
      paddingTop: 19,
      paddingLeft: 8,
      [`.${autocompleteClasses_default.hasPopupIcon}&, .${autocompleteClasses_default.hasClearIcon}&`]: {
        paddingRight: 26 + 4 + 9
      },
      [`.${autocompleteClasses_default.hasPopupIcon}.${autocompleteClasses_default.hasClearIcon}&`]: {
        paddingRight: 52 + 4 + 9
      },
      [`& .${filledInputClasses_default.input}`]: {
        padding: "7px 4px"
      },
      [`& .${autocompleteClasses_default.endAdornment}`]: {
        right: 9
      }
    },
    [`& .${filledInputClasses_default.root}.${inputBaseClasses_default.sizeSmall}`]: {
      paddingBottom: 1,
      [`& .${filledInputClasses_default.input}`]: {
        padding: "2.5px 4px"
      }
    },
    [`& .${inputBaseClasses_default.hiddenLabel}`]: {
      paddingTop: 8
    },
    [`& .${filledInputClasses_default.root}.${inputBaseClasses_default.hiddenLabel}`]: {
      paddingTop: 0,
      paddingBottom: 0,
      [`& .${autocompleteClasses_default.input}`]: {
        paddingTop: 16,
        paddingBottom: 17
      }
    },
    [`& .${filledInputClasses_default.root}.${inputBaseClasses_default.hiddenLabel}.${inputBaseClasses_default.sizeSmall}`]: {
      [`& .${autocompleteClasses_default.input}`]: {
        paddingTop: 8,
        paddingBottom: 9
      }
    },
    [`& .${autocompleteClasses_default.input}`]: {
      flexGrow: 1,
      textOverflow: "ellipsis",
      opacity: 0
    },
    variants: [{
      props: {
        fullWidth: true
      },
      style: {
        width: "100%"
      }
    }, {
      props: {
        size: "small"
      },
      style: {
        [`& .${autocompleteClasses_default.tag}`]: {
          margin: 2,
          maxWidth: "calc(100% - 4px)"
        }
      }
    }, {
      props: {
        inputFocused: true
      },
      style: {
        [`& .${autocompleteClasses_default.input}`]: {
          opacity: 1
        }
      }
    }, {
      props: {
        multiple: true
      },
      style: {
        [`& .${autocompleteClasses_default.inputRoot}`]: {
          flexWrap: "wrap"
        }
      }
    }]
  });
  var AutocompleteEndAdornment = styled_default2("div", {
    name: "MuiAutocomplete",
    slot: "EndAdornment",
    overridesResolver: (props, styles4) => styles4.endAdornment
  })({
    // We use a position absolute to support wrapping tags.
    position: "absolute",
    right: 0,
    top: "50%",
    transform: "translate(0, -50%)"
  });
  var AutocompleteClearIndicator = styled_default2(IconButton_default, {
    name: "MuiAutocomplete",
    slot: "ClearIndicator",
    overridesResolver: (props, styles4) => styles4.clearIndicator
  })({
    marginRight: -2,
    padding: 4,
    visibility: "hidden"
  });
  var AutocompletePopupIndicator = styled_default2(IconButton_default, {
    name: "MuiAutocomplete",
    slot: "PopupIndicator",
    overridesResolver: ({
      ownerState
    }, styles4) => _extends({}, styles4.popupIndicator, ownerState.popupOpen && styles4.popupIndicatorOpen)
  })({
    padding: 2,
    marginRight: -2,
    variants: [{
      props: {
        popupOpen: true
      },
      style: {
        transform: "rotate(180deg)"
      }
    }]
  });
  var AutocompletePopper = styled_default2(Popper_default, {
    name: "MuiAutocomplete",
    slot: "Popper",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${autocompleteClasses_default.option}`]: styles4.option
      }, styles4.popper, ownerState.disablePortal && styles4.popperDisablePortal];
    }
  })(({
    theme
  }) => ({
    zIndex: (theme.vars || theme).zIndex.modal,
    variants: [{
      props: {
        disablePortal: true
      },
      style: {
        position: "absolute"
      }
    }]
  }));
  var AutocompletePaper = styled_default2(Paper_default, {
    name: "MuiAutocomplete",
    slot: "Paper",
    overridesResolver: (props, styles4) => styles4.paper
  })(({
    theme
  }) => _extends({}, theme.typography.body1, {
    overflow: "auto"
  }));
  var AutocompleteLoading = styled_default2("div", {
    name: "MuiAutocomplete",
    slot: "Loading",
    overridesResolver: (props, styles4) => styles4.loading
  })(({
    theme
  }) => ({
    color: (theme.vars || theme).palette.text.secondary,
    padding: "14px 16px"
  }));
  var AutocompleteNoOptions = styled_default2("div", {
    name: "MuiAutocomplete",
    slot: "NoOptions",
    overridesResolver: (props, styles4) => styles4.noOptions
  })(({
    theme
  }) => ({
    color: (theme.vars || theme).palette.text.secondary,
    padding: "14px 16px"
  }));
  var AutocompleteListbox = styled_default2("div", {
    name: "MuiAutocomplete",
    slot: "Listbox",
    overridesResolver: (props, styles4) => styles4.listbox
  })(({
    theme
  }) => ({
    listStyle: "none",
    margin: 0,
    padding: "8px 0",
    maxHeight: "40vh",
    overflow: "auto",
    position: "relative",
    [`& .${autocompleteClasses_default.option}`]: {
      minHeight: 48,
      display: "flex",
      overflow: "hidden",
      justifyContent: "flex-start",
      alignItems: "center",
      cursor: "pointer",
      paddingTop: 6,
      boxSizing: "border-box",
      outline: "0",
      WebkitTapHighlightColor: "transparent",
      paddingBottom: 6,
      paddingLeft: 16,
      paddingRight: 16,
      [theme.breakpoints.up("sm")]: {
        minHeight: "auto"
      },
      [`&.${autocompleteClasses_default.focused}`]: {
        backgroundColor: (theme.vars || theme).palette.action.hover,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      },
      '&[aria-disabled="true"]': {
        opacity: (theme.vars || theme).palette.action.disabledOpacity,
        pointerEvents: "none"
      },
      [`&.${autocompleteClasses_default.focusVisible}`]: {
        backgroundColor: (theme.vars || theme).palette.action.focus
      },
      '&[aria-selected="true"]': {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : (0, import_colorManipulator8.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity),
        [`&.${autocompleteClasses_default.focused}`]: {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : (0, import_colorManipulator8.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            backgroundColor: (theme.vars || theme).palette.action.selected
          }
        },
        [`&.${autocompleteClasses_default.focusVisible}`]: {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : (0, import_colorManipulator8.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
        }
      }
    }
  }));
  var AutocompleteGroupLabel = styled_default2(ListSubheader_default, {
    name: "MuiAutocomplete",
    slot: "GroupLabel",
    overridesResolver: (props, styles4) => styles4.groupLabel
  })(({
    theme
  }) => ({
    backgroundColor: (theme.vars || theme).palette.background.paper,
    top: -8
  }));
  var AutocompleteGroupUl = styled_default2("ul", {
    name: "MuiAutocomplete",
    slot: "GroupUl",
    overridesResolver: (props, styles4) => styles4.groupUl
  })({
    padding: 0,
    [`& .${autocompleteClasses_default.option}`]: {
      paddingLeft: 24
    }
  });
  var Autocomplete = /* @__PURE__ */ React133.forwardRef(function Autocomplete2(inProps, ref) {
    var _slotProps$clearIndic, _slotProps$paper, _slotProps$popper, _slotProps$popupIndic;
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiAutocomplete"
    });
    const {
      autoComplete = false,
      autoHighlight = false,
      autoSelect = false,
      blurOnSelect = false,
      ChipProps,
      className,
      clearIcon = _ClearIcon || (_ClearIcon = /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(Close_default, {
        fontSize: "small"
      })),
      clearOnBlur = !props.freeSolo,
      clearOnEscape = false,
      clearText = "Clear",
      closeText = "Close",
      componentsProps = {},
      defaultValue = props.multiple ? [] : null,
      disableClearable = false,
      disableCloseOnSelect = false,
      disabled = false,
      disabledItemsFocusable = false,
      disableListWrap = false,
      disablePortal = false,
      filterSelectedOptions = false,
      forcePopupIcon = "auto",
      freeSolo = false,
      fullWidth = false,
      getLimitTagsText = (more) => `+${more}`,
      getOptionLabel: getOptionLabelProp,
      groupBy,
      handleHomeEndKeys = !props.freeSolo,
      includeInputInList = false,
      limitTags = -1,
      ListboxComponent = "ul",
      ListboxProps,
      loading = false,
      loadingText = "Loading\u2026",
      multiple = false,
      noOptionsText = "No options",
      openOnFocus = false,
      openText = "Open",
      PaperComponent = Paper_default,
      PopperComponent = Popper_default,
      popupIcon = _ArrowDropDownIcon || (_ArrowDropDownIcon = /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(ArrowDropDown_default, {})),
      readOnly = false,
      renderGroup: renderGroupProp,
      renderInput,
      renderOption: renderOptionProp,
      renderTags,
      selectOnFocus = !props.freeSolo,
      size = "medium",
      slotProps = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded80);
    const {
      getRootProps,
      getInputProps,
      getInputLabelProps,
      getPopupIndicatorProps,
      getClearProps,
      getTagProps,
      getListboxProps,
      getOptionProps,
      value,
      dirty,
      expanded,
      id,
      popupOpen,
      focused,
      focusedTag,
      anchorEl,
      setAnchorEl,
      inputValue,
      groupedOptions
    } = useAutocomplete_default(_extends({}, props, {
      componentName: "Autocomplete"
    }));
    const hasClearIcon = !disableClearable && !disabled && dirty && !readOnly;
    const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;
    const {
      onMouseDown: handleInputMouseDown
    } = getInputProps();
    const {
      ref: externalListboxRef
    } = ListboxProps != null ? ListboxProps : {};
    const _getListboxProps = getListboxProps(), {
      ref: listboxRef
    } = _getListboxProps, otherListboxProps = _objectWithoutPropertiesLoose(_getListboxProps, _excluded212);
    const combinedListboxRef = useForkRef_default(listboxRef, externalListboxRef);
    const defaultGetOptionLabel2 = (option) => {
      var _option$label;
      return (_option$label = option.label) != null ? _option$label : option;
    };
    const getOptionLabel = getOptionLabelProp || defaultGetOptionLabel2;
    const ownerState = _extends({}, props, {
      disablePortal,
      expanded,
      focused,
      fullWidth,
      getOptionLabel,
      hasClearIcon,
      hasPopupIcon,
      inputFocused: focusedTag === -1,
      popupOpen,
      size
    });
    const classes = useUtilityClasses49(ownerState);
    let startAdornment;
    if (multiple && value.length > 0) {
      const getCustomizedTagProps = (params) => _extends({
        className: classes.tag,
        disabled
      }, getTagProps(params));
      if (renderTags) {
        startAdornment = renderTags(value, getCustomizedTagProps, ownerState);
      } else {
        startAdornment = value.map((option, index) => {
          const _getCustomizedTagProp = getCustomizedTagProps({
            index
          }), {
            key
          } = _getCustomizedTagProp, customTagProps = _objectWithoutPropertiesLoose(_getCustomizedTagProp, _excluded310);
          return /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(Chip_default, _extends({
            label: getOptionLabel(option),
            size
          }, customTagProps, ChipProps), key);
        });
      }
    }
    if (limitTags > -1 && Array.isArray(startAdornment)) {
      const more = startAdornment.length - limitTags;
      if (!focused && more > 0) {
        startAdornment = startAdornment.splice(0, limitTags);
        startAdornment.push(/* @__PURE__ */ (0, import_jsx_runtime120.jsx)("span", {
          className: classes.tag,
          children: getLimitTagsText(more)
        }, startAdornment.length));
      }
    }
    const defaultRenderGroup = (params) => /* @__PURE__ */ (0, import_jsx_runtime121.jsxs)("li", {
      children: [/* @__PURE__ */ (0, import_jsx_runtime120.jsx)(AutocompleteGroupLabel, {
        className: classes.groupLabel,
        ownerState,
        component: "div",
        children: params.group
      }), /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(AutocompleteGroupUl, {
        className: classes.groupUl,
        ownerState,
        children: params.children
      })]
    }, params.key);
    const renderGroup = renderGroupProp || defaultRenderGroup;
    const defaultRenderOption = (props2, option) => {
      const {
        key
      } = props2, otherProps = _objectWithoutPropertiesLoose(props2, _excluded410);
      return /* @__PURE__ */ (0, import_jsx_runtime120.jsx)("li", _extends({}, otherProps, {
        children: getOptionLabel(option)
      }), key);
    };
    const renderOption = renderOptionProp || defaultRenderOption;
    const renderListOption = (option, index) => {
      const optionProps = getOptionProps({
        option,
        index
      });
      return renderOption(_extends({}, optionProps, {
        className: classes.option
      }), option, {
        selected: optionProps["aria-selected"],
        index,
        inputValue
      }, ownerState);
    };
    const clearIndicatorSlotProps = (_slotProps$clearIndic = slotProps.clearIndicator) != null ? _slotProps$clearIndic : componentsProps.clearIndicator;
    const paperSlotProps = (_slotProps$paper = slotProps.paper) != null ? _slotProps$paper : componentsProps.paper;
    const popperSlotProps = (_slotProps$popper = slotProps.popper) != null ? _slotProps$popper : componentsProps.popper;
    const popupIndicatorSlotProps = (_slotProps$popupIndic = slotProps.popupIndicator) != null ? _slotProps$popupIndic : componentsProps.popupIndicator;
    return /* @__PURE__ */ (0, import_jsx_runtime121.jsxs)(React133.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime120.jsx)(AutocompleteRoot, _extends({
        ref,
        className: clsx_default(classes.root, className),
        ownerState
      }, getRootProps(other), {
        children: renderInput({
          id,
          disabled,
          fullWidth: true,
          size: size === "small" ? "small" : void 0,
          InputLabelProps: getInputLabelProps(),
          InputProps: _extends({
            ref: setAnchorEl,
            className: classes.inputRoot,
            startAdornment,
            onClick: (event) => {
              if (event.target === event.currentTarget) {
                handleInputMouseDown(event);
              }
            }
          }, (hasClearIcon || hasPopupIcon) && {
            endAdornment: /* @__PURE__ */ (0, import_jsx_runtime121.jsxs)(AutocompleteEndAdornment, {
              className: classes.endAdornment,
              ownerState,
              children: [hasClearIcon ? /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(AutocompleteClearIndicator, _extends({}, getClearProps(), {
                "aria-label": clearText,
                title: clearText,
                ownerState
              }, clearIndicatorSlotProps, {
                className: clsx_default(classes.clearIndicator, clearIndicatorSlotProps == null ? void 0 : clearIndicatorSlotProps.className),
                children: clearIcon
              })) : null, hasPopupIcon ? /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(AutocompletePopupIndicator, _extends({}, getPopupIndicatorProps(), {
                disabled,
                "aria-label": popupOpen ? closeText : openText,
                title: popupOpen ? closeText : openText,
                ownerState
              }, popupIndicatorSlotProps, {
                className: clsx_default(classes.popupIndicator, popupIndicatorSlotProps == null ? void 0 : popupIndicatorSlotProps.className),
                children: popupIcon
              })) : null]
            })
          }),
          inputProps: _extends({
            className: classes.input,
            disabled,
            readOnly
          }, getInputProps())
        })
      })), anchorEl ? /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(AutocompletePopper, _extends({
        as: PopperComponent,
        disablePortal,
        style: {
          width: anchorEl ? anchorEl.clientWidth : null
        },
        ownerState,
        role: "presentation",
        anchorEl,
        open: popupOpen
      }, popperSlotProps, {
        className: clsx_default(classes.popper, popperSlotProps == null ? void 0 : popperSlotProps.className),
        children: /* @__PURE__ */ (0, import_jsx_runtime121.jsxs)(AutocompletePaper, _extends({
          ownerState,
          as: PaperComponent
        }, paperSlotProps, {
          className: clsx_default(classes.paper, paperSlotProps == null ? void 0 : paperSlotProps.className),
          children: [loading && groupedOptions.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(AutocompleteLoading, {
            className: classes.loading,
            ownerState,
            children: loadingText
          }) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(AutocompleteNoOptions, {
            className: classes.noOptions,
            ownerState,
            role: "presentation",
            onMouseDown: (event) => {
              event.preventDefault();
            },
            children: noOptionsText
          }) : null, groupedOptions.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(AutocompleteListbox, _extends({
            as: ListboxComponent,
            className: classes.listbox,
            ownerState
          }, otherListboxProps, ListboxProps, {
            ref: combinedListboxRef,
            children: groupedOptions.map((option, index) => {
              if (groupBy) {
                return renderGroup({
                  key: option.key,
                  group: option.group,
                  children: option.options.map((option2, index2) => renderListOption(option2, option.index + index2))
                });
              }
              return renderListOption(option, index);
            })
          })) : null]
        }))
      })) : null]
    });
  });
  true ? Autocomplete.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * If `true`, the portion of the selected suggestion that the user hasn't typed,
     * known as the completion string, appears inline after the input cursor in the textbox.
     * The inline completion string is visually highlighted and has a selected state.
     * @default false
     */
    autoComplete: import_prop_types87.default.bool,
    /**
     * If `true`, the first option is automatically highlighted.
     * @default false
     */
    autoHighlight: import_prop_types87.default.bool,
    /**
     * If `true`, the selected option becomes the value of the input
     * when the Autocomplete loses focus unless the user chooses
     * a different option or changes the character string in the input.
     *
     * When using the `freeSolo` mode, the typed value will be the input value
     * if the Autocomplete loses focus without highlighting an option.
     * @default false
     */
    autoSelect: import_prop_types87.default.bool,
    /**
     * Control if the input should be blurred when an option is selected:
     *
     * - `false` the input is not blurred.
     * - `true` the input is always blurred.
     * - `touch` the input is blurred after a touch event.
     * - `mouse` the input is blurred after a mouse event.
     * @default false
     */
    blurOnSelect: import_prop_types87.default.oneOfType([import_prop_types87.default.oneOf(["mouse", "touch"]), import_prop_types87.default.bool]),
    /**
     * Props applied to the [`Chip`](/material-ui/api/chip/) element.
     */
    ChipProps: import_prop_types87.default.object,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types87.default.object,
    /**
     * @ignore
     */
    className: import_prop_types87.default.string,
    /**
     * The icon to display in place of the default clear icon.
     * @default <ClearIcon fontSize="small" />
     */
    clearIcon: import_prop_types87.default.node,
    /**
     * If `true`, the input's text is cleared on blur if no value is selected.
     *
     * Set it to `true` if you want to help the user enter a new value.
     * Set it to `false` if you want to help the user resume their search.
     * @default !props.freeSolo
     */
    clearOnBlur: import_prop_types87.default.bool,
    /**
     * If `true`, clear all values when the user presses escape and the popup is closed.
     * @default false
     */
    clearOnEscape: import_prop_types87.default.bool,
    /**
     * Override the default text for the *clear* icon button.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @default 'Clear'
     */
    clearText: import_prop_types87.default.string,
    /**
     * Override the default text for the *close popup* icon button.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @default 'Close'
     */
    closeText: import_prop_types87.default.string,
    /**
     * The props used for each slot inside.
     * @default {}
     */
    componentsProps: import_prop_types87.default.shape({
      clearIndicator: import_prop_types87.default.object,
      paper: import_prop_types87.default.object,
      popper: import_prop_types87.default.object,
      popupIndicator: import_prop_types87.default.object
    }),
    /**
     * The default value. Use when the component is not controlled.
     * @default props.multiple ? [] : null
     */
    defaultValue: chainPropTypes(import_prop_types87.default.any, (props) => {
      if (props.multiple && props.defaultValue !== void 0 && !Array.isArray(props.defaultValue)) {
        return new Error(["MUI: The Autocomplete expects the `defaultValue` prop to be an array when `multiple={true}` or undefined.", `However, ${props.defaultValue} was provided.`].join("\n"));
      }
      return null;
    }),
    /**
     * If `true`, the input can't be cleared.
     * @default false
     */
    disableClearable: import_prop_types87.default.bool,
    /**
     * If `true`, the popup won't close when a value is selected.
     * @default false
     */
    disableCloseOnSelect: import_prop_types87.default.bool,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types87.default.bool,
    /**
     * If `true`, will allow focus on disabled items.
     * @default false
     */
    disabledItemsFocusable: import_prop_types87.default.bool,
    /**
     * If `true`, the list box in the popup will not wrap focus.
     * @default false
     */
    disableListWrap: import_prop_types87.default.bool,
    /**
     * If `true`, the `Popper` content will be under the DOM hierarchy of the parent component.
     * @default false
     */
    disablePortal: import_prop_types87.default.bool,
    /**
     * A function that determines the filtered options to be rendered on search.
     *
     * @default createFilterOptions()
     * @param {Value[]} options The options to render.
     * @param {object} state The state of the component.
     * @returns {Value[]}
     */
    filterOptions: import_prop_types87.default.func,
    /**
     * If `true`, hide the selected options from the list box.
     * @default false
     */
    filterSelectedOptions: import_prop_types87.default.bool,
    /**
     * Force the visibility display of the popup icon.
     * @default 'auto'
     */
    forcePopupIcon: import_prop_types87.default.oneOfType([import_prop_types87.default.oneOf(["auto"]), import_prop_types87.default.bool]),
    /**
     * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.
     * @default false
     */
    freeSolo: import_prop_types87.default.bool,
    /**
     * If `true`, the input will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types87.default.bool,
    /**
     * The label to display when the tags are truncated (`limitTags`).
     *
     * @param {number} more The number of truncated tags.
     * @returns {ReactNode}
     * @default (more) => `+${more}`
     */
    getLimitTagsText: import_prop_types87.default.func,
    /**
     * Used to determine the disabled state for a given option.
     *
     * @param {Value} option The option to test.
     * @returns {boolean}
     */
    getOptionDisabled: import_prop_types87.default.func,
    /**
     * Used to determine the key for a given option.
     * This can be useful when the labels of options are not unique (since labels are used as keys by default).
     *
     * @param {Value} option The option to get the key for.
     * @returns {string | number}
     */
    getOptionKey: import_prop_types87.default.func,
    /**
     * Used to determine the string value for a given option.
     * It's used to fill the input (and the list box options if `renderOption` is not provided).
     *
     * If used in free solo mode, it must accept both the type of the options and a string.
     *
     * @param {Value} option
     * @returns {string}
     * @default (option) => option.label ?? option
     */
    getOptionLabel: import_prop_types87.default.func,
    /**
     * If provided, the options will be grouped under the returned string.
     * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.
     *
     * @param {Value} options The options to group.
     * @returns {string}
     */
    groupBy: import_prop_types87.default.func,
    /**
     * If `true`, the component handles the "Home" and "End" keys when the popup is open.
     * It should move focus to the first option and last option, respectively.
     * @default !props.freeSolo
     */
    handleHomeEndKeys: import_prop_types87.default.bool,
    /**
     * This prop is used to help implement the accessibility logic.
     * If you don't provide an id it will fall back to a randomly generated one.
     */
    id: import_prop_types87.default.string,
    /**
     * If `true`, the highlight can move to the input.
     * @default false
     */
    includeInputInList: import_prop_types87.default.bool,
    /**
     * The input value.
     */
    inputValue: import_prop_types87.default.string,
    /**
     * Used to determine if the option represents the given value.
     * Uses strict equality by default.
     * ⚠️ Both arguments need to be handled, an option can only match with one value.
     *
     * @param {Value} option The option to test.
     * @param {Value} value The value to test against.
     * @returns {boolean}
     */
    isOptionEqualToValue: import_prop_types87.default.func,
    /**
     * The maximum number of tags that will be visible when not focused.
     * Set `-1` to disable the limit.
     * @default -1
     */
    limitTags: integerPropType_default,
    /**
     * The component used to render the listbox.
     * @default 'ul'
     */
    ListboxComponent: import_prop_types87.default.elementType,
    /**
     * Props applied to the Listbox element.
     */
    ListboxProps: import_prop_types87.default.object,
    /**
     * If `true`, the component is in a loading state.
     * This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, for example `options` are empty).
     * @default false
     */
    loading: import_prop_types87.default.bool,
    /**
     * Text to display when in a loading state.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @default 'Loading…'
     */
    loadingText: import_prop_types87.default.node,
    /**
     * If `true`, `value` must be an array and the menu will support multiple selections.
     * @default false
     */
    multiple: import_prop_types87.default.bool,
    /**
     * Text to display when there are no options.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @default 'No options'
     */
    noOptionsText: import_prop_types87.default.node,
    /**
     * Callback fired when the value changes.
     *
     * @param {React.SyntheticEvent} event The event source of the callback.
     * @param {Value|Value[]} value The new value of the component.
     * @param {string} reason One of "createOption", "selectOption", "removeOption", "blur" or "clear".
     * @param {string} [details]
     */
    onChange: import_prop_types87.default.func,
    /**
     * Callback fired when the popup requests to be closed.
     * Use in controlled mode (see open).
     *
     * @param {React.SyntheticEvent} event The event source of the callback.
     * @param {string} reason Can be: `"toggleInput"`, `"escape"`, `"selectOption"`, `"removeOption"`, `"blur"`.
     */
    onClose: import_prop_types87.default.func,
    /**
     * Callback fired when the highlight option changes.
     *
     * @param {React.SyntheticEvent} event The event source of the callback.
     * @param {Value} option The highlighted option.
     * @param {string} reason Can be: `"keyboard"`, `"auto"`, `"mouse"`, `"touch"`.
     */
    onHighlightChange: import_prop_types87.default.func,
    /**
     * Callback fired when the input value changes.
     *
     * @param {React.SyntheticEvent} event The event source of the callback.
     * @param {string} value The new value of the text input.
     * @param {string} reason Can be: `"input"` (user input), `"reset"` (programmatic change), `"clear"`.
     */
    onInputChange: import_prop_types87.default.func,
    /**
     * @ignore
     */
    onKeyDown: import_prop_types87.default.func,
    /**
     * Callback fired when the popup requests to be opened.
     * Use in controlled mode (see open).
     *
     * @param {React.SyntheticEvent} event The event source of the callback.
     */
    onOpen: import_prop_types87.default.func,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types87.default.bool,
    /**
     * If `true`, the popup will open on input focus.
     * @default false
     */
    openOnFocus: import_prop_types87.default.bool,
    /**
     * Override the default text for the *open popup* icon button.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @default 'Open'
     */
    openText: import_prop_types87.default.string,
    /**
     * Array of options.
     */
    options: import_prop_types87.default.array.isRequired,
    /**
     * The component used to render the body of the popup.
     * @default Paper
     */
    PaperComponent: import_prop_types87.default.elementType,
    /**
     * The component used to position the popup.
     * @default Popper
     */
    PopperComponent: import_prop_types87.default.elementType,
    /**
     * The icon to display in place of the default popup icon.
     * @default <ArrowDropDownIcon />
     */
    popupIcon: import_prop_types87.default.node,
    /**
     * If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.
     * @default false
     */
    readOnly: import_prop_types87.default.bool,
    /**
     * Render the group.
     *
     * @param {AutocompleteRenderGroupParams} params The group to render.
     * @returns {ReactNode}
     */
    renderGroup: import_prop_types87.default.func,
    /**
     * Render the input.
     *
     * @param {object} params
     * @returns {ReactNode}
     */
    renderInput: import_prop_types87.default.func.isRequired,
    /**
     * Render the option, use `getOptionLabel` by default.
     *
     * @param {object} props The props to apply on the li element.
     * @param {Value} option The option to render.
     * @param {object} state The state of each option.
     * @param {object} ownerState The state of the Autocomplete component.
     * @returns {ReactNode}
     */
    renderOption: import_prop_types87.default.func,
    /**
     * Render the selected value.
     *
     * @param {Value[]} value The `value` provided to the component.
     * @param {function} getTagProps A tag props getter.
     * @param {object} ownerState The state of the Autocomplete component.
     * @returns {ReactNode}
     */
    renderTags: import_prop_types87.default.func,
    /**
     * If `true`, the input's text is selected on focus.
     * It helps the user clear the selected value.
     * @default !props.freeSolo
     */
    selectOnFocus: import_prop_types87.default.bool,
    /**
     * The size of the component.
     * @default 'medium'
     */
    size: import_prop_types87.default.oneOfType([import_prop_types87.default.oneOf(["small", "medium"]), import_prop_types87.default.string]),
    /**
     * The props used for each slot inside.
     * @default {}
     */
    slotProps: import_prop_types87.default.shape({
      clearIndicator: import_prop_types87.default.object,
      paper: import_prop_types87.default.object,
      popper: import_prop_types87.default.object,
      popupIndicator: import_prop_types87.default.object
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types87.default.oneOfType([import_prop_types87.default.arrayOf(import_prop_types87.default.oneOfType([import_prop_types87.default.func, import_prop_types87.default.object, import_prop_types87.default.bool])), import_prop_types87.default.func, import_prop_types87.default.object]),
    /**
     * The value of the autocomplete.
     *
     * The value must have reference equality with the option in order to be selected.
     * You can customize the equality behavior with the `isOptionEqualToValue` prop.
     */
    value: chainPropTypes(import_prop_types87.default.any, (props) => {
      if (props.multiple && props.value !== void 0 && !Array.isArray(props.value)) {
        return new Error(["MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.", `However, ${props.value} was provided.`].join("\n"));
      }
      return null;
    })
  } : void 0;
  var Autocomplete_default = Autocomplete;

  // node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterInputMultipleValue.js
  var import_jsx_runtime122 = __toESM(require_jsx_runtime());
  var _excluded81 = ["item", "applyValue", "type", "apiRef", "focusElementRef", "color", "error", "helperText", "size", "variant"];
  function GridFilterInputMultipleValue(props) {
    const {
      item,
      applyValue,
      type,
      apiRef,
      focusElementRef,
      color: color2,
      error,
      helperText,
      size,
      variant
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded81);
    const TextFieldProps = {
      color: color2,
      error,
      helperText,
      size,
      variant
    };
    const [filterValueState, setFilterValueState] = React134.useState(item.value || []);
    const id = useId();
    const rootProps = useGridRootProps();
    React134.useEffect(() => {
      var _item$value;
      const itemValue = (_item$value = item.value) != null ? _item$value : [];
      setFilterValueState(itemValue.map(String));
    }, [item.value]);
    const handleChange = React134.useCallback((event, value) => {
      setFilterValueState(value.map(String));
      applyValue(_extends({}, item, {
        value: [...value]
      }));
    }, [applyValue, item]);
    return /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(Autocomplete_default, _extends({
      multiple: true,
      freeSolo: true,
      options: [],
      filterOptions: (options, params) => {
        const {
          inputValue
        } = params;
        return inputValue == null || inputValue === "" ? [] : [inputValue];
      },
      id,
      value: filterValueState,
      onChange: handleChange,
      renderTags: (value, getTagProps) => value.map((option, index) => /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(rootProps.slots.baseChip, _extends({
        variant: "outlined",
        size: "small",
        label: option
      }, getTagProps({
        index
      })))),
      renderInput: (params) => {
        var _rootProps$slotProps;
        return /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(rootProps.slots.baseTextField, _extends({}, params, {
          label: apiRef.current.getLocaleText("filterPanelInputLabel"),
          placeholder: apiRef.current.getLocaleText("filterPanelInputPlaceholder"),
          InputLabelProps: _extends({}, params.InputLabelProps, {
            shrink: true
          }),
          inputRef: focusElementRef,
          type: type || "text"
        }, TextFieldProps, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseTextField));
      }
    }, other));
  }
  true ? GridFilterInputMultipleValue.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    apiRef: import_prop_types88.default.shape({
      current: import_prop_types88.default.object.isRequired
    }).isRequired,
    applyValue: import_prop_types88.default.func.isRequired,
    focusElementRef: import_prop_types88.default.oneOfType([import_prop_types88.default.func, import_prop_types88.default.object]),
    item: import_prop_types88.default.shape({
      field: import_prop_types88.default.string.isRequired,
      id: import_prop_types88.default.oneOfType([import_prop_types88.default.number, import_prop_types88.default.string]),
      operator: import_prop_types88.default.string.isRequired,
      value: import_prop_types88.default.any
    }).isRequired,
    type: import_prop_types88.default.oneOf(["number", "text"])
  } : void 0;

  // node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterInputMultipleSingleSelect.js
  init_extends();
  var React135 = __toESM(require_react());
  var import_prop_types89 = __toESM(require_prop_types());
  var import_jsx_runtime123 = __toESM(require_jsx_runtime());
  var _excluded82 = ["item", "applyValue", "type", "apiRef", "focusElementRef", "color", "error", "helperText", "size", "variant", "getOptionLabel", "getOptionValue"];
  var filter = createFilterOptions();
  function GridFilterInputMultipleSingleSelect(props) {
    var _resolvedColumn, _resolvedColumn2;
    const {
      item,
      applyValue,
      apiRef,
      focusElementRef,
      color: color2,
      error,
      helperText,
      size,
      variant = "standard",
      getOptionLabel: getOptionLabelProp,
      getOptionValue: getOptionValueProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded82);
    const TextFieldProps = {
      color: color2,
      error,
      helperText,
      size,
      variant
    };
    const id = useId();
    const rootProps = useGridRootProps();
    let resolvedColumn = null;
    if (item.field) {
      const column2 = apiRef.current.getColumn(item.field);
      if (isSingleSelectColDef(column2)) {
        resolvedColumn = column2;
      }
    }
    const getOptionValue = getOptionValueProp || ((_resolvedColumn = resolvedColumn) == null ? void 0 : _resolvedColumn.getOptionValue);
    const getOptionLabel = getOptionLabelProp || ((_resolvedColumn2 = resolvedColumn) == null ? void 0 : _resolvedColumn2.getOptionLabel);
    const isOptionEqualToValue = React135.useCallback((option, value) => getOptionValue(option) === getOptionValue(value), [getOptionValue]);
    const resolvedValueOptions = React135.useMemo(() => {
      var _resolvedColumn3;
      if (!((_resolvedColumn3 = resolvedColumn) != null && _resolvedColumn3.valueOptions)) {
        return [];
      }
      if (typeof resolvedColumn.valueOptions === "function") {
        return resolvedColumn.valueOptions({
          field: resolvedColumn.field
        });
      }
      return resolvedColumn.valueOptions;
    }, [resolvedColumn]);
    const resolvedFormattedValueOptions = React135.useMemo(() => {
      return resolvedValueOptions == null ? void 0 : resolvedValueOptions.map(getOptionValue);
    }, [resolvedValueOptions, getOptionValue]);
    const filteredValues = React135.useMemo(() => {
      if (!Array.isArray(item.value)) {
        return [];
      }
      if (resolvedValueOptions !== void 0) {
        const itemValueIndexes = item.value.map((element) => {
          return resolvedFormattedValueOptions == null ? void 0 : resolvedFormattedValueOptions.findIndex((formattedOption) => formattedOption === element);
        });
        return itemValueIndexes.filter((index) => index >= 0).map((index) => resolvedValueOptions[index]);
      }
      return item.value;
    }, [item.value, resolvedValueOptions, resolvedFormattedValueOptions]);
    React135.useEffect(() => {
      if (!Array.isArray(item.value) || filteredValues.length !== item.value.length) {
        applyValue(_extends({}, item, {
          value: filteredValues.map(getOptionValue)
        }));
      }
    }, [item, filteredValues, applyValue, getOptionValue]);
    const handleChange = React135.useCallback((event, value) => {
      applyValue(_extends({}, item, {
        value: value.map(getOptionValue)
      }));
    }, [applyValue, item, getOptionValue]);
    return /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(Autocomplete_default, _extends({
      multiple: true,
      options: resolvedValueOptions,
      isOptionEqualToValue,
      filterOptions: filter,
      id,
      value: filteredValues,
      onChange: handleChange,
      getOptionLabel,
      renderTags: (value, getTagProps) => value.map((option, index) => /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(rootProps.slots.baseChip, _extends({
        variant: "outlined",
        size: "small",
        label: getOptionLabel(option)
      }, getTagProps({
        index
      })))),
      renderInput: (params) => {
        var _rootProps$slotProps;
        return /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(rootProps.slots.baseTextField, _extends({}, params, {
          label: apiRef.current.getLocaleText("filterPanelInputLabel"),
          placeholder: apiRef.current.getLocaleText("filterPanelInputPlaceholder"),
          InputLabelProps: _extends({}, params.InputLabelProps, {
            shrink: true
          }),
          inputRef: focusElementRef,
          type: "singleSelect"
        }, TextFieldProps, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseTextField));
      }
    }, other));
  }
  true ? GridFilterInputMultipleSingleSelect.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    apiRef: import_prop_types89.default.shape({
      current: import_prop_types89.default.object.isRequired
    }).isRequired,
    applyValue: import_prop_types89.default.func.isRequired,
    focusElementRef: import_prop_types89.default.oneOfType([import_prop_types89.default.func, import_prop_types89.default.object]),
    /**
     * Used to determine the label displayed for a given value option.
     * @param {ValueOptions} value The current value option.
     * @returns {string} The text to be displayed.
     */
    getOptionLabel: import_prop_types89.default.func,
    /**
     * Used to determine the value used for a value option.
     * @param {ValueOptions} value The current value option.
     * @returns {string} The value to be used.
     */
    getOptionValue: import_prop_types89.default.func,
    item: import_prop_types89.default.shape({
      field: import_prop_types89.default.string.isRequired,
      id: import_prop_types89.default.oneOfType([import_prop_types89.default.number, import_prop_types89.default.string]),
      operator: import_prop_types89.default.string.isRequired,
      value: import_prop_types89.default.any
    }).isRequired,
    type: import_prop_types89.default.oneOf(["singleSelect"])
  } : void 0;

  // node_modules/@mui/x-data-grid/components/toolbar/GridToolbar.js
  init_extends();
  var React159 = __toESM(require_react());
  var import_prop_types110 = __toESM(require_prop_types());

  // node_modules/@mui/material/Box/Box.js
  var import_prop_types90 = __toESM(require_prop_types());

  // node_modules/@mui/material/Box/boxClasses.js
  var boxClasses = generateUtilityClasses("MuiBox", ["root"]);
  var boxClasses_default = boxClasses;

  // node_modules/@mui/material/Box/Box.js
  var defaultTheme3 = createTheme_default2();
  var Box = createBox({
    themeId: identifier_default,
    defaultTheme: defaultTheme3,
    defaultClassName: boxClasses_default.root,
    generateClassName: ClassNameGenerator_default.generate
  });
  true ? Box.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * @ignore
     */
    children: import_prop_types90.default.node,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types90.default.elementType,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types90.default.oneOfType([import_prop_types90.default.arrayOf(import_prop_types90.default.oneOfType([import_prop_types90.default.func, import_prop_types90.default.object, import_prop_types90.default.bool])), import_prop_types90.default.func, import_prop_types90.default.object])
  } : void 0;
  var Box_default = Box;

  // node_modules/@mui/x-data-grid/components/toolbar/GridToolbarColumnsButton.js
  init_extends();
  var React136 = __toESM(require_react());
  var import_jsx_runtime124 = __toESM(require_jsx_runtime());
  var _excluded83 = ["onClick"];
  var GridToolbarColumnsButton = /* @__PURE__ */ React136.forwardRef(function GridToolbarColumnsButton2(props, ref) {
    var _rootProps$slotProps;
    const {
      onClick
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded83);
    const columnButtonId = useId_default();
    const columnPanelId = useId_default();
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const preferencePanel = useGridSelector(apiRef, gridPreferencePanelStateSelector);
    const showColumns = (event) => {
      if (preferencePanel.open && preferencePanel.openedPanelValue === GridPreferencePanelsValue.columns) {
        apiRef.current.hidePreferences();
      } else {
        apiRef.current.showPreferences(GridPreferencePanelsValue.columns, columnPanelId, columnButtonId);
      }
      onClick == null || onClick(event);
    };
    if (rootProps.disableColumnSelector) {
      return null;
    }
    const isOpen = preferencePanel.open && preferencePanel.panelId === columnPanelId;
    return /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(rootProps.slots.baseButton, _extends({
      ref,
      id: columnButtonId,
      size: "small",
      "aria-label": apiRef.current.getLocaleText("toolbarColumnsLabel"),
      "aria-haspopup": "menu",
      "aria-expanded": isOpen,
      "aria-controls": isOpen ? columnPanelId : void 0,
      startIcon: /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(rootProps.slots.columnSelectorIcon, {})
    }, other, {
      onClick: showColumns
    }, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseButton, {
      children: apiRef.current.getLocaleText("toolbarColumns")
    }));
  });

  // node_modules/@mui/x-data-grid/components/toolbar/GridToolbarDensitySelector.js
  init_extends();
  var React137 = __toESM(require_react());
  var import_jsx_runtime125 = __toESM(require_jsx_runtime());
  var import_jsx_runtime126 = __toESM(require_jsx_runtime());
  var _excluded84 = ["onClick"];
  var GridToolbarDensitySelector = /* @__PURE__ */ React137.forwardRef(function GridToolbarDensitySelector2(props, ref) {
    var _rootProps$slotProps;
    const {
      onClick
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded84);
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const densityValue = useGridSelector(apiRef, gridDensityValueSelector);
    const densityButtonId = useId();
    const densityMenuId = useId();
    const [open, setOpen] = React137.useState(false);
    const buttonRef = React137.useRef(null);
    const handleRef = useForkRef(ref, buttonRef);
    const densityOptions = [{
      icon: /* @__PURE__ */ (0, import_jsx_runtime125.jsx)(rootProps.slots.densityCompactIcon, {}),
      label: apiRef.current.getLocaleText("toolbarDensityCompact"),
      value: "compact"
    }, {
      icon: /* @__PURE__ */ (0, import_jsx_runtime125.jsx)(rootProps.slots.densityStandardIcon, {}),
      label: apiRef.current.getLocaleText("toolbarDensityStandard"),
      value: "standard"
    }, {
      icon: /* @__PURE__ */ (0, import_jsx_runtime125.jsx)(rootProps.slots.densityComfortableIcon, {}),
      label: apiRef.current.getLocaleText("toolbarDensityComfortable"),
      value: "comfortable"
    }];
    const startIcon = React137.useMemo(() => {
      switch (densityValue) {
        case "compact":
          return /* @__PURE__ */ (0, import_jsx_runtime125.jsx)(rootProps.slots.densityCompactIcon, {});
        case "comfortable":
          return /* @__PURE__ */ (0, import_jsx_runtime125.jsx)(rootProps.slots.densityComfortableIcon, {});
        default:
          return /* @__PURE__ */ (0, import_jsx_runtime125.jsx)(rootProps.slots.densityStandardIcon, {});
      }
    }, [densityValue, rootProps]);
    const handleDensitySelectorOpen = (event) => {
      setOpen((prevOpen) => !prevOpen);
      onClick == null || onClick(event);
    };
    const handleDensitySelectorClose = () => {
      setOpen(false);
    };
    const handleDensityUpdate = (newDensity) => {
      apiRef.current.setDensity(newDensity);
      setOpen(false);
    };
    const handleListKeyDown = (event) => {
      if (isTabKey(event.key)) {
        event.preventDefault();
      }
      if (isHideMenuKey(event.key)) {
        setOpen(false);
      }
    };
    if (rootProps.disableDensitySelector) {
      return null;
    }
    const densityElements = densityOptions.map((option, index) => /* @__PURE__ */ (0, import_jsx_runtime126.jsxs)(MenuItem_default, {
      onClick: () => handleDensityUpdate(option.value),
      selected: option.value === densityValue,
      children: [/* @__PURE__ */ (0, import_jsx_runtime125.jsx)(ListItemIcon_default, {
        children: option.icon
      }), option.label]
    }, index));
    return /* @__PURE__ */ (0, import_jsx_runtime126.jsxs)(React137.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime125.jsx)(rootProps.slots.baseButton, _extends({
        ref: handleRef,
        size: "small",
        startIcon,
        "aria-label": apiRef.current.getLocaleText("toolbarDensityLabel"),
        "aria-haspopup": "menu",
        "aria-expanded": open,
        "aria-controls": open ? densityMenuId : void 0,
        id: densityButtonId
      }, other, {
        onClick: handleDensitySelectorOpen
      }, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseButton, {
        children: apiRef.current.getLocaleText("toolbarDensity")
      })), /* @__PURE__ */ (0, import_jsx_runtime125.jsx)(GridMenu, {
        open,
        target: buttonRef.current,
        onClose: handleDensitySelectorClose,
        position: "bottom-start",
        children: /* @__PURE__ */ (0, import_jsx_runtime125.jsx)(MenuList_default, {
          id: densityMenuId,
          className: gridClasses.menuList,
          "aria-labelledby": densityButtonId,
          onKeyDown: handleListKeyDown,
          autoFocusItem: open,
          children: densityElements
        })
      })]
    });
  });

  // node_modules/@mui/x-data-grid/components/toolbar/GridToolbarFilterButton.js
  init_extends();
  var React138 = __toESM(require_react());
  var import_prop_types91 = __toESM(require_prop_types());
  var import_jsx_runtime127 = __toESM(require_jsx_runtime());
  var import_jsx_runtime128 = __toESM(require_jsx_runtime());
  var _excluded85 = ["componentsProps"];
  var useUtilityClasses50 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["toolbarFilterList"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridToolbarFilterListRoot = styled_default2("ul", {
    name: "MuiDataGrid",
    slot: "ToolbarFilterList",
    overridesResolver: (_props, styles4) => styles4.toolbarFilterList
  })(({
    theme
  }) => ({
    margin: theme.spacing(1, 1, 0.5),
    padding: theme.spacing(0, 1)
  }));
  var GridToolbarFilterButton = /* @__PURE__ */ React138.forwardRef(function GridToolbarFilterButton2(props, ref) {
    var _rootProps$slotProps, _rootProps$slotProps2;
    const {
      componentsProps = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded85);
    const buttonProps = componentsProps.button || {};
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const activeFilters = useGridSelector(apiRef, gridFilterActiveItemsSelector);
    const lookup = useGridSelector(apiRef, gridColumnLookupSelector);
    const preferencePanel = useGridSelector(apiRef, gridPreferencePanelStateSelector);
    const classes = useUtilityClasses50(rootProps);
    const filterButtonId = useId();
    const filterPanelId = useId();
    const tooltipContentNode = React138.useMemo(() => {
      if (preferencePanel.open) {
        return apiRef.current.getLocaleText("toolbarFiltersTooltipHide");
      }
      if (activeFilters.length === 0) {
        return apiRef.current.getLocaleText("toolbarFiltersTooltipShow");
      }
      const getOperatorLabel = (item) => lookup[item.field].filterOperators.find((operator) => operator.value === item.operator).label || apiRef.current.getLocaleText(`filterOperator${capitalize(item.operator)}`).toString();
      const getFilterItemValue = (item) => {
        const {
          getValueAsString
        } = lookup[item.field].filterOperators.find((operator) => operator.value === item.operator);
        return getValueAsString ? getValueAsString(item.value) : item.value;
      };
      return /* @__PURE__ */ (0, import_jsx_runtime128.jsxs)("div", {
        children: [apiRef.current.getLocaleText("toolbarFiltersTooltipActive")(activeFilters.length), /* @__PURE__ */ (0, import_jsx_runtime127.jsx)(GridToolbarFilterListRoot, {
          className: classes.root,
          ownerState: rootProps,
          children: activeFilters.map((item, index) => _extends({}, lookup[item.field] && /* @__PURE__ */ (0, import_jsx_runtime127.jsx)("li", {
            children: `${lookup[item.field].headerName || item.field}
                  ${getOperatorLabel(item)}
                  ${// implicit check for null and undefined
            item.value != null ? getFilterItemValue(item) : ""}`
          }, index)))
        })]
      });
    }, [apiRef, rootProps, preferencePanel.open, activeFilters, lookup, classes]);
    const toggleFilter = (event) => {
      var _buttonProps$onClick;
      const {
        open,
        openedPanelValue
      } = preferencePanel;
      if (open && openedPanelValue === GridPreferencePanelsValue.filters) {
        apiRef.current.hidePreferences();
      } else {
        apiRef.current.showPreferences(GridPreferencePanelsValue.filters, filterPanelId, filterButtonId);
      }
      (_buttonProps$onClick = buttonProps.onClick) == null || _buttonProps$onClick.call(buttonProps, event);
    };
    if (rootProps.disableColumnFilter) {
      return null;
    }
    const isOpen = preferencePanel.open && preferencePanel.panelId === filterPanelId;
    return /* @__PURE__ */ (0, import_jsx_runtime127.jsx)(rootProps.slots.baseTooltip, _extends({
      title: tooltipContentNode,
      enterDelay: 1e3
    }, other, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseTooltip, {
      children: /* @__PURE__ */ (0, import_jsx_runtime127.jsx)(rootProps.slots.baseButton, _extends({
        ref,
        id: filterButtonId,
        size: "small",
        "aria-label": apiRef.current.getLocaleText("toolbarFiltersLabel"),
        "aria-controls": isOpen ? filterPanelId : void 0,
        "aria-expanded": isOpen,
        "aria-haspopup": true,
        startIcon: /* @__PURE__ */ (0, import_jsx_runtime127.jsx)(Badge_default, {
          badgeContent: activeFilters.length,
          color: "primary",
          children: /* @__PURE__ */ (0, import_jsx_runtime127.jsx)(rootProps.slots.openFilterButtonIcon, {})
        })
      }, buttonProps, {
        onClick: toggleFilter
      }, (_rootProps$slotProps2 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps2.baseButton, {
        children: apiRef.current.getLocaleText("toolbarFilters")
      }))
    }));
  });
  true ? GridToolbarFilterButton.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * The props used for each slot inside.
     * @default {}
     */
    componentsProps: import_prop_types91.default.object
  } : void 0;

  // node_modules/@mui/x-data-grid/components/toolbar/GridToolbarExport.js
  init_extends();
  var React140 = __toESM(require_react());
  var import_prop_types92 = __toESM(require_prop_types());

  // node_modules/@mui/x-data-grid/components/toolbar/GridToolbarExportContainer.js
  init_extends();
  var React139 = __toESM(require_react());
  var import_jsx_runtime129 = __toESM(require_jsx_runtime());
  var import_jsx_runtime130 = __toESM(require_jsx_runtime());
  var _excluded86 = ["children", "onClick"];
  var GridToolbarExportContainer = /* @__PURE__ */ React139.forwardRef(function GridToolbarExportContainer2(props, ref) {
    var _rootProps$slotProps;
    const {
      children,
      onClick
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded86);
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const exportButtonId = useId();
    const exportMenuId = useId();
    const [open, setOpen] = React139.useState(false);
    const buttonRef = React139.useRef(null);
    const handleRef = useForkRef(ref, buttonRef);
    const handleMenuOpen = (event) => {
      setOpen((prevOpen) => !prevOpen);
      onClick == null || onClick(event);
    };
    const handleMenuClose = () => setOpen(false);
    const handleListKeyDown = (event) => {
      if (isTabKey(event.key)) {
        event.preventDefault();
      }
      if (isHideMenuKey(event.key)) {
        handleMenuClose();
      }
    };
    if (children == null) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime130.jsxs)(React139.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime129.jsx)(rootProps.slots.baseButton, _extends({
        ref: handleRef,
        size: "small",
        startIcon: /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(rootProps.slots.exportIcon, {}),
        "aria-expanded": open,
        "aria-label": apiRef.current.getLocaleText("toolbarExportLabel"),
        "aria-haspopup": "menu",
        "aria-controls": open ? exportMenuId : void 0,
        id: exportButtonId
      }, other, {
        onClick: handleMenuOpen
      }, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseButton, {
        children: apiRef.current.getLocaleText("toolbarExport")
      })), /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(GridMenu, {
        open,
        target: buttonRef.current,
        onClose: handleMenuClose,
        position: "bottom-start",
        children: /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(MenuList_default, {
          id: exportMenuId,
          className: gridClasses.menuList,
          "aria-labelledby": exportButtonId,
          onKeyDown: handleListKeyDown,
          autoFocusItem: open,
          children: React139.Children.map(children, (child) => {
            if (!/* @__PURE__ */ React139.isValidElement(child)) {
              return child;
            }
            return /* @__PURE__ */ React139.cloneElement(child, {
              hideMenu: handleMenuClose
            });
          })
        })
      })]
    });
  });

  // node_modules/@mui/x-data-grid/components/toolbar/GridToolbarExport.js
  var import_jsx_runtime131 = __toESM(require_jsx_runtime());
  var _excluded87 = ["hideMenu", "options"];
  var _excluded213 = ["hideMenu", "options"];
  var _excluded311 = ["csvOptions", "printOptions", "excelOptions"];
  function GridCsvExportMenuItem(props) {
    const apiRef = useGridApiContext();
    const {
      hideMenu,
      options
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded87);
    return /* @__PURE__ */ (0, import_jsx_runtime131.jsx)(MenuItem_default, _extends({
      onClick: () => {
        apiRef.current.exportDataAsCsv(options);
        hideMenu == null || hideMenu();
      }
    }, other, {
      children: apiRef.current.getLocaleText("toolbarExportCSV")
    }));
  }
  function GridPrintExportMenuItem(props) {
    const apiRef = useGridApiContext();
    const {
      hideMenu,
      options
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded213);
    return /* @__PURE__ */ (0, import_jsx_runtime131.jsx)(MenuItem_default, _extends({
      onClick: () => {
        apiRef.current.exportDataAsPrint(options);
        hideMenu == null || hideMenu();
      }
    }, other, {
      children: apiRef.current.getLocaleText("toolbarExportPrint")
    }));
  }
  var GridToolbarExport = /* @__PURE__ */ React140.forwardRef(function GridToolbarExport2(props, ref) {
    const {
      csvOptions = {},
      printOptions = {},
      excelOptions
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded311);
    const apiRef = useGridApiContext();
    const preProcessedButtons = apiRef.current.unstable_applyPipeProcessors("exportMenu", [], {
      excelOptions,
      csvOptions,
      printOptions
    }).sort((a, b) => a.componentName > b.componentName ? 1 : -1);
    if (preProcessedButtons.length === 0) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime131.jsx)(GridToolbarExportContainer, _extends({}, other, {
      ref,
      children: preProcessedButtons.map((button, index) => /* @__PURE__ */ React140.cloneElement(button.component, {
        key: index
      }))
    }));
  });
  true ? GridToolbarExport.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    csvOptions: import_prop_types92.default.object,
    printOptions: import_prop_types92.default.object
  } : void 0;

  // node_modules/@mui/x-data-grid/components/toolbar/GridToolbarQuickFilter.js
  init_extends();
  var React158 = __toESM(require_react());
  var import_prop_types109 = __toESM(require_prop_types());

  // node_modules/@mui/material/TextField/TextField.js
  init_extends();
  var React157 = __toESM(require_react());
  var import_prop_types108 = __toESM(require_prop_types());

  // node_modules/@mui/material/Input/Input.js
  init_extends();
  var React141 = __toESM(require_react());
  var import_prop_types93 = __toESM(require_prop_types());
  var import_deepmerge10 = __toESM(require_deepmerge2());
  var import_jsx_runtime132 = __toESM(require_jsx_runtime());
  var _excluded88 = ["disableUnderline", "components", "componentsProps", "fullWidth", "inputComponent", "multiline", "slotProps", "slots", "type"];
  var useUtilityClasses51 = (ownerState) => {
    const {
      classes,
      disableUnderline
    } = ownerState;
    const slots = {
      root: ["root", !disableUnderline && "underline"],
      input: ["input"]
    };
    const composedClasses = composeClasses(slots, getInputUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  var InputRoot = styled_default2(InputBaseRoot, {
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    name: "MuiInput",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [...rootOverridesResolver(props, styles4), !ownerState.disableUnderline && styles4.underline];
    }
  })(({
    theme,
    ownerState
  }) => {
    const light2 = theme.palette.mode === "light";
    let bottomLineColor = light2 ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
    if (theme.vars) {
      bottomLineColor = `rgba(${theme.vars.palette.common.onBackgroundChannel} / ${theme.vars.opacity.inputUnderline})`;
    }
    return _extends({
      position: "relative"
    }, ownerState.formControl && {
      "label + &": {
        marginTop: 16
      }
    }, !ownerState.disableUnderline && {
      "&::after": {
        borderBottom: `2px solid ${(theme.vars || theme).palette[ownerState.color].main}`,
        left: 0,
        bottom: 0,
        // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
        content: '""',
        position: "absolute",
        right: 0,
        transform: "scaleX(0)",
        transition: theme.transitions.create("transform", {
          duration: theme.transitions.duration.shorter,
          easing: theme.transitions.easing.easeOut
        }),
        pointerEvents: "none"
        // Transparent to the hover style.
      },
      [`&.${inputClasses_default.focused}:after`]: {
        // translateX(0) is a workaround for Safari transform scale bug
        // See https://github.com/mui/material-ui/issues/31766
        transform: "scaleX(1) translateX(0)"
      },
      [`&.${inputClasses_default.error}`]: {
        "&::before, &::after": {
          borderBottomColor: (theme.vars || theme).palette.error.main
        }
      },
      "&::before": {
        borderBottom: `1px solid ${bottomLineColor}`,
        left: 0,
        bottom: 0,
        // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
        content: '"\\00a0"',
        position: "absolute",
        right: 0,
        transition: theme.transitions.create("border-bottom-color", {
          duration: theme.transitions.duration.shorter
        }),
        pointerEvents: "none"
        // Transparent to the hover style.
      },
      [`&:hover:not(.${inputClasses_default.disabled}, .${inputClasses_default.error}):before`]: {
        borderBottom: `2px solid ${(theme.vars || theme).palette.text.primary}`,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          borderBottom: `1px solid ${bottomLineColor}`
        }
      },
      [`&.${inputClasses_default.disabled}:before`]: {
        borderBottomStyle: "dotted"
      }
    });
  });
  var InputInput = styled_default2(InputBaseComponent, {
    name: "MuiInput",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })({});
  var Input = /* @__PURE__ */ React141.forwardRef(function Input2(inProps, ref) {
    var _ref, _slots$root, _ref2, _slots$input;
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiInput"
    });
    const {
      disableUnderline,
      components = {},
      componentsProps: componentsPropsProp,
      fullWidth = false,
      inputComponent = "input",
      multiline = false,
      slotProps,
      slots = {},
      type = "text"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded88);
    const classes = useUtilityClasses51(props);
    const ownerState = {
      disableUnderline
    };
    const inputComponentsProps = {
      root: {
        ownerState
      }
    };
    const componentsProps = (slotProps != null ? slotProps : componentsPropsProp) ? (0, import_deepmerge10.default)(slotProps != null ? slotProps : componentsPropsProp, inputComponentsProps) : inputComponentsProps;
    const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : InputRoot;
    const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components.Input) != null ? _ref2 : InputInput;
    return /* @__PURE__ */ (0, import_jsx_runtime132.jsx)(InputBase_default, _extends({
      slots: {
        root: RootSlot,
        input: InputSlot
      },
      slotProps: componentsProps,
      fullWidth,
      inputComponent,
      multiline,
      ref,
      type
    }, other, {
      classes
    }));
  });
  true ? Input.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: import_prop_types93.default.string,
    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: import_prop_types93.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types93.default.object,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
     */
    color: import_prop_types93.default.oneOfType([import_prop_types93.default.oneOf(["primary", "secondary"]), import_prop_types93.default.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: import_prop_types93.default.shape({
      Input: import_prop_types93.default.elementType,
      Root: import_prop_types93.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: import_prop_types93.default.shape({
      input: import_prop_types93.default.object,
      root: import_prop_types93.default.object
    }),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types93.default.any,
    /**
     * If `true`, the component is disabled.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    disabled: import_prop_types93.default.bool,
    /**
     * If `true`, the `input` will not have an underline.
     */
    disableUnderline: import_prop_types93.default.bool,
    /**
     * End `InputAdornment` for this component.
     */
    endAdornment: import_prop_types93.default.node,
    /**
     * If `true`, the `input` will indicate an error.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    error: import_prop_types93.default.bool,
    /**
     * If `true`, the `input` will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types93.default.bool,
    /**
     * The id of the `input` element.
     */
    id: import_prop_types93.default.string,
    /**
     * The component used for the `input` element.
     * Either a string to use a HTML element or a component.
     * @default 'input'
     */
    inputComponent: import_prop_types93.default.elementType,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * @default {}
     */
    inputProps: import_prop_types93.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType_default,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
     */
    margin: import_prop_types93.default.oneOf(["dense", "none"]),
    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: import_prop_types93.default.oneOfType([import_prop_types93.default.number, import_prop_types93.default.string]),
    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: import_prop_types93.default.oneOfType([import_prop_types93.default.number, import_prop_types93.default.string]),
    /**
     * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.
     * @default false
     */
    multiline: import_prop_types93.default.bool,
    /**
     * Name attribute of the `input` element.
     */
    name: import_prop_types93.default.string,
    /**
     * Callback fired when the value is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: import_prop_types93.default.func,
    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: import_prop_types93.default.string,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: import_prop_types93.default.bool,
    /**
     * If `true`, the `input` element is required.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    required: import_prop_types93.default.bool,
    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: import_prop_types93.default.oneOfType([import_prop_types93.default.number, import_prop_types93.default.string]),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: import_prop_types93.default.shape({
      input: import_prop_types93.default.object,
      root: import_prop_types93.default.object
    }),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: import_prop_types93.default.shape({
      input: import_prop_types93.default.elementType,
      root: import_prop_types93.default.elementType
    }),
    /**
     * Start `InputAdornment` for this component.
     */
    startAdornment: import_prop_types93.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types93.default.oneOfType([import_prop_types93.default.arrayOf(import_prop_types93.default.oneOfType([import_prop_types93.default.func, import_prop_types93.default.object, import_prop_types93.default.bool])), import_prop_types93.default.func, import_prop_types93.default.object]),
    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     * @default 'text'
     */
    type: import_prop_types93.default.string,
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: import_prop_types93.default.any
  } : void 0;
  Input.muiName = "Input";
  var Input_default = Input;

  // node_modules/@mui/material/FilledInput/FilledInput.js
  init_extends();
  var React142 = __toESM(require_react());
  var import_deepmerge11 = __toESM(require_deepmerge2());
  var import_prop_types94 = __toESM(require_prop_types());
  var import_jsx_runtime133 = __toESM(require_jsx_runtime());
  var _excluded89 = ["disableUnderline", "components", "componentsProps", "fullWidth", "hiddenLabel", "inputComponent", "multiline", "slotProps", "slots", "type"];
  var useUtilityClasses52 = (ownerState) => {
    const {
      classes,
      disableUnderline
    } = ownerState;
    const slots = {
      root: ["root", !disableUnderline && "underline"],
      input: ["input"]
    };
    const composedClasses = composeClasses(slots, getFilledInputUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  var FilledInputRoot = styled_default2(InputBaseRoot, {
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    name: "MuiFilledInput",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [...rootOverridesResolver(props, styles4), !ownerState.disableUnderline && styles4.underline];
    }
  })(({
    theme,
    ownerState
  }) => {
    var _palette;
    const light2 = theme.palette.mode === "light";
    const bottomLineColor = light2 ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
    const backgroundColor2 = light2 ? "rgba(0, 0, 0, 0.06)" : "rgba(255, 255, 255, 0.09)";
    const hoverBackground = light2 ? "rgba(0, 0, 0, 0.09)" : "rgba(255, 255, 255, 0.13)";
    const disabledBackground = light2 ? "rgba(0, 0, 0, 0.12)" : "rgba(255, 255, 255, 0.12)";
    return _extends({
      position: "relative",
      backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor2,
      borderTopLeftRadius: (theme.vars || theme).shape.borderRadius,
      borderTopRightRadius: (theme.vars || theme).shape.borderRadius,
      transition: theme.transitions.create("background-color", {
        duration: theme.transitions.duration.shorter,
        easing: theme.transitions.easing.easeOut
      }),
      "&:hover": {
        backgroundColor: theme.vars ? theme.vars.palette.FilledInput.hoverBg : hoverBackground,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor2
        }
      },
      [`&.${filledInputClasses_default.focused}`]: {
        backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor2
      },
      [`&.${filledInputClasses_default.disabled}`]: {
        backgroundColor: theme.vars ? theme.vars.palette.FilledInput.disabledBg : disabledBackground
      }
    }, !ownerState.disableUnderline && {
      "&::after": {
        borderBottom: `2px solid ${(_palette = (theme.vars || theme).palette[ownerState.color || "primary"]) == null ? void 0 : _palette.main}`,
        left: 0,
        bottom: 0,
        // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
        content: '""',
        position: "absolute",
        right: 0,
        transform: "scaleX(0)",
        transition: theme.transitions.create("transform", {
          duration: theme.transitions.duration.shorter,
          easing: theme.transitions.easing.easeOut
        }),
        pointerEvents: "none"
        // Transparent to the hover style.
      },
      [`&.${filledInputClasses_default.focused}:after`]: {
        // translateX(0) is a workaround for Safari transform scale bug
        // See https://github.com/mui/material-ui/issues/31766
        transform: "scaleX(1) translateX(0)"
      },
      [`&.${filledInputClasses_default.error}`]: {
        "&::before, &::after": {
          borderBottomColor: (theme.vars || theme).palette.error.main
        }
      },
      "&::before": {
        borderBottom: `1px solid ${theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / ${theme.vars.opacity.inputUnderline})` : bottomLineColor}`,
        left: 0,
        bottom: 0,
        // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
        content: '"\\00a0"',
        position: "absolute",
        right: 0,
        transition: theme.transitions.create("border-bottom-color", {
          duration: theme.transitions.duration.shorter
        }),
        pointerEvents: "none"
        // Transparent to the hover style.
      },
      [`&:hover:not(.${filledInputClasses_default.disabled}, .${filledInputClasses_default.error}):before`]: {
        borderBottom: `1px solid ${(theme.vars || theme).palette.text.primary}`
      },
      [`&.${filledInputClasses_default.disabled}:before`]: {
        borderBottomStyle: "dotted"
      }
    }, ownerState.startAdornment && {
      paddingLeft: 12
    }, ownerState.endAdornment && {
      paddingRight: 12
    }, ownerState.multiline && _extends({
      padding: "25px 12px 8px"
    }, ownerState.size === "small" && {
      paddingTop: 21,
      paddingBottom: 4
    }, ownerState.hiddenLabel && {
      paddingTop: 16,
      paddingBottom: 17
    }, ownerState.hiddenLabel && ownerState.size === "small" && {
      paddingTop: 8,
      paddingBottom: 9
    }));
  });
  var FilledInputInput = styled_default2(InputBaseComponent, {
    name: "MuiFilledInput",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })(({
    theme,
    ownerState
  }) => _extends({
    paddingTop: 25,
    paddingRight: 12,
    paddingBottom: 8,
    paddingLeft: 12
  }, !theme.vars && {
    "&:-webkit-autofill": {
      WebkitBoxShadow: theme.palette.mode === "light" ? null : "0 0 0 100px #266798 inset",
      WebkitTextFillColor: theme.palette.mode === "light" ? null : "#fff",
      caretColor: theme.palette.mode === "light" ? null : "#fff",
      borderTopLeftRadius: "inherit",
      borderTopRightRadius: "inherit"
    }
  }, theme.vars && {
    "&:-webkit-autofill": {
      borderTopLeftRadius: "inherit",
      borderTopRightRadius: "inherit"
    },
    [theme.getColorSchemeSelector("dark")]: {
      "&:-webkit-autofill": {
        WebkitBoxShadow: "0 0 0 100px #266798 inset",
        WebkitTextFillColor: "#fff",
        caretColor: "#fff"
      }
    }
  }, ownerState.size === "small" && {
    paddingTop: 21,
    paddingBottom: 4
  }, ownerState.hiddenLabel && {
    paddingTop: 16,
    paddingBottom: 17
  }, ownerState.startAdornment && {
    paddingLeft: 0
  }, ownerState.endAdornment && {
    paddingRight: 0
  }, ownerState.hiddenLabel && ownerState.size === "small" && {
    paddingTop: 8,
    paddingBottom: 9
  }, ownerState.multiline && {
    paddingTop: 0,
    paddingBottom: 0,
    paddingLeft: 0,
    paddingRight: 0
  }));
  var FilledInput = /* @__PURE__ */ React142.forwardRef(function FilledInput2(inProps, ref) {
    var _ref, _slots$root, _ref2, _slots$input;
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiFilledInput"
    });
    const {
      components = {},
      componentsProps: componentsPropsProp,
      fullWidth = false,
      // declare here to prevent spreading to DOM
      inputComponent = "input",
      multiline = false,
      slotProps,
      slots = {},
      type = "text"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded89);
    const ownerState = _extends({}, props, {
      fullWidth,
      inputComponent,
      multiline,
      type
    });
    const classes = useUtilityClasses52(props);
    const filledInputComponentsProps = {
      root: {
        ownerState
      },
      input: {
        ownerState
      }
    };
    const componentsProps = (slotProps != null ? slotProps : componentsPropsProp) ? (0, import_deepmerge11.default)(filledInputComponentsProps, slotProps != null ? slotProps : componentsPropsProp) : filledInputComponentsProps;
    const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : FilledInputRoot;
    const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components.Input) != null ? _ref2 : FilledInputInput;
    return /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(InputBase_default, _extends({
      slots: {
        root: RootSlot,
        input: InputSlot
      },
      componentsProps,
      fullWidth,
      inputComponent,
      multiline,
      ref,
      type
    }, other, {
      classes
    }));
  });
  true ? FilledInput.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: import_prop_types94.default.string,
    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: import_prop_types94.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types94.default.object,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
     */
    color: import_prop_types94.default.oneOfType([import_prop_types94.default.oneOf(["primary", "secondary"]), import_prop_types94.default.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: import_prop_types94.default.shape({
      Input: import_prop_types94.default.elementType,
      Root: import_prop_types94.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: import_prop_types94.default.shape({
      input: import_prop_types94.default.object,
      root: import_prop_types94.default.object
    }),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types94.default.any,
    /**
     * If `true`, the component is disabled.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    disabled: import_prop_types94.default.bool,
    /**
     * If `true`, the input will not have an underline.
     */
    disableUnderline: import_prop_types94.default.bool,
    /**
     * End `InputAdornment` for this component.
     */
    endAdornment: import_prop_types94.default.node,
    /**
     * If `true`, the `input` will indicate an error.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    error: import_prop_types94.default.bool,
    /**
     * If `true`, the `input` will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types94.default.bool,
    /**
     * If `true`, the label is hidden.
     * This is used to increase density for a `FilledInput`.
     * Be sure to add `aria-label` to the `input` element.
     * @default false
     */
    hiddenLabel: import_prop_types94.default.bool,
    /**
     * The id of the `input` element.
     */
    id: import_prop_types94.default.string,
    /**
     * The component used for the `input` element.
     * Either a string to use a HTML element or a component.
     * @default 'input'
     */
    inputComponent: import_prop_types94.default.elementType,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * @default {}
     */
    inputProps: import_prop_types94.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType_default,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
     */
    margin: import_prop_types94.default.oneOf(["dense", "none"]),
    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: import_prop_types94.default.oneOfType([import_prop_types94.default.number, import_prop_types94.default.string]),
    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: import_prop_types94.default.oneOfType([import_prop_types94.default.number, import_prop_types94.default.string]),
    /**
     * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.
     * @default false
     */
    multiline: import_prop_types94.default.bool,
    /**
     * Name attribute of the `input` element.
     */
    name: import_prop_types94.default.string,
    /**
     * Callback fired when the value is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: import_prop_types94.default.func,
    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: import_prop_types94.default.string,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: import_prop_types94.default.bool,
    /**
     * If `true`, the `input` element is required.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    required: import_prop_types94.default.bool,
    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: import_prop_types94.default.oneOfType([import_prop_types94.default.number, import_prop_types94.default.string]),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: import_prop_types94.default.shape({
      input: import_prop_types94.default.object,
      root: import_prop_types94.default.object
    }),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: import_prop_types94.default.shape({
      input: import_prop_types94.default.elementType,
      root: import_prop_types94.default.elementType
    }),
    /**
     * Start `InputAdornment` for this component.
     */
    startAdornment: import_prop_types94.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types94.default.oneOfType([import_prop_types94.default.arrayOf(import_prop_types94.default.oneOfType([import_prop_types94.default.func, import_prop_types94.default.object, import_prop_types94.default.bool])), import_prop_types94.default.func, import_prop_types94.default.object]),
    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     * @default 'text'
     */
    type: import_prop_types94.default.string,
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: import_prop_types94.default.any
  } : void 0;
  FilledInput.muiName = "Input";
  var FilledInput_default = FilledInput;

  // node_modules/@mui/material/OutlinedInput/OutlinedInput.js
  init_extends();
  var React144 = __toESM(require_react());
  var import_prop_types96 = __toESM(require_prop_types());

  // node_modules/@mui/material/OutlinedInput/NotchedOutline.js
  init_extends();
  var React143 = __toESM(require_react());
  var import_prop_types95 = __toESM(require_prop_types());
  var import_jsx_runtime134 = __toESM(require_jsx_runtime());
  var _span;
  var _excluded90 = ["children", "classes", "className", "label", "notched"];
  var NotchedOutlineRoot = styled_default2("fieldset", {
    name: "MuiNotchedOutlined",
    shouldForwardProp: rootShouldForwardProp_default
  })({
    textAlign: "left",
    position: "absolute",
    bottom: 0,
    right: 0,
    top: -5,
    left: 0,
    margin: 0,
    padding: "0 8px",
    pointerEvents: "none",
    borderRadius: "inherit",
    borderStyle: "solid",
    borderWidth: 1,
    overflow: "hidden",
    minWidth: "0%"
  });
  var NotchedOutlineLegend = styled_default2("legend", {
    name: "MuiNotchedOutlined",
    shouldForwardProp: rootShouldForwardProp_default
  })(({
    ownerState,
    theme
  }) => _extends({
    float: "unset",
    // Fix conflict with bootstrap
    width: "auto",
    // Fix conflict with bootstrap
    overflow: "hidden"
  }, !ownerState.withLabel && {
    padding: 0,
    lineHeight: "11px",
    // sync with `height` in `legend` styles
    transition: theme.transitions.create("width", {
      duration: 150,
      easing: theme.transitions.easing.easeOut
    })
  }, ownerState.withLabel && _extends({
    display: "block",
    // Fix conflict with normalize.css and sanitize.css
    padding: 0,
    height: 11,
    // sync with `lineHeight` in `legend` styles
    fontSize: "0.75em",
    visibility: "hidden",
    maxWidth: 0.01,
    transition: theme.transitions.create("max-width", {
      duration: 50,
      easing: theme.transitions.easing.easeOut
    }),
    whiteSpace: "nowrap",
    "& > span": {
      paddingLeft: 5,
      paddingRight: 5,
      display: "inline-block",
      opacity: 0,
      visibility: "visible"
    }
  }, ownerState.notched && {
    maxWidth: "100%",
    transition: theme.transitions.create("max-width", {
      duration: 100,
      easing: theme.transitions.easing.easeOut,
      delay: 50
    })
  })));
  function NotchedOutline(props) {
    const {
      className,
      label,
      notched
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded90);
    const withLabel = label != null && label !== "";
    const ownerState = _extends({}, props, {
      notched,
      withLabel
    });
    return /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(NotchedOutlineRoot, _extends({
      "aria-hidden": true,
      className,
      ownerState
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(NotchedOutlineLegend, {
        ownerState,
        children: withLabel ? /* @__PURE__ */ (0, import_jsx_runtime134.jsx)("span", {
          children: label
        }) : (
          // notranslate needed while Google Translate will not fix zero-width space issue
          _span || (_span = /* @__PURE__ */ (0, import_jsx_runtime134.jsx)("span", {
            className: "notranslate",
            children: "\u200B"
          }))
        )
      })
    }));
  }
  true ? NotchedOutline.propTypes = {
    /**
     * The content of the component.
     */
    children: import_prop_types95.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types95.default.object,
    /**
     * @ignore
     */
    className: import_prop_types95.default.string,
    /**
     * The label.
     */
    label: import_prop_types95.default.node,
    /**
     * If `true`, the outline is notched to accommodate the label.
     */
    notched: import_prop_types95.default.bool.isRequired,
    /**
     * @ignore
     */
    style: import_prop_types95.default.object
  } : void 0;

  // node_modules/@mui/material/OutlinedInput/OutlinedInput.js
  var import_jsx_runtime135 = __toESM(require_jsx_runtime());
  var import_jsx_runtime136 = __toESM(require_jsx_runtime());
  var _excluded91 = ["components", "fullWidth", "inputComponent", "label", "multiline", "notched", "slots", "type"];
  var useUtilityClasses53 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      notchedOutline: ["notchedOutline"],
      input: ["input"]
    };
    const composedClasses = composeClasses(slots, getOutlinedInputUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  var OutlinedInputRoot = styled_default2(InputBaseRoot, {
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    name: "MuiOutlinedInput",
    slot: "Root",
    overridesResolver: rootOverridesResolver
  })(({
    theme,
    ownerState
  }) => {
    const borderColor2 = theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
    return _extends({
      position: "relative",
      borderRadius: (theme.vars || theme).shape.borderRadius,
      [`&:hover .${outlinedInputClasses_default.notchedOutline}`]: {
        borderColor: (theme.vars || theme).palette.text.primary
      },
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        [`&:hover .${outlinedInputClasses_default.notchedOutline}`]: {
          borderColor: theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : borderColor2
        }
      },
      [`&.${outlinedInputClasses_default.focused} .${outlinedInputClasses_default.notchedOutline}`]: {
        borderColor: (theme.vars || theme).palette[ownerState.color].main,
        borderWidth: 2
      },
      [`&.${outlinedInputClasses_default.error} .${outlinedInputClasses_default.notchedOutline}`]: {
        borderColor: (theme.vars || theme).palette.error.main
      },
      [`&.${outlinedInputClasses_default.disabled} .${outlinedInputClasses_default.notchedOutline}`]: {
        borderColor: (theme.vars || theme).palette.action.disabled
      }
    }, ownerState.startAdornment && {
      paddingLeft: 14
    }, ownerState.endAdornment && {
      paddingRight: 14
    }, ownerState.multiline && _extends({
      padding: "16.5px 14px"
    }, ownerState.size === "small" && {
      padding: "8.5px 14px"
    }));
  });
  var NotchedOutlineRoot2 = styled_default2(NotchedOutline, {
    name: "MuiOutlinedInput",
    slot: "NotchedOutline",
    overridesResolver: (props, styles4) => styles4.notchedOutline
  })(({
    theme
  }) => {
    const borderColor2 = theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
    return {
      borderColor: theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : borderColor2
    };
  });
  var OutlinedInputInput = styled_default2(InputBaseComponent, {
    name: "MuiOutlinedInput",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })(({
    theme,
    ownerState
  }) => _extends({
    padding: "16.5px 14px"
  }, !theme.vars && {
    "&:-webkit-autofill": {
      WebkitBoxShadow: theme.palette.mode === "light" ? null : "0 0 0 100px #266798 inset",
      WebkitTextFillColor: theme.palette.mode === "light" ? null : "#fff",
      caretColor: theme.palette.mode === "light" ? null : "#fff",
      borderRadius: "inherit"
    }
  }, theme.vars && {
    "&:-webkit-autofill": {
      borderRadius: "inherit"
    },
    [theme.getColorSchemeSelector("dark")]: {
      "&:-webkit-autofill": {
        WebkitBoxShadow: "0 0 0 100px #266798 inset",
        WebkitTextFillColor: "#fff",
        caretColor: "#fff"
      }
    }
  }, ownerState.size === "small" && {
    padding: "8.5px 14px"
  }, ownerState.multiline && {
    padding: 0
  }, ownerState.startAdornment && {
    paddingLeft: 0
  }, ownerState.endAdornment && {
    paddingRight: 0
  }));
  var OutlinedInput = /* @__PURE__ */ React144.forwardRef(function OutlinedInput2(inProps, ref) {
    var _ref, _slots$root, _ref2, _slots$input, _React$Fragment;
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiOutlinedInput"
    });
    const {
      components = {},
      fullWidth = false,
      inputComponent = "input",
      label,
      multiline = false,
      notched,
      slots = {},
      type = "text"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded91);
    const classes = useUtilityClasses53(props);
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["color", "disabled", "error", "focused", "hiddenLabel", "size", "required"]
    });
    const ownerState = _extends({}, props, {
      color: fcs.color || "primary",
      disabled: fcs.disabled,
      error: fcs.error,
      focused: fcs.focused,
      formControl: muiFormControl,
      fullWidth,
      hiddenLabel: fcs.hiddenLabel,
      multiline,
      size: fcs.size,
      type
    });
    const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : OutlinedInputRoot;
    const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components.Input) != null ? _ref2 : OutlinedInputInput;
    return /* @__PURE__ */ (0, import_jsx_runtime136.jsx)(InputBase_default, _extends({
      slots: {
        root: RootSlot,
        input: InputSlot
      },
      renderSuffix: (state) => /* @__PURE__ */ (0, import_jsx_runtime136.jsx)(NotchedOutlineRoot2, {
        ownerState,
        className: classes.notchedOutline,
        label: label != null && label !== "" && fcs.required ? _React$Fragment || (_React$Fragment = /* @__PURE__ */ (0, import_jsx_runtime135.jsxs)(React144.Fragment, {
          children: [label, "\u2009", "*"]
        })) : label,
        notched: typeof notched !== "undefined" ? notched : Boolean(state.startAdornment || state.filled || state.focused)
      }),
      fullWidth,
      inputComponent,
      multiline,
      ref,
      type
    }, other, {
      classes: _extends({}, classes, {
        notchedOutline: null
      })
    }));
  });
  true ? OutlinedInput.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: import_prop_types96.default.string,
    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: import_prop_types96.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types96.default.object,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
     */
    color: import_prop_types96.default.oneOfType([import_prop_types96.default.oneOf(["primary", "secondary"]), import_prop_types96.default.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: import_prop_types96.default.shape({
      Input: import_prop_types96.default.elementType,
      Root: import_prop_types96.default.elementType
    }),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types96.default.any,
    /**
     * If `true`, the component is disabled.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    disabled: import_prop_types96.default.bool,
    /**
     * End `InputAdornment` for this component.
     */
    endAdornment: import_prop_types96.default.node,
    /**
     * If `true`, the `input` will indicate an error.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    error: import_prop_types96.default.bool,
    /**
     * If `true`, the `input` will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types96.default.bool,
    /**
     * The id of the `input` element.
     */
    id: import_prop_types96.default.string,
    /**
     * The component used for the `input` element.
     * Either a string to use a HTML element or a component.
     * @default 'input'
     */
    inputComponent: import_prop_types96.default.elementType,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * @default {}
     */
    inputProps: import_prop_types96.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType_default,
    /**
     * The label of the `input`. It is only used for layout. The actual labelling
     * is handled by `InputLabel`.
     */
    label: import_prop_types96.default.node,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
     */
    margin: import_prop_types96.default.oneOf(["dense", "none"]),
    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: import_prop_types96.default.oneOfType([import_prop_types96.default.number, import_prop_types96.default.string]),
    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: import_prop_types96.default.oneOfType([import_prop_types96.default.number, import_prop_types96.default.string]),
    /**
     * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.
     * @default false
     */
    multiline: import_prop_types96.default.bool,
    /**
     * Name attribute of the `input` element.
     */
    name: import_prop_types96.default.string,
    /**
     * If `true`, the outline is notched to accommodate the label.
     */
    notched: import_prop_types96.default.bool,
    /**
     * Callback fired when the value is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: import_prop_types96.default.func,
    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: import_prop_types96.default.string,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: import_prop_types96.default.bool,
    /**
     * If `true`, the `input` element is required.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    required: import_prop_types96.default.bool,
    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: import_prop_types96.default.oneOfType([import_prop_types96.default.number, import_prop_types96.default.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: import_prop_types96.default.shape({
      input: import_prop_types96.default.elementType,
      root: import_prop_types96.default.elementType
    }),
    /**
     * Start `InputAdornment` for this component.
     */
    startAdornment: import_prop_types96.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types96.default.oneOfType([import_prop_types96.default.arrayOf(import_prop_types96.default.oneOfType([import_prop_types96.default.func, import_prop_types96.default.object, import_prop_types96.default.bool])), import_prop_types96.default.func, import_prop_types96.default.object]),
    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     * @default 'text'
     */
    type: import_prop_types96.default.string,
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: import_prop_types96.default.any
  } : void 0;
  OutlinedInput.muiName = "Input";
  var OutlinedInput_default = OutlinedInput;

  // node_modules/@mui/material/InputLabel/InputLabel.js
  init_extends();
  var React146 = __toESM(require_react());
  var import_prop_types98 = __toESM(require_prop_types());

  // node_modules/@mui/material/FormLabel/FormLabel.js
  init_extends();
  var React145 = __toESM(require_react());
  var import_prop_types97 = __toESM(require_prop_types());

  // node_modules/@mui/material/FormLabel/formLabelClasses.js
  function getFormLabelUtilityClasses(slot) {
    return generateUtilityClass("MuiFormLabel", slot);
  }
  var formLabelClasses = generateUtilityClasses("MuiFormLabel", ["root", "colorSecondary", "focused", "disabled", "error", "filled", "required", "asterisk"]);
  var formLabelClasses_default = formLabelClasses;

  // node_modules/@mui/material/FormLabel/FormLabel.js
  var import_jsx_runtime137 = __toESM(require_jsx_runtime());
  var _excluded92 = ["children", "className", "color", "component", "disabled", "error", "filled", "focused", "required"];
  var useUtilityClasses54 = (ownerState) => {
    const {
      classes,
      color: color2,
      focused,
      disabled,
      error,
      filled,
      required
    } = ownerState;
    const slots = {
      root: ["root", `color${capitalize_default(color2)}`, disabled && "disabled", error && "error", filled && "filled", focused && "focused", required && "required"],
      asterisk: ["asterisk", error && "error"]
    };
    return composeClasses(slots, getFormLabelUtilityClasses, classes);
  };
  var FormLabelRoot = styled_default2("label", {
    name: "MuiFormLabel",
    slot: "Root",
    overridesResolver: ({
      ownerState
    }, styles4) => {
      return _extends({}, styles4.root, ownerState.color === "secondary" && styles4.colorSecondary, ownerState.filled && styles4.filled);
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    color: (theme.vars || theme).palette.text.secondary
  }, theme.typography.body1, {
    lineHeight: "1.4375em",
    padding: 0,
    position: "relative",
    [`&.${formLabelClasses_default.focused}`]: {
      color: (theme.vars || theme).palette[ownerState.color].main
    },
    [`&.${formLabelClasses_default.disabled}`]: {
      color: (theme.vars || theme).palette.text.disabled
    },
    [`&.${formLabelClasses_default.error}`]: {
      color: (theme.vars || theme).palette.error.main
    }
  }));
  var AsteriskComponent2 = styled_default2("span", {
    name: "MuiFormLabel",
    slot: "Asterisk",
    overridesResolver: (props, styles4) => styles4.asterisk
  })(({
    theme
  }) => ({
    [`&.${formLabelClasses_default.error}`]: {
      color: (theme.vars || theme).palette.error.main
    }
  }));
  var FormLabel = /* @__PURE__ */ React145.forwardRef(function FormLabel2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiFormLabel"
    });
    const {
      children,
      className,
      component = "label"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded92);
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["color", "required", "focused", "disabled", "error", "filled"]
    });
    const ownerState = _extends({}, props, {
      color: fcs.color || "primary",
      component,
      disabled: fcs.disabled,
      error: fcs.error,
      filled: fcs.filled,
      focused: fcs.focused,
      required: fcs.required
    });
    const classes = useUtilityClasses54(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime137.jsxs)(FormLabelRoot, _extends({
      as: component,
      ownerState,
      className: clsx_default(classes.root, className),
      ref
    }, other, {
      children: [children, fcs.required && /* @__PURE__ */ (0, import_jsx_runtime137.jsxs)(AsteriskComponent2, {
        ownerState,
        "aria-hidden": true,
        className: classes.asterisk,
        children: ["\u2009", "*"]
      })]
    }));
  });
  true ? FormLabel.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types97.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types97.default.object,
    /**
     * @ignore
     */
    className: import_prop_types97.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     */
    color: import_prop_types97.default.oneOfType([import_prop_types97.default.oneOf(["error", "info", "primary", "secondary", "success", "warning"]), import_prop_types97.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types97.default.elementType,
    /**
     * If `true`, the label should be displayed in a disabled state.
     */
    disabled: import_prop_types97.default.bool,
    /**
     * If `true`, the label is displayed in an error state.
     */
    error: import_prop_types97.default.bool,
    /**
     * If `true`, the label should use filled classes key.
     */
    filled: import_prop_types97.default.bool,
    /**
     * If `true`, the input of this label is focused (used by `FormGroup` components).
     */
    focused: import_prop_types97.default.bool,
    /**
     * If `true`, the label will indicate that the `input` is required.
     */
    required: import_prop_types97.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types97.default.oneOfType([import_prop_types97.default.arrayOf(import_prop_types97.default.oneOfType([import_prop_types97.default.func, import_prop_types97.default.object, import_prop_types97.default.bool])), import_prop_types97.default.func, import_prop_types97.default.object])
  } : void 0;
  var FormLabel_default = FormLabel;

  // node_modules/@mui/material/InputLabel/inputLabelClasses.js
  function getInputLabelUtilityClasses(slot) {
    return generateUtilityClass("MuiInputLabel", slot);
  }
  var inputLabelClasses = generateUtilityClasses("MuiInputLabel", ["root", "focused", "disabled", "error", "required", "asterisk", "formControl", "sizeSmall", "shrink", "animated", "standard", "filled", "outlined"]);

  // node_modules/@mui/material/InputLabel/InputLabel.js
  var import_jsx_runtime138 = __toESM(require_jsx_runtime());
  var _excluded93 = ["disableAnimation", "margin", "shrink", "variant", "className"];
  var useUtilityClasses55 = (ownerState) => {
    const {
      classes,
      formControl,
      size,
      shrink,
      disableAnimation,
      variant,
      required
    } = ownerState;
    const slots = {
      root: ["root", formControl && "formControl", !disableAnimation && "animated", shrink && "shrink", size && size !== "normal" && `size${capitalize_default(size)}`, variant],
      asterisk: [required && "asterisk"]
    };
    const composedClasses = composeClasses(slots, getInputLabelUtilityClasses, classes);
    return _extends({}, classes, composedClasses);
  };
  var InputLabelRoot = styled_default2(FormLabel_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    name: "MuiInputLabel",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${formLabelClasses_default.asterisk}`]: styles4.asterisk
      }, styles4.root, ownerState.formControl && styles4.formControl, ownerState.size === "small" && styles4.sizeSmall, ownerState.shrink && styles4.shrink, !ownerState.disableAnimation && styles4.animated, ownerState.focused && styles4.focused, styles4[ownerState.variant]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    display: "block",
    transformOrigin: "top left",
    whiteSpace: "nowrap",
    overflow: "hidden",
    textOverflow: "ellipsis",
    maxWidth: "100%"
  }, ownerState.formControl && {
    position: "absolute",
    left: 0,
    top: 0,
    // slight alteration to spec spacing to match visual spec result
    transform: "translate(0, 20px) scale(1)"
  }, ownerState.size === "small" && {
    // Compensation for the `Input.inputSizeSmall` style.
    transform: "translate(0, 17px) scale(1)"
  }, ownerState.shrink && {
    transform: "translate(0, -1.5px) scale(0.75)",
    transformOrigin: "top left",
    maxWidth: "133%"
  }, !ownerState.disableAnimation && {
    transition: theme.transitions.create(["color", "transform", "max-width"], {
      duration: theme.transitions.duration.shorter,
      easing: theme.transitions.easing.easeOut
    })
  }, ownerState.variant === "filled" && _extends({
    // Chrome's autofill feature gives the input field a yellow background.
    // Since the input field is behind the label in the HTML tree,
    // the input field is drawn last and hides the label with an opaque background color.
    // zIndex: 1 will raise the label above opaque background-colors of input.
    zIndex: 1,
    pointerEvents: "none",
    transform: "translate(12px, 16px) scale(1)",
    maxWidth: "calc(100% - 24px)"
  }, ownerState.size === "small" && {
    transform: "translate(12px, 13px) scale(1)"
  }, ownerState.shrink && _extends({
    userSelect: "none",
    pointerEvents: "auto",
    transform: "translate(12px, 7px) scale(0.75)",
    maxWidth: "calc(133% - 24px)"
  }, ownerState.size === "small" && {
    transform: "translate(12px, 4px) scale(0.75)"
  })), ownerState.variant === "outlined" && _extends({
    // see comment above on filled.zIndex
    zIndex: 1,
    pointerEvents: "none",
    transform: "translate(14px, 16px) scale(1)",
    maxWidth: "calc(100% - 24px)"
  }, ownerState.size === "small" && {
    transform: "translate(14px, 9px) scale(1)"
  }, ownerState.shrink && {
    userSelect: "none",
    pointerEvents: "auto",
    // Theoretically, we should have (8+5)*2/0.75 = 34px
    // but it feels a better when it bleeds a bit on the left, so 32px.
    maxWidth: "calc(133% - 32px)",
    transform: "translate(14px, -9px) scale(0.75)"
  })));
  var InputLabel = /* @__PURE__ */ React146.forwardRef(function InputLabel2(inProps, ref) {
    const props = useDefaultProps2({
      name: "MuiInputLabel",
      props: inProps
    });
    const {
      disableAnimation = false,
      shrink: shrinkProp,
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded93);
    const muiFormControl = useFormControl();
    let shrink = shrinkProp;
    if (typeof shrink === "undefined" && muiFormControl) {
      shrink = muiFormControl.filled || muiFormControl.focused || muiFormControl.adornedStart;
    }
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["size", "variant", "required", "focused"]
    });
    const ownerState = _extends({}, props, {
      disableAnimation,
      formControl: muiFormControl,
      shrink,
      size: fcs.size,
      variant: fcs.variant,
      required: fcs.required,
      focused: fcs.focused
    });
    const classes = useUtilityClasses55(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime138.jsx)(InputLabelRoot, _extends({
      "data-shrink": shrink,
      ownerState,
      ref,
      className: clsx_default(classes.root, className)
    }, other, {
      classes
    }));
  });
  true ? InputLabel.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types98.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types98.default.object,
    /**
     * @ignore
     */
    className: import_prop_types98.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     */
    color: import_prop_types98.default.oneOfType([import_prop_types98.default.oneOf(["error", "info", "primary", "secondary", "success", "warning"]), import_prop_types98.default.string]),
    /**
     * If `true`, the transition animation is disabled.
     * @default false
     */
    disableAnimation: import_prop_types98.default.bool,
    /**
     * If `true`, the component is disabled.
     */
    disabled: import_prop_types98.default.bool,
    /**
     * If `true`, the label is displayed in an error state.
     */
    error: import_prop_types98.default.bool,
    /**
     * If `true`, the `input` of this label is focused.
     */
    focused: import_prop_types98.default.bool,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     */
    margin: import_prop_types98.default.oneOf(["dense"]),
    /**
     * if `true`, the label will indicate that the `input` is required.
     */
    required: import_prop_types98.default.bool,
    /**
     * If `true`, the label is shrunk.
     */
    shrink: import_prop_types98.default.bool,
    /**
     * The size of the component.
     * @default 'normal'
     */
    size: import_prop_types98.default.oneOfType([import_prop_types98.default.oneOf(["normal", "small"]), import_prop_types98.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types98.default.oneOfType([import_prop_types98.default.arrayOf(import_prop_types98.default.oneOfType([import_prop_types98.default.func, import_prop_types98.default.object, import_prop_types98.default.bool])), import_prop_types98.default.func, import_prop_types98.default.object]),
    /**
     * The variant to use.
     */
    variant: import_prop_types98.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  var InputLabel_default = InputLabel;

  // node_modules/@mui/material/FormHelperText/FormHelperText.js
  init_extends();
  var React147 = __toESM(require_react());
  var import_prop_types99 = __toESM(require_prop_types());

  // node_modules/@mui/material/FormHelperText/formHelperTextClasses.js
  function getFormHelperTextUtilityClasses(slot) {
    return generateUtilityClass("MuiFormHelperText", slot);
  }
  var formHelperTextClasses = generateUtilityClasses("MuiFormHelperText", ["root", "error", "disabled", "sizeSmall", "sizeMedium", "contained", "focused", "filled", "required"]);
  var formHelperTextClasses_default = formHelperTextClasses;

  // node_modules/@mui/material/FormHelperText/FormHelperText.js
  var import_jsx_runtime139 = __toESM(require_jsx_runtime());
  var _span2;
  var _excluded94 = ["children", "className", "component", "disabled", "error", "filled", "focused", "margin", "required", "variant"];
  var useUtilityClasses56 = (ownerState) => {
    const {
      classes,
      contained,
      size,
      disabled,
      error,
      filled,
      focused,
      required
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", error && "error", size && `size${capitalize_default(size)}`, contained && "contained", focused && "focused", filled && "filled", required && "required"]
    };
    return composeClasses(slots, getFormHelperTextUtilityClasses, classes);
  };
  var FormHelperTextRoot = styled_default2("p", {
    name: "MuiFormHelperText",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, ownerState.size && styles4[`size${capitalize_default(ownerState.size)}`], ownerState.contained && styles4.contained, ownerState.filled && styles4.filled];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    color: (theme.vars || theme).palette.text.secondary
  }, theme.typography.caption, {
    textAlign: "left",
    marginTop: 3,
    marginRight: 0,
    marginBottom: 0,
    marginLeft: 0,
    [`&.${formHelperTextClasses_default.disabled}`]: {
      color: (theme.vars || theme).palette.text.disabled
    },
    [`&.${formHelperTextClasses_default.error}`]: {
      color: (theme.vars || theme).palette.error.main
    }
  }, ownerState.size === "small" && {
    marginTop: 4
  }, ownerState.contained && {
    marginLeft: 14,
    marginRight: 14
  }));
  var FormHelperText = /* @__PURE__ */ React147.forwardRef(function FormHelperText2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiFormHelperText"
    });
    const {
      children,
      className,
      component = "p"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded94);
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["variant", "size", "disabled", "error", "filled", "focused", "required"]
    });
    const ownerState = _extends({}, props, {
      component,
      contained: fcs.variant === "filled" || fcs.variant === "outlined",
      variant: fcs.variant,
      size: fcs.size,
      disabled: fcs.disabled,
      error: fcs.error,
      filled: fcs.filled,
      focused: fcs.focused,
      required: fcs.required
    });
    const classes = useUtilityClasses56(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(FormHelperTextRoot, _extends({
      as: component,
      ownerState,
      className: clsx_default(classes.root, className),
      ref
    }, other, {
      children: children === " " ? (
        // notranslate needed while Google Translate will not fix zero-width space issue
        _span2 || (_span2 = /* @__PURE__ */ (0, import_jsx_runtime139.jsx)("span", {
          className: "notranslate",
          children: "\u200B"
        }))
      ) : children
    }));
  });
  true ? FormHelperText.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     *
     * If `' '` is provided, the component reserves one line height for displaying a future message.
     */
    children: import_prop_types99.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types99.default.object,
    /**
     * @ignore
     */
    className: import_prop_types99.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types99.default.elementType,
    /**
     * If `true`, the helper text should be displayed in a disabled state.
     */
    disabled: import_prop_types99.default.bool,
    /**
     * If `true`, helper text should be displayed in an error state.
     */
    error: import_prop_types99.default.bool,
    /**
     * If `true`, the helper text should use filled classes key.
     */
    filled: import_prop_types99.default.bool,
    /**
     * If `true`, the helper text should use focused classes key.
     */
    focused: import_prop_types99.default.bool,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     */
    margin: import_prop_types99.default.oneOf(["dense"]),
    /**
     * If `true`, the helper text should use required classes key.
     */
    required: import_prop_types99.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types99.default.oneOfType([import_prop_types99.default.arrayOf(import_prop_types99.default.oneOfType([import_prop_types99.default.func, import_prop_types99.default.object, import_prop_types99.default.bool])), import_prop_types99.default.func, import_prop_types99.default.object]),
    /**
     * The variant to use.
     */
    variant: import_prop_types99.default.oneOfType([import_prop_types99.default.oneOf(["filled", "outlined", "standard"]), import_prop_types99.default.string])
  } : void 0;
  var FormHelperText_default = FormHelperText;

  // node_modules/@mui/material/Select/Select.js
  init_extends();
  var React156 = __toESM(require_react());
  var import_prop_types107 = __toESM(require_prop_types());
  var import_deepmerge12 = __toESM(require_deepmerge2());

  // node_modules/@mui/material/Select/SelectInput.js
  init_extends();
  var React155 = __toESM(require_react());
  var import_react_is3 = __toESM(require_react_is2());
  var import_prop_types106 = __toESM(require_prop_types());

  // node_modules/@mui/material/Menu/Menu.js
  init_extends();
  var React153 = __toESM(require_react());
  var import_react_is2 = __toESM(require_react_is2());
  var import_prop_types104 = __toESM(require_prop_types());

  // node_modules/@mui/material/Popover/Popover.js
  init_extends();
  var React152 = __toESM(require_react());
  var import_prop_types103 = __toESM(require_prop_types());

  // node_modules/@mui/material/Modal/ModalManager.js
  function isOverflowing(container) {
    const doc = ownerDocument(container);
    if (doc.body === container) {
      return ownerWindow(container).innerWidth > doc.documentElement.clientWidth;
    }
    return container.scrollHeight > container.clientHeight;
  }
  function ariaHidden(element, show) {
    if (show) {
      element.setAttribute("aria-hidden", "true");
    } else {
      element.removeAttribute("aria-hidden");
    }
  }
  function getPaddingRight(element) {
    return parseInt(ownerWindow(element).getComputedStyle(element).paddingRight, 10) || 0;
  }
  function isAriaHiddenForbiddenOnElement(element) {
    const forbiddenTagNames = ["TEMPLATE", "SCRIPT", "STYLE", "LINK", "MAP", "META", "NOSCRIPT", "PICTURE", "COL", "COLGROUP", "PARAM", "SLOT", "SOURCE", "TRACK"];
    const isForbiddenTagName = forbiddenTagNames.indexOf(element.tagName) !== -1;
    const isInputHidden = element.tagName === "INPUT" && element.getAttribute("type") === "hidden";
    return isForbiddenTagName || isInputHidden;
  }
  function ariaHiddenSiblings(container, mountElement, currentElement, elementsToExclude, show) {
    const blacklist = [mountElement, currentElement, ...elementsToExclude];
    [].forEach.call(container.children, (element) => {
      const isNotExcludedElement = blacklist.indexOf(element) === -1;
      const isNotForbiddenElement = !isAriaHiddenForbiddenOnElement(element);
      if (isNotExcludedElement && isNotForbiddenElement) {
        ariaHidden(element, show);
      }
    });
  }
  function findIndexOf(items, callback) {
    let idx = -1;
    items.some((item, index) => {
      if (callback(item)) {
        idx = index;
        return true;
      }
      return false;
    });
    return idx;
  }
  function handleContainer(containerInfo, props) {
    const restoreStyle = [];
    const container = containerInfo.container;
    if (!props.disableScrollLock) {
      if (isOverflowing(container)) {
        const scrollbarSize = getScrollbarSize(ownerDocument(container));
        restoreStyle.push({
          value: container.style.paddingRight,
          property: "padding-right",
          el: container
        });
        container.style.paddingRight = `${getPaddingRight(container) + scrollbarSize}px`;
        const fixedElements2 = ownerDocument(container).querySelectorAll(".mui-fixed");
        [].forEach.call(fixedElements2, (element) => {
          restoreStyle.push({
            value: element.style.paddingRight,
            property: "padding-right",
            el: element
          });
          element.style.paddingRight = `${getPaddingRight(element) + scrollbarSize}px`;
        });
      }
      let scrollContainer;
      if (container.parentNode instanceof DocumentFragment) {
        scrollContainer = ownerDocument(container).body;
      } else {
        const parent = container.parentElement;
        const containerWindow = ownerWindow(container);
        scrollContainer = (parent == null ? void 0 : parent.nodeName) === "HTML" && containerWindow.getComputedStyle(parent).overflowY === "scroll" ? parent : container;
      }
      restoreStyle.push({
        value: scrollContainer.style.overflow,
        property: "overflow",
        el: scrollContainer
      }, {
        value: scrollContainer.style.overflowX,
        property: "overflow-x",
        el: scrollContainer
      }, {
        value: scrollContainer.style.overflowY,
        property: "overflow-y",
        el: scrollContainer
      });
      scrollContainer.style.overflow = "hidden";
    }
    const restore = () => {
      restoreStyle.forEach(({
        value,
        el,
        property
      }) => {
        if (value) {
          el.style.setProperty(property, value);
        } else {
          el.style.removeProperty(property);
        }
      });
    };
    return restore;
  }
  function getHiddenSiblings(container) {
    const hiddenSiblings = [];
    [].forEach.call(container.children, (element) => {
      if (element.getAttribute("aria-hidden") === "true") {
        hiddenSiblings.push(element);
      }
    });
    return hiddenSiblings;
  }
  var ModalManager = class {
    constructor() {
      this.containers = void 0;
      this.modals = void 0;
      this.modals = [];
      this.containers = [];
    }
    add(modal, container) {
      let modalIndex = this.modals.indexOf(modal);
      if (modalIndex !== -1) {
        return modalIndex;
      }
      modalIndex = this.modals.length;
      this.modals.push(modal);
      if (modal.modalRef) {
        ariaHidden(modal.modalRef, false);
      }
      const hiddenSiblings = getHiddenSiblings(container);
      ariaHiddenSiblings(container, modal.mount, modal.modalRef, hiddenSiblings, true);
      const containerIndex = findIndexOf(this.containers, (item) => item.container === container);
      if (containerIndex !== -1) {
        this.containers[containerIndex].modals.push(modal);
        return modalIndex;
      }
      this.containers.push({
        modals: [modal],
        container,
        restore: null,
        hiddenSiblings
      });
      return modalIndex;
    }
    mount(modal, props) {
      const containerIndex = findIndexOf(this.containers, (item) => item.modals.indexOf(modal) !== -1);
      const containerInfo = this.containers[containerIndex];
      if (!containerInfo.restore) {
        containerInfo.restore = handleContainer(containerInfo, props);
      }
    }
    remove(modal, ariaHiddenState = true) {
      const modalIndex = this.modals.indexOf(modal);
      if (modalIndex === -1) {
        return modalIndex;
      }
      const containerIndex = findIndexOf(this.containers, (item) => item.modals.indexOf(modal) !== -1);
      const containerInfo = this.containers[containerIndex];
      containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);
      this.modals.splice(modalIndex, 1);
      if (containerInfo.modals.length === 0) {
        if (containerInfo.restore) {
          containerInfo.restore();
        }
        if (modal.modalRef) {
          ariaHidden(modal.modalRef, ariaHiddenState);
        }
        ariaHiddenSiblings(containerInfo.container, modal.mount, modal.modalRef, containerInfo.hiddenSiblings, false);
        this.containers.splice(containerIndex, 1);
      } else {
        const nextTop = containerInfo.modals[containerInfo.modals.length - 1];
        if (nextTop.modalRef) {
          ariaHidden(nextTop.modalRef, false);
        }
      }
      return modalIndex;
    }
    isTopModal(modal) {
      return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;
    }
  };

  // node_modules/@mui/material/Modal/Modal.js
  init_extends();
  var React151 = __toESM(require_react());
  var import_prop_types102 = __toESM(require_prop_types());

  // node_modules/@mui/material/Backdrop/Backdrop.js
  init_extends();
  var React149 = __toESM(require_react());
  var import_prop_types101 = __toESM(require_prop_types());

  // node_modules/@mui/material/Fade/Fade.js
  init_extends();
  var React148 = __toESM(require_react());
  var import_prop_types100 = __toESM(require_prop_types());
  var import_jsx_runtime140 = __toESM(require_jsx_runtime());
  var _excluded95 = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
  var styles3 = {
    entering: {
      opacity: 1
    },
    entered: {
      opacity: 1
    }
  };
  var Fade = /* @__PURE__ */ React148.forwardRef(function Fade2(props, ref) {
    const theme = useTheme5();
    const defaultTimeout = {
      enter: theme.transitions.duration.enteringScreen,
      exit: theme.transitions.duration.leavingScreen
    };
    const {
      addEndListener,
      appear = true,
      children,
      easing: easing2,
      in: inProp,
      onEnter,
      onEntered,
      onEntering,
      onExit,
      onExited,
      onExiting,
      style: style4,
      timeout: timeout2 = defaultTimeout,
      // eslint-disable-next-line react/prop-types
      TransitionComponent = Transition_default
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded95);
    const enableStrictModeCompat = true;
    const nodeRef = React148.useRef(null);
    const handleRef = useForkRef_default(nodeRef, getReactElementRef(children), ref);
    const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
      if (callback) {
        const node2 = nodeRef.current;
        if (maybeIsAppearing === void 0) {
          callback(node2);
        } else {
          callback(node2, maybeIsAppearing);
        }
      }
    };
    const handleEntering = normalizedTransitionCallback(onEntering);
    const handleEnter = normalizedTransitionCallback((node2, isAppearing) => {
      reflow(node2);
      const transitionProps = getTransitionProps({
        style: style4,
        timeout: timeout2,
        easing: easing2
      }, {
        mode: "enter"
      });
      node2.style.webkitTransition = theme.transitions.create("opacity", transitionProps);
      node2.style.transition = theme.transitions.create("opacity", transitionProps);
      if (onEnter) {
        onEnter(node2, isAppearing);
      }
    });
    const handleEntered = normalizedTransitionCallback(onEntered);
    const handleExiting = normalizedTransitionCallback(onExiting);
    const handleExit = normalizedTransitionCallback((node2) => {
      const transitionProps = getTransitionProps({
        style: style4,
        timeout: timeout2,
        easing: easing2
      }, {
        mode: "exit"
      });
      node2.style.webkitTransition = theme.transitions.create("opacity", transitionProps);
      node2.style.transition = theme.transitions.create("opacity", transitionProps);
      if (onExit) {
        onExit(node2);
      }
    });
    const handleExited = normalizedTransitionCallback(onExited);
    const handleAddEndListener = (next2) => {
      if (addEndListener) {
        addEndListener(nodeRef.current, next2);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime140.jsx)(TransitionComponent, _extends({
      appear,
      in: inProp,
      nodeRef: enableStrictModeCompat ? nodeRef : void 0,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      timeout: timeout2
    }, other, {
      children: (state, childProps) => {
        return /* @__PURE__ */ React148.cloneElement(children, _extends({
          style: _extends({
            opacity: 0,
            visibility: state === "exited" && !inProp ? "hidden" : void 0
          }, styles3[state], style4, children.props.style),
          ref: handleRef
        }, childProps));
      }
    }));
  });
  true ? Fade.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Add a custom transition end trigger. Called with the transitioning DOM
     * node and a done callback. Allows for more fine grained transition end
     * logic. Note: Timeouts are still used as a fallback if provided.
     */
    addEndListener: import_prop_types100.default.func,
    /**
     * Perform the enter transition when it first mounts if `in` is also `true`.
     * Set this to `false` to disable this behavior.
     * @default true
     */
    appear: import_prop_types100.default.bool,
    /**
     * A single child content element.
     */
    children: elementAcceptingRef_default.isRequired,
    /**
     * The transition timing function.
     * You may specify a single easing or a object containing enter and exit values.
     */
    easing: import_prop_types100.default.oneOfType([import_prop_types100.default.shape({
      enter: import_prop_types100.default.string,
      exit: import_prop_types100.default.string
    }), import_prop_types100.default.string]),
    /**
     * If `true`, the component will transition in.
     */
    in: import_prop_types100.default.bool,
    /**
     * @ignore
     */
    onEnter: import_prop_types100.default.func,
    /**
     * @ignore
     */
    onEntered: import_prop_types100.default.func,
    /**
     * @ignore
     */
    onEntering: import_prop_types100.default.func,
    /**
     * @ignore
     */
    onExit: import_prop_types100.default.func,
    /**
     * @ignore
     */
    onExited: import_prop_types100.default.func,
    /**
     * @ignore
     */
    onExiting: import_prop_types100.default.func,
    /**
     * @ignore
     */
    style: import_prop_types100.default.object,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     * @default {
     *   enter: theme.transitions.duration.enteringScreen,
     *   exit: theme.transitions.duration.leavingScreen,
     * }
     */
    timeout: import_prop_types100.default.oneOfType([import_prop_types100.default.number, import_prop_types100.default.shape({
      appear: import_prop_types100.default.number,
      enter: import_prop_types100.default.number,
      exit: import_prop_types100.default.number
    })])
  } : void 0;
  var Fade_default = Fade;

  // node_modules/@mui/material/Backdrop/backdropClasses.js
  function getBackdropUtilityClass(slot) {
    return generateUtilityClass("MuiBackdrop", slot);
  }
  var backdropClasses = generateUtilityClasses("MuiBackdrop", ["root", "invisible"]);

  // node_modules/@mui/material/Backdrop/Backdrop.js
  var import_jsx_runtime141 = __toESM(require_jsx_runtime());
  var _excluded96 = ["children", "className", "component", "components", "componentsProps", "invisible", "open", "slotProps", "slots", "TransitionComponent", "transitionDuration"];
  var useUtilityClasses57 = (ownerState) => {
    const {
      classes,
      invisible
    } = ownerState;
    const slots = {
      root: ["root", invisible && "invisible"]
    };
    return composeClasses(slots, getBackdropUtilityClass, classes);
  };
  var BackdropRoot = styled_default2("div", {
    name: "MuiBackdrop",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, ownerState.invisible && styles4.invisible];
    }
  })(({
    ownerState
  }) => _extends({
    position: "fixed",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    right: 0,
    bottom: 0,
    top: 0,
    left: 0,
    backgroundColor: "rgba(0, 0, 0, 0.5)",
    WebkitTapHighlightColor: "transparent"
  }, ownerState.invisible && {
    backgroundColor: "transparent"
  }));
  var Backdrop = /* @__PURE__ */ React149.forwardRef(function Backdrop2(inProps, ref) {
    var _slotProps$root, _ref, _slots$root;
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiBackdrop"
    });
    const {
      children,
      className,
      component = "div",
      components = {},
      componentsProps = {},
      invisible = false,
      open,
      slotProps = {},
      slots = {},
      TransitionComponent = Fade_default,
      transitionDuration
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded96);
    const ownerState = _extends({}, props, {
      component,
      invisible
    });
    const classes = useUtilityClasses57(ownerState);
    const rootSlotProps = (_slotProps$root = slotProps.root) != null ? _slotProps$root : componentsProps.root;
    return /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(TransitionComponent, _extends({
      in: open,
      timeout: transitionDuration
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(BackdropRoot, _extends({
        "aria-hidden": true
      }, rootSlotProps, {
        as: (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : component,
        className: clsx_default(classes.root, className, rootSlotProps == null ? void 0 : rootSlotProps.className),
        ownerState: _extends({}, ownerState, rootSlotProps == null ? void 0 : rootSlotProps.ownerState),
        classes,
        ref,
        children
      }))
    }));
  });
  true ? Backdrop.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types101.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types101.default.object,
    /**
     * @ignore
     */
    className: import_prop_types101.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types101.default.elementType,
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: import_prop_types101.default.shape({
      Root: import_prop_types101.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: import_prop_types101.default.shape({
      root: import_prop_types101.default.object
    }),
    /**
     * If `true`, the backdrop is invisible.
     * It can be used when rendering a popover or a custom select component.
     * @default false
     */
    invisible: import_prop_types101.default.bool,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types101.default.bool.isRequired,
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: import_prop_types101.default.shape({
      root: import_prop_types101.default.object
    }),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: import_prop_types101.default.shape({
      root: import_prop_types101.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types101.default.oneOfType([import_prop_types101.default.arrayOf(import_prop_types101.default.oneOfType([import_prop_types101.default.func, import_prop_types101.default.object, import_prop_types101.default.bool])), import_prop_types101.default.func, import_prop_types101.default.object]),
    /**
     * The component used for the transition.
     * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
     * @default Fade
     */
    TransitionComponent: import_prop_types101.default.elementType,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     */
    transitionDuration: import_prop_types101.default.oneOfType([import_prop_types101.default.number, import_prop_types101.default.shape({
      appear: import_prop_types101.default.number,
      enter: import_prop_types101.default.number,
      exit: import_prop_types101.default.number
    })])
  } : void 0;
  var Backdrop_default = Backdrop;

  // node_modules/@mui/material/Modal/useModal.js
  init_extends();
  var React150 = __toESM(require_react());
  function getContainer2(container) {
    return typeof container === "function" ? container() : container;
  }
  function getHasTransition(children) {
    return children ? children.props.hasOwnProperty("in") : false;
  }
  var defaultManager = new ModalManager();
  function useModal(parameters) {
    const {
      container,
      disableEscapeKeyDown = false,
      disableScrollLock = false,
      // @ts-ignore internal logic - Base UI supports the manager as a prop too
      manager = defaultManager,
      closeAfterTransition = false,
      onTransitionEnter,
      onTransitionExited,
      children,
      onClose,
      open,
      rootRef
    } = parameters;
    const modal = React150.useRef({});
    const mountNodeRef = React150.useRef(null);
    const modalRef = React150.useRef(null);
    const handleRef = useForkRef(modalRef, rootRef);
    const [exited, setExited] = React150.useState(!open);
    const hasTransition = getHasTransition(children);
    let ariaHiddenProp = true;
    if (parameters["aria-hidden"] === "false" || parameters["aria-hidden"] === false) {
      ariaHiddenProp = false;
    }
    const getDoc = () => ownerDocument(mountNodeRef.current);
    const getModal = () => {
      modal.current.modalRef = modalRef.current;
      modal.current.mount = mountNodeRef.current;
      return modal.current;
    };
    const handleMounted = () => {
      manager.mount(getModal(), {
        disableScrollLock
      });
      if (modalRef.current) {
        modalRef.current.scrollTop = 0;
      }
    };
    const handleOpen = useEventCallback_default(() => {
      const resolvedContainer = getContainer2(container) || getDoc().body;
      manager.add(getModal(), resolvedContainer);
      if (modalRef.current) {
        handleMounted();
      }
    });
    const isTopModal = React150.useCallback(() => manager.isTopModal(getModal()), [manager]);
    const handlePortalRef = useEventCallback_default((node2) => {
      mountNodeRef.current = node2;
      if (!node2) {
        return;
      }
      if (open && isTopModal()) {
        handleMounted();
      } else if (modalRef.current) {
        ariaHidden(modalRef.current, ariaHiddenProp);
      }
    });
    const handleClose = React150.useCallback(() => {
      manager.remove(getModal(), ariaHiddenProp);
    }, [ariaHiddenProp, manager]);
    React150.useEffect(() => {
      return () => {
        handleClose();
      };
    }, [handleClose]);
    React150.useEffect(() => {
      if (open) {
        handleOpen();
      } else if (!hasTransition || !closeAfterTransition) {
        handleClose();
      }
    }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);
    const createHandleKeyDown = (otherHandlers) => (event) => {
      var _otherHandlers$onKeyD;
      (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);
      if (event.key !== "Escape" || event.which === 229 || // Wait until IME is settled.
      !isTopModal()) {
        return;
      }
      if (!disableEscapeKeyDown) {
        event.stopPropagation();
        if (onClose) {
          onClose(event, "escapeKeyDown");
        }
      }
    };
    const createHandleBackdropClick = (otherHandlers) => (event) => {
      var _otherHandlers$onClic;
      (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);
      if (event.target !== event.currentTarget) {
        return;
      }
      if (onClose) {
        onClose(event, "backdropClick");
      }
    };
    const getRootProps = (otherHandlers = {}) => {
      const propsEventHandlers = extractEventHandlers_default(parameters);
      delete propsEventHandlers.onTransitionEnter;
      delete propsEventHandlers.onTransitionExited;
      const externalEventHandlers = _extends({}, propsEventHandlers, otherHandlers);
      return _extends({
        role: "presentation"
      }, externalEventHandlers, {
        onKeyDown: createHandleKeyDown(externalEventHandlers),
        ref: handleRef
      });
    };
    const getBackdropProps = (otherHandlers = {}) => {
      const externalEventHandlers = otherHandlers;
      return _extends({
        "aria-hidden": true
      }, externalEventHandlers, {
        onClick: createHandleBackdropClick(externalEventHandlers),
        open
      });
    };
    const getTransitionProps2 = () => {
      const handleEnter = () => {
        setExited(false);
        if (onTransitionEnter) {
          onTransitionEnter();
        }
      };
      const handleExited = () => {
        setExited(true);
        if (onTransitionExited) {
          onTransitionExited();
        }
        if (closeAfterTransition) {
          handleClose();
        }
      };
      return {
        onEnter: createChainedFunction(handleEnter, children == null ? void 0 : children.props.onEnter),
        onExited: createChainedFunction(handleExited, children == null ? void 0 : children.props.onExited)
      };
    };
    return {
      getRootProps,
      getBackdropProps,
      getTransitionProps: getTransitionProps2,
      rootRef: handleRef,
      portalRef: handlePortalRef,
      isTopModal,
      exited,
      hasTransition
    };
  }
  var useModal_default = useModal;

  // node_modules/@mui/material/Modal/modalClasses.js
  function getModalUtilityClass(slot) {
    return generateUtilityClass("MuiModal", slot);
  }
  var modalClasses = generateUtilityClasses("MuiModal", ["root", "hidden", "backdrop"]);

  // node_modules/@mui/material/Modal/Modal.js
  var import_jsx_runtime142 = __toESM(require_jsx_runtime());
  var import_jsx_runtime143 = __toESM(require_jsx_runtime());
  var _excluded97 = ["BackdropComponent", "BackdropProps", "classes", "className", "closeAfterTransition", "children", "container", "component", "components", "componentsProps", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "onBackdropClick", "onClose", "onTransitionEnter", "onTransitionExited", "open", "slotProps", "slots", "theme"];
  var useUtilityClasses58 = (ownerState) => {
    const {
      open,
      exited,
      classes
    } = ownerState;
    const slots = {
      root: ["root", !open && exited && "hidden"],
      backdrop: ["backdrop"]
    };
    return composeClasses(slots, getModalUtilityClass, classes);
  };
  var ModalRoot = styled_default2("div", {
    name: "MuiModal",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, !ownerState.open && ownerState.exited && styles4.hidden];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    position: "fixed",
    zIndex: (theme.vars || theme).zIndex.modal,
    right: 0,
    bottom: 0,
    top: 0,
    left: 0
  }, !ownerState.open && ownerState.exited && {
    visibility: "hidden"
  }));
  var ModalBackdrop = styled_default2(Backdrop_default, {
    name: "MuiModal",
    slot: "Backdrop",
    overridesResolver: (props, styles4) => {
      return styles4.backdrop;
    }
  })({
    zIndex: -1
  });
  var Modal = /* @__PURE__ */ React151.forwardRef(function Modal2(inProps, ref) {
    var _ref, _slots$root, _ref2, _slots$backdrop, _slotProps$root, _slotProps$backdrop;
    const props = useDefaultProps2({
      name: "MuiModal",
      props: inProps
    });
    const {
      BackdropComponent = ModalBackdrop,
      BackdropProps,
      className,
      closeAfterTransition = false,
      children,
      container,
      component,
      components = {},
      componentsProps = {},
      disableAutoFocus = false,
      disableEnforceFocus = false,
      disableEscapeKeyDown = false,
      disablePortal = false,
      disableRestoreFocus = false,
      disableScrollLock = false,
      hideBackdrop = false,
      keepMounted = false,
      onBackdropClick,
      open,
      slotProps,
      slots
      // eslint-disable-next-line react/prop-types
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded97);
    const propsWithDefaults = _extends({}, props, {
      closeAfterTransition,
      disableAutoFocus,
      disableEnforceFocus,
      disableEscapeKeyDown,
      disablePortal,
      disableRestoreFocus,
      disableScrollLock,
      hideBackdrop,
      keepMounted
    });
    const {
      getRootProps,
      getBackdropProps,
      getTransitionProps: getTransitionProps2,
      portalRef,
      isTopModal,
      exited,
      hasTransition
    } = useModal_default(_extends({}, propsWithDefaults, {
      rootRef: ref
    }));
    const ownerState = _extends({}, propsWithDefaults, {
      exited
    });
    const classes = useUtilityClasses58(ownerState);
    const childProps = {};
    if (children.props.tabIndex === void 0) {
      childProps.tabIndex = "-1";
    }
    if (hasTransition) {
      const {
        onEnter,
        onExited
      } = getTransitionProps2();
      childProps.onEnter = onEnter;
      childProps.onExited = onExited;
    }
    const RootSlot = (_ref = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components.Root) != null ? _ref : ModalRoot;
    const BackdropSlot = (_ref2 = (_slots$backdrop = slots == null ? void 0 : slots.backdrop) != null ? _slots$backdrop : components.Backdrop) != null ? _ref2 : BackdropComponent;
    const rootSlotProps = (_slotProps$root = slotProps == null ? void 0 : slotProps.root) != null ? _slotProps$root : componentsProps.root;
    const backdropSlotProps = (_slotProps$backdrop = slotProps == null ? void 0 : slotProps.backdrop) != null ? _slotProps$backdrop : componentsProps.backdrop;
    const rootProps = useSlotProps_default({
      elementType: RootSlot,
      externalSlotProps: rootSlotProps,
      externalForwardedProps: other,
      getSlotProps: getRootProps,
      additionalProps: {
        ref,
        as: component
      },
      ownerState,
      className: clsx_default(className, rootSlotProps == null ? void 0 : rootSlotProps.className, classes == null ? void 0 : classes.root, !ownerState.open && ownerState.exited && (classes == null ? void 0 : classes.hidden))
    });
    const backdropProps = useSlotProps_default({
      elementType: BackdropSlot,
      externalSlotProps: backdropSlotProps,
      additionalProps: BackdropProps,
      getSlotProps: (otherHandlers) => {
        return getBackdropProps(_extends({}, otherHandlers, {
          onClick: (e) => {
            if (onBackdropClick) {
              onBackdropClick(e);
            }
            if (otherHandlers != null && otherHandlers.onClick) {
              otherHandlers.onClick(e);
            }
          }
        }));
      },
      className: clsx_default(backdropSlotProps == null ? void 0 : backdropSlotProps.className, BackdropProps == null ? void 0 : BackdropProps.className, classes == null ? void 0 : classes.backdrop),
      ownerState
    });
    if (!keepMounted && !open && (!hasTransition || exited)) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(Portal_default, {
      ref: portalRef,
      container,
      disablePortal,
      children: /* @__PURE__ */ (0, import_jsx_runtime143.jsxs)(RootSlot, _extends({}, rootProps, {
        children: [!hideBackdrop && BackdropComponent ? /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(BackdropSlot, _extends({}, backdropProps)) : null, /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(FocusTrap_default, {
          disableEnforceFocus,
          disableAutoFocus,
          disableRestoreFocus,
          isEnabled: isTopModal,
          open,
          children: /* @__PURE__ */ React151.cloneElement(children, childProps)
        })]
      }))
    });
  });
  true ? Modal.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * A backdrop component. This prop enables custom backdrop rendering.
     * @deprecated Use `slots.backdrop` instead. While this prop currently works, it will be removed in the next major version.
     * Use the `slots.backdrop` prop to make your application ready for the next version of Material UI.
     * @default styled(Backdrop, {
     *   name: 'MuiModal',
     *   slot: 'Backdrop',
     *   overridesResolver: (props, styles) => {
     *     return styles.backdrop;
     *   },
     * })({
     *   zIndex: -1,
     * })
     */
    BackdropComponent: import_prop_types102.default.elementType,
    /**
     * Props applied to the [`Backdrop`](/material-ui/api/backdrop/) element.
     * @deprecated Use `slotProps.backdrop` instead.
     */
    BackdropProps: import_prop_types102.default.object,
    /**
     * A single child content element.
     */
    children: elementAcceptingRef_default.isRequired,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types102.default.object,
    /**
     * @ignore
     */
    className: import_prop_types102.default.string,
    /**
     * When set to true the Modal waits until a nested Transition is completed before closing.
     * @default false
     */
    closeAfterTransition: import_prop_types102.default.bool,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types102.default.elementType,
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: import_prop_types102.default.shape({
      Backdrop: import_prop_types102.default.elementType,
      Root: import_prop_types102.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: import_prop_types102.default.shape({
      backdrop: import_prop_types102.default.oneOfType([import_prop_types102.default.func, import_prop_types102.default.object]),
      root: import_prop_types102.default.oneOfType([import_prop_types102.default.func, import_prop_types102.default.object])
    }),
    /**
     * An HTML element or function that returns one.
     * The `container` will have the portal children appended to it.
     *
     * You can also provide a callback, which is called in a React layout effect.
     * This lets you set the container from a ref, and also makes server-side rendering possible.
     *
     * By default, it uses the body of the top-level document object,
     * so it's simply `document.body` most of the time.
     */
    container: import_prop_types102.default.oneOfType([HTMLElementType, import_prop_types102.default.func]),
    /**
     * If `true`, the modal will not automatically shift focus to itself when it opens, and
     * replace it to the last focused element when it closes.
     * This also works correctly with any modal children that have the `disableAutoFocus` prop.
     *
     * Generally this should never be set to `true` as it makes the modal less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableAutoFocus: import_prop_types102.default.bool,
    /**
     * If `true`, the modal will not prevent focus from leaving the modal while open.
     *
     * Generally this should never be set to `true` as it makes the modal less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableEnforceFocus: import_prop_types102.default.bool,
    /**
     * If `true`, hitting escape will not fire the `onClose` callback.
     * @default false
     */
    disableEscapeKeyDown: import_prop_types102.default.bool,
    /**
     * The `children` will be under the DOM hierarchy of the parent component.
     * @default false
     */
    disablePortal: import_prop_types102.default.bool,
    /**
     * If `true`, the modal will not restore focus to previously focused element once
     * modal is hidden or unmounted.
     * @default false
     */
    disableRestoreFocus: import_prop_types102.default.bool,
    /**
     * Disable the scroll lock behavior.
     * @default false
     */
    disableScrollLock: import_prop_types102.default.bool,
    /**
     * If `true`, the backdrop is not rendered.
     * @default false
     */
    hideBackdrop: import_prop_types102.default.bool,
    /**
     * Always keep the children in the DOM.
     * This prop can be useful in SEO situation or
     * when you want to maximize the responsiveness of the Modal.
     * @default false
     */
    keepMounted: import_prop_types102.default.bool,
    /**
     * Callback fired when the backdrop is clicked.
     * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.
     */
    onBackdropClick: import_prop_types102.default.func,
    /**
     * Callback fired when the component requests to be closed.
     * The `reason` parameter can optionally be used to control the response to `onClose`.
     *
     * @param {object} event The event source of the callback.
     * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
     */
    onClose: import_prop_types102.default.func,
    /**
     * A function called when a transition enters.
     */
    onTransitionEnter: import_prop_types102.default.func,
    /**
     * A function called when a transition has exited.
     */
    onTransitionExited: import_prop_types102.default.func,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types102.default.bool.isRequired,
    /**
     * The props used for each slot inside the Modal.
     * @default {}
     */
    slotProps: import_prop_types102.default.shape({
      backdrop: import_prop_types102.default.oneOfType([import_prop_types102.default.func, import_prop_types102.default.object]),
      root: import_prop_types102.default.oneOfType([import_prop_types102.default.func, import_prop_types102.default.object])
    }),
    /**
     * The components used for each slot inside the Modal.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types102.default.shape({
      backdrop: import_prop_types102.default.elementType,
      root: import_prop_types102.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types102.default.oneOfType([import_prop_types102.default.arrayOf(import_prop_types102.default.oneOfType([import_prop_types102.default.func, import_prop_types102.default.object, import_prop_types102.default.bool])), import_prop_types102.default.func, import_prop_types102.default.object])
  } : void 0;
  var Modal_default = Modal;

  // node_modules/@mui/material/Popover/popoverClasses.js
  function getPopoverUtilityClass(slot) {
    return generateUtilityClass("MuiPopover", slot);
  }
  var popoverClasses = generateUtilityClasses("MuiPopover", ["root", "paper"]);

  // node_modules/@mui/material/Popover/Popover.js
  var import_jsx_runtime144 = __toESM(require_jsx_runtime());
  var _excluded98 = ["onEntering"];
  var _excluded214 = ["action", "anchorEl", "anchorOrigin", "anchorPosition", "anchorReference", "children", "className", "container", "elevation", "marginThreshold", "open", "PaperProps", "slots", "slotProps", "transformOrigin", "TransitionComponent", "transitionDuration", "TransitionProps", "disableScrollLock"];
  var _excluded312 = ["slotProps"];
  function getOffsetTop(rect, vertical) {
    let offset2 = 0;
    if (typeof vertical === "number") {
      offset2 = vertical;
    } else if (vertical === "center") {
      offset2 = rect.height / 2;
    } else if (vertical === "bottom") {
      offset2 = rect.height;
    }
    return offset2;
  }
  function getOffsetLeft(rect, horizontal) {
    let offset2 = 0;
    if (typeof horizontal === "number") {
      offset2 = horizontal;
    } else if (horizontal === "center") {
      offset2 = rect.width / 2;
    } else if (horizontal === "right") {
      offset2 = rect.width;
    }
    return offset2;
  }
  function getTransformOriginValue(transformOrigin2) {
    return [transformOrigin2.horizontal, transformOrigin2.vertical].map((n) => typeof n === "number" ? `${n}px` : n).join(" ");
  }
  function resolveAnchorEl2(anchorEl) {
    return typeof anchorEl === "function" ? anchorEl() : anchorEl;
  }
  var useUtilityClasses59 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      paper: ["paper"]
    };
    return composeClasses(slots, getPopoverUtilityClass, classes);
  };
  var PopoverRoot = styled_default2(Modal_default, {
    name: "MuiPopover",
    slot: "Root",
    overridesResolver: (props, styles4) => styles4.root
  })({});
  var PopoverPaper = styled_default2(Paper_default, {
    name: "MuiPopover",
    slot: "Paper",
    overridesResolver: (props, styles4) => styles4.paper
  })({
    position: "absolute",
    overflowY: "auto",
    overflowX: "hidden",
    // So we see the popover when it's empty.
    // It's most likely on issue on userland.
    minWidth: 16,
    minHeight: 16,
    maxWidth: "calc(100% - 32px)",
    maxHeight: "calc(100% - 32px)",
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0
  });
  var Popover = /* @__PURE__ */ React152.forwardRef(function Popover2(inProps, ref) {
    var _slotProps$paper, _slots$root, _slots$paper;
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiPopover"
    });
    const {
      action,
      anchorEl,
      anchorOrigin = {
        vertical: "top",
        horizontal: "left"
      },
      anchorPosition,
      anchorReference = "anchorEl",
      children,
      className,
      container: containerProp,
      elevation = 8,
      marginThreshold = 16,
      open,
      PaperProps: PaperPropsProp = {},
      slots,
      slotProps,
      transformOrigin: transformOrigin2 = {
        vertical: "top",
        horizontal: "left"
      },
      TransitionComponent = Grow_default,
      transitionDuration: transitionDurationProp = "auto",
      TransitionProps: {
        onEntering
      } = {},
      disableScrollLock = false
    } = props, TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, _excluded98), other = _objectWithoutPropertiesLoose(props, _excluded214);
    const externalPaperSlotProps = (_slotProps$paper = slotProps == null ? void 0 : slotProps.paper) != null ? _slotProps$paper : PaperPropsProp;
    const paperRef = React152.useRef();
    const handlePaperRef = useForkRef_default(paperRef, externalPaperSlotProps.ref);
    const ownerState = _extends({}, props, {
      anchorOrigin,
      anchorReference,
      elevation,
      marginThreshold,
      externalPaperSlotProps,
      transformOrigin: transformOrigin2,
      TransitionComponent,
      transitionDuration: transitionDurationProp,
      TransitionProps
    });
    const classes = useUtilityClasses59(ownerState);
    const getAnchorOffset = React152.useCallback(() => {
      if (anchorReference === "anchorPosition") {
        if (true) {
          if (!anchorPosition) {
            console.error('MUI: You need to provide a `anchorPosition` prop when using <Popover anchorReference="anchorPosition" />.');
          }
        }
        return anchorPosition;
      }
      const resolvedAnchorEl = resolveAnchorEl2(anchorEl);
      const anchorElement = resolvedAnchorEl && resolvedAnchorEl.nodeType === 1 ? resolvedAnchorEl : ownerDocument_default(paperRef.current).body;
      const anchorRect = anchorElement.getBoundingClientRect();
      if (true) {
        const box = anchorElement.getBoundingClientRect();
        if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
          console.warn(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
        }
      }
      return {
        top: anchorRect.top + getOffsetTop(anchorRect, anchorOrigin.vertical),
        left: anchorRect.left + getOffsetLeft(anchorRect, anchorOrigin.horizontal)
      };
    }, [anchorEl, anchorOrigin.horizontal, anchorOrigin.vertical, anchorPosition, anchorReference]);
    const getTransformOrigin = React152.useCallback((elemRect) => {
      return {
        vertical: getOffsetTop(elemRect, transformOrigin2.vertical),
        horizontal: getOffsetLeft(elemRect, transformOrigin2.horizontal)
      };
    }, [transformOrigin2.horizontal, transformOrigin2.vertical]);
    const getPositioningStyle = React152.useCallback((element) => {
      const elemRect = {
        width: element.offsetWidth,
        height: element.offsetHeight
      };
      const elemTransformOrigin = getTransformOrigin(elemRect);
      if (anchorReference === "none") {
        return {
          top: null,
          left: null,
          transformOrigin: getTransformOriginValue(elemTransformOrigin)
        };
      }
      const anchorOffset = getAnchorOffset();
      let top2 = anchorOffset.top - elemTransformOrigin.vertical;
      let left2 = anchorOffset.left - elemTransformOrigin.horizontal;
      const bottom2 = top2 + elemRect.height;
      const right2 = left2 + elemRect.width;
      const containerWindow = ownerWindow_default(resolveAnchorEl2(anchorEl));
      const heightThreshold = containerWindow.innerHeight - marginThreshold;
      const widthThreshold = containerWindow.innerWidth - marginThreshold;
      if (marginThreshold !== null && top2 < marginThreshold) {
        const diff = top2 - marginThreshold;
        top2 -= diff;
        elemTransformOrigin.vertical += diff;
      } else if (marginThreshold !== null && bottom2 > heightThreshold) {
        const diff = bottom2 - heightThreshold;
        top2 -= diff;
        elemTransformOrigin.vertical += diff;
      }
      if (true) {
        if (elemRect.height > heightThreshold && elemRect.height && heightThreshold) {
          console.error(["MUI: The popover component is too tall.", `Some part of it can not be seen on the screen (${elemRect.height - heightThreshold}px).`, "Please consider adding a `max-height` to improve the user-experience."].join("\n"));
        }
      }
      if (marginThreshold !== null && left2 < marginThreshold) {
        const diff = left2 - marginThreshold;
        left2 -= diff;
        elemTransformOrigin.horizontal += diff;
      } else if (right2 > widthThreshold) {
        const diff = right2 - widthThreshold;
        left2 -= diff;
        elemTransformOrigin.horizontal += diff;
      }
      return {
        top: `${Math.round(top2)}px`,
        left: `${Math.round(left2)}px`,
        transformOrigin: getTransformOriginValue(elemTransformOrigin)
      };
    }, [anchorEl, anchorReference, getAnchorOffset, getTransformOrigin, marginThreshold]);
    const [isPositioned, setIsPositioned] = React152.useState(open);
    const setPositioningStyles = React152.useCallback(() => {
      const element = paperRef.current;
      if (!element) {
        return;
      }
      const positioning = getPositioningStyle(element);
      if (positioning.top !== null) {
        element.style.top = positioning.top;
      }
      if (positioning.left !== null) {
        element.style.left = positioning.left;
      }
      element.style.transformOrigin = positioning.transformOrigin;
      setIsPositioned(true);
    }, [getPositioningStyle]);
    React152.useEffect(() => {
      if (disableScrollLock) {
        window.addEventListener("scroll", setPositioningStyles);
      }
      return () => window.removeEventListener("scroll", setPositioningStyles);
    }, [anchorEl, disableScrollLock, setPositioningStyles]);
    const handleEntering = (element, isAppearing) => {
      if (onEntering) {
        onEntering(element, isAppearing);
      }
      setPositioningStyles();
    };
    const handleExited = () => {
      setIsPositioned(false);
    };
    React152.useEffect(() => {
      if (open) {
        setPositioningStyles();
      }
    });
    React152.useImperativeHandle(action, () => open ? {
      updatePosition: () => {
        setPositioningStyles();
      }
    } : null, [open, setPositioningStyles]);
    React152.useEffect(() => {
      if (!open) {
        return void 0;
      }
      const handleResize = debounce_default(() => {
        setPositioningStyles();
      });
      const containerWindow = ownerWindow_default(anchorEl);
      containerWindow.addEventListener("resize", handleResize);
      return () => {
        handleResize.clear();
        containerWindow.removeEventListener("resize", handleResize);
      };
    }, [anchorEl, open, setPositioningStyles]);
    let transitionDuration = transitionDurationProp;
    if (transitionDurationProp === "auto" && !TransitionComponent.muiSupportAuto) {
      transitionDuration = void 0;
    }
    const container = containerProp || (anchorEl ? ownerDocument_default(resolveAnchorEl2(anchorEl)).body : void 0);
    const RootSlot = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : PopoverRoot;
    const PaperSlot = (_slots$paper = slots == null ? void 0 : slots.paper) != null ? _slots$paper : PopoverPaper;
    const paperProps = useSlotProps_default({
      elementType: PaperSlot,
      externalSlotProps: _extends({}, externalPaperSlotProps, {
        style: isPositioned ? externalPaperSlotProps.style : _extends({}, externalPaperSlotProps.style, {
          opacity: 0
        })
      }),
      additionalProps: {
        elevation,
        ref: handlePaperRef
      },
      ownerState,
      className: clsx_default(classes.paper, externalPaperSlotProps == null ? void 0 : externalPaperSlotProps.className)
    });
    const _useSlotProps = useSlotProps_default({
      elementType: RootSlot,
      externalSlotProps: (slotProps == null ? void 0 : slotProps.root) || {},
      externalForwardedProps: other,
      additionalProps: {
        ref,
        slotProps: {
          backdrop: {
            invisible: true
          }
        },
        container,
        open
      },
      ownerState,
      className: clsx_default(classes.root, className)
    }), {
      slotProps: rootSlotPropsProp
    } = _useSlotProps, rootProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded312);
    return /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(RootSlot, _extends({}, rootProps, !isHostComponent_default(RootSlot) && {
      slotProps: rootSlotPropsProp,
      disableScrollLock
    }, {
      children: /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(TransitionComponent, _extends({
        appear: true,
        in: open,
        onEntering: handleEntering,
        onExited: handleExited,
        timeout: transitionDuration
      }, TransitionProps, {
        children: /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(PaperSlot, _extends({}, paperProps, {
          children
        }))
      }))
    }));
  });
  true ? Popover.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * A ref for imperative actions.
     * It currently only supports updatePosition() action.
     */
    action: refType_default,
    /**
     * An HTML element, [PopoverVirtualElement](/material-ui/react-popover/#virtual-element),
     * or a function that returns either.
     * It's used to set the position of the popover.
     */
    anchorEl: chainPropTypes(import_prop_types103.default.oneOfType([HTMLElementType, import_prop_types103.default.func]), (props) => {
      if (props.open && (!props.anchorReference || props.anchorReference === "anchorEl")) {
        const resolvedAnchorEl = resolveAnchorEl2(props.anchorEl);
        if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
          const box = resolvedAnchorEl.getBoundingClientRect();
          if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
          }
        } else {
          return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", `It should be an Element or PopoverVirtualElement instance but it's \`${resolvedAnchorEl}\` instead.`].join("\n"));
        }
      }
      return null;
    }),
    /**
     * This is the point on the anchor where the popover's
     * `anchorEl` will attach to. This is not used when the
     * anchorReference is 'anchorPosition'.
     *
     * Options:
     * vertical: [top, center, bottom];
     * horizontal: [left, center, right].
     * @default {
     *   vertical: 'top',
     *   horizontal: 'left',
     * }
     */
    anchorOrigin: import_prop_types103.default.shape({
      horizontal: import_prop_types103.default.oneOfType([import_prop_types103.default.oneOf(["center", "left", "right"]), import_prop_types103.default.number]).isRequired,
      vertical: import_prop_types103.default.oneOfType([import_prop_types103.default.oneOf(["bottom", "center", "top"]), import_prop_types103.default.number]).isRequired
    }),
    /**
     * This is the position that may be used to set the position of the popover.
     * The coordinates are relative to the application's client area.
     */
    anchorPosition: import_prop_types103.default.shape({
      left: import_prop_types103.default.number.isRequired,
      top: import_prop_types103.default.number.isRequired
    }),
    /**
     * This determines which anchor prop to refer to when setting
     * the position of the popover.
     * @default 'anchorEl'
     */
    anchorReference: import_prop_types103.default.oneOf(["anchorEl", "anchorPosition", "none"]),
    /**
     * The content of the component.
     */
    children: import_prop_types103.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types103.default.object,
    /**
     * @ignore
     */
    className: import_prop_types103.default.string,
    /**
     * An HTML element, component instance, or function that returns either.
     * The `container` will passed to the Modal component.
     *
     * By default, it uses the body of the anchorEl's top-level document object,
     * so it's simply `document.body` most of the time.
     */
    container: import_prop_types103.default.oneOfType([HTMLElementType, import_prop_types103.default.func]),
    /**
     * Disable the scroll lock behavior.
     * @default false
     */
    disableScrollLock: import_prop_types103.default.bool,
    /**
     * The elevation of the popover.
     * @default 8
     */
    elevation: integerPropType_default,
    /**
     * Specifies how close to the edge of the window the popover can appear.
     * If null, the popover will not be constrained by the window.
     * @default 16
     */
    marginThreshold: import_prop_types103.default.number,
    /**
     * Callback fired when the component requests to be closed.
     * The `reason` parameter can optionally be used to control the response to `onClose`.
     */
    onClose: import_prop_types103.default.func,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types103.default.bool.isRequired,
    /**
     * Props applied to the [`Paper`](/material-ui/api/paper/) element.
     *
     * This prop is an alias for `slotProps.paper` and will be overriden by it if both are used.
     * @deprecated Use `slotProps.paper` instead.
     *
     * @default {}
     */
    PaperProps: import_prop_types103.default.shape({
      component: elementTypeAcceptingRef_default
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * @default {}
     */
    slotProps: import_prop_types103.default.shape({
      paper: import_prop_types103.default.oneOfType([import_prop_types103.default.func, import_prop_types103.default.object]),
      root: import_prop_types103.default.oneOfType([import_prop_types103.default.func, import_prop_types103.default.object])
    }),
    /**
     * The components used for each slot inside.
     *
     * @default {}
     */
    slots: import_prop_types103.default.shape({
      paper: import_prop_types103.default.elementType,
      root: import_prop_types103.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types103.default.oneOfType([import_prop_types103.default.arrayOf(import_prop_types103.default.oneOfType([import_prop_types103.default.func, import_prop_types103.default.object, import_prop_types103.default.bool])), import_prop_types103.default.func, import_prop_types103.default.object]),
    /**
     * This is the point on the popover which
     * will attach to the anchor's origin.
     *
     * Options:
     * vertical: [top, center, bottom, x(px)];
     * horizontal: [left, center, right, x(px)].
     * @default {
     *   vertical: 'top',
     *   horizontal: 'left',
     * }
     */
    transformOrigin: import_prop_types103.default.shape({
      horizontal: import_prop_types103.default.oneOfType([import_prop_types103.default.oneOf(["center", "left", "right"]), import_prop_types103.default.number]).isRequired,
      vertical: import_prop_types103.default.oneOfType([import_prop_types103.default.oneOf(["bottom", "center", "top"]), import_prop_types103.default.number]).isRequired
    }),
    /**
     * The component used for the transition.
     * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
     * @default Grow
     */
    TransitionComponent: import_prop_types103.default.elementType,
    /**
     * Set to 'auto' to automatically calculate transition time based on height.
     * @default 'auto'
     */
    transitionDuration: import_prop_types103.default.oneOfType([import_prop_types103.default.oneOf(["auto"]), import_prop_types103.default.number, import_prop_types103.default.shape({
      appear: import_prop_types103.default.number,
      enter: import_prop_types103.default.number,
      exit: import_prop_types103.default.number
    })]),
    /**
     * Props applied to the transition element.
     * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
     * @default {}
     */
    TransitionProps: import_prop_types103.default.object
  } : void 0;
  var Popover_default = Popover;

  // node_modules/@mui/material/Menu/menuClasses.js
  function getMenuUtilityClass(slot) {
    return generateUtilityClass("MuiMenu", slot);
  }
  var menuClasses = generateUtilityClasses("MuiMenu", ["root", "paper", "list"]);

  // node_modules/@mui/material/Menu/Menu.js
  var import_jsx_runtime145 = __toESM(require_jsx_runtime());
  var _excluded99 = ["onEntering"];
  var _excluded215 = ["autoFocus", "children", "className", "disableAutoFocusItem", "MenuListProps", "onClose", "open", "PaperProps", "PopoverClasses", "transitionDuration", "TransitionProps", "variant", "slots", "slotProps"];
  var RTL_ORIGIN = {
    vertical: "top",
    horizontal: "right"
  };
  var LTR_ORIGIN = {
    vertical: "top",
    horizontal: "left"
  };
  var useUtilityClasses60 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      paper: ["paper"],
      list: ["list"]
    };
    return composeClasses(slots, getMenuUtilityClass, classes);
  };
  var MenuRoot = styled_default2(Popover_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    name: "MuiMenu",
    slot: "Root",
    overridesResolver: (props, styles4) => styles4.root
  })({});
  var MenuPaper = styled_default2(PopoverPaper, {
    name: "MuiMenu",
    slot: "Paper",
    overridesResolver: (props, styles4) => styles4.paper
  })({
    // specZ: The maximum height of a simple menu should be one or more rows less than the view
    // height. This ensures a tappable area outside of the simple menu with which to dismiss
    // the menu.
    maxHeight: "calc(100% - 96px)",
    // Add iOS momentum scrolling for iOS < 13.0
    WebkitOverflowScrolling: "touch"
  });
  var MenuMenuList = styled_default2(MenuList_default, {
    name: "MuiMenu",
    slot: "List",
    overridesResolver: (props, styles4) => styles4.list
  })({
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0
  });
  var Menu = /* @__PURE__ */ React153.forwardRef(function Menu2(inProps, ref) {
    var _slots$paper, _slotProps$paper;
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiMenu"
    });
    const {
      autoFocus = true,
      children,
      className,
      disableAutoFocusItem = false,
      MenuListProps = {},
      onClose,
      open,
      PaperProps = {},
      PopoverClasses,
      transitionDuration = "auto",
      TransitionProps: {
        onEntering
      } = {},
      variant = "selectedMenu",
      slots = {},
      slotProps = {}
    } = props, TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, _excluded99), other = _objectWithoutPropertiesLoose(props, _excluded215);
    const isRtl = useRtl();
    const ownerState = _extends({}, props, {
      autoFocus,
      disableAutoFocusItem,
      MenuListProps,
      onEntering,
      PaperProps,
      transitionDuration,
      TransitionProps,
      variant
    });
    const classes = useUtilityClasses60(ownerState);
    const autoFocusItem = autoFocus && !disableAutoFocusItem && open;
    const menuListActionsRef = React153.useRef(null);
    const handleEntering = (element, isAppearing) => {
      if (menuListActionsRef.current) {
        menuListActionsRef.current.adjustStyleForScrollbar(element, {
          direction: isRtl ? "rtl" : "ltr"
        });
      }
      if (onEntering) {
        onEntering(element, isAppearing);
      }
    };
    const handleListKeyDown = (event) => {
      if (event.key === "Tab") {
        event.preventDefault();
        if (onClose) {
          onClose(event, "tabKeyDown");
        }
      }
    };
    let activeItemIndex = -1;
    React153.Children.map(children, (child, index) => {
      if (!/* @__PURE__ */ React153.isValidElement(child)) {
        return;
      }
      if (true) {
        if ((0, import_react_is2.isFragment)(child)) {
          console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      if (!child.props.disabled) {
        if (variant === "selectedMenu" && child.props.selected) {
          activeItemIndex = index;
        } else if (activeItemIndex === -1) {
          activeItemIndex = index;
        }
      }
    });
    const PaperSlot = (_slots$paper = slots.paper) != null ? _slots$paper : MenuPaper;
    const paperExternalSlotProps = (_slotProps$paper = slotProps.paper) != null ? _slotProps$paper : PaperProps;
    const rootSlotProps = useSlotProps_default({
      elementType: slots.root,
      externalSlotProps: slotProps.root,
      ownerState,
      className: [classes.root, className]
    });
    const paperSlotProps = useSlotProps_default({
      elementType: PaperSlot,
      externalSlotProps: paperExternalSlotProps,
      ownerState,
      className: classes.paper
    });
    return /* @__PURE__ */ (0, import_jsx_runtime145.jsx)(MenuRoot, _extends({
      onClose,
      anchorOrigin: {
        vertical: "bottom",
        horizontal: isRtl ? "right" : "left"
      },
      transformOrigin: isRtl ? RTL_ORIGIN : LTR_ORIGIN,
      slots: {
        paper: PaperSlot,
        root: slots.root
      },
      slotProps: {
        root: rootSlotProps,
        paper: paperSlotProps
      },
      open,
      ref,
      transitionDuration,
      TransitionProps: _extends({
        onEntering: handleEntering
      }, TransitionProps),
      ownerState
    }, other, {
      classes: PopoverClasses,
      children: /* @__PURE__ */ (0, import_jsx_runtime145.jsx)(MenuMenuList, _extends({
        onKeyDown: handleListKeyDown,
        actions: menuListActionsRef,
        autoFocus: autoFocus && (activeItemIndex === -1 || disableAutoFocusItem),
        autoFocusItem,
        variant
      }, MenuListProps, {
        className: clsx_default(classes.list, MenuListProps.className),
        children
      }))
    }));
  });
  true ? Menu.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * An HTML element, or a function that returns one.
     * It's used to set the position of the menu.
     */
    anchorEl: import_prop_types104.default.oneOfType([HTMLElementType, import_prop_types104.default.func]),
    /**
     * If `true` (Default) will focus the `[role="menu"]` if no focusable child is found. Disabled
     * children are not focusable. If you set this prop to `false` focus will be placed
     * on the parent modal container. This has severe accessibility implications
     * and should only be considered if you manage focus otherwise.
     * @default true
     */
    autoFocus: import_prop_types104.default.bool,
    /**
     * Menu contents, normally `MenuItem`s.
     */
    children: import_prop_types104.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types104.default.object,
    /**
     * @ignore
     */
    className: import_prop_types104.default.string,
    /**
     * When opening the menu will not focus the active item but the `[role="menu"]`
     * unless `autoFocus` is also set to `false`. Not using the default means not
     * following WAI-ARIA authoring practices. Please be considerate about possible
     * accessibility implications.
     * @default false
     */
    disableAutoFocusItem: import_prop_types104.default.bool,
    /**
     * Props applied to the [`MenuList`](/material-ui/api/menu-list/) element.
     * @default {}
     */
    MenuListProps: import_prop_types104.default.object,
    /**
     * Callback fired when the component requests to be closed.
     *
     * @param {object} event The event source of the callback.
     * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`, `"tabKeyDown"`.
     */
    onClose: import_prop_types104.default.func,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types104.default.bool.isRequired,
    /**
     * @ignore
     */
    PaperProps: import_prop_types104.default.object,
    /**
     * `classes` prop applied to the [`Popover`](/material-ui/api/popover/) element.
     */
    PopoverClasses: import_prop_types104.default.object,
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * @default {}
     */
    slotProps: import_prop_types104.default.shape({
      paper: import_prop_types104.default.oneOfType([import_prop_types104.default.func, import_prop_types104.default.object]),
      root: import_prop_types104.default.oneOfType([import_prop_types104.default.func, import_prop_types104.default.object])
    }),
    /**
     * The components used for each slot inside.
     *
     * @default {}
     */
    slots: import_prop_types104.default.shape({
      paper: import_prop_types104.default.elementType,
      root: import_prop_types104.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types104.default.oneOfType([import_prop_types104.default.arrayOf(import_prop_types104.default.oneOfType([import_prop_types104.default.func, import_prop_types104.default.object, import_prop_types104.default.bool])), import_prop_types104.default.func, import_prop_types104.default.object]),
    /**
     * The length of the transition in `ms`, or 'auto'
     * @default 'auto'
     */
    transitionDuration: import_prop_types104.default.oneOfType([import_prop_types104.default.oneOf(["auto"]), import_prop_types104.default.number, import_prop_types104.default.shape({
      appear: import_prop_types104.default.number,
      enter: import_prop_types104.default.number,
      exit: import_prop_types104.default.number
    })]),
    /**
     * Props applied to the transition element.
     * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
     * @default {}
     */
    TransitionProps: import_prop_types104.default.object,
    /**
     * The variant to use. Use `menu` to prevent selected items from impacting the initial focus.
     * @default 'selectedMenu'
     */
    variant: import_prop_types104.default.oneOf(["menu", "selectedMenu"])
  } : void 0;
  var Menu_default = Menu;

  // node_modules/@mui/material/NativeSelect/NativeSelectInput.js
  init_extends();
  var React154 = __toESM(require_react());
  var import_prop_types105 = __toESM(require_prop_types());

  // node_modules/@mui/material/NativeSelect/nativeSelectClasses.js
  function getNativeSelectUtilityClasses(slot) {
    return generateUtilityClass("MuiNativeSelect", slot);
  }
  var nativeSelectClasses = generateUtilityClasses("MuiNativeSelect", ["root", "select", "multiple", "filled", "outlined", "standard", "disabled", "icon", "iconOpen", "iconFilled", "iconOutlined", "iconStandard", "nativeInput", "error"]);
  var nativeSelectClasses_default = nativeSelectClasses;

  // node_modules/@mui/material/NativeSelect/NativeSelectInput.js
  var import_jsx_runtime146 = __toESM(require_jsx_runtime());
  var import_jsx_runtime147 = __toESM(require_jsx_runtime());
  var _excluded100 = ["className", "disabled", "error", "IconComponent", "inputRef", "variant"];
  var useUtilityClasses61 = (ownerState) => {
    const {
      classes,
      variant,
      disabled,
      multiple,
      open,
      error
    } = ownerState;
    const slots = {
      select: ["select", variant, disabled && "disabled", multiple && "multiple", error && "error"],
      icon: ["icon", `icon${capitalize_default(variant)}`, open && "iconOpen", disabled && "disabled"]
    };
    return composeClasses(slots, getNativeSelectUtilityClasses, classes);
  };
  var nativeSelectSelectStyles = ({
    ownerState,
    theme
  }) => _extends({
    MozAppearance: "none",
    // Reset
    WebkitAppearance: "none",
    // Reset
    // When interacting quickly, the text can end up selected.
    // Native select can't be selected either.
    userSelect: "none",
    borderRadius: 0,
    // Reset
    cursor: "pointer",
    "&:focus": _extends({}, theme.vars ? {
      backgroundColor: `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.05)`
    } : {
      backgroundColor: theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.05)" : "rgba(255, 255, 255, 0.05)"
    }, {
      borderRadius: 0
      // Reset Chrome style
    }),
    // Remove IE11 arrow
    "&::-ms-expand": {
      display: "none"
    },
    [`&.${nativeSelectClasses_default.disabled}`]: {
      cursor: "default"
    },
    "&[multiple]": {
      height: "auto"
    },
    "&:not([multiple]) option, &:not([multiple]) optgroup": {
      backgroundColor: (theme.vars || theme).palette.background.paper
    },
    // Bump specificity to allow extending custom inputs
    "&&&": {
      paddingRight: 24,
      minWidth: 16
      // So it doesn't collapse.
    }
  }, ownerState.variant === "filled" && {
    "&&&": {
      paddingRight: 32
    }
  }, ownerState.variant === "outlined" && {
    borderRadius: (theme.vars || theme).shape.borderRadius,
    "&:focus": {
      borderRadius: (theme.vars || theme).shape.borderRadius
      // Reset the reset for Chrome style
    },
    "&&&": {
      paddingRight: 32
    }
  });
  var NativeSelectSelect = styled_default2("select", {
    name: "MuiNativeSelect",
    slot: "Select",
    shouldForwardProp: rootShouldForwardProp_default,
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.select, styles4[ownerState.variant], ownerState.error && styles4.error, {
        [`&.${nativeSelectClasses_default.multiple}`]: styles4.multiple
      }];
    }
  })(nativeSelectSelectStyles);
  var nativeSelectIconStyles = ({
    ownerState,
    theme
  }) => _extends({
    // We use a position absolute over a flexbox in order to forward the pointer events
    // to the input and to support wrapping tags..
    position: "absolute",
    right: 0,
    top: "calc(50% - .5em)",
    // Center vertically, height is 1em
    pointerEvents: "none",
    // Don't block pointer events on the select under the icon.
    color: (theme.vars || theme).palette.action.active,
    [`&.${nativeSelectClasses_default.disabled}`]: {
      color: (theme.vars || theme).palette.action.disabled
    }
  }, ownerState.open && {
    transform: "rotate(180deg)"
  }, ownerState.variant === "filled" && {
    right: 7
  }, ownerState.variant === "outlined" && {
    right: 7
  });
  var NativeSelectIcon = styled_default2("svg", {
    name: "MuiNativeSelect",
    slot: "Icon",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.icon, ownerState.variant && styles4[`icon${capitalize_default(ownerState.variant)}`], ownerState.open && styles4.iconOpen];
    }
  })(nativeSelectIconStyles);
  var NativeSelectInput = /* @__PURE__ */ React154.forwardRef(function NativeSelectInput2(props, ref) {
    const {
      className,
      disabled,
      error,
      IconComponent,
      inputRef,
      variant = "standard"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded100);
    const ownerState = _extends({}, props, {
      disabled,
      variant,
      error
    });
    const classes = useUtilityClasses61(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime147.jsxs)(React154.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime146.jsx)(NativeSelectSelect, _extends({
        ownerState,
        className: clsx_default(classes.select, className),
        disabled,
        ref: inputRef || ref
      }, other)), props.multiple ? null : /* @__PURE__ */ (0, import_jsx_runtime146.jsx)(NativeSelectIcon, {
        as: IconComponent,
        ownerState,
        className: classes.icon
      })]
    });
  });
  true ? NativeSelectInput.propTypes = {
    /**
     * The option elements to populate the select with.
     * Can be some `<option>` elements.
     */
    children: import_prop_types105.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types105.default.object,
    /**
     * The CSS class name of the select element.
     */
    className: import_prop_types105.default.string,
    /**
     * If `true`, the select is disabled.
     */
    disabled: import_prop_types105.default.bool,
    /**
     * If `true`, the `select input` will indicate an error.
     */
    error: import_prop_types105.default.bool,
    /**
     * The icon that displays the arrow.
     */
    IconComponent: import_prop_types105.default.elementType.isRequired,
    /**
     * Use that prop to pass a ref to the native select element.
     * @deprecated
     */
    inputRef: refType_default,
    /**
     * @ignore
     */
    multiple: import_prop_types105.default.bool,
    /**
     * Name attribute of the `select` or hidden `input` element.
     */
    name: import_prop_types105.default.string,
    /**
     * Callback fired when a menu item is selected.
     *
     * @param {object} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: import_prop_types105.default.func,
    /**
     * The input value.
     */
    value: import_prop_types105.default.any,
    /**
     * The variant to use.
     */
    variant: import_prop_types105.default.oneOf(["standard", "outlined", "filled"])
  } : void 0;
  var NativeSelectInput_default = NativeSelectInput;

  // node_modules/@mui/material/Select/selectClasses.js
  function getSelectUtilityClasses(slot) {
    return generateUtilityClass("MuiSelect", slot);
  }
  var selectClasses = generateUtilityClasses("MuiSelect", ["root", "select", "multiple", "filled", "outlined", "standard", "disabled", "focused", "icon", "iconOpen", "iconFilled", "iconOutlined", "iconStandard", "nativeInput", "error"]);
  var selectClasses_default = selectClasses;

  // node_modules/@mui/material/Select/SelectInput.js
  var import_jsx_runtime148 = __toESM(require_jsx_runtime());
  var import_jsx_runtime149 = __toESM(require_jsx_runtime());
  var _span3;
  var _excluded101 = ["aria-describedby", "aria-label", "autoFocus", "autoWidth", "children", "className", "defaultOpen", "defaultValue", "disabled", "displayEmpty", "error", "IconComponent", "inputRef", "labelId", "MenuProps", "multiple", "name", "onBlur", "onChange", "onClose", "onFocus", "onOpen", "open", "readOnly", "renderValue", "SelectDisplayProps", "tabIndex", "type", "value", "variant"];
  var SelectSelect = styled_default2("div", {
    name: "MuiSelect",
    slot: "Select",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [
        // Win specificity over the input base
        {
          [`&.${selectClasses_default.select}`]: styles4.select
        },
        {
          [`&.${selectClasses_default.select}`]: styles4[ownerState.variant]
        },
        {
          [`&.${selectClasses_default.error}`]: styles4.error
        },
        {
          [`&.${selectClasses_default.multiple}`]: styles4.multiple
        }
      ];
    }
  })(nativeSelectSelectStyles, {
    // Win specificity over the input base
    [`&.${selectClasses_default.select}`]: {
      height: "auto",
      // Resets for multiple select with chips
      minHeight: "1.4375em",
      // Required for select\text-field height consistency
      textOverflow: "ellipsis",
      whiteSpace: "nowrap",
      overflow: "hidden"
    }
  });
  var SelectIcon = styled_default2("svg", {
    name: "MuiSelect",
    slot: "Icon",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.icon, ownerState.variant && styles4[`icon${capitalize_default(ownerState.variant)}`], ownerState.open && styles4.iconOpen];
    }
  })(nativeSelectIconStyles);
  var SelectNativeInput = styled_default2("input", {
    shouldForwardProp: (prop) => slotShouldForwardProp_default(prop) && prop !== "classes",
    name: "MuiSelect",
    slot: "NativeInput",
    overridesResolver: (props, styles4) => styles4.nativeInput
  })({
    bottom: 0,
    left: 0,
    position: "absolute",
    opacity: 0,
    pointerEvents: "none",
    width: "100%",
    boxSizing: "border-box"
  });
  function areEqualValues(a, b) {
    if (typeof b === "object" && b !== null) {
      return a === b;
    }
    return String(a) === String(b);
  }
  function isEmpty3(display) {
    return display == null || typeof display === "string" && !display.trim();
  }
  var useUtilityClasses62 = (ownerState) => {
    const {
      classes,
      variant,
      disabled,
      multiple,
      open,
      error
    } = ownerState;
    const slots = {
      select: ["select", variant, disabled && "disabled", multiple && "multiple", error && "error"],
      icon: ["icon", `icon${capitalize_default(variant)}`, open && "iconOpen", disabled && "disabled"],
      nativeInput: ["nativeInput"]
    };
    return composeClasses(slots, getSelectUtilityClasses, classes);
  };
  var SelectInput = /* @__PURE__ */ React155.forwardRef(function SelectInput2(props, ref) {
    var _MenuProps$slotProps;
    const {
      "aria-describedby": ariaDescribedby,
      "aria-label": ariaLabel,
      autoFocus,
      autoWidth,
      children,
      className,
      defaultOpen,
      defaultValue,
      disabled,
      displayEmpty,
      error = false,
      IconComponent,
      inputRef: inputRefProp,
      labelId,
      MenuProps = {},
      multiple,
      name,
      onBlur,
      onChange,
      onClose,
      onFocus,
      onOpen,
      open: openProp,
      readOnly,
      renderValue,
      SelectDisplayProps = {},
      tabIndex: tabIndexProp,
      value: valueProp,
      variant = "standard"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded101);
    const [value, setValueState] = useControlled_default({
      controlled: valueProp,
      default: defaultValue,
      name: "Select"
    });
    const [openState, setOpenState] = useControlled_default({
      controlled: openProp,
      default: defaultOpen,
      name: "Select"
    });
    const inputRef = React155.useRef(null);
    const displayRef = React155.useRef(null);
    const [displayNode, setDisplayNode] = React155.useState(null);
    const {
      current: isOpenControlled
    } = React155.useRef(openProp != null);
    const [menuMinWidthState, setMenuMinWidthState] = React155.useState();
    const handleRef = useForkRef_default(ref, inputRefProp);
    const handleDisplayRef = React155.useCallback((node2) => {
      displayRef.current = node2;
      if (node2) {
        setDisplayNode(node2);
      }
    }, []);
    const anchorElement = displayNode == null ? void 0 : displayNode.parentNode;
    React155.useImperativeHandle(handleRef, () => ({
      focus: () => {
        displayRef.current.focus();
      },
      node: inputRef.current,
      value
    }), [value]);
    React155.useEffect(() => {
      if (defaultOpen && openState && displayNode && !isOpenControlled) {
        setMenuMinWidthState(autoWidth ? null : anchorElement.clientWidth);
        displayRef.current.focus();
      }
    }, [displayNode, autoWidth]);
    React155.useEffect(() => {
      if (autoFocus) {
        displayRef.current.focus();
      }
    }, [autoFocus]);
    React155.useEffect(() => {
      if (!labelId) {
        return void 0;
      }
      const label = ownerDocument_default(displayRef.current).getElementById(labelId);
      if (label) {
        const handler = () => {
          if (getSelection().isCollapsed) {
            displayRef.current.focus();
          }
        };
        label.addEventListener("click", handler);
        return () => {
          label.removeEventListener("click", handler);
        };
      }
      return void 0;
    }, [labelId]);
    const update = (open2, event) => {
      if (open2) {
        if (onOpen) {
          onOpen(event);
        }
      } else if (onClose) {
        onClose(event);
      }
      if (!isOpenControlled) {
        setMenuMinWidthState(autoWidth ? null : anchorElement.clientWidth);
        setOpenState(open2);
      }
    };
    const handleMouseDown = (event) => {
      if (event.button !== 0) {
        return;
      }
      event.preventDefault();
      displayRef.current.focus();
      update(true, event);
    };
    const handleClose = (event) => {
      update(false, event);
    };
    const childrenArray = React155.Children.toArray(children);
    const handleChange = (event) => {
      const child = childrenArray.find((childItem) => childItem.props.value === event.target.value);
      if (child === void 0) {
        return;
      }
      setValueState(child.props.value);
      if (onChange) {
        onChange(event, child);
      }
    };
    const handleItemClick = (child) => (event) => {
      let newValue;
      if (!event.currentTarget.hasAttribute("tabindex")) {
        return;
      }
      if (multiple) {
        newValue = Array.isArray(value) ? value.slice() : [];
        const itemIndex = value.indexOf(child.props.value);
        if (itemIndex === -1) {
          newValue.push(child.props.value);
        } else {
          newValue.splice(itemIndex, 1);
        }
      } else {
        newValue = child.props.value;
      }
      if (child.props.onClick) {
        child.props.onClick(event);
      }
      if (value !== newValue) {
        setValueState(newValue);
        if (onChange) {
          const nativeEvent = event.nativeEvent || event;
          const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
          Object.defineProperty(clonedEvent, "target", {
            writable: true,
            value: {
              value: newValue,
              name
            }
          });
          onChange(clonedEvent, child);
        }
      }
      if (!multiple) {
        update(false, event);
      }
    };
    const handleKeyDown2 = (event) => {
      if (!readOnly) {
        const validKeys = [
          " ",
          "ArrowUp",
          "ArrowDown",
          // The native select doesn't respond to enter on macOS, but it's recommended by
          // https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-select-only/
          "Enter"
        ];
        if (validKeys.indexOf(event.key) !== -1) {
          event.preventDefault();
          update(true, event);
        }
      }
    };
    const open = displayNode !== null && openState;
    const handleBlur = (event) => {
      if (!open && onBlur) {
        Object.defineProperty(event, "target", {
          writable: true,
          value: {
            value,
            name
          }
        });
        onBlur(event);
      }
    };
    delete other["aria-invalid"];
    let display;
    let displaySingle;
    const displayMultiple = [];
    let computeDisplay = false;
    let foundMatch = false;
    if (isFilled({
      value
    }) || displayEmpty) {
      if (renderValue) {
        display = renderValue(value);
      } else {
        computeDisplay = true;
      }
    }
    const items = childrenArray.map((child) => {
      if (!/* @__PURE__ */ React155.isValidElement(child)) {
        return null;
      }
      if (true) {
        if ((0, import_react_is3.isFragment)(child)) {
          console.error(["MUI: The Select component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      let selected;
      if (multiple) {
        if (!Array.isArray(value)) {
          throw new Error(true ? `MUI: The \`value\` prop must be an array when using the \`Select\` component with \`multiple\`.` : (0, import_formatMuiErrorMessage.default)(2));
        }
        selected = value.some((v) => areEqualValues(v, child.props.value));
        if (selected && computeDisplay) {
          displayMultiple.push(child.props.children);
        }
      } else {
        selected = areEqualValues(value, child.props.value);
        if (selected && computeDisplay) {
          displaySingle = child.props.children;
        }
      }
      if (selected) {
        foundMatch = true;
      }
      return /* @__PURE__ */ React155.cloneElement(child, {
        "aria-selected": selected ? "true" : "false",
        onClick: handleItemClick(child),
        onKeyUp: (event) => {
          if (event.key === " ") {
            event.preventDefault();
          }
          if (child.props.onKeyUp) {
            child.props.onKeyUp(event);
          }
        },
        role: "option",
        selected,
        value: void 0,
        // The value is most likely not a valid HTML attribute.
        "data-value": child.props.value
        // Instead, we provide it as a data attribute.
      });
    });
    if (true) {
      React155.useEffect(() => {
        if (!foundMatch && !multiple && value !== "") {
          const values3 = childrenArray.map((child) => child.props.value);
          console.warn([`MUI: You have provided an out-of-range value \`${value}\` for the select ${name ? `(name="${name}") ` : ""}component.`, "Consider providing a value that matches one of the available options or ''.", `The available values are ${values3.filter((x) => x != null).map((x) => `\`${x}\``).join(", ") || '""'}.`].join("\n"));
        }
      }, [foundMatch, childrenArray, multiple, name, value]);
    }
    if (computeDisplay) {
      if (multiple) {
        if (displayMultiple.length === 0) {
          display = null;
        } else {
          display = displayMultiple.reduce((output, child, index) => {
            output.push(child);
            if (index < displayMultiple.length - 1) {
              output.push(", ");
            }
            return output;
          }, []);
        }
      } else {
        display = displaySingle;
      }
    }
    let menuMinWidth = menuMinWidthState;
    if (!autoWidth && isOpenControlled && displayNode) {
      menuMinWidth = anchorElement.clientWidth;
    }
    let tabIndex;
    if (typeof tabIndexProp !== "undefined") {
      tabIndex = tabIndexProp;
    } else {
      tabIndex = disabled ? null : 0;
    }
    const buttonId = SelectDisplayProps.id || (name ? `mui-component-select-${name}` : void 0);
    const ownerState = _extends({}, props, {
      variant,
      value,
      open,
      error
    });
    const classes = useUtilityClasses62(ownerState);
    const paperProps = _extends({}, MenuProps.PaperProps, (_MenuProps$slotProps = MenuProps.slotProps) == null ? void 0 : _MenuProps$slotProps.paper);
    const listboxId = useId();
    return /* @__PURE__ */ (0, import_jsx_runtime149.jsxs)(React155.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime148.jsx)(SelectSelect, _extends({
        ref: handleDisplayRef,
        tabIndex,
        role: "combobox",
        "aria-controls": listboxId,
        "aria-disabled": disabled ? "true" : void 0,
        "aria-expanded": open ? "true" : "false",
        "aria-haspopup": "listbox",
        "aria-label": ariaLabel,
        "aria-labelledby": [labelId, buttonId].filter(Boolean).join(" ") || void 0,
        "aria-describedby": ariaDescribedby,
        onKeyDown: handleKeyDown2,
        onMouseDown: disabled || readOnly ? null : handleMouseDown,
        onBlur: handleBlur,
        onFocus
      }, SelectDisplayProps, {
        ownerState,
        className: clsx_default(SelectDisplayProps.className, classes.select, className),
        id: buttonId,
        children: isEmpty3(display) ? (
          // notranslate needed while Google Translate will not fix zero-width space issue
          _span3 || (_span3 = /* @__PURE__ */ (0, import_jsx_runtime148.jsx)("span", {
            className: "notranslate",
            children: "\u200B"
          }))
        ) : display
      })), /* @__PURE__ */ (0, import_jsx_runtime148.jsx)(SelectNativeInput, _extends({
        "aria-invalid": error,
        value: Array.isArray(value) ? value.join(",") : value,
        name,
        ref: inputRef,
        "aria-hidden": true,
        onChange: handleChange,
        tabIndex: -1,
        disabled,
        className: classes.nativeInput,
        autoFocus,
        ownerState
      }, other)), /* @__PURE__ */ (0, import_jsx_runtime148.jsx)(SelectIcon, {
        as: IconComponent,
        className: classes.icon,
        ownerState
      }), /* @__PURE__ */ (0, import_jsx_runtime148.jsx)(Menu_default, _extends({
        id: `menu-${name || ""}`,
        anchorEl: anchorElement,
        open,
        onClose: handleClose,
        anchorOrigin: {
          vertical: "bottom",
          horizontal: "center"
        },
        transformOrigin: {
          vertical: "top",
          horizontal: "center"
        }
      }, MenuProps, {
        MenuListProps: _extends({
          "aria-labelledby": labelId,
          role: "listbox",
          "aria-multiselectable": multiple ? "true" : void 0,
          disableListWrap: true,
          id: listboxId
        }, MenuProps.MenuListProps),
        slotProps: _extends({}, MenuProps.slotProps, {
          paper: _extends({}, paperProps, {
            style: _extends({
              minWidth: menuMinWidth
            }, paperProps != null ? paperProps.style : null)
          })
        }),
        children: items
      }))]
    });
  });
  true ? SelectInput.propTypes = {
    /**
     * @ignore
     */
    "aria-describedby": import_prop_types106.default.string,
    /**
     * @ignore
     */
    "aria-label": import_prop_types106.default.string,
    /**
     * @ignore
     */
    autoFocus: import_prop_types106.default.bool,
    /**
     * If `true`, the width of the popover will automatically be set according to the items inside the
     * menu, otherwise it will be at least the width of the select input.
     */
    autoWidth: import_prop_types106.default.bool,
    /**
     * The option elements to populate the select with.
     * Can be some `<MenuItem>` elements.
     */
    children: import_prop_types106.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types106.default.object,
    /**
     * The CSS class name of the select element.
     */
    className: import_prop_types106.default.string,
    /**
     * If `true`, the component is toggled on mount. Use when the component open state is not controlled.
     * You can only use it when the `native` prop is `false` (default).
     */
    defaultOpen: import_prop_types106.default.bool,
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types106.default.any,
    /**
     * If `true`, the select is disabled.
     */
    disabled: import_prop_types106.default.bool,
    /**
     * If `true`, the selected item is displayed even if its value is empty.
     */
    displayEmpty: import_prop_types106.default.bool,
    /**
     * If `true`, the `select input` will indicate an error.
     */
    error: import_prop_types106.default.bool,
    /**
     * The icon that displays the arrow.
     */
    IconComponent: import_prop_types106.default.elementType.isRequired,
    /**
     * Imperative handle implementing `{ value: T, node: HTMLElement, focus(): void }`
     * Equivalent to `ref`
     */
    inputRef: refType_default,
    /**
     * The ID of an element that acts as an additional label. The Select will
     * be labelled by the additional label and the selected value.
     */
    labelId: import_prop_types106.default.string,
    /**
     * Props applied to the [`Menu`](/material-ui/api/menu/) element.
     */
    MenuProps: import_prop_types106.default.object,
    /**
     * If `true`, `value` must be an array and the menu will support multiple selections.
     */
    multiple: import_prop_types106.default.bool,
    /**
     * Name attribute of the `select` or hidden `input` element.
     */
    name: import_prop_types106.default.string,
    /**
     * @ignore
     */
    onBlur: import_prop_types106.default.func,
    /**
     * Callback fired when a menu item is selected.
     *
     * @param {object} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (any).
     * @param {object} [child] The react element that was selected.
     */
    onChange: import_prop_types106.default.func,
    /**
     * Callback fired when the component requests to be closed.
     * Use in controlled mode (see open).
     *
     * @param {object} event The event source of the callback.
     */
    onClose: import_prop_types106.default.func,
    /**
     * @ignore
     */
    onFocus: import_prop_types106.default.func,
    /**
     * Callback fired when the component requests to be opened.
     * Use in controlled mode (see open).
     *
     * @param {object} event The event source of the callback.
     */
    onOpen: import_prop_types106.default.func,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types106.default.bool,
    /**
     * @ignore
     */
    readOnly: import_prop_types106.default.bool,
    /**
     * Render the selected value.
     *
     * @param {any} value The `value` provided to the component.
     * @returns {ReactNode}
     */
    renderValue: import_prop_types106.default.func,
    /**
     * Props applied to the clickable div element.
     */
    SelectDisplayProps: import_prop_types106.default.object,
    /**
     * @ignore
     */
    tabIndex: import_prop_types106.default.oneOfType([import_prop_types106.default.number, import_prop_types106.default.string]),
    /**
     * @ignore
     */
    type: import_prop_types106.default.any,
    /**
     * The input value.
     */
    value: import_prop_types106.default.any,
    /**
     * The variant to use.
     */
    variant: import_prop_types106.default.oneOf(["standard", "outlined", "filled"])
  } : void 0;
  var SelectInput_default = SelectInput;

  // node_modules/@mui/material/Select/Select.js
  var import_jsx_runtime150 = __toESM(require_jsx_runtime());
  var _excluded102 = ["autoWidth", "children", "classes", "className", "defaultOpen", "displayEmpty", "IconComponent", "id", "input", "inputProps", "label", "labelId", "MenuProps", "multiple", "native", "onClose", "onOpen", "open", "renderValue", "SelectDisplayProps", "variant"];
  var _excluded216 = ["root"];
  var useUtilityClasses63 = (ownerState) => {
    const {
      classes
    } = ownerState;
    return classes;
  };
  var styledRootConfig = {
    name: "MuiSelect",
    overridesResolver: (props, styles4) => styles4.root,
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) && prop !== "variant",
    slot: "Root"
  };
  var StyledInput = styled_default2(Input_default, styledRootConfig)("");
  var StyledOutlinedInput = styled_default2(OutlinedInput_default, styledRootConfig)("");
  var StyledFilledInput = styled_default2(FilledInput_default, styledRootConfig)("");
  var Select = /* @__PURE__ */ React156.forwardRef(function Select2(inProps, ref) {
    const props = useDefaultProps2({
      name: "MuiSelect",
      props: inProps
    });
    const {
      autoWidth = false,
      children,
      classes: classesProp = {},
      className,
      defaultOpen = false,
      displayEmpty = false,
      IconComponent = ArrowDropDown_default,
      id,
      input,
      inputProps,
      label,
      labelId,
      MenuProps,
      multiple = false,
      native = false,
      onClose,
      onOpen,
      open,
      renderValue,
      SelectDisplayProps,
      variant: variantProp = "outlined"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded102);
    const inputComponent = native ? NativeSelectInput_default : SelectInput_default;
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["variant", "error"]
    });
    const variant = fcs.variant || variantProp;
    const ownerState = _extends({}, props, {
      variant,
      classes: classesProp
    });
    const classes = useUtilityClasses63(ownerState);
    const restOfClasses = _objectWithoutPropertiesLoose(classes, _excluded216);
    const InputComponent = input || {
      standard: /* @__PURE__ */ (0, import_jsx_runtime150.jsx)(StyledInput, {
        ownerState
      }),
      outlined: /* @__PURE__ */ (0, import_jsx_runtime150.jsx)(StyledOutlinedInput, {
        label,
        ownerState
      }),
      filled: /* @__PURE__ */ (0, import_jsx_runtime150.jsx)(StyledFilledInput, {
        ownerState
      })
    }[variant];
    const inputComponentRef = useForkRef_default(ref, getReactElementRef(InputComponent));
    return /* @__PURE__ */ (0, import_jsx_runtime150.jsx)(React156.Fragment, {
      children: /* @__PURE__ */ React156.cloneElement(InputComponent, _extends({
        // Most of the logic is implemented in `SelectInput`.
        // The `Select` component is a simple API wrapper to expose something better to play with.
        inputComponent,
        inputProps: _extends({
          children,
          error: fcs.error,
          IconComponent,
          variant,
          type: void 0,
          // We render a select. We can ignore the type provided by the `Input`.
          multiple
        }, native ? {
          id
        } : {
          autoWidth,
          defaultOpen,
          displayEmpty,
          labelId,
          MenuProps,
          onClose,
          onOpen,
          open,
          renderValue,
          SelectDisplayProps: _extends({
            id
          }, SelectDisplayProps)
        }, inputProps, {
          classes: inputProps ? (0, import_deepmerge12.default)(restOfClasses, inputProps.classes) : restOfClasses
        }, input ? input.props.inputProps : {})
      }, (multiple && native || displayEmpty) && variant === "outlined" ? {
        notched: true
      } : {}, {
        ref: inputComponentRef,
        className: clsx_default(InputComponent.props.className, className, classes.root)
      }, !input && {
        variant
      }, other))
    });
  });
  true ? Select.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * If `true`, the width of the popover will automatically be set according to the items inside the
     * menu, otherwise it will be at least the width of the select input.
     * @default false
     */
    autoWidth: import_prop_types107.default.bool,
    /**
     * The option elements to populate the select with.
     * Can be some `MenuItem` when `native` is false and `option` when `native` is true.
     *
     * ⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.
     */
    children: import_prop_types107.default.node,
    /**
     * Override or extend the styles applied to the component.
     * @default {}
     */
    classes: import_prop_types107.default.object,
    /**
     * @ignore
     */
    className: import_prop_types107.default.string,
    /**
     * If `true`, the component is initially open. Use when the component open state is not controlled (i.e. the `open` prop is not defined).
     * You can only use it when the `native` prop is `false` (default).
     * @default false
     */
    defaultOpen: import_prop_types107.default.bool,
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types107.default.any,
    /**
     * If `true`, a value is displayed even if no items are selected.
     *
     * In order to display a meaningful value, a function can be passed to the `renderValue` prop which
     * returns the value to be displayed when no items are selected.
     *
     * ⚠️ When using this prop, make sure the label doesn't overlap with the empty displayed value.
     * The label should either be hidden or forced to a shrunk state.
     * @default false
     */
    displayEmpty: import_prop_types107.default.bool,
    /**
     * The icon that displays the arrow.
     * @default ArrowDropDownIcon
     */
    IconComponent: import_prop_types107.default.elementType,
    /**
     * The `id` of the wrapper element or the `select` element when `native`.
     */
    id: import_prop_types107.default.string,
    /**
     * An `Input` element; does not have to be a material-ui specific `Input`.
     */
    input: import_prop_types107.default.element,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * When `native` is `true`, the attributes are applied on the `select` element.
     */
    inputProps: import_prop_types107.default.object,
    /**
     * See [OutlinedInput#label](/material-ui/api/outlined-input/#props)
     */
    label: import_prop_types107.default.node,
    /**
     * The ID of an element that acts as an additional label. The Select will
     * be labelled by the additional label and the selected value.
     */
    labelId: import_prop_types107.default.string,
    /**
     * Props applied to the [`Menu`](/material-ui/api/menu/) element.
     */
    MenuProps: import_prop_types107.default.object,
    /**
     * If `true`, `value` must be an array and the menu will support multiple selections.
     * @default false
     */
    multiple: import_prop_types107.default.bool,
    /**
     * If `true`, the component uses a native `select` element.
     * @default false
     */
    native: import_prop_types107.default.bool,
    /**
     * Callback fired when a menu item is selected.
     *
     * @param {SelectChangeEvent<Value>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (any).
     * **Warning**: This is a generic event, not a change event, unless the change event is caused by browser autofill.
     * @param {object} [child] The react element that was selected when `native` is `false` (default).
     */
    onChange: import_prop_types107.default.func,
    /**
     * Callback fired when the component requests to be closed.
     * Use it in either controlled (see the `open` prop), or uncontrolled mode (to detect when the Select collapses).
     *
     * @param {object} event The event source of the callback.
     */
    onClose: import_prop_types107.default.func,
    /**
     * Callback fired when the component requests to be opened.
     * Use it in either controlled (see the `open` prop), or uncontrolled mode (to detect when the Select expands).
     *
     * @param {object} event The event source of the callback.
     */
    onOpen: import_prop_types107.default.func,
    /**
     * If `true`, the component is shown.
     * You can only use it when the `native` prop is `false` (default).
     */
    open: import_prop_types107.default.bool,
    /**
     * Render the selected value.
     * You can only use it when the `native` prop is `false` (default).
     *
     * @param {any} value The `value` provided to the component.
     * @returns {ReactNode}
     */
    renderValue: import_prop_types107.default.func,
    /**
     * Props applied to the clickable div element.
     */
    SelectDisplayProps: import_prop_types107.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types107.default.oneOfType([import_prop_types107.default.arrayOf(import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object, import_prop_types107.default.bool])), import_prop_types107.default.func, import_prop_types107.default.object]),
    /**
     * The `input` value. Providing an empty string will select no options.
     * Set to an empty string `''` if you don't want any of the available options to be selected.
     *
     * If the value is an object it must have reference equality with the option in order to be selected.
     * If the value is not an object, the string representation must match with the string representation of the option in order to be selected.
     */
    value: import_prop_types107.default.oneOfType([import_prop_types107.default.oneOf([""]), import_prop_types107.default.any]),
    /**
     * The variant to use.
     * @default 'outlined'
     */
    variant: import_prop_types107.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  Select.muiName = "Select";
  var Select_default = Select;

  // node_modules/@mui/material/TextField/textFieldClasses.js
  function getTextFieldUtilityClass(slot) {
    return generateUtilityClass("MuiTextField", slot);
  }
  var textFieldClasses = generateUtilityClasses("MuiTextField", ["root"]);

  // node_modules/@mui/material/TextField/TextField.js
  var import_jsx_runtime151 = __toESM(require_jsx_runtime());
  var import_jsx_runtime152 = __toESM(require_jsx_runtime());
  var _excluded103 = ["autoComplete", "autoFocus", "children", "className", "color", "defaultValue", "disabled", "error", "FormHelperTextProps", "fullWidth", "helperText", "id", "InputLabelProps", "inputProps", "InputProps", "inputRef", "label", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onFocus", "placeholder", "required", "rows", "select", "SelectProps", "type", "value", "variant"];
  var variantComponent = {
    standard: Input_default,
    filled: FilledInput_default,
    outlined: OutlinedInput_default
  };
  var useUtilityClasses64 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return composeClasses(slots, getTextFieldUtilityClass, classes);
  };
  var TextFieldRoot = styled_default2(FormControl_default, {
    name: "MuiTextField",
    slot: "Root",
    overridesResolver: (props, styles4) => styles4.root
  })({});
  var TextField = /* @__PURE__ */ React157.forwardRef(function TextField2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiTextField"
    });
    const {
      autoComplete,
      autoFocus = false,
      children,
      className,
      color: color2 = "primary",
      defaultValue,
      disabled = false,
      error = false,
      FormHelperTextProps,
      fullWidth = false,
      helperText,
      id: idOverride,
      InputLabelProps,
      inputProps,
      InputProps,
      inputRef,
      label,
      maxRows,
      minRows,
      multiline = false,
      name,
      onBlur,
      onChange,
      onFocus,
      placeholder,
      required = false,
      rows,
      select = false,
      SelectProps,
      type,
      value,
      variant = "outlined"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded103);
    const ownerState = _extends({}, props, {
      autoFocus,
      color: color2,
      disabled,
      error,
      fullWidth,
      multiline,
      required,
      select,
      variant
    });
    const classes = useUtilityClasses64(ownerState);
    if (true) {
      if (select && !children) {
        console.error("MUI: `children` must be passed when using the `TextField` component with `select`.");
      }
    }
    const InputMore = {};
    if (variant === "outlined") {
      if (InputLabelProps && typeof InputLabelProps.shrink !== "undefined") {
        InputMore.notched = InputLabelProps.shrink;
      }
      InputMore.label = label;
    }
    if (select) {
      if (!SelectProps || !SelectProps.native) {
        InputMore.id = void 0;
      }
      InputMore["aria-describedby"] = void 0;
    }
    const id = useId(idOverride);
    const helperTextId = helperText && id ? `${id}-helper-text` : void 0;
    const inputLabelId = label && id ? `${id}-label` : void 0;
    const InputComponent = variantComponent[variant];
    const InputElement = /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(InputComponent, _extends({
      "aria-describedby": helperTextId,
      autoComplete,
      autoFocus,
      defaultValue,
      fullWidth,
      multiline,
      name,
      rows,
      maxRows,
      minRows,
      type,
      value,
      id,
      inputRef,
      onBlur,
      onChange,
      onFocus,
      placeholder,
      inputProps
    }, InputMore, InputProps));
    return /* @__PURE__ */ (0, import_jsx_runtime152.jsxs)(TextFieldRoot, _extends({
      className: clsx_default(classes.root, className),
      disabled,
      error,
      fullWidth,
      ref,
      required,
      color: color2,
      variant,
      ownerState
    }, other, {
      children: [label != null && label !== "" && /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(InputLabel_default, _extends({
        htmlFor: id,
        id: inputLabelId
      }, InputLabelProps, {
        children: label
      })), select ? /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(Select_default, _extends({
        "aria-describedby": helperTextId,
        id,
        labelId: inputLabelId,
        value,
        input: InputElement
      }, SelectProps, {
        children
      })) : InputElement, helperText && /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(FormHelperText_default, _extends({
        id: helperTextId
      }, FormHelperTextProps, {
        children: helperText
      }))]
    }));
  });
  true ? TextField.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: import_prop_types108.default.string,
    /**
     * If `true`, the `input` element is focused during the first mount.
     * @default false
     */
    autoFocus: import_prop_types108.default.bool,
    /**
     * @ignore
     */
    children: import_prop_types108.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types108.default.object,
    /**
     * @ignore
     */
    className: import_prop_types108.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'primary'
     */
    color: import_prop_types108.default.oneOfType([import_prop_types108.default.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), import_prop_types108.default.string]),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types108.default.any,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types108.default.bool,
    /**
     * If `true`, the label is displayed in an error state.
     * @default false
     */
    error: import_prop_types108.default.bool,
    /**
     * Props applied to the [`FormHelperText`](/material-ui/api/form-helper-text/) element.
     */
    FormHelperTextProps: import_prop_types108.default.object,
    /**
     * If `true`, the input will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types108.default.bool,
    /**
     * The helper text content.
     */
    helperText: import_prop_types108.default.node,
    /**
     * The id of the `input` element.
     * Use this prop to make `label` and `helperText` accessible for screen readers.
     */
    id: import_prop_types108.default.string,
    /**
     * Props applied to the [`InputLabel`](/material-ui/api/input-label/) element.
     * Pointer events like `onClick` are enabled if and only if `shrink` is `true`.
     */
    InputLabelProps: import_prop_types108.default.object,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     */
    inputProps: import_prop_types108.default.object,
    /**
     * Props applied to the Input element.
     * It will be a [`FilledInput`](/material-ui/api/filled-input/),
     * [`OutlinedInput`](/material-ui/api/outlined-input/) or [`Input`](/material-ui/api/input/)
     * component depending on the `variant` prop value.
     */
    InputProps: import_prop_types108.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType_default,
    /**
     * The label content.
     */
    label: import_prop_types108.default.node,
    /**
     * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
     * @default 'none'
     */
    margin: import_prop_types108.default.oneOf(["dense", "none", "normal"]),
    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: import_prop_types108.default.oneOfType([import_prop_types108.default.number, import_prop_types108.default.string]),
    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: import_prop_types108.default.oneOfType([import_prop_types108.default.number, import_prop_types108.default.string]),
    /**
     * If `true`, a `textarea` element is rendered instead of an input.
     * @default false
     */
    multiline: import_prop_types108.default.bool,
    /**
     * Name attribute of the `input` element.
     */
    name: import_prop_types108.default.string,
    /**
     * @ignore
     */
    onBlur: import_prop_types108.default.func,
    /**
     * Callback fired when the value is changed.
     *
     * @param {object} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: import_prop_types108.default.func,
    /**
     * @ignore
     */
    onFocus: import_prop_types108.default.func,
    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: import_prop_types108.default.string,
    /**
     * If `true`, the label is displayed as required and the `input` element is required.
     * @default false
     */
    required: import_prop_types108.default.bool,
    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: import_prop_types108.default.oneOfType([import_prop_types108.default.number, import_prop_types108.default.string]),
    /**
     * Render a [`Select`](/material-ui/api/select/) element while passing the Input element to `Select` as `input` parameter.
     * If this option is set you must pass the options of the select as children.
     * @default false
     */
    select: import_prop_types108.default.bool,
    /**
     * Props applied to the [`Select`](/material-ui/api/select/) element.
     */
    SelectProps: import_prop_types108.default.object,
    /**
     * The size of the component.
     */
    size: import_prop_types108.default.oneOfType([import_prop_types108.default.oneOf(["medium", "small"]), import_prop_types108.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types108.default.oneOfType([import_prop_types108.default.arrayOf(import_prop_types108.default.oneOfType([import_prop_types108.default.func, import_prop_types108.default.object, import_prop_types108.default.bool])), import_prop_types108.default.func, import_prop_types108.default.object]),
    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     */
    type: import_prop_types108.default.string,
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: import_prop_types108.default.any,
    /**
     * The variant to use.
     * @default 'outlined'
     */
    variant: import_prop_types108.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  var TextField_default = TextField;

  // node_modules/@mui/x-data-grid/components/toolbar/GridToolbarQuickFilter.js
  var import_jsx_runtime153 = __toESM(require_jsx_runtime());
  var _excluded104 = ["quickFilterParser", "quickFilterFormatter", "debounceMs"];
  var GridToolbarQuickFilterRoot = styled_default2(TextField_default, {
    name: "MuiDataGrid",
    slot: "ToolbarQuickFilter",
    overridesResolver: (props, styles4) => styles4.toolbarQuickFilter
  })(({
    theme
  }) => ({
    width: "auto",
    paddingBottom: theme.spacing(0.5),
    "& input": {
      marginLeft: theme.spacing(0.5)
    },
    "& .MuiInput-underline:before": {
      borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`
    },
    [`& input[type=search]::-ms-clear,
& input[type=search]::-ms-reveal`]: {
      /* clears the 'X' icon from IE */
      display: "none",
      width: 0,
      height: 0
    },
    [`& input[type="search"]::-webkit-search-decoration,
  & input[type="search"]::-webkit-search-cancel-button,
  & input[type="search"]::-webkit-search-results-button,
  & input[type="search"]::-webkit-search-results-decoration`]: {
      /* clears the 'X' icon from Chrome */
      display: "none"
    }
  }));
  var defaultSearchValueParser = (searchText) => searchText.split(" ").filter((word) => word !== "");
  var defaultSearchValueFormatter = (values3) => values3.join(" ");
  function GridToolbarQuickFilter(props) {
    var _rootProps$slotProps, _rootProps$slotProps2;
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const quickFilterValues = useGridSelector(apiRef, gridQuickFilterValuesSelector);
    const {
      quickFilterParser = defaultSearchValueParser,
      quickFilterFormatter = defaultSearchValueFormatter,
      debounceMs = rootProps.filterDebounceMs
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded104);
    const [searchValue, setSearchValue] = React158.useState(() => quickFilterFormatter(quickFilterValues != null ? quickFilterValues : []));
    const prevQuickFilterValuesRef = React158.useRef(quickFilterValues);
    React158.useEffect(() => {
      if (!isDeepEqual(prevQuickFilterValuesRef.current, quickFilterValues)) {
        prevQuickFilterValuesRef.current = quickFilterValues;
        setSearchValue((prevSearchValue) => isDeepEqual(quickFilterParser(prevSearchValue), quickFilterValues) ? prevSearchValue : quickFilterFormatter(quickFilterValues != null ? quickFilterValues : []));
      }
    }, [quickFilterValues, quickFilterFormatter, quickFilterParser]);
    const updateSearchValue = React158.useCallback((newSearchValue) => {
      const newQuickFilterValues = quickFilterParser(newSearchValue);
      prevQuickFilterValuesRef.current = newQuickFilterValues;
      apiRef.current.setQuickFilterValues(newQuickFilterValues);
    }, [apiRef, quickFilterParser]);
    const debouncedUpdateSearchValue = React158.useMemo(() => debounce(updateSearchValue, debounceMs), [updateSearchValue, debounceMs]);
    const handleSearchValueChange = React158.useCallback((event) => {
      const newSearchValue = event.target.value;
      setSearchValue(newSearchValue);
      debouncedUpdateSearchValue(newSearchValue);
    }, [debouncedUpdateSearchValue]);
    const handleSearchReset = React158.useCallback(() => {
      setSearchValue("");
      updateSearchValue("");
    }, [updateSearchValue]);
    return /* @__PURE__ */ (0, import_jsx_runtime153.jsx)(GridToolbarQuickFilterRoot, _extends({
      as: rootProps.slots.baseTextField,
      ownerState: rootProps,
      variant: "standard",
      value: searchValue,
      onChange: handleSearchValueChange,
      placeholder: apiRef.current.getLocaleText("toolbarQuickFilterPlaceholder"),
      "aria-label": apiRef.current.getLocaleText("toolbarQuickFilterLabel"),
      type: "search"
    }, other, {
      InputProps: _extends({
        startAdornment: /* @__PURE__ */ (0, import_jsx_runtime153.jsx)(rootProps.slots.quickFilterIcon, {
          fontSize: "small"
        }),
        endAdornment: /* @__PURE__ */ (0, import_jsx_runtime153.jsx)(rootProps.slots.baseIconButton, _extends({
          "aria-label": apiRef.current.getLocaleText("toolbarQuickFilterDeleteIconLabel"),
          size: "small",
          sx: {
            visibility: searchValue ? "visible" : "hidden"
          },
          onClick: handleSearchReset
        }, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.baseIconButton, {
          children: /* @__PURE__ */ (0, import_jsx_runtime153.jsx)(rootProps.slots.quickFilterClearIcon, {
            fontSize: "small"
          })
        }))
      }, other.InputProps)
    }, (_rootProps$slotProps2 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps2.baseTextField));
  }
  true ? GridToolbarQuickFilter.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * The debounce time in milliseconds.
     * @default 150
     */
    debounceMs: import_prop_types109.default.number,
    /**
     * Function responsible for formatting values of quick filter in a string when the model is modified
     * @param {any[]} values The new values passed to the quick filter model
     * @returns {string} The string to display in the text field
     * @default (values: string[]) => values.join(' ')
     */
    quickFilterFormatter: import_prop_types109.default.func,
    /**
     * Function responsible for parsing text input in an array of independent values for quick filtering.
     * @param {string} input The value entered by the user
     * @returns {any[]} The array of value on which quick filter is applied
     * @default (searchText: string) => searchText
     *   .split(' ')
     *   .filter((word) => word !== '')
     */
    quickFilterParser: import_prop_types109.default.func
  } : void 0;

  // node_modules/@mui/x-data-grid/components/toolbar/GridToolbar.js
  var import_jsx_runtime154 = __toESM(require_jsx_runtime());
  var import_jsx_runtime155 = __toESM(require_jsx_runtime());
  var _excluded105 = ["className", "csvOptions", "printOptions", "excelOptions", "showQuickFilter", "quickFilterProps"];
  var GridToolbar = /* @__PURE__ */ React159.forwardRef(function GridToolbar2(props, ref) {
    const {
      csvOptions,
      printOptions,
      excelOptions,
      showQuickFilter = false,
      quickFilterProps = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded105);
    const rootProps = useGridRootProps();
    if (rootProps.disableColumnFilter && rootProps.disableColumnSelector && rootProps.disableDensitySelector && !showQuickFilter) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime155.jsxs)(GridToolbarContainer, _extends({
      ref
    }, other, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime154.jsx)(GridToolbarColumnsButton, {}), /* @__PURE__ */ (0, import_jsx_runtime154.jsx)(GridToolbarFilterButton, {}), /* @__PURE__ */ (0, import_jsx_runtime154.jsx)(GridToolbarDensitySelector, {}), /* @__PURE__ */ (0, import_jsx_runtime154.jsx)(GridToolbarExport, {
        csvOptions,
        printOptions,
        excelOptions
      }), /* @__PURE__ */ (0, import_jsx_runtime154.jsx)(Box_default, {
        sx: {
          flex: 1
        }
      }), showQuickFilter && /* @__PURE__ */ (0, import_jsx_runtime154.jsx)(GridToolbarQuickFilter, _extends({}, quickFilterProps))]
    }));
  });
  true ? GridToolbar.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * Props passed to the quick filter component.
     */
    quickFilterProps: import_prop_types110.default.object,
    /**
     * Show the quick filter component.
     * @default false
     */
    showQuickFilter: import_prop_types110.default.bool,
    sx: import_prop_types110.default.oneOfType([import_prop_types110.default.arrayOf(import_prop_types110.default.oneOfType([import_prop_types110.default.func, import_prop_types110.default.object, import_prop_types110.default.bool])), import_prop_types110.default.func, import_prop_types110.default.object])
  } : void 0;

  // node_modules/@mui/x-data-grid/components/GridFooter.js
  init_extends();
  var React161 = __toESM(require_react());
  var import_prop_types112 = __toESM(require_prop_types());

  // node_modules/@mui/x-data-grid/components/GridSelectedRowCount.js
  init_extends();
  var React160 = __toESM(require_react());
  var import_prop_types111 = __toESM(require_prop_types());
  var import_jsx_runtime156 = __toESM(require_jsx_runtime());
  var _excluded106 = ["className", "selectedRowCount"];
  var useUtilityClasses65 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["selectedRowCount"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridSelectedRowCountRoot = styled_default("div", {
    name: "MuiDataGrid",
    slot: "SelectedRowCount",
    overridesResolver: (props, styles4) => styles4.selectedRowCount
  })(({
    theme
  }) => ({
    alignItems: "center",
    display: "flex",
    margin: theme.spacing(0, 2),
    visibility: "hidden",
    width: 0,
    height: 0,
    [theme.breakpoints.up("sm")]: {
      visibility: "visible",
      width: "auto",
      height: "auto"
    }
  }));
  var GridSelectedRowCount = /* @__PURE__ */ React160.forwardRef(function GridSelectedRowCount2(props, ref) {
    const {
      className,
      selectedRowCount
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded106);
    const apiRef = useGridApiContext();
    const ownerState = useGridRootProps();
    const classes = useUtilityClasses65(ownerState);
    const rowSelectedText = apiRef.current.getLocaleText("footerRowSelected")(selectedRowCount);
    return /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(GridSelectedRowCountRoot, _extends({
      ref,
      className: clsx_default(classes.root, className),
      ownerState
    }, other, {
      children: rowSelectedText
    }));
  });
  true ? GridSelectedRowCount.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    selectedRowCount: import_prop_types111.default.number.isRequired,
    sx: import_prop_types111.default.oneOfType([import_prop_types111.default.arrayOf(import_prop_types111.default.oneOfType([import_prop_types111.default.func, import_prop_types111.default.object, import_prop_types111.default.bool])), import_prop_types111.default.func, import_prop_types111.default.object])
  } : void 0;

  // node_modules/@mui/x-data-grid/components/GridFooter.js
  var import_jsx_runtime157 = __toESM(require_jsx_runtime());
  var import_jsx_runtime158 = __toESM(require_jsx_runtime());
  var GridFooter = /* @__PURE__ */ React161.forwardRef(function GridFooter2(props, ref) {
    var _rootProps$slotProps, _rootProps$slotProps2;
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const totalTopLevelRowCount = useGridSelector(apiRef, gridTopLevelRowCountSelector);
    const selectedRowCount = useGridSelector(apiRef, selectedGridRowsCountSelector);
    const visibleTopLevelRowCount = useGridSelector(apiRef, gridFilteredTopLevelRowCountSelector);
    const selectedRowCountElement = !rootProps.hideFooterSelectedRowCount && selectedRowCount > 0 ? /* @__PURE__ */ (0, import_jsx_runtime157.jsx)(GridSelectedRowCount, {
      selectedRowCount
    }) : /* @__PURE__ */ (0, import_jsx_runtime157.jsx)("div", {});
    const rowCountElement = !rootProps.hideFooterRowCount && !rootProps.pagination ? /* @__PURE__ */ (0, import_jsx_runtime157.jsx)(rootProps.slots.footerRowCount, _extends({}, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.footerRowCount, {
      rowCount: totalTopLevelRowCount,
      visibleRowCount: visibleTopLevelRowCount
    })) : null;
    const paginationElement = rootProps.pagination && !rootProps.hideFooterPagination && rootProps.slots.pagination && /* @__PURE__ */ (0, import_jsx_runtime157.jsx)(rootProps.slots.pagination, _extends({}, (_rootProps$slotProps2 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps2.pagination));
    return /* @__PURE__ */ (0, import_jsx_runtime158.jsxs)(GridFooterContainer, _extends({
      ref
    }, props, {
      children: [selectedRowCountElement, rowCountElement, paginationElement]
    }));
  });
  true ? GridFooter.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    sx: import_prop_types112.default.oneOfType([import_prop_types112.default.arrayOf(import_prop_types112.default.oneOfType([import_prop_types112.default.func, import_prop_types112.default.object, import_prop_types112.default.bool])), import_prop_types112.default.func, import_prop_types112.default.object])
  } : void 0;

  // node_modules/@mui/x-data-grid/components/GridHeader.js
  init_extends();
  var React162 = __toESM(require_react());
  var import_jsx_runtime159 = __toESM(require_jsx_runtime());
  var import_jsx_runtime160 = __toESM(require_jsx_runtime());
  function GridHeader() {
    var _rootProps$slotProps, _rootProps$slotProps2;
    const rootProps = useGridRootProps();
    return /* @__PURE__ */ (0, import_jsx_runtime160.jsxs)(React162.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime159.jsx)(rootProps.slots.preferencesPanel, _extends({}, (_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.preferencesPanel)), rootProps.slots.toolbar && /* @__PURE__ */ (0, import_jsx_runtime159.jsx)(rootProps.slots.toolbar, _extends({}, (_rootProps$slotProps2 = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps2.toolbar))]
    });
  }

  // node_modules/@mui/x-data-grid/components/GridLoadingOverlay.js
  init_extends();
  var React164 = __toESM(require_react());
  var import_prop_types114 = __toESM(require_prop_types());

  // node_modules/@mui/material/CircularProgress/CircularProgress.js
  init_extends();
  var React163 = __toESM(require_react());
  var import_prop_types113 = __toESM(require_prop_types());

  // node_modules/@mui/material/CircularProgress/circularProgressClasses.js
  function getCircularProgressUtilityClass(slot) {
    return generateUtilityClass("MuiCircularProgress", slot);
  }
  var circularProgressClasses = generateUtilityClasses("MuiCircularProgress", ["root", "determinate", "indeterminate", "colorPrimary", "colorSecondary", "svg", "circle", "circleDeterminate", "circleIndeterminate", "circleDisableShrink"]);

  // node_modules/@mui/material/CircularProgress/CircularProgress.js
  var import_jsx_runtime161 = __toESM(require_jsx_runtime());
  var _excluded107 = ["className", "color", "disableShrink", "size", "style", "thickness", "value", "variant"];
  var _3 = (t) => t;
  var _t6;
  var _t23;
  var _t33;
  var _t43;
  var SIZE = 44;
  var circularRotateKeyframe = (0, import_styled_engine5.keyframes)(_t6 || (_t6 = _3`
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
`));
  var circularDashKeyframe = (0, import_styled_engine5.keyframes)(_t23 || (_t23 = _3`
  0% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: 0;
  }

  50% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -15px;
  }

  100% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -125px;
  }
`));
  var useUtilityClasses66 = (ownerState) => {
    const {
      classes,
      variant,
      color: color2,
      disableShrink
    } = ownerState;
    const slots = {
      root: ["root", variant, `color${capitalize_default(color2)}`],
      svg: ["svg"],
      circle: ["circle", `circle${capitalize_default(variant)}`, disableShrink && "circleDisableShrink"]
    };
    return composeClasses(slots, getCircularProgressUtilityClass, classes);
  };
  var CircularProgressRoot = styled_default2("span", {
    name: "MuiCircularProgress",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, styles4[ownerState.variant], styles4[`color${capitalize_default(ownerState.color)}`]];
    }
  })(({
    ownerState,
    theme
  }) => _extends({
    display: "inline-block"
  }, ownerState.variant === "determinate" && {
    transition: theme.transitions.create("transform")
  }, ownerState.color !== "inherit" && {
    color: (theme.vars || theme).palette[ownerState.color].main
  }), ({
    ownerState
  }) => ownerState.variant === "indeterminate" && (0, import_styled_engine5.css)(_t33 || (_t33 = _3`
      animation: ${0} 1.4s linear infinite;
    `), circularRotateKeyframe));
  var CircularProgressSVG = styled_default2("svg", {
    name: "MuiCircularProgress",
    slot: "Svg",
    overridesResolver: (props, styles4) => styles4.svg
  })({
    display: "block"
    // Keeps the progress centered
  });
  var CircularProgressCircle = styled_default2("circle", {
    name: "MuiCircularProgress",
    slot: "Circle",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.circle, styles4[`circle${capitalize_default(ownerState.variant)}`], ownerState.disableShrink && styles4.circleDisableShrink];
    }
  })(({
    ownerState,
    theme
  }) => _extends({
    stroke: "currentColor"
  }, ownerState.variant === "determinate" && {
    transition: theme.transitions.create("stroke-dashoffset")
  }, ownerState.variant === "indeterminate" && {
    // Some default value that looks fine waiting for the animation to kicks in.
    strokeDasharray: "80px, 200px",
    strokeDashoffset: 0
    // Add the unit to fix a Edge 16 and below bug.
  }), ({
    ownerState
  }) => ownerState.variant === "indeterminate" && !ownerState.disableShrink && (0, import_styled_engine5.css)(_t43 || (_t43 = _3`
      animation: ${0} 1.4s ease-in-out infinite;
    `), circularDashKeyframe));
  var CircularProgress = /* @__PURE__ */ React163.forwardRef(function CircularProgress2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiCircularProgress"
    });
    const {
      className,
      color: color2 = "primary",
      disableShrink = false,
      size = 40,
      style: style4,
      thickness = 3.6,
      value = 0,
      variant = "indeterminate"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded107);
    const ownerState = _extends({}, props, {
      color: color2,
      disableShrink,
      size,
      thickness,
      value,
      variant
    });
    const classes = useUtilityClasses66(ownerState);
    const circleStyle = {};
    const rootStyle = {};
    const rootProps = {};
    if (variant === "determinate") {
      const circumference = 2 * Math.PI * ((SIZE - thickness) / 2);
      circleStyle.strokeDasharray = circumference.toFixed(3);
      rootProps["aria-valuenow"] = Math.round(value);
      circleStyle.strokeDashoffset = `${((100 - value) / 100 * circumference).toFixed(3)}px`;
      rootStyle.transform = "rotate(-90deg)";
    }
    return /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(CircularProgressRoot, _extends({
      className: clsx_default(classes.root, className),
      style: _extends({
        width: size,
        height: size
      }, rootStyle, style4),
      ownerState,
      ref,
      role: "progressbar"
    }, rootProps, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(CircularProgressSVG, {
        className: classes.svg,
        ownerState,
        viewBox: `${SIZE / 2} ${SIZE / 2} ${SIZE} ${SIZE}`,
        children: /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(CircularProgressCircle, {
          className: classes.circle,
          style: circleStyle,
          ownerState,
          cx: SIZE,
          cy: SIZE,
          r: (SIZE - thickness) / 2,
          fill: "none",
          strokeWidth: thickness
        })
      })
    }));
  });
  true ? CircularProgress.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types113.default.object,
    /**
     * @ignore
     */
    className: import_prop_types113.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'primary'
     */
    color: import_prop_types113.default.oneOfType([import_prop_types113.default.oneOf(["inherit", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types113.default.string]),
    /**
     * If `true`, the shrink animation is disabled.
     * This only works if variant is `indeterminate`.
     * @default false
     */
    disableShrink: chainPropTypes(import_prop_types113.default.bool, (props) => {
      if (props.disableShrink && props.variant && props.variant !== "indeterminate") {
        return new Error("MUI: You have provided the `disableShrink` prop with a variant other than `indeterminate`. This will have no effect.");
      }
      return null;
    }),
    /**
     * The size of the component.
     * If using a number, the pixel unit is assumed.
     * If using a string, you need to provide the CSS unit, for example '3rem'.
     * @default 40
     */
    size: import_prop_types113.default.oneOfType([import_prop_types113.default.number, import_prop_types113.default.string]),
    /**
     * @ignore
     */
    style: import_prop_types113.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types113.default.oneOfType([import_prop_types113.default.arrayOf(import_prop_types113.default.oneOfType([import_prop_types113.default.func, import_prop_types113.default.object, import_prop_types113.default.bool])), import_prop_types113.default.func, import_prop_types113.default.object]),
    /**
     * The thickness of the circle.
     * @default 3.6
     */
    thickness: import_prop_types113.default.number,
    /**
     * The value of the progress indicator for the determinate variant.
     * Value between 0 and 100.
     * @default 0
     */
    value: import_prop_types113.default.number,
    /**
     * The variant to use.
     * Use indeterminate when there is no progress value.
     * @default 'indeterminate'
     */
    variant: import_prop_types113.default.oneOf(["determinate", "indeterminate"])
  } : void 0;
  var CircularProgress_default = CircularProgress;

  // node_modules/@mui/x-data-grid/components/GridLoadingOverlay.js
  var import_jsx_runtime162 = __toESM(require_jsx_runtime());
  var GridLoadingOverlay = /* @__PURE__ */ React164.forwardRef(function GridLoadingOverlay2(props, ref) {
    return /* @__PURE__ */ (0, import_jsx_runtime162.jsx)(GridOverlay, _extends({
      ref
    }, props, {
      children: /* @__PURE__ */ (0, import_jsx_runtime162.jsx)(CircularProgress_default, {})
    }));
  });
  true ? GridLoadingOverlay.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    sx: import_prop_types114.default.oneOfType([import_prop_types114.default.arrayOf(import_prop_types114.default.oneOfType([import_prop_types114.default.func, import_prop_types114.default.object, import_prop_types114.default.bool])), import_prop_types114.default.func, import_prop_types114.default.object])
  } : void 0;

  // node_modules/@mui/x-data-grid/components/GridNoRowsOverlay.js
  init_extends();
  var React165 = __toESM(require_react());
  var import_prop_types115 = __toESM(require_prop_types());
  var import_jsx_runtime163 = __toESM(require_jsx_runtime());
  var GridNoRowsOverlay = /* @__PURE__ */ React165.forwardRef(function GridNoRowsOverlay2(props, ref) {
    const apiRef = useGridApiContext();
    const noRowsLabel = apiRef.current.getLocaleText("noRowsLabel");
    return /* @__PURE__ */ (0, import_jsx_runtime163.jsx)(GridOverlay, _extends({
      ref
    }, props, {
      children: noRowsLabel
    }));
  });
  true ? GridNoRowsOverlay.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    sx: import_prop_types115.default.oneOfType([import_prop_types115.default.arrayOf(import_prop_types115.default.oneOfType([import_prop_types115.default.func, import_prop_types115.default.object, import_prop_types115.default.bool])), import_prop_types115.default.func, import_prop_types115.default.object])
  } : void 0;

  // node_modules/@mui/x-data-grid/components/GridPagination.js
  init_extends();
  var React176 = __toESM(require_react());
  var import_prop_types120 = __toESM(require_prop_types());

  // node_modules/@mui/material/TablePagination/TablePagination.js
  init_extends();
  var React175 = __toESM(require_react());
  var import_prop_types119 = __toESM(require_prop_types());

  // node_modules/@mui/material/TableCell/TableCell.js
  init_extends();
  var React168 = __toESM(require_react());
  var import_prop_types116 = __toESM(require_prop_types());
  var import_colorManipulator9 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/Table/TableContext.js
  var React166 = __toESM(require_react());
  var TableContext = /* @__PURE__ */ React166.createContext();
  if (true) {
    TableContext.displayName = "TableContext";
  }
  var TableContext_default = TableContext;

  // node_modules/@mui/material/Table/Tablelvl2Context.js
  var React167 = __toESM(require_react());
  var Tablelvl2Context = /* @__PURE__ */ React167.createContext();
  if (true) {
    Tablelvl2Context.displayName = "Tablelvl2Context";
  }
  var Tablelvl2Context_default = Tablelvl2Context;

  // node_modules/@mui/material/TableCell/tableCellClasses.js
  function getTableCellUtilityClass(slot) {
    return generateUtilityClass("MuiTableCell", slot);
  }
  var tableCellClasses = generateUtilityClasses("MuiTableCell", ["root", "head", "body", "footer", "sizeSmall", "sizeMedium", "paddingCheckbox", "paddingNone", "alignLeft", "alignCenter", "alignRight", "alignJustify", "stickyHeader"]);
  var tableCellClasses_default = tableCellClasses;

  // node_modules/@mui/material/TableCell/TableCell.js
  var import_jsx_runtime164 = __toESM(require_jsx_runtime());
  var _excluded108 = ["align", "className", "component", "padding", "scope", "size", "sortDirection", "variant"];
  var useUtilityClasses67 = (ownerState) => {
    const {
      classes,
      variant,
      align,
      padding: padding2,
      size,
      stickyHeader
    } = ownerState;
    const slots = {
      root: ["root", variant, stickyHeader && "stickyHeader", align !== "inherit" && `align${capitalize_default(align)}`, padding2 !== "normal" && `padding${capitalize_default(padding2)}`, `size${capitalize_default(size)}`]
    };
    return composeClasses(slots, getTableCellUtilityClass, classes);
  };
  var TableCellRoot = styled_default2("td", {
    name: "MuiTableCell",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, styles4[ownerState.variant], styles4[`size${capitalize_default(ownerState.size)}`], ownerState.padding !== "normal" && styles4[`padding${capitalize_default(ownerState.padding)}`], ownerState.align !== "inherit" && styles4[`align${capitalize_default(ownerState.align)}`], ownerState.stickyHeader && styles4.stickyHeader];
    }
  })(({
    theme,
    ownerState
  }) => _extends({}, theme.typography.body2, {
    display: "table-cell",
    verticalAlign: "inherit",
    // Workaround for a rendering bug with spanned columns in Chrome 62.0.
    // Removes the alpha (sets it to 1), and lightens or darkens the theme color.
    borderBottom: theme.vars ? `1px solid ${theme.vars.palette.TableCell.border}` : `1px solid
    ${theme.palette.mode === "light" ? (0, import_colorManipulator9.lighten)((0, import_colorManipulator9.alpha)(theme.palette.divider, 1), 0.88) : (0, import_colorManipulator9.darken)((0, import_colorManipulator9.alpha)(theme.palette.divider, 1), 0.68)}`,
    textAlign: "left",
    padding: 16
  }, ownerState.variant === "head" && {
    color: (theme.vars || theme).palette.text.primary,
    lineHeight: theme.typography.pxToRem(24),
    fontWeight: theme.typography.fontWeightMedium
  }, ownerState.variant === "body" && {
    color: (theme.vars || theme).palette.text.primary
  }, ownerState.variant === "footer" && {
    color: (theme.vars || theme).palette.text.secondary,
    lineHeight: theme.typography.pxToRem(21),
    fontSize: theme.typography.pxToRem(12)
  }, ownerState.size === "small" && {
    padding: "6px 16px",
    [`&.${tableCellClasses_default.paddingCheckbox}`]: {
      width: 24,
      // prevent the checkbox column from growing
      padding: "0 12px 0 16px",
      "& > *": {
        padding: 0
      }
    }
  }, ownerState.padding === "checkbox" && {
    width: 48,
    // prevent the checkbox column from growing
    padding: "0 0 0 4px"
  }, ownerState.padding === "none" && {
    padding: 0
  }, ownerState.align === "left" && {
    textAlign: "left"
  }, ownerState.align === "center" && {
    textAlign: "center"
  }, ownerState.align === "right" && {
    textAlign: "right",
    flexDirection: "row-reverse"
  }, ownerState.align === "justify" && {
    textAlign: "justify"
  }, ownerState.stickyHeader && {
    position: "sticky",
    top: 0,
    zIndex: 2,
    backgroundColor: (theme.vars || theme).palette.background.default
  }));
  var TableCell = /* @__PURE__ */ React168.forwardRef(function TableCell2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiTableCell"
    });
    const {
      align = "inherit",
      className,
      component: componentProp,
      padding: paddingProp,
      scope: scopeProp,
      size: sizeProp,
      sortDirection,
      variant: variantProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded108);
    const table = React168.useContext(TableContext_default);
    const tablelvl2 = React168.useContext(Tablelvl2Context_default);
    const isHeadCell = tablelvl2 && tablelvl2.variant === "head";
    let component;
    if (componentProp) {
      component = componentProp;
    } else {
      component = isHeadCell ? "th" : "td";
    }
    let scope = scopeProp;
    if (component === "td") {
      scope = void 0;
    } else if (!scope && isHeadCell) {
      scope = "col";
    }
    const variant = variantProp || tablelvl2 && tablelvl2.variant;
    const ownerState = _extends({}, props, {
      align,
      component,
      padding: paddingProp || (table && table.padding ? table.padding : "normal"),
      size: sizeProp || (table && table.size ? table.size : "medium"),
      sortDirection,
      stickyHeader: variant === "head" && table && table.stickyHeader,
      variant
    });
    const classes = useUtilityClasses67(ownerState);
    let ariaSort = null;
    if (sortDirection) {
      ariaSort = sortDirection === "asc" ? "ascending" : "descending";
    }
    return /* @__PURE__ */ (0, import_jsx_runtime164.jsx)(TableCellRoot, _extends({
      as: component,
      ref,
      className: clsx_default(classes.root, className),
      "aria-sort": ariaSort,
      scope,
      ownerState
    }, other));
  });
  true ? TableCell.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * Set the text-align on the table cell content.
     *
     * Monetary or generally number fields **should be right aligned** as that allows
     * you to add them up quickly in your head without having to worry about decimals.
     * @default 'inherit'
     */
    align: import_prop_types116.default.oneOf(["center", "inherit", "justify", "left", "right"]),
    /**
     * The content of the component.
     */
    children: import_prop_types116.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types116.default.object,
    /**
     * @ignore
     */
    className: import_prop_types116.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types116.default.elementType,
    /**
     * Sets the padding applied to the cell.
     * The prop defaults to the value (`'default'`) inherited from the parent Table component.
     */
    padding: import_prop_types116.default.oneOf(["checkbox", "none", "normal"]),
    /**
     * Set scope attribute.
     */
    scope: import_prop_types116.default.string,
    /**
     * Specify the size of the cell.
     * The prop defaults to the value (`'medium'`) inherited from the parent Table component.
     */
    size: import_prop_types116.default.oneOfType([import_prop_types116.default.oneOf(["medium", "small"]), import_prop_types116.default.string]),
    /**
     * Set aria-sort direction.
     */
    sortDirection: import_prop_types116.default.oneOf(["asc", "desc", false]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types116.default.oneOfType([import_prop_types116.default.arrayOf(import_prop_types116.default.oneOfType([import_prop_types116.default.func, import_prop_types116.default.object, import_prop_types116.default.bool])), import_prop_types116.default.func, import_prop_types116.default.object]),
    /**
     * Specify the cell type.
     * The prop defaults to the value inherited from the parent TableHead, TableBody, or TableFooter components.
     */
    variant: import_prop_types116.default.oneOfType([import_prop_types116.default.oneOf(["body", "footer", "head"]), import_prop_types116.default.string])
  } : void 0;
  var TableCell_default = TableCell;

  // node_modules/@mui/material/Toolbar/Toolbar.js
  init_extends();
  var React169 = __toESM(require_react());
  var import_prop_types117 = __toESM(require_prop_types());

  // node_modules/@mui/material/Toolbar/toolbarClasses.js
  function getToolbarUtilityClass(slot) {
    return generateUtilityClass("MuiToolbar", slot);
  }
  var toolbarClasses = generateUtilityClasses("MuiToolbar", ["root", "gutters", "regular", "dense"]);

  // node_modules/@mui/material/Toolbar/Toolbar.js
  var import_jsx_runtime165 = __toESM(require_jsx_runtime());
  var _excluded109 = ["className", "component", "disableGutters", "variant"];
  var useUtilityClasses68 = (ownerState) => {
    const {
      classes,
      disableGutters,
      variant
    } = ownerState;
    const slots = {
      root: ["root", !disableGutters && "gutters", variant]
    };
    return composeClasses(slots, getToolbarUtilityClass, classes);
  };
  var ToolbarRoot = styled_default2("div", {
    name: "MuiToolbar",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, !ownerState.disableGutters && styles4.gutters, styles4[ownerState.variant]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    position: "relative",
    display: "flex",
    alignItems: "center"
  }, !ownerState.disableGutters && {
    paddingLeft: theme.spacing(2),
    paddingRight: theme.spacing(2),
    [theme.breakpoints.up("sm")]: {
      paddingLeft: theme.spacing(3),
      paddingRight: theme.spacing(3)
    }
  }, ownerState.variant === "dense" && {
    minHeight: 48
  }), ({
    theme,
    ownerState
  }) => ownerState.variant === "regular" && theme.mixins.toolbar);
  var Toolbar = /* @__PURE__ */ React169.forwardRef(function Toolbar2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiToolbar"
    });
    const {
      className,
      component = "div",
      disableGutters = false,
      variant = "regular"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded109);
    const ownerState = _extends({}, props, {
      component,
      disableGutters,
      variant
    });
    const classes = useUtilityClasses68(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime165.jsx)(ToolbarRoot, _extends({
      as: component,
      className: clsx_default(classes.root, className),
      ref,
      ownerState
    }, other));
  });
  true ? Toolbar.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The Toolbar children, usually a mixture of `IconButton`, `Button` and `Typography`.
     * The Toolbar is a flex container, allowing flex item properties to be used to lay out the children.
     */
    children: import_prop_types117.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types117.default.object,
    /**
     * @ignore
     */
    className: import_prop_types117.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types117.default.elementType,
    /**
     * If `true`, disables gutter padding.
     * @default false
     */
    disableGutters: import_prop_types117.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types117.default.oneOfType([import_prop_types117.default.arrayOf(import_prop_types117.default.oneOfType([import_prop_types117.default.func, import_prop_types117.default.object, import_prop_types117.default.bool])), import_prop_types117.default.func, import_prop_types117.default.object]),
    /**
     * The variant to use.
     * @default 'regular'
     */
    variant: import_prop_types117.default.oneOfType([import_prop_types117.default.oneOf(["dense", "regular"]), import_prop_types117.default.string])
  } : void 0;
  var Toolbar_default = Toolbar;

  // node_modules/@mui/material/TablePagination/TablePaginationActions.js
  init_extends();
  var React174 = __toESM(require_react());
  var import_prop_types118 = __toESM(require_prop_types());

  // node_modules/@mui/material/internal/svg-icons/KeyboardArrowLeft.js
  var React170 = __toESM(require_react());
  var import_jsx_runtime166 = __toESM(require_jsx_runtime());
  var KeyboardArrowLeft_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime166.jsx)("path", {
    d: "M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z"
  }), "KeyboardArrowLeft");

  // node_modules/@mui/material/internal/svg-icons/KeyboardArrowRight.js
  var React171 = __toESM(require_react());
  var import_jsx_runtime167 = __toESM(require_jsx_runtime());
  var KeyboardArrowRight_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime167.jsx)("path", {
    d: "M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"
  }), "KeyboardArrowRight");

  // node_modules/@mui/material/internal/svg-icons/LastPage.js
  var React172 = __toESM(require_react());
  var import_jsx_runtime168 = __toESM(require_jsx_runtime());
  var LastPage_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime168.jsx)("path", {
    d: "M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z"
  }), "LastPage");

  // node_modules/@mui/material/internal/svg-icons/FirstPage.js
  var React173 = __toESM(require_react());
  var import_jsx_runtime169 = __toESM(require_jsx_runtime());
  var FirstPage_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime169.jsx)("path", {
    d: "M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z"
  }), "FirstPage");

  // node_modules/@mui/material/TablePagination/TablePaginationActions.js
  var import_jsx_runtime170 = __toESM(require_jsx_runtime());
  var import_jsx_runtime171 = __toESM(require_jsx_runtime());
  var _excluded110 = ["backIconButtonProps", "count", "disabled", "getItemAriaLabel", "nextIconButtonProps", "onPageChange", "page", "rowsPerPage", "showFirstButton", "showLastButton", "slots", "slotProps"];
  var TablePaginationActions = /* @__PURE__ */ React174.forwardRef(function TablePaginationActions2(props, ref) {
    var _slots$firstButton, _slots$lastButton, _slots$nextButton, _slots$previousButton, _slots$firstButtonIco, _slots$lastButtonIcon, _slots$nextButtonIcon, _slots$previousButton2;
    const {
      backIconButtonProps,
      count,
      disabled = false,
      getItemAriaLabel,
      nextIconButtonProps,
      onPageChange,
      page,
      rowsPerPage,
      showFirstButton,
      showLastButton,
      slots = {},
      slotProps = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded110);
    const isRtl = useRtl();
    const handleFirstPageButtonClick = (event) => {
      onPageChange(event, 0);
    };
    const handleBackButtonClick = (event) => {
      onPageChange(event, page - 1);
    };
    const handleNextButtonClick = (event) => {
      onPageChange(event, page + 1);
    };
    const handleLastPageButtonClick = (event) => {
      onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));
    };
    const FirstButton = (_slots$firstButton = slots.firstButton) != null ? _slots$firstButton : IconButton_default;
    const LastButton = (_slots$lastButton = slots.lastButton) != null ? _slots$lastButton : IconButton_default;
    const NextButton = (_slots$nextButton = slots.nextButton) != null ? _slots$nextButton : IconButton_default;
    const PreviousButton = (_slots$previousButton = slots.previousButton) != null ? _slots$previousButton : IconButton_default;
    const FirstButtonIcon = (_slots$firstButtonIco = slots.firstButtonIcon) != null ? _slots$firstButtonIco : FirstPage_default;
    const LastButtonIcon = (_slots$lastButtonIcon = slots.lastButtonIcon) != null ? _slots$lastButtonIcon : LastPage_default;
    const NextButtonIcon = (_slots$nextButtonIcon = slots.nextButtonIcon) != null ? _slots$nextButtonIcon : KeyboardArrowRight_default;
    const PreviousButtonIcon = (_slots$previousButton2 = slots.previousButtonIcon) != null ? _slots$previousButton2 : KeyboardArrowLeft_default;
    const FirstButtonSlot = isRtl ? LastButton : FirstButton;
    const PreviousButtonSlot = isRtl ? NextButton : PreviousButton;
    const NextButtonSlot = isRtl ? PreviousButton : NextButton;
    const LastButtonSlot = isRtl ? FirstButton : LastButton;
    const firstButtonSlotProps = isRtl ? slotProps.lastButton : slotProps.firstButton;
    const previousButtonSlotProps = isRtl ? slotProps.nextButton : slotProps.previousButton;
    const nextButtonSlotProps = isRtl ? slotProps.previousButton : slotProps.nextButton;
    const lastButtonSlotProps = isRtl ? slotProps.firstButton : slotProps.lastButton;
    return /* @__PURE__ */ (0, import_jsx_runtime171.jsxs)("div", _extends({
      ref
    }, other, {
      children: [showFirstButton && /* @__PURE__ */ (0, import_jsx_runtime170.jsx)(FirstButtonSlot, _extends({
        onClick: handleFirstPageButtonClick,
        disabled: disabled || page === 0,
        "aria-label": getItemAriaLabel("first", page),
        title: getItemAriaLabel("first", page)
      }, firstButtonSlotProps, {
        children: isRtl ? /* @__PURE__ */ (0, import_jsx_runtime170.jsx)(LastButtonIcon, _extends({}, slotProps.lastButtonIcon)) : /* @__PURE__ */ (0, import_jsx_runtime170.jsx)(FirstButtonIcon, _extends({}, slotProps.firstButtonIcon))
      })), /* @__PURE__ */ (0, import_jsx_runtime170.jsx)(PreviousButtonSlot, _extends({
        onClick: handleBackButtonClick,
        disabled: disabled || page === 0,
        color: "inherit",
        "aria-label": getItemAriaLabel("previous", page),
        title: getItemAriaLabel("previous", page)
      }, previousButtonSlotProps != null ? previousButtonSlotProps : backIconButtonProps, {
        children: isRtl ? /* @__PURE__ */ (0, import_jsx_runtime170.jsx)(NextButtonIcon, _extends({}, slotProps.nextButtonIcon)) : /* @__PURE__ */ (0, import_jsx_runtime170.jsx)(PreviousButtonIcon, _extends({}, slotProps.previousButtonIcon))
      })), /* @__PURE__ */ (0, import_jsx_runtime170.jsx)(NextButtonSlot, _extends({
        onClick: handleNextButtonClick,
        disabled: disabled || (count !== -1 ? page >= Math.ceil(count / rowsPerPage) - 1 : false),
        color: "inherit",
        "aria-label": getItemAriaLabel("next", page),
        title: getItemAriaLabel("next", page)
      }, nextButtonSlotProps != null ? nextButtonSlotProps : nextIconButtonProps, {
        children: isRtl ? /* @__PURE__ */ (0, import_jsx_runtime170.jsx)(PreviousButtonIcon, _extends({}, slotProps.previousButtonIcon)) : /* @__PURE__ */ (0, import_jsx_runtime170.jsx)(NextButtonIcon, _extends({}, slotProps.nextButtonIcon))
      })), showLastButton && /* @__PURE__ */ (0, import_jsx_runtime170.jsx)(LastButtonSlot, _extends({
        onClick: handleLastPageButtonClick,
        disabled: disabled || page >= Math.ceil(count / rowsPerPage) - 1,
        "aria-label": getItemAriaLabel("last", page),
        title: getItemAriaLabel("last", page)
      }, lastButtonSlotProps, {
        children: isRtl ? /* @__PURE__ */ (0, import_jsx_runtime170.jsx)(FirstButtonIcon, _extends({}, slotProps.firstButtonIcon)) : /* @__PURE__ */ (0, import_jsx_runtime170.jsx)(LastButtonIcon, _extends({}, slotProps.lastButtonIcon))
      }))]
    }));
  });
  true ? TablePaginationActions.propTypes = {
    /**
     * Props applied to the back arrow [`IconButton`](/material-ui/api/icon-button/) element.
     */
    backIconButtonProps: import_prop_types118.default.object,
    /**
     * The total number of rows.
     */
    count: import_prop_types118.default.number.isRequired,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types118.default.bool,
    /**
     * Accepts a function which returns a string value that provides a user-friendly name for the current page.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     *
     * @param {string} type The link or button type to format ('page' | 'first' | 'last' | 'next' | 'previous'). Defaults to 'page'.
     * @param {number} page The page number to format.
     * @returns {string}
     */
    getItemAriaLabel: import_prop_types118.default.func.isRequired,
    /**
     * Props applied to the next arrow [`IconButton`](/material-ui/api/icon-button/) element.
     */
    nextIconButtonProps: import_prop_types118.default.object,
    /**
     * Callback fired when the page is changed.
     *
     * @param {object} event The event source of the callback.
     * @param {number} page The page selected.
     */
    onPageChange: import_prop_types118.default.func.isRequired,
    /**
     * The zero-based index of the current page.
     */
    page: import_prop_types118.default.number.isRequired,
    /**
     * The number of rows per page.
     */
    rowsPerPage: import_prop_types118.default.number.isRequired,
    /**
     * If `true`, show the first-page button.
     */
    showFirstButton: import_prop_types118.default.bool.isRequired,
    /**
     * If `true`, show the last-page button.
     */
    showLastButton: import_prop_types118.default.bool.isRequired,
    /**
     * The props used for each slot inside the TablePaginationActions.
     * @default {}
     */
    slotProps: import_prop_types118.default.shape({
      firstButton: import_prop_types118.default.object,
      firstButtonIcon: import_prop_types118.default.object,
      lastButton: import_prop_types118.default.object,
      lastButtonIcon: import_prop_types118.default.object,
      nextButton: import_prop_types118.default.object,
      nextButtonIcon: import_prop_types118.default.object,
      previousButton: import_prop_types118.default.object,
      previousButtonIcon: import_prop_types118.default.object
    }),
    /**
     * The components used for each slot inside the TablePaginationActions.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types118.default.shape({
      firstButton: import_prop_types118.default.elementType,
      firstButtonIcon: import_prop_types118.default.elementType,
      lastButton: import_prop_types118.default.elementType,
      lastButtonIcon: import_prop_types118.default.elementType,
      nextButton: import_prop_types118.default.elementType,
      nextButtonIcon: import_prop_types118.default.elementType,
      previousButton: import_prop_types118.default.elementType,
      previousButtonIcon: import_prop_types118.default.elementType
    })
  } : void 0;
  var TablePaginationActions_default = TablePaginationActions;

  // node_modules/@mui/material/TablePagination/tablePaginationClasses.js
  function getTablePaginationUtilityClass(slot) {
    return generateUtilityClass("MuiTablePagination", slot);
  }
  var tablePaginationClasses = generateUtilityClasses("MuiTablePagination", ["root", "toolbar", "spacer", "selectLabel", "selectRoot", "select", "selectIcon", "input", "menuItem", "displayedRows", "actions"]);
  var tablePaginationClasses_default = tablePaginationClasses;

  // node_modules/@mui/material/TablePagination/TablePagination.js
  var import_jsx_runtime172 = __toESM(require_jsx_runtime());
  var import_react11 = __toESM(require_react());
  var import_jsx_runtime173 = __toESM(require_jsx_runtime());
  var _InputBase;
  var _excluded111 = ["ActionsComponent", "backIconButtonProps", "className", "colSpan", "component", "count", "disabled", "getItemAriaLabel", "labelDisplayedRows", "labelRowsPerPage", "nextIconButtonProps", "onPageChange", "onRowsPerPageChange", "page", "rowsPerPage", "rowsPerPageOptions", "SelectProps", "showFirstButton", "showLastButton", "slotProps", "slots"];
  var TablePaginationRoot = styled_default2(TableCell_default, {
    name: "MuiTablePagination",
    slot: "Root",
    overridesResolver: (props, styles4) => styles4.root
  })(({
    theme
  }) => ({
    overflow: "auto",
    color: (theme.vars || theme).palette.text.primary,
    fontSize: theme.typography.pxToRem(14),
    // Increase the specificity to override TableCell.
    "&:last-child": {
      padding: 0
    }
  }));
  var TablePaginationToolbar = styled_default2(Toolbar_default, {
    name: "MuiTablePagination",
    slot: "Toolbar",
    overridesResolver: (props, styles4) => _extends({
      [`& .${tablePaginationClasses_default.actions}`]: styles4.actions
    }, styles4.toolbar)
  })(({
    theme
  }) => ({
    minHeight: 52,
    paddingRight: 2,
    [`${theme.breakpoints.up("xs")} and (orientation: landscape)`]: {
      minHeight: 52
    },
    [theme.breakpoints.up("sm")]: {
      minHeight: 52,
      paddingRight: 2
    },
    [`& .${tablePaginationClasses_default.actions}`]: {
      flexShrink: 0,
      marginLeft: 20
    }
  }));
  var TablePaginationSpacer = styled_default2("div", {
    name: "MuiTablePagination",
    slot: "Spacer",
    overridesResolver: (props, styles4) => styles4.spacer
  })({
    flex: "1 1 100%"
  });
  var TablePaginationSelectLabel = styled_default2("p", {
    name: "MuiTablePagination",
    slot: "SelectLabel",
    overridesResolver: (props, styles4) => styles4.selectLabel
  })(({
    theme
  }) => _extends({}, theme.typography.body2, {
    flexShrink: 0
  }));
  var TablePaginationSelect = styled_default2(Select_default, {
    name: "MuiTablePagination",
    slot: "Select",
    overridesResolver: (props, styles4) => _extends({
      [`& .${tablePaginationClasses_default.selectIcon}`]: styles4.selectIcon,
      [`& .${tablePaginationClasses_default.select}`]: styles4.select
    }, styles4.input, styles4.selectRoot)
  })({
    color: "inherit",
    fontSize: "inherit",
    flexShrink: 0,
    marginRight: 32,
    marginLeft: 8,
    [`& .${tablePaginationClasses_default.select}`]: {
      paddingLeft: 8,
      paddingRight: 24,
      textAlign: "right",
      textAlignLast: "right"
      // Align <select> on Chrome.
    }
  });
  var TablePaginationMenuItem = styled_default2(MenuItem_default, {
    name: "MuiTablePagination",
    slot: "MenuItem",
    overridesResolver: (props, styles4) => styles4.menuItem
  })({});
  var TablePaginationDisplayedRows = styled_default2("p", {
    name: "MuiTablePagination",
    slot: "DisplayedRows",
    overridesResolver: (props, styles4) => styles4.displayedRows
  })(({
    theme
  }) => _extends({}, theme.typography.body2, {
    flexShrink: 0
  }));
  function defaultLabelDisplayedRows({
    from: from2,
    to,
    count
  }) {
    return `${from2}\u2013${to} of ${count !== -1 ? count : `more than ${to}`}`;
  }
  function defaultGetAriaLabel(type) {
    return `Go to ${type} page`;
  }
  var useUtilityClasses69 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      toolbar: ["toolbar"],
      spacer: ["spacer"],
      selectLabel: ["selectLabel"],
      select: ["select"],
      input: ["input"],
      selectIcon: ["selectIcon"],
      menuItem: ["menuItem"],
      displayedRows: ["displayedRows"],
      actions: ["actions"]
    };
    return composeClasses(slots, getTablePaginationUtilityClass, classes);
  };
  var TablePagination = /* @__PURE__ */ React175.forwardRef(function TablePagination2(inProps, ref) {
    var _slotProps$select;
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiTablePagination"
    });
    const {
      ActionsComponent = TablePaginationActions_default,
      backIconButtonProps,
      className,
      colSpan: colSpanProp,
      component = TableCell_default,
      count,
      disabled = false,
      getItemAriaLabel = defaultGetAriaLabel,
      labelDisplayedRows = defaultLabelDisplayedRows,
      labelRowsPerPage = "Rows per page:",
      nextIconButtonProps,
      onPageChange,
      onRowsPerPageChange,
      page,
      rowsPerPage,
      rowsPerPageOptions = [10, 25, 50, 100],
      SelectProps = {},
      showFirstButton = false,
      showLastButton = false,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded111);
    const ownerState = props;
    const classes = useUtilityClasses69(ownerState);
    const selectProps = (_slotProps$select = slotProps == null ? void 0 : slotProps.select) != null ? _slotProps$select : SelectProps;
    const MenuItemComponent = selectProps.native ? "option" : TablePaginationMenuItem;
    let colSpan;
    if (component === TableCell_default || component === "td") {
      colSpan = colSpanProp || 1e3;
    }
    const selectId = useId_default(selectProps.id);
    const labelId = useId_default(selectProps.labelId);
    const getLabelDisplayedRowsTo = () => {
      if (count === -1) {
        return (page + 1) * rowsPerPage;
      }
      return rowsPerPage === -1 ? count : Math.min(count, (page + 1) * rowsPerPage);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(TablePaginationRoot, _extends({
      colSpan,
      ref,
      as: component,
      ownerState,
      className: clsx_default(classes.root, className)
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime173.jsxs)(TablePaginationToolbar, {
        className: classes.toolbar,
        children: [/* @__PURE__ */ (0, import_jsx_runtime172.jsx)(TablePaginationSpacer, {
          className: classes.spacer
        }), rowsPerPageOptions.length > 1 && /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(TablePaginationSelectLabel, {
          className: classes.selectLabel,
          id: labelId,
          children: labelRowsPerPage
        }), rowsPerPageOptions.length > 1 && /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(TablePaginationSelect, _extends({
          variant: "standard"
        }, !selectProps.variant && {
          input: _InputBase || (_InputBase = /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(InputBase_default, {}))
        }, {
          value: rowsPerPage,
          onChange: onRowsPerPageChange,
          id: selectId,
          labelId
        }, selectProps, {
          classes: _extends({}, selectProps.classes, {
            // TODO v5 remove `classes.input`
            root: clsx_default(classes.input, classes.selectRoot, (selectProps.classes || {}).root),
            select: clsx_default(classes.select, (selectProps.classes || {}).select),
            // TODO v5 remove `selectIcon`
            icon: clsx_default(classes.selectIcon, (selectProps.classes || {}).icon)
          }),
          disabled,
          children: rowsPerPageOptions.map((rowsPerPageOption) => /* @__PURE__ */ (0, import_react11.createElement)(MenuItemComponent, _extends({}, !isHostComponent_default(MenuItemComponent) && {
            ownerState
          }, {
            className: classes.menuItem,
            key: rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption,
            value: rowsPerPageOption.value ? rowsPerPageOption.value : rowsPerPageOption
          }), rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption))
        })), /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(TablePaginationDisplayedRows, {
          className: classes.displayedRows,
          children: labelDisplayedRows({
            from: count === 0 ? 0 : page * rowsPerPage + 1,
            to: getLabelDisplayedRowsTo(),
            count: count === -1 ? -1 : count,
            page
          })
        }), /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(ActionsComponent, {
          className: classes.actions,
          backIconButtonProps,
          count,
          nextIconButtonProps,
          onPageChange,
          page,
          rowsPerPage,
          showFirstButton,
          showLastButton,
          slotProps: slotProps.actions,
          slots: slots.actions,
          getItemAriaLabel,
          disabled
        })]
      })
    }));
  });
  true ? TablePagination.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The component used for displaying the actions.
     * Either a string to use a HTML element or a component.
     * @default TablePaginationActions
     */
    ActionsComponent: import_prop_types119.default.elementType,
    /**
     * Props applied to the back arrow [`IconButton`](/material-ui/api/icon-button/) component.
     *
     * This prop is an alias for `slotProps.actions.previousButton` and will be overriden by it if both are used.
     * @deprecated Use `slotProps.actions.previousButton` instead.
     */
    backIconButtonProps: import_prop_types119.default.object,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types119.default.object,
    /**
     * @ignore
     */
    className: import_prop_types119.default.string,
    /**
     * @ignore
     */
    colSpan: import_prop_types119.default.number,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types119.default.elementType,
    /**
     * The total number of rows.
     *
     * To enable server side pagination for an unknown number of items, provide -1.
     */
    count: integerPropType_default.isRequired,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types119.default.bool,
    /**
     * Accepts a function which returns a string value that provides a user-friendly name for the current page.
     * This is important for screen reader users.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @param {string} type The link or button type to format ('first' | 'last' | 'next' | 'previous').
     * @returns {string}
     * @default function defaultGetAriaLabel(type) {
     *   return `Go to ${type} page`;
     * }
     */
    getItemAriaLabel: import_prop_types119.default.func,
    /**
     * Customize the displayed rows label. Invoked with a `{ from, to, count, page }`
     * object.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @default function defaultLabelDisplayedRows({ from, to, count }) {
     *   return `${from}–${to} of ${count !== -1 ? count : `more than ${to}`}`;
     * }
     */
    labelDisplayedRows: import_prop_types119.default.func,
    /**
     * Customize the rows per page label.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @default 'Rows per page:'
     */
    labelRowsPerPage: import_prop_types119.default.node,
    /**
     * Props applied to the next arrow [`IconButton`](/material-ui/api/icon-button/) element.
     *
     * This prop is an alias for `slotProps.actions.nextButton` and will be overriden by it if both are used.
     * @deprecated Use `slotProps.actions.nextButton` instead.
     */
    nextIconButtonProps: import_prop_types119.default.object,
    /**
     * Callback fired when the page is changed.
     *
     * @param {React.MouseEvent<HTMLButtonElement> | null} event The event source of the callback.
     * @param {number} page The page selected.
     */
    onPageChange: import_prop_types119.default.func.isRequired,
    /**
     * Callback fired when the number of rows per page is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     */
    onRowsPerPageChange: import_prop_types119.default.func,
    /**
     * The zero-based index of the current page.
     */
    page: chainPropTypes(integerPropType_default.isRequired, (props) => {
      const {
        count,
        page,
        rowsPerPage
      } = props;
      if (count === -1) {
        return null;
      }
      const newLastPage = Math.max(0, Math.ceil(count / rowsPerPage) - 1);
      if (page < 0 || page > newLastPage) {
        return new Error(`MUI: The page prop of a TablePagination is out of range (0 to ${newLastPage}, but page is ${page}).`);
      }
      return null;
    }),
    /**
     * The number of rows per page.
     *
     * Set -1 to display all the rows.
     */
    rowsPerPage: integerPropType_default.isRequired,
    /**
     * Customizes the options of the rows per page select field. If less than two options are
     * available, no select field will be displayed.
     * Use -1 for the value with a custom label to show all the rows.
     * @default [10, 25, 50, 100]
     */
    rowsPerPageOptions: import_prop_types119.default.arrayOf(import_prop_types119.default.oneOfType([import_prop_types119.default.number, import_prop_types119.default.shape({
      label: import_prop_types119.default.string.isRequired,
      value: import_prop_types119.default.number.isRequired
    })]).isRequired),
    /**
     * Props applied to the rows per page [`Select`](/material-ui/api/select/) element.
     *
     * This prop is an alias for `slotProps.select` and will be overriden by it if both are used.
     * @deprecated Use `slotProps.select` instead.
     *
     * @default {}
     */
    SelectProps: import_prop_types119.default.object,
    /**
     * If `true`, show the first-page button.
     * @default false
     */
    showFirstButton: import_prop_types119.default.bool,
    /**
     * If `true`, show the last-page button.
     * @default false
     */
    showLastButton: import_prop_types119.default.bool,
    /**
     * The props used for each slot inside the TablePagination.
     * @default {}
     */
    slotProps: import_prop_types119.default.shape({
      actions: import_prop_types119.default.shape({
        firstButton: import_prop_types119.default.object,
        firstButtonIcon: import_prop_types119.default.object,
        lastButton: import_prop_types119.default.object,
        lastButtonIcon: import_prop_types119.default.object,
        nextButton: import_prop_types119.default.object,
        nextButtonIcon: import_prop_types119.default.object,
        previousButton: import_prop_types119.default.object,
        previousButtonIcon: import_prop_types119.default.object
      }),
      select: import_prop_types119.default.object
    }),
    /**
     * The components used for each slot inside the TablePagination.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types119.default.shape({
      actions: import_prop_types119.default.shape({
        firstButton: import_prop_types119.default.elementType,
        firstButtonIcon: import_prop_types119.default.elementType,
        lastButton: import_prop_types119.default.elementType,
        lastButtonIcon: import_prop_types119.default.elementType,
        nextButton: import_prop_types119.default.elementType,
        nextButtonIcon: import_prop_types119.default.elementType,
        previousButton: import_prop_types119.default.elementType,
        previousButtonIcon: import_prop_types119.default.elementType
      })
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types119.default.oneOfType([import_prop_types119.default.arrayOf(import_prop_types119.default.oneOfType([import_prop_types119.default.func, import_prop_types119.default.object, import_prop_types119.default.bool])), import_prop_types119.default.func, import_prop_types119.default.object])
  } : void 0;
  var TablePagination_default = TablePagination;

  // node_modules/@mui/x-data-grid/components/GridPagination.js
  var import_jsx_runtime174 = __toESM(require_jsx_runtime());
  var GridPaginationRoot = styled_default2(TablePagination_default)(({
    theme
  }) => ({
    [`& .${tablePaginationClasses_default.selectLabel}`]: {
      display: "none",
      [theme.breakpoints.up("sm")]: {
        display: "block"
      }
    },
    [`& .${tablePaginationClasses_default.input}`]: {
      display: "none",
      [theme.breakpoints.up("sm")]: {
        display: "inline-flex"
      }
    }
  }));
  var GridPagination = /* @__PURE__ */ React176.forwardRef(function GridPagination2(props, ref) {
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const paginationModel = useGridSelector(apiRef, gridPaginationModelSelector);
    const rowCount = useGridSelector(apiRef, gridPaginationRowCountSelector);
    const lastPage = React176.useMemo(() => Math.floor(rowCount / (paginationModel.pageSize || 1)), [rowCount, paginationModel.pageSize]);
    const handlePageSizeChange = React176.useCallback((event) => {
      const pageSize2 = Number(event.target.value);
      apiRef.current.setPageSize(pageSize2);
    }, [apiRef]);
    const handlePageChange = React176.useCallback((_4, page) => {
      apiRef.current.setPage(page);
    }, [apiRef]);
    const isPageSizeIncludedInPageSizeOptions = (pageSize2) => {
      for (let i = 0; i < rootProps.pageSizeOptions.length; i += 1) {
        const option = rootProps.pageSizeOptions[i];
        if (typeof option === "number") {
          if (option === pageSize2) {
            return true;
          }
        } else if (option.value === pageSize2) {
          return true;
        }
      }
      return false;
    };
    if (true) {
      var _rootProps$pagination, _rootProps$pagination2;
      const warnedOnceMissingInPageSizeOptions = React176.useRef(false);
      const pageSize2 = (_rootProps$pagination = (_rootProps$pagination2 = rootProps.paginationModel) == null ? void 0 : _rootProps$pagination2.pageSize) != null ? _rootProps$pagination : paginationModel.pageSize;
      if (!warnedOnceMissingInPageSizeOptions.current && !rootProps.autoPageSize && !isPageSizeIncludedInPageSizeOptions(pageSize2)) {
        console.warn([`MUI X: The page size \`${paginationModel.pageSize}\` is not preset in the \`pageSizeOptions\`.`, `Add it to show the pagination select.`].join("\n"));
        warnedOnceMissingInPageSizeOptions.current = true;
      }
    }
    const pageSizeOptions = isPageSizeIncludedInPageSizeOptions(paginationModel.pageSize) ? rootProps.pageSizeOptions : [];
    return /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(GridPaginationRoot, _extends({
      ref,
      component: "div",
      count: rowCount,
      page: paginationModel.page <= lastPage ? paginationModel.page : lastPage,
      rowsPerPageOptions: pageSizeOptions,
      rowsPerPage: paginationModel.pageSize,
      onPageChange: handlePageChange,
      onRowsPerPageChange: handlePageSizeChange
    }, apiRef.current.getLocaleText("MuiTablePagination"), props));
  });
  true ? GridPagination.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    component: import_prop_types120.default.elementType
  } : void 0;

  // node_modules/@mui/x-data-grid/components/GridRowCount.js
  init_extends();
  var React177 = __toESM(require_react());
  var import_prop_types121 = __toESM(require_prop_types());
  var import_jsx_runtime175 = __toESM(require_jsx_runtime());
  var _excluded112 = ["className", "rowCount", "visibleRowCount"];
  var useUtilityClasses70 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["rowCount"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridRowCountRoot = styled_default("div", {
    name: "MuiDataGrid",
    slot: "RowCount",
    overridesResolver: (props, styles4) => styles4.rowCount
  })(({
    theme
  }) => ({
    alignItems: "center",
    display: "flex",
    margin: theme.spacing(0, 2)
  }));
  var GridRowCount = /* @__PURE__ */ React177.forwardRef(function GridRowCount2(props, ref) {
    const {
      className,
      rowCount,
      visibleRowCount
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded112);
    const apiRef = useGridApiContext();
    const ownerState = useGridRootProps();
    const classes = useUtilityClasses70(ownerState);
    if (rowCount === 0) {
      return null;
    }
    const text = visibleRowCount < rowCount ? apiRef.current.getLocaleText("footerTotalVisibleRows")(visibleRowCount, rowCount) : rowCount.toLocaleString();
    return /* @__PURE__ */ (0, import_jsx_runtime175.jsxs)(GridRowCountRoot, _extends({
      ref,
      className: clsx_default(classes.root, className),
      ownerState
    }, other, {
      children: [apiRef.current.getLocaleText("footerTotalRows"), " ", text]
    }));
  });
  true ? GridRowCount.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    rowCount: import_prop_types121.default.number.isRequired,
    sx: import_prop_types121.default.oneOfType([import_prop_types121.default.arrayOf(import_prop_types121.default.oneOfType([import_prop_types121.default.func, import_prop_types121.default.object, import_prop_types121.default.bool])), import_prop_types121.default.func, import_prop_types121.default.object]),
    visibleRowCount: import_prop_types121.default.number.isRequired
  } : void 0;

  // node_modules/@mui/x-data-grid/components/GridRow.js
  init_extends();
  var React180 = __toESM(require_react());
  var import_prop_types122 = __toESM(require_prop_types());

  // node_modules/@mui/x-data-grid/hooks/utils/useGridVisibleRows.js
  var React178 = __toESM(require_react());
  var getVisibleRows = (apiRef, props) => {
    let rows;
    let range;
    if (props.pagination && props.paginationMode === "client") {
      range = gridPaginationRowRangeSelector(apiRef);
      rows = gridPaginatedVisibleSortedGridRowEntriesSelector(apiRef);
    } else {
      rows = gridExpandedSortedRowEntriesSelector(apiRef);
      if (rows.length === 0) {
        range = null;
      } else {
        range = {
          firstRowIndex: 0,
          lastRowIndex: rows.length - 1
        };
      }
    }
    return {
      rows,
      range
    };
  };
  var useGridVisibleRows = (apiRef, props) => {
    const response = getVisibleRows(apiRef, props);
    return React178.useMemo(() => ({
      rows: response.rows,
      range: response.range
    }), [response.rows, response.range]);
  };

  // node_modules/@mui/x-data-grid/colDef/gridCheckboxSelectionColDef.js
  init_extends();
  var React179 = __toESM(require_react());

  // node_modules/@mui/x-data-grid/colDef/gridBooleanColDef.js
  init_extends();

  // node_modules/@mui/x-data-grid/colDef/utils.js
  init_extends();
  var GLOBAL_API_REF = {
    current: null
  };
  function tagInternalFilter(fn2) {
    fn2.isInternal = true;
    return fn2;
  }
  function isInternalFilter(fn2) {
    return fn2 !== void 0 && fn2.isInternal === true;
  }
  function convertFilterV7ToLegacy(fn2) {
    return tagInternalFilter((filterItem, column2) => {
      const filterFn = fn2(filterItem, column2);
      if (!filterFn) {
        return filterFn;
      }
      return (cellParams) => {
        return filterFn(cellParams.value, cellParams.row, column2, GLOBAL_API_REF.current);
      };
    });
  }
  function convertLegacyOperators(ops) {
    return ops.map((op) => {
      return _extends({}, op, {
        getApplyFilterFn: convertFilterV7ToLegacy(op.getApplyFilterFnV7),
        getApplyFilterFnV7: tagInternalFilter(op.getApplyFilterFnV7)
      });
    });
  }
  function convertQuickFilterV7ToLegacy(fn2) {
    return tagInternalFilter((filterItem, column2, apiRef) => {
      const filterFn = fn2(filterItem, column2, apiRef);
      if (!filterFn) {
        return filterFn;
      }
      return (cellParams) => {
        return filterFn(cellParams.value, cellParams.row, column2, apiRef);
      };
    });
  }

  // node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterUtils.js
  init_extends();

  // node_modules/@mui/x-data-grid/utils/getPublicApiRef.js
  function getPublicApiRef(apiRef) {
    return {
      current: apiRef.current.getPublicApi()
    };
  }

  // node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterUtils.js
  var hasEval;
  function getHasEval() {
    if (hasEval !== void 0) {
      return hasEval;
    }
    try {
      hasEval = new Function("return true")();
    } catch (_4) {
      hasEval = false;
    }
    return hasEval;
  }
  var cleanFilterItem = (item, apiRef) => {
    const cleanItem = _extends({}, item);
    if (cleanItem.id == null) {
      cleanItem.id = Math.round(Math.random() * 1e5);
    }
    if (cleanItem.operator == null) {
      const column2 = gridColumnLookupSelector(apiRef)[cleanItem.field];
      cleanItem.operator = column2 && column2.filterOperators[0].value;
    }
    return cleanItem;
  };
  var filterModelDisableMultiColumnsFilteringWarning = buildWarning(["MUI: The `filterModel` can only contain a single item when the `disableMultipleColumnsFiltering` prop is set to `true`.", "If you are using the community version of the `DataGrid`, this prop is always `true`."], "error");
  var filterModelMissingItemIdWarning = buildWarning("MUI: The `id` field is required on `filterModel.items` when you use multiple filters.", "error");
  var filterModelMissingItemOperatorWarning = buildWarning("MUI: The `operator` field is required on `filterModel.items`, one or more of your filtering item has no `operator` provided.", "error");
  var sanitizeFilterModel = (model, disableMultipleColumnsFiltering, apiRef) => {
    const hasSeveralItems = model.items.length > 1;
    let items;
    if (hasSeveralItems && disableMultipleColumnsFiltering) {
      filterModelDisableMultiColumnsFilteringWarning();
      items = [model.items[0]];
    } else {
      items = model.items;
    }
    const hasItemsWithoutIds = hasSeveralItems && items.some((item) => item.id == null);
    const hasItemWithoutOperator = items.some((item) => item.operator == null);
    if (hasItemsWithoutIds) {
      filterModelMissingItemIdWarning();
    }
    if (hasItemWithoutOperator) {
      filterModelMissingItemOperatorWarning();
    }
    if (hasItemWithoutOperator || hasItemsWithoutIds) {
      return _extends({}, model, {
        items: items.map((item) => cleanFilterItem(item, apiRef))
      });
    }
    if (model.items !== items) {
      return _extends({}, model, {
        items
      });
    }
    return model;
  };
  var mergeStateWithFilterModel = (filterModel, disableMultipleColumnsFiltering, apiRef) => (filteringState) => _extends({}, filteringState, {
    filterModel: sanitizeFilterModel(filterModel, disableMultipleColumnsFiltering, apiRef)
  });
  var removeDiacritics = (value) => {
    if (typeof value === "string") {
      return value.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
    }
    return value;
  };
  var getFilterCallbackFromItem = (filterItem, apiRef) => {
    if (!filterItem.field || !filterItem.operator) {
      return null;
    }
    const column2 = apiRef.current.getColumn(filterItem.field);
    if (!column2) {
      return null;
    }
    let parsedValue;
    if (column2.valueParser) {
      var _filterItem$value;
      const parser = column2.valueParser;
      parsedValue = Array.isArray(filterItem.value) ? (_filterItem$value = filterItem.value) == null ? void 0 : _filterItem$value.map((x) => parser(x)) : parser(filterItem.value);
    } else {
      parsedValue = filterItem.value;
    }
    const {
      ignoreDiacritics
    } = apiRef.current.rootProps;
    if (ignoreDiacritics) {
      parsedValue = removeDiacritics(parsedValue);
    }
    const newFilterItem = _extends({}, filterItem, {
      value: parsedValue
    });
    const filterOperators = column2.filterOperators;
    if (!(filterOperators != null && filterOperators.length)) {
      throw new Error(`MUI: No filter operators found for column '${column2.field}'.`);
    }
    const filterOperator = filterOperators.find((operator) => operator.value === newFilterItem.operator);
    if (!filterOperator) {
      throw new Error(`MUI: No filter operator found for column '${column2.field}' and operator value '${newFilterItem.operator}'.`);
    }
    const hasUserFunctionLegacy = !isInternalFilter(filterOperator.getApplyFilterFn);
    const hasUserFunctionV7 = !isInternalFilter(filterOperator.getApplyFilterFnV7);
    const publicApiRef = getPublicApiRef(apiRef);
    if (filterOperator.getApplyFilterFnV7 && !(hasUserFunctionLegacy && !hasUserFunctionV7)) {
      const applyFilterOnRow2 = filterOperator.getApplyFilterFnV7(newFilterItem, column2);
      if (typeof applyFilterOnRow2 !== "function") {
        return null;
      }
      return {
        v7: true,
        item: newFilterItem,
        fn: (row) => {
          let value = apiRef.current.getRowValue(row, column2);
          if (ignoreDiacritics) {
            value = removeDiacritics(value);
          }
          return applyFilterOnRow2(value, row, column2, publicApiRef);
        }
      };
    }
    const applyFilterOnRow = filterOperator.getApplyFilterFn(newFilterItem, column2);
    if (typeof applyFilterOnRow !== "function") {
      return null;
    }
    return {
      v7: false,
      item: newFilterItem,
      fn: (rowId) => {
        const params = apiRef.current.getCellParams(rowId, newFilterItem.field);
        GLOBAL_API_REF.current = publicApiRef;
        if (ignoreDiacritics) {
          params.value = removeDiacritics(params.value);
        }
        const result = applyFilterOnRow(params);
        GLOBAL_API_REF.current = null;
        return result;
      }
    };
  };
  var filterItemsApplierId = 1;
  var buildAggregatedFilterItemsApplier = (filterModel, apiRef, disableEval) => {
    const {
      items
    } = filterModel;
    const appliers = items.map((item) => getFilterCallbackFromItem(item, apiRef)).filter((callback) => !!callback);
    if (appliers.length === 0) {
      return null;
    }
    if (disableEval || !getHasEval()) {
      return (row, shouldApplyFilter) => {
        const resultPerItemId = {};
        for (let i = 0; i < appliers.length; i += 1) {
          const applier = appliers[i];
          if (!shouldApplyFilter || shouldApplyFilter(applier.item.field)) {
            resultPerItemId[applier.item.id] = applier.v7 ? applier.fn(row) : applier.fn(apiRef.current.getRowId(row));
          }
        }
        return resultPerItemId;
      };
    }
    const filterItemCore = new Function("getRowId", "appliers", "row", "shouldApplyFilter", `"use strict";
${appliers.map((applier, i) => `const shouldApply${i} = !shouldApplyFilter || shouldApplyFilter(${JSON.stringify(applier.item.field)});`).join("\n")}

const result$$ = {
${appliers.map((applier, i) => `  ${JSON.stringify(String(applier.item.id))}: !shouldApply${i}
    ? false
    : ${applier.v7 ? `appliers[${i}].fn(row)` : `appliers[${i}].fn(getRowId(row))`},`).join("\n")}
};

return result$$;`.replaceAll("$$", String(filterItemsApplierId)));
    filterItemsApplierId += 1;
    const filterItem = (row, shouldApplyItem) => filterItemCore(apiRef.current.getRowId, appliers, row, shouldApplyItem);
    return filterItem;
  };
  var buildAggregatedQuickFilterApplier = (filterModel, apiRef) => {
    var _filterModel$quickFil, _filterModel$quickFil2, _filterModel$quickFil3;
    const quickFilterValues = (_filterModel$quickFil = (_filterModel$quickFil2 = filterModel.quickFilterValues) == null ? void 0 : _filterModel$quickFil2.filter(Boolean)) != null ? _filterModel$quickFil : [];
    if (quickFilterValues.length === 0) {
      return null;
    }
    const quickFilterExcludeHiddenColumns = (_filterModel$quickFil3 = filterModel.quickFilterExcludeHiddenColumns) != null ? _filterModel$quickFil3 : false;
    const columnFields = quickFilterExcludeHiddenColumns ? gridVisibleColumnFieldsSelector(apiRef) : gridColumnFieldsSelector(apiRef);
    const appliersPerField = [];
    const {
      ignoreDiacritics
    } = apiRef.current.rootProps;
    const publicApiRef = getPublicApiRef(apiRef);
    columnFields.forEach((field) => {
      const column2 = apiRef.current.getColumn(field);
      const getApplyQuickFilterFn = column2 == null ? void 0 : column2.getApplyQuickFilterFn;
      const getApplyQuickFilterFnV7 = column2 == null ? void 0 : column2.getApplyQuickFilterFnV7;
      const hasUserFunctionLegacy = !isInternalFilter(getApplyQuickFilterFn);
      const hasUserFunctionV7 = !isInternalFilter(getApplyQuickFilterFnV7);
      if (getApplyQuickFilterFnV7 && !(hasUserFunctionLegacy && !hasUserFunctionV7)) {
        appliersPerField.push({
          column: column2,
          appliers: quickFilterValues.map((quickFilterValue) => {
            const value = ignoreDiacritics ? removeDiacritics(quickFilterValue) : quickFilterValue;
            return {
              v7: true,
              fn: getApplyQuickFilterFnV7(value, column2, publicApiRef)
            };
          })
        });
      } else if (getApplyQuickFilterFn) {
        appliersPerField.push({
          column: column2,
          appliers: quickFilterValues.map((quickFilterValue) => {
            const value = ignoreDiacritics ? removeDiacritics(quickFilterValue) : quickFilterValue;
            return {
              v7: false,
              fn: getApplyQuickFilterFn(value, column2, publicApiRef)
            };
          })
        });
      }
    });
    return function isRowMatchingQuickFilter(row, shouldApplyFilter) {
      const result = {};
      const usedCellParams = {};
      outer: for (let v = 0; v < quickFilterValues.length; v += 1) {
        const filterValue = quickFilterValues[v];
        for (let i = 0; i < appliersPerField.length; i += 1) {
          const {
            column: column2,
            appliers
          } = appliersPerField[i];
          const {
            field
          } = column2;
          if (shouldApplyFilter && !shouldApplyFilter(field)) {
            continue;
          }
          const applier = appliers[v];
          let value = apiRef.current.getRowValue(row, column2);
          if (applier.fn === null) {
            continue;
          }
          if (applier.v7) {
            if (ignoreDiacritics) {
              value = removeDiacritics(value);
            }
            const isMatching = applier.fn(value, row, column2, publicApiRef);
            if (isMatching) {
              result[filterValue] = true;
              continue outer;
            }
          } else {
            var _usedCellParams$field;
            const cellParams = (_usedCellParams$field = usedCellParams[field]) != null ? _usedCellParams$field : apiRef.current.getCellParams(apiRef.current.getRowId(row), field);
            if (ignoreDiacritics) {
              cellParams.value = removeDiacritics(cellParams.value);
            }
            usedCellParams[field] = cellParams;
            const isMatching = applier.fn(cellParams);
            if (isMatching) {
              result[filterValue] = true;
              continue outer;
            }
          }
        }
        result[filterValue] = false;
      }
      return result;
    };
  };
  var buildAggregatedFilterApplier = (filterModel, apiRef, disableEval) => {
    const isRowMatchingFilterItems = buildAggregatedFilterItemsApplier(filterModel, apiRef, disableEval);
    const isRowMatchingQuickFilter = buildAggregatedQuickFilterApplier(filterModel, apiRef);
    return function isRowMatchingFilters(row, shouldApplyFilter, result) {
      var _isRowMatchingFilterI, _isRowMatchingQuickFi;
      result.passingFilterItems = (_isRowMatchingFilterI = isRowMatchingFilterItems == null ? void 0 : isRowMatchingFilterItems(row, shouldApplyFilter)) != null ? _isRowMatchingFilterI : null;
      result.passingQuickFilterValues = (_isRowMatchingQuickFi = isRowMatchingQuickFilter == null ? void 0 : isRowMatchingQuickFilter(row, shouldApplyFilter)) != null ? _isRowMatchingQuickFi : null;
    };
  };
  var isNotNull = (result) => result != null;
  var filterModelItems = (cache, apiRef, items) => {
    if (!cache.cleanedFilterItems) {
      cache.cleanedFilterItems = items.filter((item) => getFilterCallbackFromItem(item, apiRef) !== null);
    }
    return cache.cleanedFilterItems;
  };
  var passFilterLogic = (allFilterItemResults, allQuickFilterResults, filterModel, apiRef, cache) => {
    const cleanedFilterItems = filterModelItems(cache, apiRef, filterModel.items);
    const cleanedFilterItemResults = allFilterItemResults.filter(isNotNull);
    const cleanedQuickFilterResults = allQuickFilterResults.filter(isNotNull);
    if (cleanedFilterItemResults.length > 0) {
      var _filterModel$logicOpe;
      const filterItemPredicate = (item) => {
        return cleanedFilterItemResults.some((filterItemResult) => filterItemResult[item.id]);
      };
      const logicOperator = (_filterModel$logicOpe = filterModel.logicOperator) != null ? _filterModel$logicOpe : getDefaultGridFilterModel().logicOperator;
      if (logicOperator === GridLogicOperator.And) {
        const passesAllFilters = cleanedFilterItems.every(filterItemPredicate);
        if (!passesAllFilters) {
          return false;
        }
      } else {
        const passesSomeFilters = cleanedFilterItems.some(filterItemPredicate);
        if (!passesSomeFilters) {
          return false;
        }
      }
    }
    if (cleanedQuickFilterResults.length > 0 && filterModel.quickFilterValues != null) {
      var _filterModel$quickFil4;
      const quickFilterValuePredicate = (value) => {
        return cleanedQuickFilterResults.some((quickFilterValueResult) => quickFilterValueResult[value]);
      };
      const quickFilterLogicOperator = (_filterModel$quickFil4 = filterModel.quickFilterLogicOperator) != null ? _filterModel$quickFil4 : getDefaultGridFilterModel().quickFilterLogicOperator;
      if (quickFilterLogicOperator === GridLogicOperator.And) {
        const passesAllQuickFilterValues = filterModel.quickFilterValues.every(quickFilterValuePredicate);
        if (!passesAllQuickFilterValues) {
          return false;
        }
      } else {
        const passesSomeQuickFilterValues = filterModel.quickFilterValues.some(quickFilterValuePredicate);
        if (!passesSomeQuickFilterValues) {
          return false;
        }
      }
    }
    return true;
  };

  // node_modules/@mui/x-data-grid/colDef/gridStringOperators.js
  var getGridStringQuickFilterFn = tagInternalFilter((value) => {
    if (!value) {
      return null;
    }
    const filterRegex = new RegExp(escapeRegExp(value), "i");
    return (_4, row, column2, apiRef) => {
      let columnValue = apiRef.current.getRowFormattedValue(row, column2);
      if (apiRef.current.ignoreDiacritics) {
        columnValue = removeDiacritics(columnValue);
      }
      return columnValue != null ? filterRegex.test(columnValue.toString()) : false;
    };
  });
  var getGridStringOperators = (disableTrim = false) => convertLegacyOperators([{
    value: "contains",
    getApplyFilterFnV7: (filterItem) => {
      if (!filterItem.value) {
        return null;
      }
      const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();
      const filterRegex = new RegExp(escapeRegExp(filterItemValue), "i");
      return (value) => {
        return value != null ? filterRegex.test(String(value)) : false;
      };
    },
    InputComponent: GridFilterInputValue
  }, {
    value: "equals",
    getApplyFilterFnV7: (filterItem) => {
      if (!filterItem.value) {
        return null;
      }
      const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();
      const collator4 = new Intl.Collator(void 0, {
        sensitivity: "base",
        usage: "search"
      });
      return (value) => {
        return value != null ? collator4.compare(filterItemValue, value.toString()) === 0 : false;
      };
    },
    InputComponent: GridFilterInputValue
  }, {
    value: "startsWith",
    getApplyFilterFnV7: (filterItem) => {
      if (!filterItem.value) {
        return null;
      }
      const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();
      const filterRegex = new RegExp(`^${escapeRegExp(filterItemValue)}.*$`, "i");
      return (value) => {
        return value != null ? filterRegex.test(value.toString()) : false;
      };
    },
    InputComponent: GridFilterInputValue
  }, {
    value: "endsWith",
    getApplyFilterFnV7: (filterItem) => {
      if (!filterItem.value) {
        return null;
      }
      const filterItemValue = disableTrim ? filterItem.value : filterItem.value.trim();
      const filterRegex = new RegExp(`.*${escapeRegExp(filterItemValue)}$`, "i");
      return (value) => {
        return value != null ? filterRegex.test(value.toString()) : false;
      };
    },
    InputComponent: GridFilterInputValue
  }, {
    value: "isEmpty",
    getApplyFilterFnV7: () => {
      return (value) => {
        return value === "" || value == null;
      };
    },
    requiresFilterValue: false
  }, {
    value: "isNotEmpty",
    getApplyFilterFnV7: () => {
      return (value) => {
        return value !== "" && value != null;
      };
    },
    requiresFilterValue: false
  }, {
    value: "isAnyOf",
    getApplyFilterFnV7: (filterItem) => {
      if (!Array.isArray(filterItem.value) || filterItem.value.length === 0) {
        return null;
      }
      const filterItemValue = disableTrim ? filterItem.value : filterItem.value.map((val) => val.trim());
      const collator4 = new Intl.Collator(void 0, {
        sensitivity: "base",
        usage: "search"
      });
      return (value) => value != null ? filterItemValue.some((filterValue) => {
        return collator4.compare(filterValue, value.toString() || "") === 0;
      }) : false;
    },
    InputComponent: GridFilterInputMultipleValue
  }]);

  // node_modules/@mui/x-data-grid/colDef/gridStringColDef.js
  var GRID_STRING_COL_DEF = {
    width: 100,
    minWidth: 50,
    maxWidth: Infinity,
    hideable: true,
    sortable: true,
    resizable: true,
    filterable: true,
    groupable: true,
    pinnable: true,
    // @ts-ignore
    aggregable: true,
    editable: false,
    sortComparator: gridStringOrNumberComparator,
    type: "string",
    align: "left",
    filterOperators: getGridStringOperators(),
    renderEditCell: renderEditInputCell,
    getApplyQuickFilterFn: convertQuickFilterV7ToLegacy(getGridStringQuickFilterFn),
    getApplyQuickFilterFnV7: getGridStringQuickFilterFn
  };

  // node_modules/@mui/x-data-grid/colDef/gridBooleanOperators.js
  var getGridBooleanOperators = () => convertLegacyOperators([{
    value: "is",
    getApplyFilterFnV7: (filterItem) => {
      if (!filterItem.value) {
        return null;
      }
      const valueAsBoolean = filterItem.value === "true";
      return (value) => {
        return Boolean(value) === valueAsBoolean;
      };
    },
    InputComponent: GridFilterInputBoolean
  }]);

  // node_modules/@mui/x-data-grid/colDef/gridBooleanColDef.js
  function gridBooleanFormatter({
    value,
    api
  }) {
    return value ? api.getLocaleText("booleanCellTrueLabel") : api.getLocaleText("booleanCellFalseLabel");
  }
  var stringToBoolean = (value) => {
    switch (value.toLowerCase().trim()) {
      case "true":
      case "yes":
      case "1":
        return true;
      case "false":
      case "no":
      case "0":
      case "null":
      case "undefined":
        return false;
      default:
        return void 0;
    }
  };
  var GRID_BOOLEAN_COL_DEF = _extends({}, GRID_STRING_COL_DEF, {
    type: "boolean",
    align: "center",
    headerAlign: "center",
    renderCell: renderBooleanCell,
    renderEditCell: renderEditBooleanCell,
    sortComparator: gridNumberComparator,
    valueFormatter: gridBooleanFormatter,
    filterOperators: getGridBooleanOperators(),
    getApplyQuickFilterFn: void 0,
    getApplyQuickFilterFnV7: void 0,
    // @ts-ignore
    aggregable: false,
    // @ts-ignore
    pastedValueParser: (value) => stringToBoolean(value)
  });

  // node_modules/@mui/x-data-grid/colDef/gridCheckboxSelectionColDef.js
  var import_jsx_runtime176 = __toESM(require_jsx_runtime());
  var GRID_CHECKBOX_SELECTION_FIELD = "__check__";
  var GRID_CHECKBOX_SELECTION_COL_DEF = _extends({}, GRID_BOOLEAN_COL_DEF, {
    field: GRID_CHECKBOX_SELECTION_FIELD,
    type: "checkboxSelection",
    width: 50,
    resizable: false,
    sortable: false,
    filterable: false,
    // @ts-ignore
    aggregable: false,
    disableColumnMenu: true,
    disableReorder: true,
    disableExport: true,
    getApplyQuickFilterFn: void 0,
    getApplyQuickFilterFnV7: void 0,
    valueGetter: (params) => {
      const selectionLookup = selectedIdsLookupSelector(params.api.state, params.api.instanceId);
      return selectionLookup[params.id] !== void 0;
    },
    renderHeader: (params) => /* @__PURE__ */ (0, import_jsx_runtime176.jsx)(GridHeaderCheckbox, _extends({}, params)),
    renderCell: (params) => /* @__PURE__ */ (0, import_jsx_runtime176.jsx)(GridCellCheckboxRenderer2, _extends({}, params))
  });

  // node_modules/@mui/x-data-grid/colDef/gridActionsColDef.js
  init_extends();
  var GRID_ACTIONS_COLUMN_TYPE = "actions";
  var GRID_ACTIONS_COL_DEF = _extends({}, GRID_STRING_COL_DEF, {
    sortable: false,
    filterable: false,
    // @ts-ignore
    aggregable: false,
    width: 100,
    align: "center",
    headerAlign: "center",
    headerName: "",
    disableColumnMenu: true,
    disableExport: true,
    renderCell: renderActionsCell,
    getApplyQuickFilterFn: void 0,
    getApplyQuickFilterFnV7: void 0
  });

  // node_modules/@mui/x-data-grid/constants/gridDetailPanelToggleField.js
  var GRID_DETAIL_PANEL_TOGGLE_FIELD = "__detail_panel_toggle__";

  // node_modules/@mui/x-data-grid/hooks/features/editing/gridEditingSelectors.js
  var gridEditRowsStateSelector = (state) => state.editRows;

  // node_modules/@mui/x-data-grid/components/GridRow.js
  var import_jsx_runtime177 = __toESM(require_jsx_runtime());
  var import_jsx_runtime178 = __toESM(require_jsx_runtime());
  var _excluded113 = ["selected", "hovered", "rowId", "row", "index", "style", "position", "rowHeight", "className", "visibleColumns", "renderedColumns", "containerWidth", "firstColumnToRender", "lastColumnToRender", "isLastVisible", "focusedCellColumnIndexNotInRange", "isNotVisible", "focusedCell", "tabbableCell", "onClick", "onDoubleClick", "onMouseEnter", "onMouseLeave", "onMouseOut", "onMouseOver"];
  var useUtilityClasses71 = (ownerState) => {
    const {
      editable,
      editing,
      selected,
      isLastVisible,
      rowHeight,
      classes
    } = ownerState;
    const slots = {
      root: ["row", selected && "selected", editable && "row--editable", editing && "row--editing", isLastVisible && "row--lastVisible", rowHeight === "auto" && "row--dynamicHeight"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  function EmptyCell({
    width: width2
  }) {
    if (!width2) {
      return null;
    }
    const style4 = {
      width: width2
    };
    return /* @__PURE__ */ (0, import_jsx_runtime177.jsx)("div", {
      className: `${gridClasses.cell} ${gridClasses.withBorderColor}`,
      style: style4
    });
  }
  var GridRow = /* @__PURE__ */ React180.forwardRef(function GridRow2(props, refProp) {
    const {
      selected,
      hovered,
      rowId,
      row,
      index,
      style: styleProp,
      position: position2,
      rowHeight,
      className,
      visibleColumns,
      renderedColumns,
      containerWidth,
      firstColumnToRender,
      isLastVisible = false,
      focusedCellColumnIndexNotInRange,
      isNotVisible,
      focusedCell,
      onClick,
      onDoubleClick,
      onMouseEnter,
      onMouseLeave,
      onMouseOut,
      onMouseOver
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded113);
    const apiRef = useGridApiContext();
    const ref = React180.useRef(null);
    const rootProps = useGridRootProps();
    const currentPage = useGridVisibleRows(apiRef, rootProps);
    const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);
    const sortModel = useGridSelector(apiRef, gridSortModelSelector);
    const treeDepth = useGridSelector(apiRef, gridRowMaximumTreeDepthSelector);
    const headerGroupingMaxDepth = useGridSelector(apiRef, gridColumnGroupsHeaderMaxDepthSelector);
    const editRowsState = useGridSelector(apiRef, gridEditRowsStateSelector);
    const handleRef = useForkRef(ref, refProp);
    const ariaRowIndex = index + headerGroupingMaxDepth + 2;
    const ownerState = {
      selected,
      hovered,
      isLastVisible,
      classes: rootProps.classes,
      editing: apiRef.current.getRowMode(rowId) === GridRowModes.Edit,
      editable: rootProps.editMode === GridEditModes.Row,
      rowHeight
    };
    const classes = useUtilityClasses71(ownerState);
    React180.useLayoutEffect(() => {
      if (rowHeight === "auto" && ref.current && typeof ResizeObserver === "undefined") {
        apiRef.current.unstable_storeRowHeightMeasurement(rowId, ref.current.clientHeight, position2);
      }
    }, [apiRef, rowHeight, rowId, position2]);
    React180.useLayoutEffect(() => {
      if (currentPage.range) {
        const rowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(rowId);
        if (rowIndex != null) {
          apiRef.current.unstable_setLastMeasuredRowIndex(rowIndex);
        }
      }
      const rootElement = ref.current;
      const hasFixedHeight = rowHeight !== "auto";
      if (!rootElement || hasFixedHeight || typeof ResizeObserver === "undefined") {
        return void 0;
      }
      const resizeObserver = new ResizeObserver((entries) => {
        const [entry] = entries;
        const height2 = entry.borderBoxSize && entry.borderBoxSize.length > 0 ? entry.borderBoxSize[0].blockSize : entry.contentRect.height;
        apiRef.current.unstable_storeRowHeightMeasurement(rowId, height2, position2);
      });
      resizeObserver.observe(rootElement);
      return () => resizeObserver.disconnect();
    }, [apiRef, currentPage.range, index, rowHeight, rowId, position2]);
    const publish = React180.useCallback((eventName, propHandler) => (event) => {
      if (isEventTargetInPortal(event)) {
        return;
      }
      if (!apiRef.current.getRow(rowId)) {
        return;
      }
      apiRef.current.publishEvent(eventName, apiRef.current.getRowParams(rowId), event);
      if (propHandler) {
        propHandler(event);
      }
    }, [apiRef, rowId]);
    const publishClick = React180.useCallback((event) => {
      const cell = findParentElementFromClassName(event.target, gridClasses.cell);
      const field = cell == null ? void 0 : cell.getAttribute("data-field");
      if (field) {
        if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {
          return;
        }
        if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {
          return;
        }
        if (field === "__reorder__") {
          return;
        }
        if (apiRef.current.getCellMode(rowId, field) === GridCellModes.Edit) {
          return;
        }
        const column2 = apiRef.current.getColumn(field);
        if ((column2 == null ? void 0 : column2.type) === GRID_ACTIONS_COLUMN_TYPE) {
          return;
        }
      }
      publish("rowClick", onClick)(event);
    }, [apiRef, onClick, publish, rowId]);
    const {
      slots,
      slotProps,
      disableColumnReorder
    } = rootProps;
    const CellComponent = slots.cell === MemoizedGridCellV7 ? MemoizedGridCellV7 : MemoizedCellWrapper;
    const rowReordering = rootProps.rowReordering;
    const getCell = (column2, cellProps) => {
      var _editRowsState$rowId$, _editRowsState$rowId;
      const disableDragEvents = disableColumnReorder && column2.disableReorder || !rowReordering && !!sortModel.length && treeDepth > 1 && Object.keys(editRowsState).length > 0;
      const editCellState = (_editRowsState$rowId$ = (_editRowsState$rowId = editRowsState[rowId]) == null ? void 0 : _editRowsState$rowId[column2.field]) != null ? _editRowsState$rowId$ : null;
      let cellIsNotVisible = false;
      if (focusedCellColumnIndexNotInRange !== void 0 && visibleColumns[focusedCellColumnIndexNotInRange].field === column2.field) {
        cellIsNotVisible = true;
      }
      return /* @__PURE__ */ (0, import_jsx_runtime177.jsx)(CellComponent, _extends({
        column: column2,
        width: cellProps.width,
        rowId,
        height: rowHeight,
        showRightBorder: cellProps.showRightBorder,
        align: column2.align || "left",
        colIndex: cellProps.indexRelativeToAllColumns,
        colSpan: cellProps.colSpan,
        disableDragEvents,
        editCellState,
        isNotVisible: cellIsNotVisible
      }, slotProps == null ? void 0 : slotProps.cell), column2.field);
    };
    const sizes = useGridSelector(apiRef, () => _extends({}, apiRef.current.unstable_getRowInternalSizes(rowId)), objectShallowCompare);
    let minHeight2 = rowHeight;
    if (minHeight2 === "auto" && sizes) {
      let numberOfBaseSizes = 0;
      const maximumSize = Object.entries(sizes).reduce((acc, [key, size]) => {
        const isBaseHeight = /^base[A-Z]/.test(key);
        if (!isBaseHeight) {
          return acc;
        }
        numberOfBaseSizes += 1;
        if (size > acc) {
          return size;
        }
        return acc;
      }, 0);
      if (maximumSize > 0 && numberOfBaseSizes > 1) {
        minHeight2 = maximumSize;
      }
    }
    const style4 = React180.useMemo(() => {
      if (isNotVisible) {
        return {
          opacity: 0,
          width: 0,
          height: 0
        };
      }
      const rowStyle = _extends({}, styleProp, {
        maxHeight: rowHeight === "auto" ? "none" : rowHeight,
        // max-height doesn't support "auto"
        minHeight: minHeight2
      });
      if (sizes != null && sizes.spacingTop) {
        const property = rootProps.rowSpacingType === "border" ? "borderTopWidth" : "marginTop";
        rowStyle[property] = sizes.spacingTop;
      }
      if (sizes != null && sizes.spacingBottom) {
        const property = rootProps.rowSpacingType === "border" ? "borderBottomWidth" : "marginBottom";
        let propertyValue = rowStyle[property];
        if (typeof propertyValue !== "number") {
          propertyValue = parseInt(propertyValue || "0", 10);
        }
        propertyValue += sizes.spacingBottom;
        rowStyle[property] = propertyValue;
      }
      return rowStyle;
    }, [isNotVisible, rowHeight, styleProp, minHeight2, sizes, rootProps.rowSpacingType]);
    const rowClassNames = apiRef.current.unstable_applyPipeProcessors("rowClassName", [], rowId);
    if (typeof rootProps.getRowClassName === "function") {
      var _currentPage$range;
      const indexRelativeToCurrentPage = index - (((_currentPage$range = currentPage.range) == null ? void 0 : _currentPage$range.firstRowIndex) || 0);
      const rowParams = _extends({}, apiRef.current.getRowParams(rowId), {
        isFirstVisible: indexRelativeToCurrentPage === 0,
        isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,
        indexRelativeToCurrentPage
      });
      rowClassNames.push(rootProps.getRowClassName(rowParams));
    }
    const randomNumber = randomNumberBetween(1e4, 20, 80);
    const rowNode = apiRef.current.getRowNode(rowId);
    if (!rowNode) {
      return null;
    }
    const rowType = rowNode.type;
    const cells = [];
    for (let i = 0; i < renderedColumns.length; i += 1) {
      const column2 = renderedColumns[i];
      let indexRelativeToAllColumns = firstColumnToRender + i;
      if (focusedCellColumnIndexNotInRange !== void 0 && focusedCell) {
        if (visibleColumns[focusedCellColumnIndexNotInRange].field === column2.field) {
          indexRelativeToAllColumns = focusedCellColumnIndexNotInRange;
        } else {
          indexRelativeToAllColumns -= 1;
        }
      }
      const cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, indexRelativeToAllColumns);
      if (cellColSpanInfo && !cellColSpanInfo.spannedByColSpan) {
        if (rowType !== "skeletonRow") {
          const {
            colSpan,
            width: width2
          } = cellColSpanInfo.cellProps;
          const cellProps = {
            width: width2,
            colSpan,
            showRightBorder: rootProps.showCellVerticalBorder,
            indexRelativeToAllColumns
          };
          cells.push(getCell(column2, cellProps));
        } else {
          const {
            width: width2
          } = cellColSpanInfo.cellProps;
          const contentWidth = Math.round(randomNumber());
          cells.push(/* @__PURE__ */ (0, import_jsx_runtime177.jsx)(slots.skeletonCell, {
            width: width2,
            contentWidth,
            field: column2.field,
            align: column2.align
          }, column2.field));
        }
      }
    }
    const emptyCellWidth = containerWidth - columnsTotalWidth;
    const eventHandlers = row ? {
      onClick: publishClick,
      onDoubleClick: publish("rowDoubleClick", onDoubleClick),
      onMouseEnter: publish("rowMouseEnter", onMouseEnter),
      onMouseLeave: publish("rowMouseLeave", onMouseLeave),
      onMouseOut: publish("rowMouseOut", onMouseOut),
      onMouseOver: publish("rowMouseOver", onMouseOver)
    } : null;
    return /* @__PURE__ */ (0, import_jsx_runtime178.jsxs)("div", _extends({
      ref: handleRef,
      "data-id": rowId,
      "data-rowindex": index,
      role: "row",
      className: clsx_default(...rowClassNames, classes.root, className, hovered && "Mui-hovered"),
      "aria-rowindex": ariaRowIndex,
      "aria-selected": selected,
      style: style4
    }, eventHandlers, other, {
      children: [cells, emptyCellWidth > 0 && /* @__PURE__ */ (0, import_jsx_runtime177.jsx)(EmptyCell, {
        width: emptyCellWidth
      })]
    }));
  });
  true ? GridRow.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    containerWidth: import_prop_types122.default.number.isRequired,
    firstColumnToRender: import_prop_types122.default.number.isRequired,
    /**
     * Determines which cell has focus.
     * If `null`, no cell in this row has focus.
     */
    focusedCell: import_prop_types122.default.string,
    focusedCellColumnIndexNotInRange: import_prop_types122.default.number,
    /**
     * Index of the row in the whole sorted and filtered dataset.
     * If some rows above have expanded children, this index also take those children into account.
     */
    index: import_prop_types122.default.number.isRequired,
    isLastVisible: import_prop_types122.default.bool,
    isNotVisible: import_prop_types122.default.bool,
    lastColumnToRender: import_prop_types122.default.number.isRequired,
    onClick: import_prop_types122.default.func,
    onDoubleClick: import_prop_types122.default.func,
    onMouseEnter: import_prop_types122.default.func,
    onMouseLeave: import_prop_types122.default.func,
    position: import_prop_types122.default.oneOf(["center", "left", "right"]).isRequired,
    renderedColumns: import_prop_types122.default.arrayOf(import_prop_types122.default.object).isRequired,
    row: import_prop_types122.default.object,
    rowHeight: import_prop_types122.default.oneOfType([import_prop_types122.default.oneOf(["auto"]), import_prop_types122.default.number]).isRequired,
    rowId: import_prop_types122.default.oneOfType([import_prop_types122.default.number, import_prop_types122.default.string]).isRequired,
    selected: import_prop_types122.default.bool.isRequired,
    /**
     * Determines which cell should be tabbable by having tabIndex=0.
     * If `null`, no cell in this row is in the tab sequence.
     */
    tabbableCell: import_prop_types122.default.string,
    visibleColumns: import_prop_types122.default.arrayOf(import_prop_types122.default.object).isRequired
  } : void 0;
  var MemoizedGridRow = fastMemo(GridRow);

  // node_modules/@mui/x-data-grid/context/GridContextProvider.js
  var React181 = __toESM(require_react());
  var import_jsx_runtime179 = __toESM(require_jsx_runtime());
  function GridContextProvider({
    privateApiRef,
    props,
    children
  }) {
    const apiRef = React181.useRef(privateApiRef.current.getPublicApi());
    return /* @__PURE__ */ (0, import_jsx_runtime179.jsx)(GridRootPropsContext.Provider, {
      value: props,
      children: /* @__PURE__ */ (0, import_jsx_runtime179.jsx)(GridPrivateApiContext.Provider, {
        value: privateApiRef,
        children: /* @__PURE__ */ (0, import_jsx_runtime179.jsx)(GridApiContext.Provider, {
          value: apiRef,
          children
        })
      })
    });
  }

  // node_modules/@mui/x-data-grid/hooks/core/useGridLoggerFactory.js
  var React182 = __toESM(require_react());
  var forceDebug = localStorageAvailable() && window.localStorage.getItem("DEBUG") != null;
  var noop2 = () => {
  };
  var noopLogger = {
    debug: noop2,
    info: noop2,
    warn: noop2,
    error: noop2
  };
  var LOG_LEVELS = ["debug", "info", "warn", "error"];
  function getAppender(name, logLevel, appender = console) {
    const minLogLevelIdx = LOG_LEVELS.indexOf(logLevel);
    if (minLogLevelIdx === -1) {
      throw new Error(`MUI: Log level ${logLevel} not recognized.`);
    }
    const logger = LOG_LEVELS.reduce((loggerObj, method, idx) => {
      if (idx >= minLogLevelIdx) {
        loggerObj[method] = (...args) => {
          const [message, ...other] = args;
          appender[method](`MUI: ${name} - ${message}`, ...other);
        };
      } else {
        loggerObj[method] = noop2;
      }
      return loggerObj;
    }, {});
    return logger;
  }
  var useGridLoggerFactory = (apiRef, props) => {
    const getLogger = React182.useCallback((name) => {
      if (forceDebug) {
        return getAppender(name, "debug", props.logger);
      }
      if (!props.logLevel) {
        return noopLogger;
      }
      return getAppender(name, props.logLevel.toString(), props.logger);
    }, [props.logLevel, props.logger]);
    useGridApiMethod(apiRef, {
      getLogger
    }, "private");
  };

  // node_modules/@mui/x-data-grid/hooks/core/useGridApiInitialization.js
  var React183 = __toESM(require_react());

  // node_modules/@mui/x-data-grid/utils/Store.js
  var Store = class _Store {
    static create(value) {
      return new _Store(value);
    }
    constructor(_value) {
      this.value = void 0;
      this.listeners = void 0;
      this.subscribe = (fn2) => {
        this.listeners.add(fn2);
        return () => {
          this.listeners.delete(fn2);
        };
      };
      this.getSnapshot = () => {
        return this.value;
      };
      this.update = (value) => {
        this.value = value;
        this.listeners.forEach((l) => l(value));
      };
      this.value = _value;
      this.listeners = /* @__PURE__ */ new Set();
    }
  };

  // node_modules/@mui/x-data-grid/utils/EventManager.js
  var EventManager = class {
    constructor() {
      this.maxListeners = 20;
      this.warnOnce = false;
      this.events = {};
    }
    on(eventName, listener, options = {}) {
      let collection = this.events[eventName];
      if (!collection) {
        collection = {
          highPriority: /* @__PURE__ */ new Map(),
          regular: /* @__PURE__ */ new Map()
        };
        this.events[eventName] = collection;
      }
      if (options.isFirst) {
        collection.highPriority.set(listener, true);
      } else {
        collection.regular.set(listener, true);
      }
      if (true) {
        const collectionSize = collection.highPriority.size + collection.regular.size;
        if (collectionSize > this.maxListeners && !this.warnOnce) {
          this.warnOnce = true;
          console.warn([`Possible EventEmitter memory leak detected. ${collectionSize} ${eventName} listeners added.`].join("\n"));
        }
      }
    }
    removeListener(eventName, listener) {
      if (this.events[eventName]) {
        this.events[eventName].regular.delete(listener);
        this.events[eventName].highPriority.delete(listener);
      }
    }
    removeAllListeners() {
      this.events = {};
    }
    emit(eventName, ...args) {
      const collection = this.events[eventName];
      if (!collection) {
        return;
      }
      const highPriorityListeners = Array.from(collection.highPriority.keys());
      const regularListeners = Array.from(collection.regular.keys());
      for (let i = highPriorityListeners.length - 1; i >= 0; i -= 1) {
        const listener = highPriorityListeners[i];
        if (collection.highPriority.has(listener)) {
          listener.apply(this, args);
        }
      }
      for (let i = 0; i < regularListeners.length; i += 1) {
        const listener = regularListeners[i];
        if (collection.regular.has(listener)) {
          listener.apply(this, args);
        }
      }
    }
    once(eventName, listener) {
      const that = this;
      this.on(eventName, function oneTimeListener(...args) {
        that.removeListener(eventName, oneTimeListener);
        listener.apply(that, args);
      });
    }
  };

  // node_modules/@mui/x-data-grid/hooks/core/useGridApiInitialization.js
  var SYMBOL_API_PRIVATE = Symbol("mui.api_private");
  var isSyntheticEvent = (event) => {
    return event.isPropagationStopped !== void 0;
  };
  var globalId2 = 0;
  function createPrivateAPI(publicApiRef) {
    var _publicApiRef$current;
    const existingPrivateApi = (_publicApiRef$current = publicApiRef.current) == null ? void 0 : _publicApiRef$current[SYMBOL_API_PRIVATE];
    if (existingPrivateApi) {
      return existingPrivateApi;
    }
    const state = {};
    const privateApi = {
      state,
      store: Store.create(state),
      instanceId: {
        id: globalId2
      }
    };
    globalId2 += 1;
    privateApi.getPublicApi = () => publicApiRef.current;
    privateApi.register = (visibility, methods) => {
      Object.keys(methods).forEach((methodName) => {
        const method = methods[methodName];
        const currentPrivateMethod = privateApi[methodName];
        if ((currentPrivateMethod == null ? void 0 : currentPrivateMethod.spying) === true) {
          currentPrivateMethod.target = method;
        } else {
          privateApi[methodName] = method;
        }
        if (visibility === "public") {
          const publicApi = publicApiRef.current;
          const currentPublicMethod = publicApi[methodName];
          if ((currentPublicMethod == null ? void 0 : currentPublicMethod.spying) === true) {
            currentPublicMethod.target = method;
          } else {
            publicApi[methodName] = method;
          }
        }
      });
    };
    privateApi.register("private", {
      caches: {},
      eventManager: new EventManager()
    });
    return privateApi;
  }
  function createPublicAPI(privateApiRef) {
    const publicApi = {
      get state() {
        return privateApiRef.current.state;
      },
      get store() {
        return privateApiRef.current.store;
      },
      get instanceId() {
        return privateApiRef.current.instanceId;
      },
      [SYMBOL_API_PRIVATE]: privateApiRef.current
    };
    return publicApi;
  }
  function useGridApiInitialization(inputApiRef, props) {
    const publicApiRef = React183.useRef();
    const privateApiRef = React183.useRef();
    if (!privateApiRef.current) {
      privateApiRef.current = createPrivateAPI(publicApiRef);
    }
    if (!publicApiRef.current) {
      publicApiRef.current = createPublicAPI(privateApiRef);
    }
    const publishEvent = React183.useCallback((...args) => {
      const [name, params, event = {}] = args;
      event.defaultMuiPrevented = false;
      if (isSyntheticEvent(event) && event.isPropagationStopped()) {
        return;
      }
      const details = props.signature === GridSignature.DataGridPro ? {
        api: privateApiRef.current.getPublicApi()
      } : {};
      privateApiRef.current.eventManager.emit(name, params, event, details);
    }, [privateApiRef, props.signature]);
    const subscribeEvent = React183.useCallback((event, handler, options) => {
      privateApiRef.current.eventManager.on(event, handler, options);
      const api = privateApiRef.current;
      return () => {
        api.eventManager.removeListener(event, handler);
      };
    }, [privateApiRef]);
    useGridApiMethod(privateApiRef, {
      subscribeEvent,
      publishEvent
    }, "public");
    React183.useImperativeHandle(inputApiRef, () => publicApiRef.current, [publicApiRef]);
    React183.useEffect(() => {
      const api = privateApiRef.current;
      return () => {
        api.publishEvent("unmount");
      };
    }, [privateApiRef]);
    return privateApiRef;
  }

  // node_modules/@mui/x-data-grid/hooks/core/useGridLocaleText.js
  var React184 = __toESM(require_react());
  var useGridLocaleText = (apiRef, props) => {
    const getLocaleText = React184.useCallback((key) => {
      if (props.localeText[key] == null) {
        throw new Error(`Missing translation for key ${key}.`);
      }
      return props.localeText[key];
    }, [props.localeText]);
    apiRef.current.register("public", {
      getLocaleText
    });
  };

  // node_modules/@mui/x-data-grid/hooks/core/pipeProcessing/useGridPipeProcessing.js
  var React185 = __toESM(require_react());
  var useGridPipeProcessing = (apiRef) => {
    const processorsCache = React185.useRef({});
    const isRunning = React185.useRef(false);
    const runAppliers = React185.useCallback((groupCache) => {
      if (isRunning.current || !groupCache) {
        return;
      }
      isRunning.current = true;
      Object.values(groupCache.appliers).forEach((callback) => {
        callback();
      });
      isRunning.current = false;
    }, []);
    const registerPipeProcessor = React185.useCallback((group, id, processor) => {
      if (!processorsCache.current[group]) {
        processorsCache.current[group] = {
          processors: /* @__PURE__ */ new Map(),
          appliers: {}
        };
      }
      const groupCache = processorsCache.current[group];
      const oldProcessor = groupCache.processors.get(id);
      if (oldProcessor !== processor) {
        groupCache.processors.set(id, processor);
        runAppliers(groupCache);
      }
      return () => {
        processorsCache.current[group].processors.set(id, null);
      };
    }, [runAppliers]);
    const registerPipeApplier = React185.useCallback((group, id, applier) => {
      if (!processorsCache.current[group]) {
        processorsCache.current[group] = {
          processors: /* @__PURE__ */ new Map(),
          appliers: {}
        };
      }
      processorsCache.current[group].appliers[id] = applier;
      return () => {
        const _appliers = processorsCache.current[group].appliers, otherAppliers = _objectWithoutPropertiesLoose(_appliers, [id].map(toPropertyKey));
        processorsCache.current[group].appliers = otherAppliers;
      };
    }, []);
    const requestPipeProcessorsApplication = React185.useCallback((group) => {
      const groupCache = processorsCache.current[group];
      runAppliers(groupCache);
    }, [runAppliers]);
    const applyPipeProcessors = React185.useCallback((...args) => {
      const [group, value, context] = args;
      if (!processorsCache.current[group]) {
        return value;
      }
      const preProcessors = Array.from(processorsCache.current[group].processors.values());
      return preProcessors.reduce((acc, preProcessor) => {
        if (!preProcessor) {
          return acc;
        }
        return preProcessor(acc, context);
      }, value);
    }, []);
    const preProcessingPrivateApi = {
      registerPipeProcessor,
      registerPipeApplier,
      requestPipeProcessorsApplication
    };
    const preProcessingPublicApi = {
      unstable_applyPipeProcessors: applyPipeProcessors
    };
    useGridApiMethod(apiRef, preProcessingPrivateApi, "private");
    useGridApiMethod(apiRef, preProcessingPublicApi, "public");
  };

  // node_modules/@mui/x-data-grid/hooks/core/pipeProcessing/useGridRegisterPipeProcessor.js
  var React186 = __toESM(require_react());
  var useGridRegisterPipeProcessor = (apiRef, group, callback) => {
    const cleanup = React186.useRef();
    const id = React186.useRef(`mui-${Math.round(Math.random() * 1e9)}`);
    const registerPreProcessor = React186.useCallback(() => {
      cleanup.current = apiRef.current.registerPipeProcessor(group, id.current, callback);
    }, [apiRef, callback, group]);
    useFirstRender(() => {
      registerPreProcessor();
    });
    const isFirstRender = React186.useRef(true);
    React186.useEffect(() => {
      if (isFirstRender.current) {
        isFirstRender.current = false;
      } else {
        registerPreProcessor();
      }
      return () => {
        if (cleanup.current) {
          cleanup.current();
          cleanup.current = null;
        }
      };
    }, [registerPreProcessor]);
  };

  // node_modules/@mui/x-data-grid/hooks/core/pipeProcessing/useGridRegisterPipeApplier.js
  var React187 = __toESM(require_react());
  var useGridRegisterPipeApplier = (apiRef, group, callback) => {
    const cleanup = React187.useRef();
    const id = React187.useRef(`mui-${Math.round(Math.random() * 1e9)}`);
    const registerPreProcessor = React187.useCallback(() => {
      cleanup.current = apiRef.current.registerPipeApplier(group, id.current, callback);
    }, [apiRef, callback, group]);
    useFirstRender(() => {
      registerPreProcessor();
    });
    const isFirstRender = React187.useRef(true);
    React187.useEffect(() => {
      if (isFirstRender.current) {
        isFirstRender.current = false;
      } else {
        registerPreProcessor();
      }
      return () => {
        if (cleanup.current) {
          cleanup.current();
          cleanup.current = null;
        }
      };
    }, [registerPreProcessor]);
  };

  // node_modules/@mui/x-data-grid/hooks/core/strategyProcessing/useGridRegisterStrategyProcessor.js
  var React188 = __toESM(require_react());
  var useGridRegisterStrategyProcessor = (apiRef, strategyName, group, processor) => {
    const registerPreProcessor = React188.useCallback(() => {
      apiRef.current.registerStrategyProcessor(strategyName, group, processor);
    }, [apiRef, processor, group, strategyName]);
    useFirstRender(() => {
      registerPreProcessor();
    });
    const isFirstRender = React188.useRef(true);
    React188.useEffect(() => {
      if (isFirstRender.current) {
        isFirstRender.current = false;
      } else {
        registerPreProcessor();
      }
    }, [registerPreProcessor]);
  };

  // node_modules/@mui/x-data-grid/hooks/core/strategyProcessing/useGridStrategyProcessing.js
  var React189 = __toESM(require_react());
  var GRID_DEFAULT_STRATEGY = "none";
  var GRID_STRATEGIES_PROCESSORS = {
    rowTreeCreation: "rowTree",
    filtering: "rowTree",
    sorting: "rowTree",
    visibleRowsLookupCreation: "rowTree"
  };
  var useGridStrategyProcessing = (apiRef) => {
    const availableStrategies = React189.useRef(/* @__PURE__ */ new Map());
    const strategiesCache = React189.useRef({});
    const registerStrategyProcessor = React189.useCallback((strategyName, processorName, processor) => {
      const cleanup = () => {
        const _ref = strategiesCache.current[processorName], otherProcessors = _objectWithoutPropertiesLoose(_ref, [strategyName].map(toPropertyKey));
        strategiesCache.current[processorName] = otherProcessors;
      };
      if (!strategiesCache.current[processorName]) {
        strategiesCache.current[processorName] = {};
      }
      const groupPreProcessors = strategiesCache.current[processorName];
      const previousProcessor = groupPreProcessors[strategyName];
      groupPreProcessors[strategyName] = processor;
      if (!previousProcessor || previousProcessor === processor) {
        return cleanup;
      }
      if (strategyName === apiRef.current.getActiveStrategy(GRID_STRATEGIES_PROCESSORS[processorName])) {
        apiRef.current.publishEvent("activeStrategyProcessorChange", processorName);
      }
      return cleanup;
    }, [apiRef]);
    const applyStrategyProcessor = React189.useCallback((processorName, params) => {
      const activeStrategy = apiRef.current.getActiveStrategy(GRID_STRATEGIES_PROCESSORS[processorName]);
      if (activeStrategy == null) {
        throw new Error("Can't apply a strategy processor before defining an active strategy");
      }
      const groupCache = strategiesCache.current[processorName];
      if (!groupCache || !groupCache[activeStrategy]) {
        throw new Error(`No processor found for processor "${processorName}" on strategy "${activeStrategy}"`);
      }
      const processor = groupCache[activeStrategy];
      return processor(params);
    }, [apiRef]);
    const getActiveStrategy = React189.useCallback((strategyGroup) => {
      var _availableStrategyEnt;
      const strategyEntries = Array.from(availableStrategies.current.entries());
      const availableStrategyEntry = strategyEntries.find(([, strategy]) => {
        if (strategy.group !== strategyGroup) {
          return false;
        }
        return strategy.isAvailable();
      });
      return (_availableStrategyEnt = availableStrategyEntry == null ? void 0 : availableStrategyEntry[0]) != null ? _availableStrategyEnt : GRID_DEFAULT_STRATEGY;
    }, []);
    const setStrategyAvailability = React189.useCallback((strategyGroup, strategyName, isAvailable) => {
      availableStrategies.current.set(strategyName, {
        group: strategyGroup,
        isAvailable
      });
      apiRef.current.publishEvent("strategyAvailabilityChange");
    }, [apiRef]);
    const strategyProcessingApi = {
      registerStrategyProcessor,
      applyStrategyProcessor,
      getActiveStrategy,
      setStrategyAvailability
    };
    useGridApiMethod(apiRef, strategyProcessingApi, "private");
  };

  // node_modules/@mui/x-data-grid/hooks/core/useGridStateInitialization.js
  init_extends();
  var React190 = __toESM(require_react());
  var useGridStateInitialization = (apiRef, props) => {
    const controlStateMapRef = React190.useRef({});
    const [, rawForceUpdate] = React190.useState();
    const registerControlState = React190.useCallback((controlStateItem) => {
      controlStateMapRef.current[controlStateItem.stateId] = controlStateItem;
    }, []);
    const setState = React190.useCallback((state, reason) => {
      let newState;
      if (isFunction(state)) {
        newState = state(apiRef.current.state);
      } else {
        newState = state;
      }
      if (apiRef.current.state === newState) {
        return false;
      }
      let ignoreSetState = false;
      const updatedControlStateIds = [];
      Object.keys(controlStateMapRef.current).forEach((stateId) => {
        const controlState = controlStateMapRef.current[stateId];
        const oldSubState = controlState.stateSelector(apiRef.current.state, apiRef.current.instanceId);
        const newSubState = controlState.stateSelector(newState, apiRef.current.instanceId);
        if (newSubState === oldSubState) {
          return;
        }
        updatedControlStateIds.push({
          stateId: controlState.stateId,
          hasPropChanged: newSubState !== controlState.propModel
        });
        if (controlState.propModel !== void 0 && newSubState !== controlState.propModel) {
          ignoreSetState = true;
        }
      });
      if (updatedControlStateIds.length > 1) {
        throw new Error(`You're not allowed to update several sub-state in one transaction. You already updated ${updatedControlStateIds[0].stateId}, therefore, you're not allowed to update ${updatedControlStateIds.map((el) => el.stateId).join(", ")} in the same transaction.`);
      }
      if (!ignoreSetState) {
        apiRef.current.state = newState;
        if (apiRef.current.publishEvent) {
          apiRef.current.publishEvent("stateChange", newState);
        }
        apiRef.current.store.update(newState);
      }
      if (updatedControlStateIds.length === 1) {
        const {
          stateId,
          hasPropChanged
        } = updatedControlStateIds[0];
        const controlState = controlStateMapRef.current[stateId];
        const model = controlState.stateSelector(newState, apiRef.current.instanceId);
        if (controlState.propOnChange && hasPropChanged) {
          const details = props.signature === GridSignature.DataGridPro ? {
            api: apiRef.current,
            reason
          } : {
            reason
          };
          controlState.propOnChange(model, details);
        }
        if (!ignoreSetState) {
          apiRef.current.publishEvent(controlState.changeEvent, model, {
            reason
          });
        }
      }
      return !ignoreSetState;
    }, [apiRef, props.signature]);
    const updateControlState = React190.useCallback((key, state, reason) => {
      return apiRef.current.setState((previousState) => {
        return _extends({}, previousState, {
          [key]: state(previousState[key])
        });
      }, reason);
    }, [apiRef]);
    const forceUpdate = React190.useCallback(() => rawForceUpdate(() => apiRef.current.state), [apiRef]);
    const publicStateApi = {
      setState,
      forceUpdate
    };
    const privateStateApi = {
      updateControlState,
      registerControlState
    };
    useGridApiMethod(apiRef, publicStateApi, "public");
    useGridApiMethod(apiRef, privateStateApi, "private");
  };

  // node_modules/@mui/x-data-grid/hooks/core/useGridInitialization.js
  var useGridInitialization = (inputApiRef, props) => {
    const privateApiRef = useGridApiInitialization(inputApiRef, props);
    useGridLoggerFactory(privateApiRef, props);
    useGridStateInitialization(privateApiRef, props);
    useGridPipeProcessing(privateApiRef);
    useGridStrategyProcessing(privateApiRef);
    useGridLocaleText(privateApiRef, props);
    privateApiRef.current.register("private", {
      rootProps: props
    });
    return privateApiRef;
  };

  // node_modules/@mui/x-data-grid/hooks/utils/useGridInitializeState.js
  var React191 = __toESM(require_react());
  var useGridInitializeState = (initializer, privateApiRef, props) => {
    const isInitialized = React191.useRef(false);
    if (!isInitialized.current) {
      privateApiRef.current.state = initializer(privateApiRef.current.state, props, privateApiRef);
      isInitialized.current = true;
    }
  };

  // node_modules/@mui/x-data-grid/hooks/features/clipboard/useGridClipboard.js
  var React192 = __toESM(require_react());

  // node_modules/@mui/x-data-grid/colDef/gridDateColDef.js
  init_extends();

  // node_modules/@mui/x-data-grid/colDef/gridDateOperators.js
  var dateRegex = /(\d+)-(\d+)-(\d+)/;
  var dateTimeRegex = /(\d+)-(\d+)-(\d+)T(\d+):(\d+)/;
  function buildApplyFilterFn(filterItem, compareFn, showTime, keepHours) {
    if (!filterItem.value) {
      return null;
    }
    const [year, month, day, hour, minute] = filterItem.value.match(showTime ? dateTimeRegex : dateRegex).slice(1).map(Number);
    const time = new Date(year, month - 1, day, hour || 0, minute || 0).getTime();
    return (value) => {
      if (!value) {
        return false;
      }
      if (keepHours) {
        return compareFn(value.getTime(), time);
      }
      const dateCopy = new Date(value);
      const timeToCompare = dateCopy.setHours(showTime ? value.getHours() : 0, showTime ? value.getMinutes() : 0, 0, 0);
      return compareFn(timeToCompare, time);
    };
  }
  var getGridDateOperators = (showTime) => convertLegacyOperators([{
    value: "is",
    getApplyFilterFnV7: (filterItem) => {
      return buildApplyFilterFn(filterItem, (value1, value2) => value1 === value2, showTime);
    },
    InputComponent: GridFilterInputDate,
    InputComponentProps: {
      type: showTime ? "datetime-local" : "date"
    }
  }, {
    value: "not",
    getApplyFilterFnV7: (filterItem) => {
      return buildApplyFilterFn(filterItem, (value1, value2) => value1 !== value2, showTime);
    },
    InputComponent: GridFilterInputDate,
    InputComponentProps: {
      type: showTime ? "datetime-local" : "date"
    }
  }, {
    value: "after",
    getApplyFilterFnV7: (filterItem) => {
      return buildApplyFilterFn(filterItem, (value1, value2) => value1 > value2, showTime);
    },
    InputComponent: GridFilterInputDate,
    InputComponentProps: {
      type: showTime ? "datetime-local" : "date"
    }
  }, {
    value: "onOrAfter",
    getApplyFilterFnV7: (filterItem) => {
      return buildApplyFilterFn(filterItem, (value1, value2) => value1 >= value2, showTime);
    },
    InputComponent: GridFilterInputDate,
    InputComponentProps: {
      type: showTime ? "datetime-local" : "date"
    }
  }, {
    value: "before",
    getApplyFilterFnV7: (filterItem) => {
      return buildApplyFilterFn(filterItem, (value1, value2) => value1 < value2, showTime, !showTime);
    },
    InputComponent: GridFilterInputDate,
    InputComponentProps: {
      type: showTime ? "datetime-local" : "date"
    }
  }, {
    value: "onOrBefore",
    getApplyFilterFnV7: (filterItem) => {
      return buildApplyFilterFn(filterItem, (value1, value2) => value1 <= value2, showTime);
    },
    InputComponent: GridFilterInputDate,
    InputComponentProps: {
      type: showTime ? "datetime-local" : "date"
    }
  }, {
    value: "isEmpty",
    getApplyFilterFnV7: () => {
      return (value) => {
        return value == null;
      };
    },
    requiresFilterValue: false
  }, {
    value: "isNotEmpty",
    getApplyFilterFnV7: () => {
      return (value) => {
        return value != null;
      };
    },
    requiresFilterValue: false
  }]);

  // node_modules/@mui/x-data-grid/colDef/gridDateColDef.js
  function throwIfNotDateObject({
    value,
    columnType,
    rowId,
    field
  }) {
    if (!(value instanceof Date)) {
      throw new Error([`MUI: \`${columnType}\` column type only accepts \`Date\` objects as values.`, "Use `valueGetter` to transform the value into a `Date` object.", `Row ID: ${rowId}, field: "${field}".`].join("\n"));
    }
  }
  function gridDateFormatter({
    value,
    field,
    id
  }) {
    if (!value) {
      return "";
    }
    throwIfNotDateObject({
      value,
      columnType: "date",
      rowId: id,
      field
    });
    return value.toLocaleDateString();
  }
  function gridDateTimeFormatter({
    value,
    field,
    id
  }) {
    if (!value) {
      return "";
    }
    throwIfNotDateObject({
      value,
      columnType: "dateTime",
      rowId: id,
      field
    });
    return value.toLocaleString();
  }
  var GRID_DATE_COL_DEF = _extends({}, GRID_STRING_COL_DEF, {
    type: "date",
    sortComparator: gridDateComparator,
    valueFormatter: gridDateFormatter,
    filterOperators: getGridDateOperators(),
    renderEditCell: renderEditDateCell,
    // @ts-ignore
    pastedValueParser: (value) => new Date(value)
  });
  var GRID_DATETIME_COL_DEF = _extends({}, GRID_STRING_COL_DEF, {
    type: "dateTime",
    sortComparator: gridDateComparator,
    valueFormatter: gridDateTimeFormatter,
    filterOperators: getGridDateOperators(true),
    renderEditCell: renderEditDateCell,
    // @ts-ignore
    pastedValueParser: (value) => new Date(value)
  });

  // node_modules/@mui/x-data-grid/colDef/gridNumericColDef.js
  init_extends();

  // node_modules/@mui/x-data-grid/colDef/gridNumericOperators.js
  var parseNumericValue = (value) => {
    if (value == null) {
      return null;
    }
    return Number(value);
  };
  var getGridNumericQuickFilterFn = tagInternalFilter((value) => {
    if (value == null || Number.isNaN(value) || value === "") {
      return null;
    }
    return (columnValue) => {
      return parseNumericValue(columnValue) === parseNumericValue(value);
    };
  });
  var getGridNumericOperators = () => convertLegacyOperators([{
    value: "=",
    getApplyFilterFnV7: (filterItem) => {
      if (filterItem.value == null || Number.isNaN(filterItem.value)) {
        return null;
      }
      return (value) => {
        return parseNumericValue(value) === filterItem.value;
      };
    },
    InputComponent: GridFilterInputValue,
    InputComponentProps: {
      type: "number"
    }
  }, {
    value: "!=",
    getApplyFilterFnV7: (filterItem) => {
      if (filterItem.value == null || Number.isNaN(filterItem.value)) {
        return null;
      }
      return (value) => {
        return parseNumericValue(value) !== filterItem.value;
      };
    },
    InputComponent: GridFilterInputValue,
    InputComponentProps: {
      type: "number"
    }
  }, {
    value: ">",
    getApplyFilterFnV7: (filterItem) => {
      if (filterItem.value == null || Number.isNaN(filterItem.value)) {
        return null;
      }
      return (value) => {
        if (value == null) {
          return false;
        }
        return parseNumericValue(value) > filterItem.value;
      };
    },
    InputComponent: GridFilterInputValue,
    InputComponentProps: {
      type: "number"
    }
  }, {
    value: ">=",
    getApplyFilterFnV7: (filterItem) => {
      if (filterItem.value == null || Number.isNaN(filterItem.value)) {
        return null;
      }
      return (value) => {
        if (value == null) {
          return false;
        }
        return parseNumericValue(value) >= filterItem.value;
      };
    },
    InputComponent: GridFilterInputValue,
    InputComponentProps: {
      type: "number"
    }
  }, {
    value: "<",
    getApplyFilterFnV7: (filterItem) => {
      if (filterItem.value == null || Number.isNaN(filterItem.value)) {
        return null;
      }
      return (value) => {
        if (value == null) {
          return false;
        }
        return parseNumericValue(value) < filterItem.value;
      };
    },
    InputComponent: GridFilterInputValue,
    InputComponentProps: {
      type: "number"
    }
  }, {
    value: "<=",
    getApplyFilterFnV7: (filterItem) => {
      if (filterItem.value == null || Number.isNaN(filterItem.value)) {
        return null;
      }
      return (value) => {
        if (value == null) {
          return false;
        }
        return parseNumericValue(value) <= filterItem.value;
      };
    },
    InputComponent: GridFilterInputValue,
    InputComponentProps: {
      type: "number"
    }
  }, {
    value: "isEmpty",
    getApplyFilterFnV7: () => {
      return (value) => {
        return value == null;
      };
    },
    requiresFilterValue: false
  }, {
    value: "isNotEmpty",
    getApplyFilterFnV7: () => {
      return (value) => {
        return value != null;
      };
    },
    requiresFilterValue: false
  }, {
    value: "isAnyOf",
    getApplyFilterFnV7: (filterItem) => {
      if (!Array.isArray(filterItem.value) || filterItem.value.length === 0) {
        return null;
      }
      return (value) => {
        return value != null && filterItem.value.includes(Number(value));
      };
    },
    InputComponent: GridFilterInputMultipleValue,
    InputComponentProps: {
      type: "number"
    }
  }]);

  // node_modules/@mui/x-data-grid/colDef/gridNumericColDef.js
  var GRID_NUMERIC_COL_DEF = _extends({}, GRID_STRING_COL_DEF, {
    type: "number",
    align: "right",
    headerAlign: "right",
    sortComparator: gridNumberComparator,
    valueParser: (value) => value === "" ? null : Number(value),
    valueFormatter: ({
      value
    }) => isNumber(value) ? value.toLocaleString() : value || "",
    filterOperators: getGridNumericOperators(),
    getApplyQuickFilterFn: convertQuickFilterV7ToLegacy(getGridNumericQuickFilterFn),
    getApplyQuickFilterFnV7: getGridNumericQuickFilterFn
  });

  // node_modules/@mui/x-data-grid/colDef/gridSingleSelectColDef.js
  init_extends();

  // node_modules/@mui/x-data-grid/colDef/gridSingleSelectOperators.js
  var parseObjectValue = (value) => {
    if (value == null || !isObject(value)) {
      return value;
    }
    return value.value;
  };
  var getGridSingleSelectOperators = () => convertLegacyOperators([{
    value: "is",
    getApplyFilterFnV7: (filterItem) => {
      if (filterItem.value == null || filterItem.value === "") {
        return null;
      }
      return (value) => parseObjectValue(value) === parseObjectValue(filterItem.value);
    },
    InputComponent: GridFilterInputSingleSelect
  }, {
    value: "not",
    getApplyFilterFnV7: (filterItem) => {
      if (filterItem.value == null || filterItem.value === "") {
        return null;
      }
      return (value) => parseObjectValue(value) !== parseObjectValue(filterItem.value);
    },
    InputComponent: GridFilterInputSingleSelect
  }, {
    value: "isAnyOf",
    getApplyFilterFnV7: (filterItem) => {
      if (!Array.isArray(filterItem.value) || filterItem.value.length === 0) {
        return null;
      }
      const filterItemValues = filterItem.value.map(parseObjectValue);
      return (value) => filterItemValues.includes(parseObjectValue(value));
    },
    InputComponent: GridFilterInputMultipleSingleSelect
  }]);

  // node_modules/@mui/x-data-grid/colDef/gridSingleSelectColDef.js
  var isArrayOfObjects = (options) => {
    return typeof options[0] === "object";
  };
  var defaultGetOptionValue = (value) => {
    return isObject(value) ? value.value : value;
  };
  var defaultGetOptionLabel = (value) => {
    return isObject(value) ? value.label : String(value);
  };
  var GRID_SINGLE_SELECT_COL_DEF = _extends({}, GRID_STRING_COL_DEF, {
    type: "singleSelect",
    getOptionLabel: defaultGetOptionLabel,
    getOptionValue: defaultGetOptionValue,
    valueFormatter(params) {
      const {
        id,
        field,
        value,
        api
      } = params;
      const colDef = params.api.getColumn(field);
      if (!isSingleSelectColDef(colDef)) {
        return "";
      }
      let valueOptions;
      if (typeof colDef.valueOptions === "function") {
        valueOptions = colDef.valueOptions({
          id,
          row: id ? api.getRow(id) : null,
          field
        });
      } else {
        valueOptions = colDef.valueOptions;
      }
      if (value == null) {
        return "";
      }
      if (!valueOptions) {
        return value;
      }
      if (!isArrayOfObjects(valueOptions)) {
        return colDef.getOptionLabel(value);
      }
      const valueOption = valueOptions.find((option) => colDef.getOptionValue(option) === value);
      return valueOption ? colDef.getOptionLabel(valueOption) : "";
    },
    renderEditCell: renderEditSingleSelectCell,
    filterOperators: getGridSingleSelectOperators(),
    // @ts-ignore
    pastedValueParser: (value, params) => {
      const colDef = params.colDef;
      const colDefValueOptions = colDef.valueOptions;
      const valueOptions = typeof colDefValueOptions === "function" ? colDefValueOptions({
        field: colDef.field
      }) : colDefValueOptions || [];
      const getOptionValue = colDef.getOptionValue;
      const valueOption = valueOptions.find((option) => {
        if (getOptionValue(option) === value) {
          return true;
        }
        return false;
      });
      if (valueOption) {
        return value;
      }
      return void 0;
    }
  });

  // node_modules/@mui/x-data-grid/colDef/gridDefaultColumnTypes.js
  var DEFAULT_GRID_COL_TYPE_KEY = "__default__";
  var getGridDefaultColumnTypes = () => {
    const nativeColumnTypes = {
      string: GRID_STRING_COL_DEF,
      number: GRID_NUMERIC_COL_DEF,
      date: GRID_DATE_COL_DEF,
      dateTime: GRID_DATETIME_COL_DEF,
      boolean: GRID_BOOLEAN_COL_DEF,
      singleSelect: GRID_SINGLE_SELECT_COL_DEF,
      [GRID_ACTIONS_COLUMN_TYPE]: GRID_ACTIONS_COL_DEF,
      [DEFAULT_GRID_COL_TYPE_KEY]: GRID_STRING_COL_DEF
    };
    return nativeColumnTypes;
  };

  // node_modules/@mui/x-data-grid/hooks/features/export/serializers/csvSerializer.js
  function sanitizeCellValue(value, csvOptions) {
    if (typeof value === "string") {
      if (csvOptions.shouldAppendQuotes || csvOptions.escapeFormulas) {
        const escapedValue = value.replace(/"/g, '""');
        if ([csvOptions.delimiter, "\n", "\r", '"'].some((delimiter2) => value.includes(delimiter2))) {
          return `"${escapedValue}"`;
        }
        if (csvOptions.escapeFormulas) {
          if (["=", "+", "-", "@", "	", "\r"].includes(escapedValue[0])) {
            return `'${escapedValue}`;
          }
        }
        return escapedValue;
      }
      return value;
    }
    return value;
  }
  var serializeCellValue = (cellParams, options) => {
    const {
      csvOptions,
      ignoreValueFormatter
    } = options;
    let value;
    if (ignoreValueFormatter) {
      var _cellParams$value2;
      const columnType = cellParams.colDef.type;
      if (columnType === "number") {
        value = String(cellParams.value);
      } else if (columnType === "date" || columnType === "dateTime") {
        var _cellParams$value;
        value = (_cellParams$value = cellParams.value) == null ? void 0 : _cellParams$value.toISOString();
      } else if (typeof ((_cellParams$value2 = cellParams.value) == null ? void 0 : _cellParams$value2.toString) === "function") {
        value = cellParams.value.toString();
      } else {
        value = cellParams.value;
      }
    } else {
      value = cellParams.formattedValue;
    }
    return sanitizeCellValue(value, csvOptions);
  };
  var objectFormattedValueWarning = buildWarning(["MUI: When the value of a field is an object or a `renderCell` is provided, the CSV export might not display the value correctly.", "You can provide a `valueFormatter` with a string representation to be used."]);
  var CSVRow = class {
    constructor(options) {
      this.options = void 0;
      this.rowString = "";
      this.isEmpty = true;
      this.options = options;
    }
    addValue(value) {
      if (!this.isEmpty) {
        this.rowString += this.options.csvOptions.delimiter;
      }
      if (value === null || value === void 0) {
        this.rowString += "";
      } else if (typeof this.options.sanitizeCellValue === "function") {
        this.rowString += this.options.sanitizeCellValue(value, this.options.csvOptions);
      } else {
        this.rowString += value;
      }
      this.isEmpty = false;
    }
    getRowString() {
      return this.rowString;
    }
  };
  var serializeRow = ({
    id,
    columns,
    getCellParams,
    csvOptions,
    ignoreValueFormatter
  }) => {
    const row = new CSVRow({
      csvOptions
    });
    columns.forEach((column2) => {
      const cellParams = getCellParams(id, column2.field);
      if (true) {
        if (String(cellParams.formattedValue) === "[object Object]") {
          objectFormattedValueWarning();
        }
      }
      row.addValue(serializeCellValue(cellParams, {
        ignoreValueFormatter,
        csvOptions
      }));
    });
    return row.getRowString();
  };
  function buildCSV(options) {
    const {
      columns,
      rowIds,
      csvOptions,
      ignoreValueFormatter,
      apiRef
    } = options;
    const CSVBody = rowIds.reduce((acc, id) => `${acc}${serializeRow({
      id,
      columns,
      getCellParams: apiRef.current.getCellParams,
      ignoreValueFormatter,
      csvOptions
    })}\r
`, "").trim();
    if (!csvOptions.includeHeaders) {
      return CSVBody;
    }
    const filteredColumns = columns.filter((column2) => column2.field !== GRID_CHECKBOX_SELECTION_COL_DEF.field);
    const headerRows = [];
    if (csvOptions.includeColumnGroupsHeaders) {
      const columnGroupLookup = apiRef.current.unstable_getAllGroupDetails();
      let maxColumnGroupsDepth = 0;
      const columnGroupPathsLookup = filteredColumns.reduce((acc, column2) => {
        const columnGroupPath = apiRef.current.unstable_getColumnGroupPath(column2.field);
        acc[column2.field] = columnGroupPath;
        maxColumnGroupsDepth = Math.max(maxColumnGroupsDepth, columnGroupPath.length);
        return acc;
      }, {});
      for (let i = 0; i < maxColumnGroupsDepth; i += 1) {
        const headerGroupRow = new CSVRow({
          csvOptions,
          sanitizeCellValue
        });
        headerRows.push(headerGroupRow);
        filteredColumns.forEach((column2) => {
          const columnGroupId = (columnGroupPathsLookup[column2.field] || [])[i];
          const columnGroup = columnGroupLookup[columnGroupId];
          headerGroupRow.addValue(columnGroup ? columnGroup.headerName || columnGroup.groupId : "");
        });
      }
    }
    const mainHeaderRow = new CSVRow({
      csvOptions,
      sanitizeCellValue
    });
    filteredColumns.forEach((column2) => {
      mainHeaderRow.addValue(column2.headerName || column2.field);
    });
    headerRows.push(mainHeaderRow);
    const CSVHead = `${headerRows.map((row) => row.getRowString()).join("\r\n")}\r
`;
    return `${CSVHead}${CSVBody}`.trim();
  }

  // node_modules/@mui/x-data-grid/hooks/features/clipboard/useGridClipboard.js
  function writeToClipboardPolyfill(data) {
    const span = document.createElement("span");
    span.style.whiteSpace = "pre";
    span.style.userSelect = "all";
    span.style.opacity = "0px";
    span.textContent = data;
    document.body.appendChild(span);
    const range = document.createRange();
    range.selectNode(span);
    const selection = window.getSelection();
    selection.removeAllRanges();
    selection.addRange(range);
    try {
      document.execCommand("copy");
    } finally {
      document.body.removeChild(span);
    }
  }
  function copyToClipboard(data) {
    if (navigator.clipboard) {
      navigator.clipboard.writeText(data).catch(() => {
        writeToClipboardPolyfill(data);
      });
    } else {
      writeToClipboardPolyfill(data);
    }
  }
  function hasNativeSelection(element) {
    var _window$getSelection;
    if ((_window$getSelection = window.getSelection()) != null && _window$getSelection.toString()) {
      return true;
    }
    if (element && (element.selectionEnd || 0) - (element.selectionStart || 0) > 0) {
      return true;
    }
    return false;
  }
  var useGridClipboard = (apiRef, props) => {
    const ignoreValueFormatterProp = props.unstable_ignoreValueFormatterDuringExport;
    const ignoreValueFormatter = (typeof ignoreValueFormatterProp === "object" ? ignoreValueFormatterProp == null ? void 0 : ignoreValueFormatterProp.clipboardExport : ignoreValueFormatterProp) || false;
    const clipboardCopyCellDelimiter = props.clipboardCopyCellDelimiter;
    const handleCopy = React192.useCallback((event) => {
      if (!((event.ctrlKey || event.metaKey) && event.key === "c")) {
        return;
      }
      if (hasNativeSelection(event.target)) {
        return;
      }
      let textToCopy = "";
      const selectedRows = apiRef.current.getSelectedRows();
      if (selectedRows.size > 0) {
        textToCopy = apiRef.current.getDataAsCsv({
          includeHeaders: false,
          delimiter: clipboardCopyCellDelimiter,
          shouldAppendQuotes: false,
          escapeFormulas: false
        });
      } else {
        const focusedCell = gridFocusCellSelector(apiRef);
        if (focusedCell) {
          const cellParams = apiRef.current.getCellParams(focusedCell.id, focusedCell.field);
          textToCopy = serializeCellValue(cellParams, {
            csvOptions: {
              delimiter: clipboardCopyCellDelimiter,
              shouldAppendQuotes: false,
              escapeFormulas: false
            },
            ignoreValueFormatter
          });
        }
      }
      textToCopy = apiRef.current.unstable_applyPipeProcessors("clipboardCopy", textToCopy);
      if (textToCopy) {
        copyToClipboard(textToCopy);
        apiRef.current.publishEvent("clipboardCopy", textToCopy);
      }
    }, [apiRef, ignoreValueFormatter, clipboardCopyCellDelimiter]);
    useGridNativeEventListener(apiRef, apiRef.current.rootElementRef, "keydown", handleCopy);
    useGridApiOptionHandler(apiRef, "clipboardCopy", props.onClipboardCopy);
  };

  // node_modules/@mui/x-data-grid/hooks/features/columnMenu/useGridColumnMenu.js
  init_extends();
  var React193 = __toESM(require_react());
  var columnMenuStateInitializer = (state) => _extends({}, state, {
    columnMenu: {
      open: false
    }
  });
  var useGridColumnMenu = (apiRef) => {
    const logger = useGridLogger(apiRef, "useGridColumnMenu");
    const showColumnMenu = React193.useCallback((field) => {
      const shouldUpdate = apiRef.current.setState((state) => {
        if (state.columnMenu.open && state.columnMenu.field === field) {
          return state;
        }
        logger.debug("Opening Column Menu");
        return _extends({}, state, {
          columnMenu: {
            open: true,
            field
          }
        });
      });
      if (shouldUpdate) {
        apiRef.current.hidePreferences();
        apiRef.current.forceUpdate();
      }
    }, [apiRef, logger]);
    const hideColumnMenu = React193.useCallback(() => {
      const columnMenuState = gridColumnMenuSelector(apiRef.current.state);
      if (columnMenuState.field) {
        const columnLookup = gridColumnLookupSelector(apiRef);
        const columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef);
        const orderedFields = gridColumnFieldsSelector(apiRef);
        let fieldToFocus = columnMenuState.field;
        if (!columnLookup[fieldToFocus]) {
          fieldToFocus = orderedFields[0];
        }
        if (columnVisibilityModel[fieldToFocus] === false) {
          const visibleOrderedFields = orderedFields.filter((field) => {
            if (field === fieldToFocus) {
              return true;
            }
            return columnVisibilityModel[field] !== false;
          });
          const fieldIndex = visibleOrderedFields.indexOf(fieldToFocus);
          fieldToFocus = visibleOrderedFields[fieldIndex + 1] || visibleOrderedFields[fieldIndex - 1];
        }
        apiRef.current.setColumnHeaderFocus(fieldToFocus);
      }
      const shouldUpdate = apiRef.current.setState((state) => {
        if (!state.columnMenu.open && state.columnMenu.field === void 0) {
          return state;
        }
        logger.debug("Hiding Column Menu");
        return _extends({}, state, {
          columnMenu: _extends({}, state.columnMenu, {
            open: false,
            field: void 0
          })
        });
      });
      if (shouldUpdate) {
        apiRef.current.forceUpdate();
      }
    }, [apiRef, logger]);
    const toggleColumnMenu = React193.useCallback((field) => {
      logger.debug("Toggle Column Menu");
      const columnMenu = gridColumnMenuSelector(apiRef.current.state);
      if (!columnMenu.open || columnMenu.field !== field) {
        showColumnMenu(field);
      } else {
        hideColumnMenu();
      }
    }, [apiRef, logger, showColumnMenu, hideColumnMenu]);
    const columnMenuApi = {
      showColumnMenu,
      hideColumnMenu,
      toggleColumnMenu
    };
    useGridApiMethod(apiRef, columnMenuApi, "public");
    useGridApiEventHandler(apiRef, "columnResizeStart", hideColumnMenu);
    useGridApiEventHandler(apiRef, "virtualScrollerWheel", apiRef.current.hideColumnMenu);
    useGridApiEventHandler(apiRef, "virtualScrollerTouchMove", apiRef.current.hideColumnMenu);
  };

  // node_modules/@mui/x-data-grid/hooks/features/columns/useGridColumns.js
  init_extends();
  var React194 = __toESM(require_react());

  // node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsUtils.js
  init_extends();
  var COLUMNS_DIMENSION_PROPERTIES = ["maxWidth", "minWidth", "width", "flex"];
  function computeFlexColumnsWidth({
    initialFreeSpace,
    totalFlexUnits,
    flexColumns
  }) {
    const uniqueFlexColumns = new Set(flexColumns.map((col) => col.field));
    const flexColumnsLookup = {
      all: {},
      frozenFields: [],
      freeze: (field) => {
        const value = flexColumnsLookup.all[field];
        if (value && value.frozen !== true) {
          flexColumnsLookup.all[field].frozen = true;
          flexColumnsLookup.frozenFields.push(field);
        }
      }
    };
    function loopOverFlexItems() {
      if (flexColumnsLookup.frozenFields.length === uniqueFlexColumns.size) {
        return;
      }
      const violationsLookup = {
        min: {},
        max: {}
      };
      let remainingFreeSpace = initialFreeSpace;
      let flexUnits = totalFlexUnits;
      let totalViolation = 0;
      flexColumnsLookup.frozenFields.forEach((field) => {
        remainingFreeSpace -= flexColumnsLookup.all[field].computedWidth;
        flexUnits -= flexColumnsLookup.all[field].flex;
      });
      for (let i = 0; i < flexColumns.length; i += 1) {
        const column2 = flexColumns[i];
        if (flexColumnsLookup.all[column2.field] && flexColumnsLookup.all[column2.field].frozen === true) {
          continue;
        }
        const widthPerFlexUnit = remainingFreeSpace / flexUnits;
        let computedWidth = widthPerFlexUnit * column2.flex;
        if (computedWidth < column2.minWidth) {
          totalViolation += column2.minWidth - computedWidth;
          computedWidth = column2.minWidth;
          violationsLookup.min[column2.field] = true;
        } else if (computedWidth > column2.maxWidth) {
          totalViolation += column2.maxWidth - computedWidth;
          computedWidth = column2.maxWidth;
          violationsLookup.max[column2.field] = true;
        }
        flexColumnsLookup.all[column2.field] = {
          frozen: false,
          computedWidth,
          flex: column2.flex
        };
      }
      if (totalViolation < 0) {
        Object.keys(violationsLookup.max).forEach((field) => {
          flexColumnsLookup.freeze(field);
        });
      } else if (totalViolation > 0) {
        Object.keys(violationsLookup.min).forEach((field) => {
          flexColumnsLookup.freeze(field);
        });
      } else {
        flexColumns.forEach(({
          field
        }) => {
          flexColumnsLookup.freeze(field);
        });
      }
      loopOverFlexItems();
    }
    loopOverFlexItems();
    return flexColumnsLookup.all;
  }
  var hydrateColumnsWidth = (rawState, viewportInnerWidth) => {
    const columnsLookup = {};
    let totalFlexUnits = 0;
    let widthAllocatedBeforeFlex = 0;
    const flexColumns = [];
    rawState.orderedFields.forEach((columnField) => {
      const newColumn = _extends({}, rawState.lookup[columnField]);
      if (rawState.columnVisibilityModel[columnField] === false) {
        newColumn.computedWidth = 0;
      } else {
        let computedWidth;
        if (newColumn.flex && newColumn.flex > 0) {
          totalFlexUnits += newColumn.flex;
          computedWidth = 0;
          flexColumns.push(newColumn);
        } else {
          computedWidth = clamp2(newColumn.width || GRID_STRING_COL_DEF.width, newColumn.minWidth || GRID_STRING_COL_DEF.minWidth, newColumn.maxWidth || GRID_STRING_COL_DEF.maxWidth);
        }
        widthAllocatedBeforeFlex += computedWidth;
        newColumn.computedWidth = computedWidth;
      }
      columnsLookup[columnField] = newColumn;
    });
    const initialFreeSpace = Math.max(viewportInnerWidth - widthAllocatedBeforeFlex, 0);
    if (totalFlexUnits > 0 && viewportInnerWidth > 0) {
      const computedColumnWidths = computeFlexColumnsWidth({
        initialFreeSpace,
        totalFlexUnits,
        flexColumns
      });
      Object.keys(computedColumnWidths).forEach((field) => {
        columnsLookup[field].computedWidth = computedColumnWidths[field].computedWidth;
      });
    }
    return _extends({}, rawState, {
      lookup: columnsLookup
    });
  };
  var applyInitialState = (columnsState, initialState) => {
    if (!initialState) {
      return columnsState;
    }
    const {
      orderedFields = [],
      dimensions = {}
    } = initialState;
    const columnsWithUpdatedDimensions = Object.keys(dimensions);
    if (columnsWithUpdatedDimensions.length === 0 && orderedFields.length === 0) {
      return columnsState;
    }
    const orderedFieldsLookup = {};
    const cleanOrderedFields = [];
    for (let i = 0; i < orderedFields.length; i += 1) {
      const field = orderedFields[i];
      if (columnsState.lookup[field]) {
        orderedFieldsLookup[field] = true;
        cleanOrderedFields.push(field);
      }
    }
    const newOrderedFields = cleanOrderedFields.length === 0 ? columnsState.orderedFields : [...cleanOrderedFields, ...columnsState.orderedFields.filter((field) => !orderedFieldsLookup[field])];
    const newColumnLookup = _extends({}, columnsState.lookup);
    for (let i = 0; i < columnsWithUpdatedDimensions.length; i += 1) {
      const field = columnsWithUpdatedDimensions[i];
      const newColDef = _extends({}, newColumnLookup[field], {
        hasBeenResized: true
      });
      Object.entries(dimensions[field]).forEach(([key, value]) => {
        newColDef[key] = value === -1 ? Infinity : value;
      });
      newColumnLookup[field] = newColDef;
    }
    const newColumnsState = _extends({}, columnsState, {
      orderedFields: newOrderedFields,
      lookup: newColumnLookup
    });
    return newColumnsState;
  };
  function getDefaultColTypeDef(columnTypes, type) {
    let colDef = columnTypes[DEFAULT_GRID_COL_TYPE_KEY];
    if (type && columnTypes[type]) {
      colDef = columnTypes[type];
    }
    return colDef;
  }
  var createColumnsState = ({
    apiRef,
    columnsToUpsert,
    initialState,
    columnTypes,
    columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef),
    keepOnlyColumnsToUpsert = false
  }) => {
    var _apiRef$current$getRo, _apiRef$current$getRo2, _apiRef$current;
    const isInsideStateInitializer = !apiRef.current.state.columns;
    let columnsState;
    if (isInsideStateInitializer) {
      columnsState = {
        orderedFields: [],
        lookup: {},
        columnVisibilityModel
      };
    } else {
      const currentState = gridColumnsStateSelector(apiRef.current.state);
      columnsState = {
        orderedFields: keepOnlyColumnsToUpsert ? [] : [...currentState.orderedFields],
        lookup: _extends({}, currentState.lookup),
        // Will be cleaned later if keepOnlyColumnsToUpsert=true
        columnVisibilityModel
      };
    }
    let columnsToKeep = {};
    if (keepOnlyColumnsToUpsert && !isInsideStateInitializer) {
      columnsToKeep = Object.keys(columnsState.lookup).reduce((acc, key) => _extends({}, acc, {
        [key]: false
      }), {});
    }
    const columnsToUpsertLookup = {};
    columnsToUpsert.forEach((newColumn) => {
      const {
        field
      } = newColumn;
      columnsToUpsertLookup[field] = true;
      columnsToKeep[field] = true;
      let existingState = columnsState.lookup[field];
      if (existingState == null) {
        existingState = _extends({}, getDefaultColTypeDef(columnTypes, newColumn.type), {
          field,
          hasBeenResized: false
        });
        columnsState.orderedFields.push(field);
      } else if (keepOnlyColumnsToUpsert) {
        columnsState.orderedFields.push(field);
      }
      if (existingState && existingState.type !== newColumn.type) {
        existingState = _extends({}, getDefaultColTypeDef(columnTypes, newColumn.type), {
          field
        });
      }
      let hasBeenResized = existingState.hasBeenResized;
      COLUMNS_DIMENSION_PROPERTIES.forEach((key) => {
        if (newColumn[key] !== void 0) {
          hasBeenResized = true;
          if (newColumn[key] === -1) {
            newColumn[key] = Infinity;
          }
        }
      });
      columnsState.lookup[field] = _extends({}, existingState, newColumn, {
        hasBeenResized
      });
    });
    if (keepOnlyColumnsToUpsert && !isInsideStateInitializer) {
      Object.keys(columnsState.lookup).forEach((field) => {
        if (!columnsToKeep[field]) {
          delete columnsState.lookup[field];
        }
      });
    }
    const columnsStateWithPreProcessing = apiRef.current.unstable_applyPipeProcessors("hydrateColumns", columnsState);
    const columnsStateWithPortableColumns = applyInitialState(columnsStateWithPreProcessing, initialState);
    return hydrateColumnsWidth(columnsStateWithPortableColumns, (_apiRef$current$getRo = (_apiRef$current$getRo2 = (_apiRef$current = apiRef.current).getRootDimensions) == null || (_apiRef$current$getRo2 = _apiRef$current$getRo2.call(_apiRef$current)) == null ? void 0 : _apiRef$current$getRo2.viewportInnerSize.width) != null ? _apiRef$current$getRo : 0);
  };
  var mergeColumnsState = (columnsState) => (state) => _extends({}, state, {
    columns: columnsState
  });
  function getFirstNonSpannedColumnToRender({
    firstColumnToRender,
    apiRef,
    firstRowToRender,
    lastRowToRender,
    visibleRows
  }) {
    let firstNonSpannedColumnToRender = firstColumnToRender;
    for (let i = firstRowToRender; i < lastRowToRender; i += 1) {
      const row = visibleRows[i];
      if (row) {
        const rowId = visibleRows[i].id;
        const cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, firstColumnToRender);
        if (cellColSpanInfo && cellColSpanInfo.spannedByColSpan) {
          firstNonSpannedColumnToRender = cellColSpanInfo.leftVisibleCellIndex;
        }
      }
    }
    return firstNonSpannedColumnToRender;
  }
  function getFirstColumnIndexToRender({
    firstColumnIndex,
    minColumnIndex,
    columnBuffer,
    firstRowToRender,
    lastRowToRender,
    apiRef,
    visibleRows
  }) {
    const initialFirstColumnToRender = Math.max(firstColumnIndex - columnBuffer, minColumnIndex);
    const firstColumnToRender = getFirstNonSpannedColumnToRender({
      firstColumnToRender: initialFirstColumnToRender,
      apiRef,
      firstRowToRender,
      lastRowToRender,
      visibleRows
    });
    return firstColumnToRender;
  }
  function getTotalHeaderHeight(apiRef, headerHeight) {
    const densityFactor = gridDensityFactorSelector(apiRef);
    const maxDepth = gridColumnGroupsHeaderMaxDepthSelector(apiRef);
    return Math.floor(headerHeight * densityFactor) * ((maxDepth != null ? maxDepth : 0) + 1);
  }

  // node_modules/@mui/x-data-grid/hooks/features/columns/useGridColumns.js
  var import_jsx_runtime180 = __toESM(require_jsx_runtime());
  var defaultColumnTypes = getGridDefaultColumnTypes();
  var columnsStateInitializer = (state, props, apiRef) => {
    var _props$initialState, _ref, _props$columnVisibili, _props$initialState2;
    const columnsState = createColumnsState({
      apiRef,
      columnTypes: defaultColumnTypes,
      columnsToUpsert: props.columns,
      initialState: (_props$initialState = props.initialState) == null ? void 0 : _props$initialState.columns,
      columnVisibilityModel: (_ref = (_props$columnVisibili = props.columnVisibilityModel) != null ? _props$columnVisibili : (_props$initialState2 = props.initialState) == null || (_props$initialState2 = _props$initialState2.columns) == null ? void 0 : _props$initialState2.columnVisibilityModel) != null ? _ref : {},
      keepOnlyColumnsToUpsert: true
    });
    return _extends({}, state, {
      columns: columnsState
    });
  };
  function useGridColumns(apiRef, props) {
    var _props$initialState4, _props$slotProps2;
    const logger = useGridLogger(apiRef, "useGridColumns");
    const columnTypes = defaultColumnTypes;
    const previousColumnsProp = React194.useRef(props.columns);
    const previousColumnTypesProp = React194.useRef(columnTypes);
    apiRef.current.registerControlState({
      stateId: "visibleColumns",
      propModel: props.columnVisibilityModel,
      propOnChange: props.onColumnVisibilityModelChange,
      stateSelector: gridColumnVisibilityModelSelector,
      changeEvent: "columnVisibilityModelChange"
    });
    const setGridColumnsState = React194.useCallback((columnsState) => {
      logger.debug("Updating columns state.");
      apiRef.current.setState(mergeColumnsState(columnsState));
      apiRef.current.forceUpdate();
      apiRef.current.publishEvent("columnsChange", columnsState.orderedFields);
    }, [logger, apiRef]);
    const getColumn = React194.useCallback((field) => gridColumnLookupSelector(apiRef)[field], [apiRef]);
    const getAllColumns = React194.useCallback(() => gridColumnDefinitionsSelector(apiRef), [apiRef]);
    const getVisibleColumns = React194.useCallback(() => gridVisibleColumnDefinitionsSelector(apiRef), [apiRef]);
    const getColumnIndex = React194.useCallback((field, useVisibleColumns = true) => {
      const columns = useVisibleColumns ? gridVisibleColumnDefinitionsSelector(apiRef) : gridColumnDefinitionsSelector(apiRef);
      return columns.findIndex((col) => col.field === field);
    }, [apiRef]);
    const getColumnPosition = React194.useCallback((field) => {
      const index = getColumnIndex(field);
      return gridColumnPositionsSelector(apiRef)[index];
    }, [apiRef, getColumnIndex]);
    const setColumnVisibilityModel = React194.useCallback((model) => {
      const currentModel = gridColumnVisibilityModelSelector(apiRef);
      if (currentModel !== model) {
        apiRef.current.setState((state) => _extends({}, state, {
          columns: createColumnsState({
            apiRef,
            columnTypes,
            columnsToUpsert: [],
            initialState: void 0,
            columnVisibilityModel: model,
            keepOnlyColumnsToUpsert: false
          })
        }));
        apiRef.current.forceUpdate();
      }
    }, [apiRef, columnTypes]);
    const updateColumns = React194.useCallback((columns) => {
      const columnsState = createColumnsState({
        apiRef,
        columnTypes,
        columnsToUpsert: columns,
        initialState: void 0,
        keepOnlyColumnsToUpsert: false
      });
      setGridColumnsState(columnsState);
    }, [apiRef, setGridColumnsState, columnTypes]);
    const setColumnVisibility = React194.useCallback((field, isVisible) => {
      var _columnVisibilityMode;
      const columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef);
      const isCurrentlyVisible = (_columnVisibilityMode = columnVisibilityModel[field]) != null ? _columnVisibilityMode : true;
      if (isVisible !== isCurrentlyVisible) {
        const newModel = _extends({}, columnVisibilityModel, {
          [field]: isVisible
        });
        apiRef.current.setColumnVisibilityModel(newModel);
      }
    }, [apiRef]);
    const getColumnIndexRelativeToVisibleColumns = React194.useCallback((field) => {
      const allColumns = gridColumnFieldsSelector(apiRef);
      return allColumns.findIndex((col) => col === field);
    }, [apiRef]);
    const setColumnIndex = React194.useCallback((field, targetIndexPosition) => {
      const allColumns = gridColumnFieldsSelector(apiRef);
      const oldIndexPosition = getColumnIndexRelativeToVisibleColumns(field);
      if (oldIndexPosition === targetIndexPosition) {
        return;
      }
      logger.debug(`Moving column ${field} to index ${targetIndexPosition}`);
      const updatedColumns = [...allColumns];
      const fieldRemoved = updatedColumns.splice(oldIndexPosition, 1)[0];
      updatedColumns.splice(targetIndexPosition, 0, fieldRemoved);
      setGridColumnsState(_extends({}, gridColumnsStateSelector(apiRef.current.state), {
        orderedFields: updatedColumns
      }));
      const params = {
        column: apiRef.current.getColumn(field),
        targetIndex: apiRef.current.getColumnIndexRelativeToVisibleColumns(field),
        oldIndex: oldIndexPosition
      };
      apiRef.current.publishEvent("columnIndexChange", params);
    }, [apiRef, logger, setGridColumnsState, getColumnIndexRelativeToVisibleColumns]);
    const setColumnWidth = React194.useCallback((field, width2) => {
      var _apiRef$current$getRo, _apiRef$current$getRo2;
      logger.debug(`Updating column ${field} width to ${width2}`);
      const columnsState = gridColumnsStateSelector(apiRef.current.state);
      const column2 = columnsState.lookup[field];
      const newColumn = _extends({}, column2, {
        width: width2,
        hasBeenResized: true
      });
      setGridColumnsState(hydrateColumnsWidth(_extends({}, columnsState, {
        lookup: _extends({}, columnsState.lookup, {
          [field]: newColumn
        })
      }), (_apiRef$current$getRo = (_apiRef$current$getRo2 = apiRef.current.getRootDimensions()) == null ? void 0 : _apiRef$current$getRo2.viewportInnerSize.width) != null ? _apiRef$current$getRo : 0));
      apiRef.current.publishEvent("columnWidthChange", {
        element: apiRef.current.getColumnHeaderElement(field),
        colDef: newColumn,
        width: width2
      });
    }, [apiRef, logger, setGridColumnsState]);
    const columnApi = {
      getColumn,
      getAllColumns,
      getColumnIndex,
      getColumnPosition,
      getVisibleColumns,
      getColumnIndexRelativeToVisibleColumns,
      updateColumns,
      setColumnVisibilityModel,
      setColumnVisibility,
      setColumnWidth
    };
    const columnReorderApi = {
      setColumnIndex
    };
    useGridApiMethod(apiRef, columnApi, "public");
    useGridApiMethod(apiRef, columnReorderApi, props.signature === GridSignature.DataGrid ? "private" : "public");
    const stateExportPreProcessing = React194.useCallback((prevState, context) => {
      var _props$initialState$c, _props$initialState3;
      const columnsStateToExport = {};
      const columnVisibilityModelToExport = gridColumnVisibilityModelSelector(apiRef);
      const shouldExportColumnVisibilityModel = (
        // Always export if the `exportOnlyDirtyModels` property is not activated
        !context.exportOnlyDirtyModels || // Always export if the model is controlled
        props.columnVisibilityModel != null || // Always export if the model has been initialized
        // TODO v6 Do a nullish check instead to export even if the initial model equals "{}"
        Object.keys((_props$initialState$c = (_props$initialState3 = props.initialState) == null || (_props$initialState3 = _props$initialState3.columns) == null ? void 0 : _props$initialState3.columnVisibilityModel) != null ? _props$initialState$c : {}).length > 0 || // Always export if the model is not empty
        Object.keys(columnVisibilityModelToExport).length > 0
      );
      if (shouldExportColumnVisibilityModel) {
        columnsStateToExport.columnVisibilityModel = columnVisibilityModelToExport;
      }
      columnsStateToExport.orderedFields = gridColumnFieldsSelector(apiRef);
      const columns = gridColumnDefinitionsSelector(apiRef);
      const dimensions = {};
      columns.forEach((colDef) => {
        if (colDef.hasBeenResized) {
          const colDefDimensions = {};
          COLUMNS_DIMENSION_PROPERTIES.forEach((propertyName) => {
            let propertyValue = colDef[propertyName];
            if (propertyValue === Infinity) {
              propertyValue = -1;
            }
            colDefDimensions[propertyName] = propertyValue;
          });
          dimensions[colDef.field] = colDefDimensions;
        }
      });
      if (Object.keys(dimensions).length > 0) {
        columnsStateToExport.dimensions = dimensions;
      }
      return _extends({}, prevState, {
        columns: columnsStateToExport
      });
    }, [apiRef, props.columnVisibilityModel, (_props$initialState4 = props.initialState) == null ? void 0 : _props$initialState4.columns]);
    const stateRestorePreProcessing = React194.useCallback((params, context) => {
      var _context$stateToResto;
      const columnVisibilityModelToImport = (_context$stateToResto = context.stateToRestore.columns) == null ? void 0 : _context$stateToResto.columnVisibilityModel;
      const initialState = context.stateToRestore.columns;
      if (columnVisibilityModelToImport == null && initialState == null) {
        return params;
      }
      const columnsState = createColumnsState({
        apiRef,
        columnTypes,
        columnsToUpsert: [],
        initialState,
        columnVisibilityModel: columnVisibilityModelToImport,
        keepOnlyColumnsToUpsert: false
      });
      apiRef.current.setState(mergeColumnsState(columnsState));
      if (initialState != null) {
        apiRef.current.publishEvent("columnsChange", columnsState.orderedFields);
      }
      return params;
    }, [apiRef, columnTypes]);
    const preferencePanelPreProcessing = React194.useCallback((initialValue, value) => {
      if (value === GridPreferencePanelsValue.columns) {
        var _props$slotProps;
        const ColumnsPanel = props.slots.columnsPanel;
        return /* @__PURE__ */ (0, import_jsx_runtime180.jsx)(ColumnsPanel, _extends({}, (_props$slotProps = props.slotProps) == null ? void 0 : _props$slotProps.columnsPanel));
      }
      return initialValue;
    }, [props.slots.columnsPanel, (_props$slotProps2 = props.slotProps) == null ? void 0 : _props$slotProps2.columnsPanel]);
    const addColumnMenuItems = React194.useCallback((columnMenuItems) => {
      if (props.disableColumnSelector) {
        return columnMenuItems;
      }
      return [...columnMenuItems, "columnMenuColumnsItem"];
    }, [props.disableColumnSelector]);
    useGridRegisterPipeProcessor(apiRef, "columnMenu", addColumnMenuItems);
    useGridRegisterPipeProcessor(apiRef, "exportState", stateExportPreProcessing);
    useGridRegisterPipeProcessor(apiRef, "restoreState", stateRestorePreProcessing);
    useGridRegisterPipeProcessor(apiRef, "preferencePanel", preferencePanelPreProcessing);
    const prevInnerWidth = React194.useRef(null);
    const handleGridSizeChange = (viewportInnerSize) => {
      if (prevInnerWidth.current !== viewportInnerSize.width) {
        prevInnerWidth.current = viewportInnerSize.width;
        setGridColumnsState(hydrateColumnsWidth(gridColumnsStateSelector(apiRef.current.state), viewportInnerSize.width));
      }
    };
    useGridApiEventHandler(apiRef, "viewportInnerSizeChange", handleGridSizeChange);
    const hydrateColumns = React194.useCallback(() => {
      logger.info(`Columns pipe processing have changed, regenerating the columns`);
      const columnsState = createColumnsState({
        apiRef,
        columnTypes,
        columnsToUpsert: [],
        initialState: void 0,
        keepOnlyColumnsToUpsert: false
      });
      setGridColumnsState(columnsState);
    }, [apiRef, logger, setGridColumnsState, columnTypes]);
    useGridRegisterPipeApplier(apiRef, "hydrateColumns", hydrateColumns);
    const isFirstRender = React194.useRef(true);
    React194.useEffect(() => {
      if (isFirstRender.current) {
        isFirstRender.current = false;
        return;
      }
      logger.info(`GridColumns have changed, new length ${props.columns.length}`);
      if (previousColumnsProp.current === props.columns && previousColumnTypesProp.current === columnTypes) {
        return;
      }
      const columnsState = createColumnsState({
        apiRef,
        columnTypes,
        initialState: void 0,
        // If the user provides a model, we don't want to set it in the state here because it has it's dedicated `useEffect` which calls `setColumnVisibilityModel`
        columnsToUpsert: props.columns,
        keepOnlyColumnsToUpsert: true
      });
      previousColumnsProp.current = props.columns;
      previousColumnTypesProp.current = columnTypes;
      setGridColumnsState(columnsState);
    }, [logger, apiRef, setGridColumnsState, props.columns, columnTypes]);
    React194.useEffect(() => {
      if (props.columnVisibilityModel !== void 0) {
        apiRef.current.setColumnVisibilityModel(props.columnVisibilityModel);
      }
    }, [apiRef, logger, props.columnVisibilityModel]);
  }

  // node_modules/@mui/x-data-grid/hooks/features/density/useGridDensity.js
  init_extends();
  var React195 = __toESM(require_react());
  var COMPACT_DENSITY_FACTOR = 0.7;
  var COMFORTABLE_DENSITY_FACTOR = 1.3;
  var DENSITY_FACTORS = {
    compact: COMPACT_DENSITY_FACTOR,
    comfortable: COMFORTABLE_DENSITY_FACTOR,
    standard: 1
  };
  var densityStateInitializer = (state, props) => _extends({}, state, {
    density: {
      value: props.density,
      factor: DENSITY_FACTORS[props.density]
    }
  });
  var useGridDensity = (apiRef, props) => {
    const logger = useGridLogger(apiRef, "useDensity");
    const setDensity = React195.useCallback((newDensity) => {
      logger.debug(`Set grid density to ${newDensity}`);
      apiRef.current.setState((state) => {
        const currentDensityState = gridDensitySelector(state);
        const newDensityState = {
          value: newDensity,
          factor: DENSITY_FACTORS[newDensity]
        };
        if (isDeepEqual(currentDensityState, newDensityState)) {
          return state;
        }
        return _extends({}, state, {
          density: newDensityState
        });
      });
      apiRef.current.forceUpdate();
    }, [logger, apiRef]);
    React195.useEffect(() => {
      apiRef.current.setDensity(props.density);
    }, [apiRef, props.density]);
    const densityApi = {
      setDensity
    };
    useGridApiMethod(apiRef, densityApi, "public");
  };

  // node_modules/@mui/x-data-grid/hooks/features/export/useGridCsvExport.js
  var React196 = __toESM(require_react());

  // node_modules/@mui/x-data-grid/utils/exportAs.js
  function exportAs(blob, extension = "csv", filename = document.title || "untitled") {
    const fullName = `${filename}.${extension}`;
    if ("download" in HTMLAnchorElement.prototype) {
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = fullName;
      a.click();
      setTimeout(() => {
        URL.revokeObjectURL(url);
      });
      return;
    }
    throw new Error("MUI: exportAs not supported");
  }

  // node_modules/@mui/x-data-grid/hooks/features/export/utils.js
  var getColumnsToExport = ({
    apiRef,
    options
  }) => {
    const columns = gridColumnDefinitionsSelector(apiRef);
    if (options.fields) {
      return options.fields.reduce((currentColumns, field) => {
        const column2 = columns.find((col) => col.field === field);
        if (column2) {
          currentColumns.push(column2);
        }
        return currentColumns;
      }, []);
    }
    const validColumns = options.allColumns ? columns : gridVisibleColumnDefinitionsSelector(apiRef);
    return validColumns.filter((column2) => !column2.disableExport);
  };
  var defaultGetRowsToExport = ({
    apiRef
  }) => {
    var _pinnedRows$top, _pinnedRows$bottom;
    const filteredSortedRowIds = gridFilteredSortedRowIdsSelector(apiRef);
    const rowTree = gridRowTreeSelector(apiRef);
    const selectedRows = apiRef.current.getSelectedRows();
    const bodyRows = filteredSortedRowIds.filter((id) => rowTree[id].type !== "footer");
    const pinnedRows = gridPinnedRowsSelector(apiRef);
    const topPinnedRowsIds = (pinnedRows == null || (_pinnedRows$top = pinnedRows.top) == null ? void 0 : _pinnedRows$top.map((row) => row.id)) || [];
    const bottomPinnedRowsIds = (pinnedRows == null || (_pinnedRows$bottom = pinnedRows.bottom) == null ? void 0 : _pinnedRows$bottom.map((row) => row.id)) || [];
    bodyRows.unshift(...topPinnedRowsIds);
    bodyRows.push(...bottomPinnedRowsIds);
    if (selectedRows.size > 0) {
      return bodyRows.filter((id) => selectedRows.has(id));
    }
    return bodyRows;
  };

  // node_modules/@mui/x-data-grid/hooks/features/export/useGridCsvExport.js
  var import_jsx_runtime181 = __toESM(require_jsx_runtime());
  var useGridCsvExport = (apiRef, props) => {
    const logger = useGridLogger(apiRef, "useGridCsvExport");
    const ignoreValueFormatterProp = props.unstable_ignoreValueFormatterDuringExport;
    const ignoreValueFormatter = (typeof ignoreValueFormatterProp === "object" ? ignoreValueFormatterProp == null ? void 0 : ignoreValueFormatterProp.csvExport : ignoreValueFormatterProp) || false;
    const getDataAsCsv = React196.useCallback((options = {}) => {
      var _options$getRowsToExp, _options$shouldAppend, _options$includeHeade, _options$includeColum, _options$escapeFormul;
      logger.debug(`Get data as CSV`);
      const exportedColumns = getColumnsToExport({
        apiRef,
        options
      });
      const getRowsToExport = (_options$getRowsToExp = options.getRowsToExport) != null ? _options$getRowsToExp : defaultGetRowsToExport;
      const exportedRowIds = getRowsToExport({
        apiRef
      });
      return buildCSV({
        columns: exportedColumns,
        rowIds: exportedRowIds,
        csvOptions: {
          delimiter: options.delimiter || ",",
          shouldAppendQuotes: (_options$shouldAppend = options.shouldAppendQuotes) != null ? _options$shouldAppend : true,
          includeHeaders: (_options$includeHeade = options.includeHeaders) != null ? _options$includeHeade : true,
          includeColumnGroupsHeaders: (_options$includeColum = options.includeColumnGroupsHeaders) != null ? _options$includeColum : true,
          escapeFormulas: (_options$escapeFormul = options.escapeFormulas) != null ? _options$escapeFormul : true
        },
        ignoreValueFormatter,
        apiRef
      });
    }, [logger, apiRef, ignoreValueFormatter]);
    const exportDataAsCsv = React196.useCallback((options) => {
      logger.debug(`Export data as CSV`);
      const csv = getDataAsCsv(options);
      const blob = new Blob([options != null && options.utf8WithBom ? new Uint8Array([239, 187, 191]) : "", csv], {
        type: "text/csv"
      });
      exportAs(blob, "csv", options == null ? void 0 : options.fileName);
    }, [logger, getDataAsCsv]);
    const csvExportApi = {
      getDataAsCsv,
      exportDataAsCsv
    };
    useGridApiMethod(apiRef, csvExportApi, "public");
    const addExportMenuButtons = React196.useCallback((initialValue, options) => {
      var _options$csvOptions;
      if ((_options$csvOptions = options.csvOptions) != null && _options$csvOptions.disableToolbarButton) {
        return initialValue;
      }
      return [...initialValue, {
        component: /* @__PURE__ */ (0, import_jsx_runtime181.jsx)(GridCsvExportMenuItem, {
          options: options.csvOptions
        }),
        componentName: "csvExport"
      }];
    }, []);
    useGridRegisterPipeProcessor(apiRef, "exportMenu", addExportMenuButtons);
  };

  // node_modules/@mui/x-data-grid/hooks/features/export/useGridPrintExport.js
  init_extends();
  var React198 = __toESM(require_react());

  // node_modules/@mui/x-data-grid/hooks/features/pagination/useGridPaginationModel.js
  init_extends();
  var React197 = __toESM(require_react());
  var getDerivedPaginationModel = (paginationState, signature, paginationModelProp) => {
    var _paginationModelProp$;
    let paginationModel = paginationState.paginationModel;
    const rowCount = paginationState.rowCount;
    const pageSize2 = (_paginationModelProp$ = paginationModelProp == null ? void 0 : paginationModelProp.pageSize) != null ? _paginationModelProp$ : paginationModel.pageSize;
    const pageCount = getPageCount(rowCount, pageSize2);
    if (paginationModelProp && ((paginationModelProp == null ? void 0 : paginationModelProp.page) !== paginationModel.page || (paginationModelProp == null ? void 0 : paginationModelProp.pageSize) !== paginationModel.pageSize)) {
      paginationModel = paginationModelProp;
    }
    const validPage = getValidPage(paginationModel.page, pageCount);
    if (validPage !== paginationModel.page) {
      paginationModel = _extends({}, paginationModel, {
        page: validPage
      });
    }
    throwIfPageSizeExceedsTheLimit(paginationModel.pageSize, signature);
    return paginationModel;
  };
  var useGridPaginationModel = (apiRef, props) => {
    var _props$initialState2;
    const logger = useGridLogger(apiRef, "useGridPaginationModel");
    const densityFactor = useGridSelector(apiRef, gridDensityFactorSelector);
    const rowHeight = Math.floor(props.rowHeight * densityFactor);
    apiRef.current.registerControlState({
      stateId: "paginationModel",
      propModel: props.paginationModel,
      propOnChange: props.onPaginationModelChange,
      stateSelector: gridPaginationModelSelector,
      changeEvent: "paginationModelChange"
    });
    const setPage = React197.useCallback((page) => {
      const currentModel = gridPaginationModelSelector(apiRef);
      if (page === currentModel.page) {
        return;
      }
      logger.debug(`Setting page to ${page}`);
      apiRef.current.setPaginationModel({
        page,
        pageSize: currentModel.pageSize
      });
    }, [apiRef, logger]);
    const setPageSize = React197.useCallback((pageSize2) => {
      const currentModel = gridPaginationModelSelector(apiRef);
      if (pageSize2 === currentModel.pageSize) {
        return;
      }
      logger.debug(`Setting page size to ${pageSize2}`);
      apiRef.current.setPaginationModel({
        pageSize: pageSize2,
        page: currentModel.page
      });
    }, [apiRef, logger]);
    const setPaginationModel = React197.useCallback((paginationModel) => {
      const currentModel = gridPaginationModelSelector(apiRef);
      if (paginationModel === currentModel) {
        return;
      }
      logger.debug("Setting 'paginationModel' to", paginationModel);
      apiRef.current.setState((state) => _extends({}, state, {
        pagination: _extends({}, state.pagination, {
          paginationModel: getDerivedPaginationModel(state.pagination, props.signature, paginationModel)
        })
      }));
    }, [apiRef, logger, props.signature]);
    const paginationModelApi = {
      setPage,
      setPageSize,
      setPaginationModel
    };
    useGridApiMethod(apiRef, paginationModelApi, "public");
    const stateExportPreProcessing = React197.useCallback((prevState, context) => {
      var _props$initialState;
      const paginationModel = gridPaginationModelSelector(apiRef);
      const shouldExportPaginationModel = (
        // Always export if the `exportOnlyDirtyModels` property is not activated
        !context.exportOnlyDirtyModels || // Always export if the `paginationModel` is controlled
        props.paginationModel != null || // Always export if the `paginationModel` has been initialized
        ((_props$initialState = props.initialState) == null || (_props$initialState = _props$initialState.pagination) == null ? void 0 : _props$initialState.paginationModel) != null || // Export if `page` or `pageSize` is not equal to the default value
        paginationModel.page !== 0 && paginationModel.pageSize !== defaultPageSize(props.autoPageSize)
      );
      if (!shouldExportPaginationModel) {
        return prevState;
      }
      return _extends({}, prevState, {
        pagination: _extends({}, prevState.pagination, {
          paginationModel
        })
      });
    }, [apiRef, props.paginationModel, (_props$initialState2 = props.initialState) == null || (_props$initialState2 = _props$initialState2.pagination) == null ? void 0 : _props$initialState2.paginationModel, props.autoPageSize]);
    const stateRestorePreProcessing = React197.useCallback((params, context) => {
      var _context$stateToResto, _context$stateToResto2;
      const paginationModel = (_context$stateToResto = context.stateToRestore.pagination) != null && _context$stateToResto.paginationModel ? _extends({}, getDefaultGridPaginationModel(props.autoPageSize), (_context$stateToResto2 = context.stateToRestore.pagination) == null ? void 0 : _context$stateToResto2.paginationModel) : gridPaginationModelSelector(apiRef);
      apiRef.current.setState((state) => _extends({}, state, {
        pagination: _extends({}, state.pagination, {
          paginationModel: getDerivedPaginationModel(state.pagination, props.signature, paginationModel)
        })
      }));
      return params;
    }, [apiRef, props.autoPageSize, props.signature]);
    useGridRegisterPipeProcessor(apiRef, "exportState", stateExportPreProcessing);
    useGridRegisterPipeProcessor(apiRef, "restoreState", stateRestorePreProcessing);
    const handlePaginationModelChange = () => {
      var _apiRef$current$virtu;
      const paginationModel = gridPaginationModelSelector(apiRef);
      if ((_apiRef$current$virtu = apiRef.current.virtualScrollerRef) != null && _apiRef$current$virtu.current) {
        apiRef.current.scrollToIndexes({
          rowIndex: paginationModel.page * paginationModel.pageSize
        });
      }
    };
    const handleUpdateAutoPageSize = React197.useCallback(() => {
      if (!props.autoPageSize) {
        return;
      }
      const dimensions = apiRef.current.getRootDimensions() || {
        viewportInnerSize: {
          height: 0
        }
      };
      const pinnedRowsHeight = calculatePinnedRowsHeight(apiRef);
      const maximumPageSizeWithoutScrollBar = Math.floor((dimensions.viewportInnerSize.height - pinnedRowsHeight.top - pinnedRowsHeight.bottom) / rowHeight);
      apiRef.current.setPageSize(maximumPageSizeWithoutScrollBar);
    }, [apiRef, props.autoPageSize, rowHeight]);
    const handleRowCountChange = React197.useCallback((newRowCount) => {
      if (newRowCount == null) {
        return;
      }
      const paginationModel = gridPaginationModelSelector(apiRef);
      const pageCount = gridPageCountSelector(apiRef);
      if (paginationModel.page > pageCount - 1) {
        apiRef.current.setPage(Math.max(0, pageCount - 1));
      }
    }, [apiRef]);
    useGridApiEventHandler(apiRef, "viewportInnerSizeChange", handleUpdateAutoPageSize);
    useGridApiEventHandler(apiRef, "paginationModelChange", handlePaginationModelChange);
    useGridApiEventHandler(apiRef, "rowCountChange", handleRowCountChange);
    React197.useEffect(() => {
      apiRef.current.setState((state) => _extends({}, state, {
        pagination: _extends({}, state.pagination, {
          paginationModel: getDerivedPaginationModel(state.pagination, props.signature, props.paginationModel)
        })
      }));
    }, [apiRef, props.paginationModel, props.paginationMode, props.signature]);
    React197.useEffect(handleUpdateAutoPageSize, [handleUpdateAutoPageSize]);
  };

  // node_modules/@mui/x-data-grid/hooks/features/export/useGridPrintExport.js
  var import_jsx_runtime182 = __toESM(require_jsx_runtime());
  function raf() {
    return new Promise((resolve) => {
      requestAnimationFrame(() => {
        resolve();
      });
    });
  }
  function buildPrintWindow(title) {
    const iframeEl = document.createElement("iframe");
    iframeEl.style.position = "absolute";
    iframeEl.style.width = "0px";
    iframeEl.style.height = "0px";
    iframeEl.title = title || document.title;
    return iframeEl;
  }
  var useGridPrintExport = (apiRef, props) => {
    const logger = useGridLogger(apiRef, "useGridPrintExport");
    const doc = React198.useRef(null);
    const previousGridState = React198.useRef(null);
    const previousColumnVisibility = React198.useRef({});
    const previousRows = React198.useRef([]);
    React198.useEffect(() => {
      doc.current = ownerDocument(apiRef.current.rootElementRef.current);
    }, [apiRef]);
    const updateGridColumnsForPrint = React198.useCallback((fields, allColumns, includeCheckboxes) => new Promise((resolve) => {
      const exportedColumnFields = getColumnsToExport({
        apiRef,
        options: {
          fields,
          allColumns
        }
      }).map((column2) => column2.field);
      const columns = gridColumnDefinitionsSelector(apiRef);
      const newColumnVisibilityModel = {};
      columns.forEach((column2) => {
        newColumnVisibilityModel[column2.field] = exportedColumnFields.includes(column2.field);
      });
      if (includeCheckboxes) {
        newColumnVisibilityModel[GRID_CHECKBOX_SELECTION_COL_DEF.field] = true;
      }
      apiRef.current.setColumnVisibilityModel(newColumnVisibilityModel);
      resolve();
    }), [apiRef]);
    const updateGridRowsForPrint = React198.useCallback((getRowsToExport) => {
      const rowsToExportIds = getRowsToExport({
        apiRef
      });
      const newRows = rowsToExportIds.map((id) => apiRef.current.getRow(id));
      apiRef.current.setRows(newRows);
    }, [apiRef]);
    const handlePrintWindowLoad = React198.useCallback((printWindow, options) => {
      var _querySelector, _querySelector2;
      const normalizeOptions = _extends({
        copyStyles: true,
        hideToolbar: false,
        hideFooter: false,
        includeCheckboxes: false
      }, options);
      const printDoc = printWindow.contentDocument;
      if (!printDoc) {
        return;
      }
      const rowsMeta = gridRowsMetaSelector(apiRef.current.state);
      const gridRootElement = apiRef.current.rootElementRef.current;
      const gridClone = gridRootElement.cloneNode(true);
      const gridMain = gridClone.querySelector(`.${gridClasses.main}`);
      gridMain.style.overflow = "visible";
      gridClone.style.contain = "size";
      const columnHeaders = gridClone.querySelector(`.${gridClasses.columnHeaders}`);
      const columnHeadersInner = columnHeaders.querySelector(`.${gridClasses.columnHeadersInner}`);
      columnHeadersInner.style.width = "100%";
      let gridToolbarElementHeight = ((_querySelector = gridRootElement.querySelector(`.${gridClasses.toolbarContainer}`)) == null ? void 0 : _querySelector.offsetHeight) || 0;
      let gridFooterElementHeight = ((_querySelector2 = gridRootElement.querySelector(`.${gridClasses.footerContainer}`)) == null ? void 0 : _querySelector2.offsetHeight) || 0;
      if (normalizeOptions.hideToolbar) {
        var _gridClone$querySelec;
        (_gridClone$querySelec = gridClone.querySelector(`.${gridClasses.toolbarContainer}`)) == null || _gridClone$querySelec.remove();
        gridToolbarElementHeight = 0;
      }
      if (normalizeOptions.hideFooter) {
        var _gridClone$querySelec2;
        (_gridClone$querySelec2 = gridClone.querySelector(`.${gridClasses.footerContainer}`)) == null || _gridClone$querySelec2.remove();
        gridFooterElementHeight = 0;
      }
      const computedTotalHeight = rowsMeta.currentPageTotalHeight + getTotalHeaderHeight(apiRef, props.columnHeaderHeight) + gridToolbarElementHeight + gridFooterElementHeight;
      gridClone.style.height = `${computedTotalHeight}px`;
      gridClone.style.boxSizing = "content-box";
      if (options != null && options.getRowsToExport) {
        const gridFooterElement = gridClone.querySelector(`.${gridClasses.footerContainer}`);
        gridFooterElement.style.position = "absolute";
        gridFooterElement.style.width = "100%";
        gridFooterElement.style.top = `${computedTotalHeight - gridFooterElementHeight}px`;
      }
      const container = document.createElement("div");
      container.appendChild(gridClone);
      printDoc.body.innerHTML = container.innerHTML;
      const defaultPageStyle = typeof normalizeOptions.pageStyle === "function" ? normalizeOptions.pageStyle() : normalizeOptions.pageStyle;
      if (typeof defaultPageStyle === "string") {
        const styleElement = printDoc.createElement("style");
        styleElement.appendChild(printDoc.createTextNode(defaultPageStyle));
        printDoc.head.appendChild(styleElement);
      }
      if (normalizeOptions.bodyClassName) {
        printDoc.body.classList.add(...normalizeOptions.bodyClassName.split(" "));
      }
      const stylesheetLoadPromises = [];
      if (normalizeOptions.copyStyles) {
        const rootCandidate = gridRootElement.getRootNode();
        const root = rootCandidate.constructor.name === "ShadowRoot" ? rootCandidate : doc.current;
        const headStyleElements = root.querySelectorAll("style, link[rel='stylesheet']");
        for (let i = 0; i < headStyleElements.length; i += 1) {
          const node2 = headStyleElements[i];
          if (node2.tagName === "STYLE") {
            const newHeadStyleElements = printDoc.createElement(node2.tagName);
            const sheet = node2.sheet;
            if (sheet) {
              let styleCSS = "";
              for (let j = 0; j < sheet.cssRules.length; j += 1) {
                if (typeof sheet.cssRules[j].cssText === "string") {
                  styleCSS += `${sheet.cssRules[j].cssText}\r
`;
                }
              }
              newHeadStyleElements.appendChild(printDoc.createTextNode(styleCSS));
              printDoc.head.appendChild(newHeadStyleElements);
            }
          } else if (node2.getAttribute("href")) {
            const newHeadStyleElements = printDoc.createElement(node2.tagName);
            for (let j = 0; j < node2.attributes.length; j += 1) {
              const attr = node2.attributes[j];
              if (attr) {
                newHeadStyleElements.setAttribute(attr.nodeName, attr.nodeValue || "");
              }
            }
            stylesheetLoadPromises.push(new Promise((resolve) => {
              newHeadStyleElements.addEventListener("load", () => resolve());
            }));
            printDoc.head.appendChild(newHeadStyleElements);
          }
        }
      }
      if (true) {
        Promise.all(stylesheetLoadPromises).then(() => {
          printWindow.contentWindow.print();
        });
      }
    }, [apiRef, doc, props.columnHeaderHeight]);
    const handlePrintWindowAfterPrint = React198.useCallback((printWindow) => {
      var _previousGridState$cu;
      doc.current.body.removeChild(printWindow);
      apiRef.current.restoreState(previousGridState.current || {});
      if (!((_previousGridState$cu = previousGridState.current) != null && (_previousGridState$cu = _previousGridState$cu.columns) != null && _previousGridState$cu.columnVisibilityModel)) {
        apiRef.current.setColumnVisibilityModel(previousColumnVisibility.current);
      }
      apiRef.current.unstable_setVirtualization(true);
      apiRef.current.setRows(previousRows.current);
      previousGridState.current = null;
      previousColumnVisibility.current = {};
      previousRows.current = [];
    }, [apiRef]);
    const exportDataAsPrint = React198.useCallback(async (options) => {
      logger.debug(`Export data as Print`);
      if (!apiRef.current.rootElementRef.current) {
        throw new Error("MUI: No grid root element available.");
      }
      previousGridState.current = apiRef.current.exportState();
      previousColumnVisibility.current = gridColumnVisibilityModelSelector(apiRef);
      const gridRowsLookup = gridRowsLookupSelector(apiRef);
      previousRows.current = gridDataRowIdsSelector(apiRef).map((rowId) => gridRowsLookup[rowId]);
      if (props.pagination) {
        const visibleRowCount = gridExpandedRowCountSelector(apiRef);
        const paginationModel = {
          page: 0,
          pageSize: visibleRowCount
        };
        apiRef.current.setState((state) => _extends({}, state, {
          pagination: _extends({}, state.pagination, {
            paginationModel: getDerivedPaginationModel(
              state.pagination,
              // Using signature `DataGridPro` to allow more than 100 rows in the print export
              "DataGridPro",
              paginationModel
            )
          })
        }));
        apiRef.current.forceUpdate();
      }
      await updateGridColumnsForPrint(options == null ? void 0 : options.fields, options == null ? void 0 : options.allColumns, options == null ? void 0 : options.includeCheckboxes);
      if (options != null && options.getRowsToExport) {
        updateGridRowsForPrint(options.getRowsToExport);
      }
      apiRef.current.unstable_setVirtualization(false);
      await raf();
      const printWindow = buildPrintWindow(options == null ? void 0 : options.fileName);
      if (false) {
        doc.current.body.appendChild(printWindow);
        handlePrintWindowLoad(printWindow, options);
        handlePrintWindowAfterPrint(printWindow);
      } else {
        printWindow.onload = () => {
          handlePrintWindowLoad(printWindow, options);
          const mediaQueryList = printWindow.contentWindow.matchMedia("print");
          mediaQueryList.addEventListener("change", (mql) => {
            const isAfterPrint = mql.matches === false;
            if (isAfterPrint) {
              handlePrintWindowAfterPrint(printWindow);
            }
          });
        };
        doc.current.body.appendChild(printWindow);
      }
    }, [props, logger, apiRef, handlePrintWindowLoad, handlePrintWindowAfterPrint, updateGridColumnsForPrint, updateGridRowsForPrint]);
    const printExportApi = {
      exportDataAsPrint
    };
    useGridApiMethod(apiRef, printExportApi, "public");
    const addExportMenuButtons = React198.useCallback((initialValue, options) => {
      var _options$printOptions;
      if ((_options$printOptions = options.printOptions) != null && _options$printOptions.disableToolbarButton) {
        return initialValue;
      }
      return [...initialValue, {
        component: /* @__PURE__ */ (0, import_jsx_runtime182.jsx)(GridPrintExportMenuItem, {
          options: options.printOptions
        }),
        componentName: "printExport"
      }];
    }, []);
    useGridRegisterPipeProcessor(apiRef, "exportMenu", addExportMenuButtons);
  };

  // node_modules/@mui/x-data-grid/hooks/features/filter/useGridFilter.js
  init_extends();
  var React199 = __toESM(require_react());
  var import_jsx_runtime183 = __toESM(require_jsx_runtime());
  var filterStateInitializer = (state, props, apiRef) => {
    var _ref, _props$filterModel, _props$initialState;
    const filterModel = (_ref = (_props$filterModel = props.filterModel) != null ? _props$filterModel : (_props$initialState = props.initialState) == null || (_props$initialState = _props$initialState.filter) == null ? void 0 : _props$initialState.filterModel) != null ? _ref : getDefaultGridFilterModel();
    return _extends({}, state, {
      filter: {
        filterModel: sanitizeFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef),
        filteredRowsLookup: {},
        filteredDescendantCountLookup: {}
      },
      visibleRowsLookup: {}
    });
  };
  var getVisibleRowsLookup = (params) => {
    return params.filteredRowsLookup;
  };
  function getVisibleRowsLookupState(apiRef, state) {
    return apiRef.current.applyStrategyProcessor("visibleRowsLookupCreation", {
      tree: state.rows.tree,
      filteredRowsLookup: state.filter.filteredRowsLookup
    });
  }
  function createMemoizedValues() {
    return defaultMemoize(Object.values);
  }
  var useGridFilter = (apiRef, props) => {
    var _props$initialState3, _props$slotProps2;
    const logger = useGridLogger(apiRef, "useGridFilter");
    apiRef.current.registerControlState({
      stateId: "filter",
      propModel: props.filterModel,
      propOnChange: props.onFilterModelChange,
      stateSelector: gridFilterModelSelector,
      changeEvent: "filterModelChange"
    });
    const updateFilteredRows = React199.useCallback(() => {
      apiRef.current.setState((state) => {
        const filterModel = gridFilterModelSelector(state, apiRef.current.instanceId);
        const isRowMatchingFilters = props.filterMode === "client" ? buildAggregatedFilterApplier(filterModel, apiRef, props.disableEval) : null;
        const filteringResult = apiRef.current.applyStrategyProcessor("filtering", {
          isRowMatchingFilters,
          filterModel: filterModel != null ? filterModel : getDefaultGridFilterModel()
        });
        const newState = _extends({}, state, {
          filter: _extends({}, state.filter, filteringResult)
        });
        const visibleRowsLookupState = getVisibleRowsLookupState(apiRef, newState);
        return _extends({}, newState, {
          visibleRowsLookup: visibleRowsLookupState
        });
      });
      apiRef.current.publishEvent("filteredRowsSet");
    }, [apiRef, props.filterMode, props.disableEval]);
    const addColumnMenuItem = React199.useCallback((columnMenuItems, colDef) => {
      if (colDef == null || colDef.filterable === false || props.disableColumnFilter) {
        return columnMenuItems;
      }
      return [...columnMenuItems, "columnMenuFilterItem"];
    }, [props.disableColumnFilter]);
    const applyFilters = React199.useCallback(() => {
      updateFilteredRows();
      apiRef.current.forceUpdate();
    }, [apiRef, updateFilteredRows]);
    const upsertFilterItem = React199.useCallback((item) => {
      const filterModel = gridFilterModelSelector(apiRef);
      const items = [...filterModel.items];
      const itemIndex = items.findIndex((filterItem) => filterItem.id === item.id);
      if (itemIndex === -1) {
        items.push(item);
      } else {
        items[itemIndex] = item;
      }
      apiRef.current.setFilterModel(_extends({}, filterModel, {
        items
      }), "upsertFilterItem");
    }, [apiRef]);
    const upsertFilterItems = React199.useCallback((items) => {
      const filterModel = gridFilterModelSelector(apiRef);
      const existingItems = [...filterModel.items];
      items.forEach((item) => {
        const itemIndex = items.findIndex((filterItem) => filterItem.id === item.id);
        if (itemIndex === -1) {
          existingItems.push(item);
        } else {
          existingItems[itemIndex] = item;
        }
      });
      apiRef.current.setFilterModel(_extends({}, filterModel, {
        items
      }), "upsertFilterItems");
    }, [apiRef]);
    const deleteFilterItem = React199.useCallback((itemToDelete) => {
      const filterModel = gridFilterModelSelector(apiRef);
      const items = filterModel.items.filter((item) => item.id !== itemToDelete.id);
      if (items.length === filterModel.items.length) {
        return;
      }
      apiRef.current.setFilterModel(_extends({}, filterModel, {
        items
      }), "deleteFilterItem");
    }, [apiRef]);
    const showFilterPanel = React199.useCallback((targetColumnField, panelId, labelId) => {
      logger.debug("Displaying filter panel");
      if (targetColumnField) {
        const filterModel = gridFilterModelSelector(apiRef);
        const filterItemsWithValue = filterModel.items.filter((item) => {
          var _column$filterOperato;
          if (item.value !== void 0) {
            if (Array.isArray(item.value) && item.value.length === 0) {
              return false;
            }
            return true;
          }
          const column2 = apiRef.current.getColumn(item.field);
          const filterOperator = (_column$filterOperato = column2.filterOperators) == null ? void 0 : _column$filterOperato.find((operator) => operator.value === item.operator);
          const requiresFilterValue = typeof (filterOperator == null ? void 0 : filterOperator.requiresFilterValue) === "undefined" ? true : filterOperator == null ? void 0 : filterOperator.requiresFilterValue;
          if (requiresFilterValue) {
            return false;
          }
          return true;
        });
        let newFilterItems;
        const filterItemOnTarget = filterItemsWithValue.find((item) => item.field === targetColumnField);
        const targetColumn = apiRef.current.getColumn(targetColumnField);
        if (filterItemOnTarget) {
          newFilterItems = filterItemsWithValue;
        } else if (props.disableMultipleColumnsFiltering) {
          newFilterItems = [cleanFilterItem({
            field: targetColumnField,
            operator: targetColumn.filterOperators[0].value
          }, apiRef)];
        } else {
          newFilterItems = [...filterItemsWithValue, cleanFilterItem({
            field: targetColumnField,
            operator: targetColumn.filterOperators[0].value
          }, apiRef)];
        }
        apiRef.current.setFilterModel(_extends({}, filterModel, {
          items: newFilterItems
        }));
      }
      apiRef.current.showPreferences(GridPreferencePanelsValue.filters, panelId, labelId);
    }, [apiRef, logger, props.disableMultipleColumnsFiltering]);
    const hideFilterPanel = React199.useCallback(() => {
      logger.debug("Hiding filter panel");
      apiRef.current.hidePreferences();
    }, [apiRef, logger]);
    const setFilterLogicOperator = React199.useCallback((logicOperator) => {
      const filterModel = gridFilterModelSelector(apiRef);
      if (filterModel.logicOperator === logicOperator) {
        return;
      }
      apiRef.current.setFilterModel(_extends({}, filterModel, {
        logicOperator
      }), "changeLogicOperator");
    }, [apiRef]);
    const setQuickFilterValues = React199.useCallback((values3) => {
      const filterModel = gridFilterModelSelector(apiRef);
      if (isDeepEqual(filterModel.quickFilterValues, values3)) {
        return;
      }
      apiRef.current.setFilterModel(_extends({}, filterModel, {
        quickFilterValues: [...values3]
      }));
    }, [apiRef]);
    const setFilterModel = React199.useCallback((model, reason) => {
      const currentModel = gridFilterModelSelector(apiRef);
      if (currentModel !== model) {
        logger.debug("Setting filter model");
        apiRef.current.updateControlState("filter", mergeStateWithFilterModel(model, props.disableMultipleColumnsFiltering, apiRef), reason);
        apiRef.current.unstable_applyFilters();
      }
    }, [apiRef, logger, props.disableMultipleColumnsFiltering]);
    const filterApi = {
      setFilterLogicOperator,
      unstable_applyFilters: applyFilters,
      deleteFilterItem,
      upsertFilterItem,
      upsertFilterItems,
      setFilterModel,
      showFilterPanel,
      hideFilterPanel,
      setQuickFilterValues,
      ignoreDiacritics: props.ignoreDiacritics
    };
    useGridApiMethod(apiRef, filterApi, "public");
    const stateExportPreProcessing = React199.useCallback((prevState, context) => {
      var _props$initialState2;
      const filterModelToExport = gridFilterModelSelector(apiRef);
      const shouldExportFilterModel = (
        // Always export if the `exportOnlyDirtyModels` property is not activated
        !context.exportOnlyDirtyModels || // Always export if the model is controlled
        props.filterModel != null || // Always export if the model has been initialized
        ((_props$initialState2 = props.initialState) == null || (_props$initialState2 = _props$initialState2.filter) == null ? void 0 : _props$initialState2.filterModel) != null || // Export if the model is not equal to the default value
        !isDeepEqual(filterModelToExport, getDefaultGridFilterModel())
      );
      if (!shouldExportFilterModel) {
        return prevState;
      }
      return _extends({}, prevState, {
        filter: {
          filterModel: filterModelToExport
        }
      });
    }, [apiRef, props.filterModel, (_props$initialState3 = props.initialState) == null || (_props$initialState3 = _props$initialState3.filter) == null ? void 0 : _props$initialState3.filterModel]);
    const stateRestorePreProcessing = React199.useCallback((params, context) => {
      var _context$stateToResto;
      const filterModel = (_context$stateToResto = context.stateToRestore.filter) == null ? void 0 : _context$stateToResto.filterModel;
      if (filterModel == null) {
        return params;
      }
      apiRef.current.updateControlState("filter", mergeStateWithFilterModel(filterModel, props.disableMultipleColumnsFiltering, apiRef), "restoreState");
      return _extends({}, params, {
        callbacks: [...params.callbacks, apiRef.current.unstable_applyFilters]
      });
    }, [apiRef, props.disableMultipleColumnsFiltering]);
    const preferencePanelPreProcessing = React199.useCallback((initialValue, value) => {
      if (value === GridPreferencePanelsValue.filters) {
        var _props$slotProps;
        const FilterPanel = props.slots.filterPanel;
        return /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(FilterPanel, _extends({}, (_props$slotProps = props.slotProps) == null ? void 0 : _props$slotProps.filterPanel));
      }
      return initialValue;
    }, [props.slots.filterPanel, (_props$slotProps2 = props.slotProps) == null ? void 0 : _props$slotProps2.filterPanel]);
    const {
      getRowId
    } = props;
    const getRowsRef = useLazyRef2(createMemoizedValues);
    const flatFilteringMethod = React199.useCallback((params) => {
      if (props.filterMode !== "client" || !params.isRowMatchingFilters) {
        return {
          filteredRowsLookup: {},
          filteredDescendantCountLookup: {}
        };
      }
      const dataRowIdToModelLookup = gridRowsLookupSelector(apiRef);
      const filteredRowsLookup = {};
      const {
        isRowMatchingFilters
      } = params;
      const filterCache = {};
      const result = {
        passingFilterItems: null,
        passingQuickFilterValues: null
      };
      const rows = getRowsRef.current(apiRef.current.state.rows.dataRowIdToModelLookup);
      for (let i = 0; i < rows.length; i += 1) {
        const row = rows[i];
        const id = getRowId ? getRowId(row) : row.id;
        isRowMatchingFilters(row, void 0, result);
        const isRowPassing = passFilterLogic([result.passingFilterItems], [result.passingQuickFilterValues], params.filterModel, apiRef, filterCache);
        filteredRowsLookup[id] = isRowPassing;
      }
      const footerId = "auto-generated-group-footer-root";
      const footer = dataRowIdToModelLookup[footerId];
      if (footer) {
        filteredRowsLookup[footerId] = true;
      }
      return {
        filteredRowsLookup,
        filteredDescendantCountLookup: {}
      };
    }, [apiRef, props.filterMode, getRowId, getRowsRef]);
    useGridRegisterPipeProcessor(apiRef, "columnMenu", addColumnMenuItem);
    useGridRegisterPipeProcessor(apiRef, "exportState", stateExportPreProcessing);
    useGridRegisterPipeProcessor(apiRef, "restoreState", stateRestorePreProcessing);
    useGridRegisterPipeProcessor(apiRef, "preferencePanel", preferencePanelPreProcessing);
    useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, "filtering", flatFilteringMethod);
    useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, "visibleRowsLookupCreation", getVisibleRowsLookup);
    const handleColumnsChange = React199.useCallback(() => {
      logger.debug("onColUpdated - GridColumns changed, applying filters");
      const filterModel = gridFilterModelSelector(apiRef);
      const filterableColumnsLookup = gridFilterableColumnLookupSelector(apiRef);
      const newFilterItems = filterModel.items.filter((item) => item.field && filterableColumnsLookup[item.field]);
      if (newFilterItems.length < filterModel.items.length) {
        apiRef.current.setFilterModel(_extends({}, filterModel, {
          items: newFilterItems
        }));
      }
    }, [apiRef, logger]);
    const handleStrategyProcessorChange = React199.useCallback((methodName) => {
      if (methodName === "filtering") {
        apiRef.current.unstable_applyFilters();
      }
    }, [apiRef]);
    const updateVisibleRowsLookupState = React199.useCallback(() => {
      apiRef.current.setState((state) => {
        return _extends({}, state, {
          visibleRowsLookup: getVisibleRowsLookupState(apiRef, state)
        });
      });
      apiRef.current.forceUpdate();
    }, [apiRef]);
    useGridApiEventHandler(apiRef, "rowsSet", updateFilteredRows);
    useGridApiEventHandler(apiRef, "columnsChange", handleColumnsChange);
    useGridApiEventHandler(apiRef, "activeStrategyProcessorChange", handleStrategyProcessorChange);
    useGridApiEventHandler(apiRef, "rowExpansionChange", updateVisibleRowsLookupState);
    useGridApiEventHandler(apiRef, "columnVisibilityModelChange", () => {
      const filterModel = gridFilterModelSelector(apiRef);
      if (filterModel.quickFilterValues && filterModel.quickFilterExcludeHiddenColumns) {
        apiRef.current.unstable_applyFilters();
      }
    });
    useFirstRender(() => {
      apiRef.current.unstable_applyFilters();
    });
    useEnhancedEffect_default(() => {
      if (props.filterModel !== void 0) {
        apiRef.current.setFilterModel(props.filterModel);
      }
    }, [apiRef, logger, props.filterModel]);
  };

  // node_modules/@mui/x-data-grid/hooks/features/focus/useGridFocus.js
  init_extends();
  var React200 = __toESM(require_react());
  var focusStateInitializer = (state) => _extends({}, state, {
    focus: {
      cell: null,
      columnHeader: null,
      columnHeaderFilter: null,
      columnGroupHeader: null
    },
    tabIndex: {
      cell: null,
      columnHeader: null,
      columnHeaderFilter: null,
      columnGroupHeader: null
    }
  });
  var useGridFocus = (apiRef, props) => {
    const logger = useGridLogger(apiRef, "useGridFocus");
    const lastClickedCell = React200.useRef(null);
    const publishCellFocusOut = React200.useCallback((cell, event) => {
      if (cell) {
        if (apiRef.current.getRow(cell.id)) {
          apiRef.current.publishEvent("cellFocusOut", apiRef.current.getCellParams(cell.id, cell.field), event);
        }
      }
    }, [apiRef]);
    const setCellFocus = React200.useCallback((id, field) => {
      const focusedCell = gridFocusCellSelector(apiRef);
      if ((focusedCell == null ? void 0 : focusedCell.id) === id && (focusedCell == null ? void 0 : focusedCell.field) === field) {
        return;
      }
      apiRef.current.setState((state) => {
        logger.debug(`Focusing on cell with id=${id} and field=${field}`);
        return _extends({}, state, {
          tabIndex: {
            cell: {
              id,
              field
            },
            columnHeader: null,
            columnHeaderFilter: null,
            columnGroupHeader: null
          },
          focus: {
            cell: {
              id,
              field
            },
            columnHeader: null,
            columnHeaderFilter: null,
            columnGroupHeader: null
          }
        });
      });
      apiRef.current.forceUpdate();
      if (!apiRef.current.getRow(id)) {
        return;
      }
      if (focusedCell) {
        publishCellFocusOut(focusedCell, {});
      }
      apiRef.current.publishEvent("cellFocusIn", apiRef.current.getCellParams(id, field));
    }, [apiRef, logger, publishCellFocusOut]);
    const setColumnHeaderFocus = React200.useCallback((field, event = {}) => {
      const cell = gridFocusCellSelector(apiRef);
      publishCellFocusOut(cell, event);
      apiRef.current.setState((state) => {
        logger.debug(`Focusing on column header with colIndex=${field}`);
        return _extends({}, state, {
          tabIndex: {
            columnHeader: {
              field
            },
            columnHeaderFilter: null,
            cell: null,
            columnGroupHeader: null
          },
          focus: {
            columnHeader: {
              field
            },
            columnHeaderFilter: null,
            cell: null,
            columnGroupHeader: null
          }
        });
      });
      apiRef.current.forceUpdate();
    }, [apiRef, logger, publishCellFocusOut]);
    const setColumnHeaderFilterFocus = React200.useCallback((field, event = {}) => {
      const cell = gridFocusCellSelector(apiRef);
      publishCellFocusOut(cell, event);
      apiRef.current.setState((state) => {
        logger.debug(`Focusing on column header filter with colIndex=${field}`);
        return _extends({}, state, {
          tabIndex: {
            columnHeader: null,
            columnHeaderFilter: {
              field
            },
            cell: null,
            columnGroupHeader: null
          },
          focus: {
            columnHeader: null,
            columnHeaderFilter: {
              field
            },
            cell: null,
            columnGroupHeader: null
          }
        });
      });
      apiRef.current.forceUpdate();
    }, [apiRef, logger, publishCellFocusOut]);
    const setColumnGroupHeaderFocus = React200.useCallback((field, depth, event = {}) => {
      const cell = gridFocusCellSelector(apiRef);
      if (cell) {
        apiRef.current.publishEvent("cellFocusOut", apiRef.current.getCellParams(cell.id, cell.field), event);
      }
      apiRef.current.setState((state) => {
        return _extends({}, state, {
          tabIndex: {
            columnGroupHeader: {
              field,
              depth
            },
            columnHeader: null,
            columnHeaderFilter: null,
            cell: null
          },
          focus: {
            columnGroupHeader: {
              field,
              depth
            },
            columnHeader: null,
            columnHeaderFilter: null,
            cell: null
          }
        });
      });
      apiRef.current.forceUpdate();
    }, [apiRef]);
    const getColumnGroupHeaderFocus = React200.useCallback(() => unstable_gridFocusColumnGroupHeaderSelector(apiRef), [apiRef]);
    const moveFocusToRelativeCell = React200.useCallback((id, field, direction) => {
      let columnIndexToFocus = apiRef.current.getColumnIndex(field);
      const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);
      const currentPage = getVisibleRows(apiRef, {
        pagination: props.pagination,
        paginationMode: props.paginationMode
      });
      const pinnedRows = gridPinnedRowsSelector(apiRef);
      const currentPageRows = [].concat(pinnedRows.top || [], currentPage.rows, pinnedRows.bottom || []);
      let rowIndexToFocus = currentPageRows.findIndex((row) => row.id === id);
      if (direction === "right") {
        columnIndexToFocus += 1;
      } else if (direction === "left") {
        columnIndexToFocus -= 1;
      } else {
        rowIndexToFocus += 1;
      }
      if (columnIndexToFocus >= visibleColumns.length) {
        rowIndexToFocus += 1;
        if (rowIndexToFocus < currentPageRows.length) {
          columnIndexToFocus = 0;
        }
      } else if (columnIndexToFocus < 0) {
        rowIndexToFocus -= 1;
        if (rowIndexToFocus >= 0) {
          columnIndexToFocus = visibleColumns.length - 1;
        }
      }
      rowIndexToFocus = clamp2(rowIndexToFocus, 0, currentPageRows.length - 1);
      const rowToFocus = currentPageRows[rowIndexToFocus];
      if (!rowToFocus) {
        return;
      }
      const colSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowToFocus.id, columnIndexToFocus);
      if (colSpanInfo && colSpanInfo.spannedByColSpan) {
        if (direction === "left" || direction === "below") {
          columnIndexToFocus = colSpanInfo.leftVisibleCellIndex;
        } else if (direction === "right") {
          columnIndexToFocus = colSpanInfo.rightVisibleCellIndex;
        }
      }
      columnIndexToFocus = clamp2(columnIndexToFocus, 0, visibleColumns.length - 1);
      const columnToFocus = visibleColumns[columnIndexToFocus];
      apiRef.current.setCellFocus(rowToFocus.id, columnToFocus.field);
    }, [apiRef, props.pagination, props.paginationMode]);
    const handleCellDoubleClick = React200.useCallback(({
      id,
      field
    }) => {
      apiRef.current.setCellFocus(id, field);
    }, [apiRef]);
    const handleCellKeyDown = React200.useCallback((params, event) => {
      if (event.key === "Enter" || event.key === "Tab" || event.key === "Shift" || isNavigationKey(event.key)) {
        return;
      }
      apiRef.current.setCellFocus(params.id, params.field);
    }, [apiRef]);
    const handleColumnHeaderFocus = React200.useCallback(({
      field
    }, event) => {
      if (event.target !== event.currentTarget) {
        return;
      }
      apiRef.current.setColumnHeaderFocus(field, event);
    }, [apiRef]);
    const handleColumnGroupHeaderFocus = React200.useCallback(({
      fields,
      depth
    }, event) => {
      if (event.target !== event.currentTarget) {
        return;
      }
      const focusedColumnGroup = unstable_gridFocusColumnGroupHeaderSelector(apiRef);
      if (focusedColumnGroup !== null && focusedColumnGroup.depth === depth && fields.includes(focusedColumnGroup.field)) {
        return;
      }
      apiRef.current.setColumnGroupHeaderFocus(fields[0], depth, event);
    }, [apiRef]);
    const handleBlur = React200.useCallback((_4, event) => {
      var _event$relatedTarget;
      if ((_event$relatedTarget = event.relatedTarget) != null && _event$relatedTarget.className.includes(gridClasses.columnHeader)) {
        return;
      }
      logger.debug(`Clearing focus`);
      apiRef.current.setState((state) => _extends({}, state, {
        focus: {
          cell: null,
          columnHeader: null,
          columnHeaderFilter: null,
          columnGroupHeader: null
        }
      }));
    }, [logger, apiRef]);
    const handleCellMouseDown = React200.useCallback((params) => {
      lastClickedCell.current = params;
    }, []);
    const handleDocumentClick = React200.useCallback((event) => {
      const cellParams = lastClickedCell.current;
      lastClickedCell.current = null;
      const focusedCell = gridFocusCellSelector(apiRef);
      const canUpdateFocus = apiRef.current.unstable_applyPipeProcessors("canUpdateFocus", true, {
        event,
        cell: cellParams
      });
      if (!canUpdateFocus) {
        return;
      }
      if (!focusedCell) {
        if (cellParams) {
          apiRef.current.setCellFocus(cellParams.id, cellParams.field);
        }
        return;
      }
      if ((cellParams == null ? void 0 : cellParams.id) === focusedCell.id && (cellParams == null ? void 0 : cellParams.field) === focusedCell.field) {
        return;
      }
      const cellElement = apiRef.current.getCellElement(focusedCell.id, focusedCell.field);
      if (cellElement != null && cellElement.contains(event.target)) {
        return;
      }
      if (cellParams) {
        apiRef.current.setCellFocus(cellParams.id, cellParams.field);
      } else {
        apiRef.current.setState((state) => _extends({}, state, {
          focus: {
            cell: null,
            columnHeader: null,
            columnHeaderFilter: null,
            columnGroupHeader: null
          }
        }));
        apiRef.current.forceUpdate();
        publishCellFocusOut(focusedCell, event);
      }
    }, [apiRef, publishCellFocusOut]);
    const handleCellModeChange = React200.useCallback((params) => {
      if (params.cellMode === "view") {
        return;
      }
      const cell = gridFocusCellSelector(apiRef);
      if ((cell == null ? void 0 : cell.id) !== params.id || (cell == null ? void 0 : cell.field) !== params.field) {
        apiRef.current.setCellFocus(params.id, params.field);
      }
    }, [apiRef]);
    const handleRowSet = React200.useCallback(() => {
      const cell = gridFocusCellSelector(apiRef);
      if (cell && !apiRef.current.getRow(cell.id)) {
        apiRef.current.setState((state) => _extends({}, state, {
          focus: {
            cell: null,
            columnHeader: null,
            columnHeaderFilter: null,
            columnGroupHeader: null
          }
        }));
      }
    }, [apiRef]);
    const handlePaginationModelChange = useEventCallback_default(() => {
      const currentFocusedCell = gridFocusCellSelector(apiRef);
      if (!currentFocusedCell) {
        return;
      }
      const currentPage = getVisibleRows(apiRef, {
        pagination: props.pagination,
        paginationMode: props.paginationMode
      });
      const rowIsInCurrentPage = currentPage.rows.find((row) => row.id === currentFocusedCell.id);
      if (rowIsInCurrentPage) {
        return;
      }
      const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);
      apiRef.current.setState((state) => {
        return _extends({}, state, {
          tabIndex: {
            cell: {
              id: currentPage.rows[0].id,
              field: visibleColumns[0].field
            },
            columnGroupHeader: null,
            columnHeader: null,
            columnHeaderFilter: null
          }
        });
      });
    });
    const focusApi = {
      setCellFocus,
      setColumnHeaderFocus,
      setColumnHeaderFilterFocus
    };
    const focusPrivateApi = {
      moveFocusToRelativeCell,
      setColumnGroupHeaderFocus,
      getColumnGroupHeaderFocus
    };
    useGridApiMethod(apiRef, focusApi, "public");
    useGridApiMethod(apiRef, focusPrivateApi, "private");
    React200.useEffect(() => {
      const doc = ownerDocument(apiRef.current.rootElementRef.current);
      doc.addEventListener("mouseup", handleDocumentClick);
      return () => {
        doc.removeEventListener("mouseup", handleDocumentClick);
      };
    }, [apiRef, handleDocumentClick]);
    useGridApiEventHandler(apiRef, "columnHeaderBlur", handleBlur);
    useGridApiEventHandler(apiRef, "cellDoubleClick", handleCellDoubleClick);
    useGridApiEventHandler(apiRef, "cellMouseDown", handleCellMouseDown);
    useGridApiEventHandler(apiRef, "cellKeyDown", handleCellKeyDown);
    useGridApiEventHandler(apiRef, "cellModeChange", handleCellModeChange);
    useGridApiEventHandler(apiRef, "columnHeaderFocus", handleColumnHeaderFocus);
    useGridApiEventHandler(apiRef, "columnGroupHeaderFocus", handleColumnGroupHeaderFocus);
    useGridApiEventHandler(apiRef, "rowsSet", handleRowSet);
    useGridApiEventHandler(apiRef, "paginationModelChange", handlePaginationModelChange);
  };

  // node_modules/@mui/x-data-grid/hooks/features/keyboardNavigation/useGridKeyboardNavigation.js
  var React201 = __toESM(require_react());
  function enrichPageRowsWithPinnedRows(apiRef, rows) {
    const pinnedRows = gridPinnedRowsSelector(apiRef) || {};
    return [...pinnedRows.top || [], ...rows, ...pinnedRows.bottom || []];
  }
  var getLeftColumnIndex = ({
    currentColIndex,
    firstColIndex,
    lastColIndex,
    direction
  }) => {
    if (direction === "rtl") {
      if (currentColIndex < lastColIndex) {
        return currentColIndex + 1;
      }
    } else if (direction === "ltr") {
      if (currentColIndex > firstColIndex) {
        return currentColIndex - 1;
      }
    }
    return null;
  };
  var getRightColumnIndex = ({
    currentColIndex,
    firstColIndex,
    lastColIndex,
    direction
  }) => {
    if (direction === "rtl") {
      if (currentColIndex > firstColIndex) {
        return currentColIndex - 1;
      }
    } else if (direction === "ltr") {
      if (currentColIndex < lastColIndex) {
        return currentColIndex + 1;
      }
    }
    return null;
  };
  var useGridKeyboardNavigation = (apiRef, props) => {
    const logger = useGridLogger(apiRef, "useGridKeyboardNavigation");
    const initialCurrentPageRows = useGridVisibleRows(apiRef, props).rows;
    const theme = useTheme5();
    const currentPageRows = React201.useMemo(() => enrichPageRowsWithPinnedRows(apiRef, initialCurrentPageRows), [apiRef, initialCurrentPageRows]);
    const headerFilteringEnabled = (
      // @ts-expect-error // TODO move relevant code to the `DataGridPro`
      props.signature !== "DataGrid" && props.unstable_headerFilters
    );
    const goToCell = React201.useCallback((colIndex, rowId, closestColumnToUse = "left") => {
      const visibleSortedRows = gridExpandedSortedRowEntriesSelector(apiRef);
      const nextCellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, colIndex);
      if (nextCellColSpanInfo && nextCellColSpanInfo.spannedByColSpan) {
        if (closestColumnToUse === "left") {
          colIndex = nextCellColSpanInfo.leftVisibleCellIndex;
        } else if (closestColumnToUse === "right") {
          colIndex = nextCellColSpanInfo.rightVisibleCellIndex;
        }
      }
      const rowIndexRelativeToAllRows = visibleSortedRows.findIndex((row) => row.id === rowId);
      logger.debug(`Navigating to cell row ${rowIndexRelativeToAllRows}, col ${colIndex}`);
      apiRef.current.scrollToIndexes({
        colIndex,
        rowIndex: rowIndexRelativeToAllRows
      });
      const field = apiRef.current.getVisibleColumns()[colIndex].field;
      apiRef.current.setCellFocus(rowId, field);
    }, [apiRef, logger]);
    const goToHeader = React201.useCallback((colIndex, event) => {
      logger.debug(`Navigating to header col ${colIndex}`);
      apiRef.current.scrollToIndexes({
        colIndex
      });
      const field = apiRef.current.getVisibleColumns()[colIndex].field;
      apiRef.current.setColumnHeaderFocus(field, event);
    }, [apiRef, logger]);
    const goToHeaderFilter = React201.useCallback((colIndex, event) => {
      logger.debug(`Navigating to header filter col ${colIndex}`);
      apiRef.current.scrollToIndexes({
        colIndex
      });
      const field = apiRef.current.getVisibleColumns()[colIndex].field;
      apiRef.current.setColumnHeaderFilterFocus(field, event);
    }, [apiRef, logger]);
    const goToGroupHeader = React201.useCallback((colIndex, depth, event) => {
      logger.debug(`Navigating to header col ${colIndex}`);
      apiRef.current.scrollToIndexes({
        colIndex
      });
      const {
        field
      } = apiRef.current.getVisibleColumns()[colIndex];
      apiRef.current.setColumnGroupHeaderFocus(field, depth, event);
    }, [apiRef, logger]);
    const getRowIdFromIndex = React201.useCallback((rowIndex) => {
      var _currentPageRows$rowI;
      return (_currentPageRows$rowI = currentPageRows[rowIndex]) == null ? void 0 : _currentPageRows$rowI.id;
    }, [currentPageRows]);
    const handleColumnHeaderKeyDown = React201.useCallback((params, event) => {
      const headerTitleNode = event.currentTarget.querySelector(`.${gridClasses.columnHeaderTitleContainerContent}`);
      const isFromInsideContent = !!headerTitleNode && headerTitleNode.contains(event.target);
      if (isFromInsideContent && params.field !== GRID_CHECKBOX_SELECTION_COL_DEF.field) {
        return;
      }
      const dimensions = apiRef.current.getRootDimensions();
      if (!dimensions) {
        return;
      }
      const viewportPageSize = apiRef.current.getViewportPageSize();
      const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;
      const firstRowIndexInPage = currentPageRows.length > 0 ? 0 : null;
      const lastRowIndexInPage = currentPageRows.length - 1;
      const firstColIndex = 0;
      const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;
      const columnGroupMaxDepth = gridColumnGroupsHeaderMaxDepthSelector(apiRef);
      let shouldPreventDefault = true;
      switch (event.key) {
        case "ArrowDown": {
          if (firstRowIndexInPage !== null) {
            if (headerFilteringEnabled) {
              goToHeaderFilter(colIndexBefore, event);
            } else {
              goToCell(colIndexBefore, getRowIdFromIndex(firstRowIndexInPage));
            }
          }
          break;
        }
        case "ArrowRight": {
          const rightColIndex = getRightColumnIndex({
            currentColIndex: colIndexBefore,
            firstColIndex,
            lastColIndex,
            direction: theme.direction
          });
          if (rightColIndex !== null) {
            goToHeader(rightColIndex, event);
          }
          break;
        }
        case "ArrowLeft": {
          const leftColIndex = getLeftColumnIndex({
            currentColIndex: colIndexBefore,
            firstColIndex,
            lastColIndex,
            direction: theme.direction
          });
          if (leftColIndex !== null) {
            goToHeader(leftColIndex, event);
          }
          break;
        }
        case "ArrowUp": {
          if (columnGroupMaxDepth > 0) {
            goToGroupHeader(colIndexBefore, columnGroupMaxDepth - 1, event);
          }
          break;
        }
        case "PageDown": {
          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {
            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));
          }
          break;
        }
        case "Home": {
          goToHeader(firstColIndex, event);
          break;
        }
        case "End": {
          goToHeader(lastColIndex, event);
          break;
        }
        case "Enter": {
          if (event.ctrlKey || event.metaKey) {
            apiRef.current.toggleColumnMenu(params.field);
          }
          break;
        }
        case " ": {
          break;
        }
        default: {
          shouldPreventDefault = false;
        }
      }
      if (shouldPreventDefault) {
        event.preventDefault();
      }
    }, [apiRef, currentPageRows.length, headerFilteringEnabled, goToHeaderFilter, goToCell, getRowIdFromIndex, theme.direction, goToHeader, goToGroupHeader]);
    const handleHeaderFilterKeyDown = React201.useCallback((params, event) => {
      const dimensions = apiRef.current.getRootDimensions();
      if (!dimensions) {
        return;
      }
      const isEditing = unstable_gridHeaderFilteringEditFieldSelector(apiRef) === params.field;
      const isHeaderMenuOpen = unstable_gridHeaderFilteringMenuSelector(apiRef) === params.field;
      if (isEditing || isHeaderMenuOpen || !isNavigationKey(event.key)) {
        return;
      }
      const viewportPageSize = apiRef.current.getViewportPageSize();
      const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;
      const firstRowIndexInPage = 0;
      const lastRowIndexInPage = currentPageRows.length - 1;
      const firstColIndex = 0;
      const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;
      let shouldPreventDefault = true;
      switch (event.key) {
        case "ArrowDown": {
          const rowId = getRowIdFromIndex(firstRowIndexInPage);
          if (firstRowIndexInPage !== null && rowId != null) {
            goToCell(colIndexBefore, rowId);
          }
          break;
        }
        case "ArrowRight": {
          const rightColIndex = getRightColumnIndex({
            currentColIndex: colIndexBefore,
            firstColIndex,
            lastColIndex,
            direction: theme.direction
          });
          if (rightColIndex !== null) {
            goToHeaderFilter(rightColIndex, event);
          }
          break;
        }
        case "ArrowLeft": {
          const leftColIndex = getLeftColumnIndex({
            currentColIndex: colIndexBefore,
            firstColIndex,
            lastColIndex,
            direction: theme.direction
          });
          if (leftColIndex !== null) {
            goToHeaderFilter(leftColIndex, event);
          } else {
            apiRef.current.setColumnHeaderFilterFocus(params.field, event);
          }
          break;
        }
        case "ArrowUp": {
          goToHeader(colIndexBefore, event);
          break;
        }
        case "PageDown": {
          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {
            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));
          }
          break;
        }
        case "Home": {
          goToHeaderFilter(firstColIndex, event);
          break;
        }
        case "End": {
          goToHeaderFilter(lastColIndex, event);
          break;
        }
        case " ": {
          break;
        }
        default: {
          shouldPreventDefault = false;
        }
      }
      if (shouldPreventDefault) {
        event.preventDefault();
      }
    }, [apiRef, currentPageRows.length, goToHeaderFilter, theme.direction, goToHeader, goToCell, getRowIdFromIndex]);
    const handleColumnGroupHeaderKeyDown = React201.useCallback((params, event) => {
      const dimensions = apiRef.current.getRootDimensions();
      if (!dimensions) {
        return;
      }
      const focusedColumnGroup = unstable_gridFocusColumnGroupHeaderSelector(apiRef);
      if (focusedColumnGroup === null) {
        return;
      }
      const {
        field: currentField,
        depth: currentDepth
      } = focusedColumnGroup;
      const {
        fields,
        depth,
        maxDepth
      } = params;
      const viewportPageSize = apiRef.current.getViewportPageSize();
      const currentColIndex = apiRef.current.getColumnIndex(currentField);
      const colIndexBefore = currentField ? apiRef.current.getColumnIndex(currentField) : 0;
      const firstRowIndexInPage = 0;
      const lastRowIndexInPage = currentPageRows.length - 1;
      const firstColIndex = 0;
      const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;
      let shouldPreventDefault = true;
      switch (event.key) {
        case "ArrowDown": {
          if (depth === maxDepth - 1) {
            goToHeader(currentColIndex, event);
          } else {
            goToGroupHeader(currentColIndex, currentDepth + 1, event);
          }
          break;
        }
        case "ArrowUp": {
          if (depth > 0) {
            goToGroupHeader(currentColIndex, currentDepth - 1, event);
          }
          break;
        }
        case "ArrowRight": {
          const remainingRightColumns = fields.length - fields.indexOf(currentField) - 1;
          if (currentColIndex + remainingRightColumns + 1 <= lastColIndex) {
            goToGroupHeader(currentColIndex + remainingRightColumns + 1, currentDepth, event);
          }
          break;
        }
        case "ArrowLeft": {
          const remainingLeftColumns = fields.indexOf(currentField);
          if (currentColIndex - remainingLeftColumns - 1 >= firstColIndex) {
            goToGroupHeader(currentColIndex - remainingLeftColumns - 1, currentDepth, event);
          }
          break;
        }
        case "PageDown": {
          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {
            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));
          }
          break;
        }
        case "Home": {
          goToGroupHeader(firstColIndex, currentDepth, event);
          break;
        }
        case "End": {
          goToGroupHeader(lastColIndex, currentDepth, event);
          break;
        }
        case " ": {
          break;
        }
        default: {
          shouldPreventDefault = false;
        }
      }
      if (shouldPreventDefault) {
        event.preventDefault();
      }
    }, [apiRef, currentPageRows.length, goToHeader, goToGroupHeader, goToCell, getRowIdFromIndex]);
    const handleCellKeyDown = React201.useCallback((params, event) => {
      if (isEventTargetInPortal(event)) {
        return;
      }
      const cellParams = apiRef.current.getCellParams(params.id, params.field);
      if (cellParams.cellMode === GridCellModes.Edit || !isNavigationKey(event.key)) {
        return;
      }
      const canUpdateFocus = apiRef.current.unstable_applyPipeProcessors("canUpdateFocus", true, {
        event,
        cell: cellParams
      });
      if (!canUpdateFocus) {
        return;
      }
      const dimensions = apiRef.current.getRootDimensions();
      if (currentPageRows.length === 0 || !dimensions) {
        return;
      }
      const direction = theme.direction;
      const viewportPageSize = apiRef.current.getViewportPageSize();
      const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;
      const rowIndexBefore = currentPageRows.findIndex((row) => row.id === params.id);
      const firstRowIndexInPage = 0;
      const lastRowIndexInPage = currentPageRows.length - 1;
      const firstColIndex = 0;
      const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;
      let shouldPreventDefault = true;
      switch (event.key) {
        case "ArrowDown": {
          if (rowIndexBefore < lastRowIndexInPage) {
            goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore + 1));
          }
          break;
        }
        case "ArrowUp": {
          if (rowIndexBefore > firstRowIndexInPage) {
            goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore - 1));
          } else if (headerFilteringEnabled) {
            goToHeaderFilter(colIndexBefore, event);
          } else {
            goToHeader(colIndexBefore, event);
          }
          break;
        }
        case "ArrowRight": {
          const rightColIndex = getRightColumnIndex({
            currentColIndex: colIndexBefore,
            firstColIndex,
            lastColIndex,
            direction
          });
          if (rightColIndex !== null) {
            goToCell(rightColIndex, getRowIdFromIndex(rowIndexBefore), direction === "rtl" ? "left" : "right");
          }
          break;
        }
        case "ArrowLeft": {
          const leftColIndex = getLeftColumnIndex({
            currentColIndex: colIndexBefore,
            firstColIndex,
            lastColIndex,
            direction
          });
          if (leftColIndex !== null) {
            goToCell(leftColIndex, getRowIdFromIndex(rowIndexBefore), direction === "rtl" ? "right" : "left");
          }
          break;
        }
        case "Tab": {
          if (event.shiftKey && colIndexBefore > firstColIndex) {
            goToCell(colIndexBefore - 1, getRowIdFromIndex(rowIndexBefore), "left");
          } else if (!event.shiftKey && colIndexBefore < lastColIndex) {
            goToCell(colIndexBefore + 1, getRowIdFromIndex(rowIndexBefore), "right");
          }
          break;
        }
        case " ": {
          const field = params.field;
          if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {
            break;
          }
          const colDef = params.colDef;
          if (colDef && colDef.type === "treeDataGroup") {
            break;
          }
          if (!event.shiftKey && rowIndexBefore < lastRowIndexInPage) {
            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));
          }
          break;
        }
        case "PageDown": {
          if (rowIndexBefore < lastRowIndexInPage) {
            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));
          }
          break;
        }
        case "PageUp": {
          const nextRowIndex = Math.max(rowIndexBefore - viewportPageSize, firstRowIndexInPage);
          if (nextRowIndex !== rowIndexBefore && nextRowIndex >= firstRowIndexInPage) {
            goToCell(colIndexBefore, getRowIdFromIndex(nextRowIndex));
          } else {
            goToHeader(colIndexBefore, event);
          }
          break;
        }
        case "Home": {
          if (event.ctrlKey || event.metaKey || event.shiftKey) {
            goToCell(firstColIndex, getRowIdFromIndex(firstRowIndexInPage));
          } else {
            goToCell(firstColIndex, getRowIdFromIndex(rowIndexBefore));
          }
          break;
        }
        case "End": {
          if (event.ctrlKey || event.metaKey || event.shiftKey) {
            goToCell(lastColIndex, getRowIdFromIndex(lastRowIndexInPage));
          } else {
            goToCell(lastColIndex, getRowIdFromIndex(rowIndexBefore));
          }
          break;
        }
        default: {
          shouldPreventDefault = false;
        }
      }
      if (shouldPreventDefault) {
        event.preventDefault();
      }
    }, [apiRef, currentPageRows, theme.direction, goToCell, getRowIdFromIndex, headerFilteringEnabled, goToHeaderFilter, goToHeader]);
    const checkIfCanStartEditing = React201.useCallback((initialValue, {
      event
    }) => {
      if (event.key === " ") {
        return false;
      }
      return initialValue;
    }, []);
    useGridRegisterPipeProcessor(apiRef, "canStartEditing", checkIfCanStartEditing);
    useGridApiEventHandler(apiRef, "columnHeaderKeyDown", handleColumnHeaderKeyDown);
    useGridApiEventHandler(apiRef, "headerFilterKeyDown", handleHeaderFilterKeyDown);
    useGridApiEventHandler(apiRef, "columnGroupHeaderKeyDown", handleColumnGroupHeaderKeyDown);
    useGridApiEventHandler(apiRef, "cellKeyDown", handleCellKeyDown);
  };

  // node_modules/@mui/x-data-grid/hooks/features/pagination/useGridPagination.js
  init_extends();

  // node_modules/@mui/x-data-grid/hooks/features/pagination/useGridRowCount.js
  init_extends();
  var React202 = __toESM(require_react());
  var useGridRowCount = (apiRef, props) => {
    var _props$initialState2;
    const logger = useGridLogger(apiRef, "useGridRowCount");
    const visibleTopLevelRowCount = useGridSelector(apiRef, gridFilteredTopLevelRowCountSelector);
    const rowCount = useGridSelector(apiRef, gridPaginationRowCountSelector);
    apiRef.current.registerControlState({
      stateId: "paginationRowCount",
      propModel: props.rowCount,
      propOnChange: props.onRowCountChange,
      stateSelector: gridPaginationRowCountSelector,
      changeEvent: "rowCountChange"
    });
    const setRowCount = React202.useCallback((newRowCount) => {
      if (rowCount === newRowCount) {
        return;
      }
      logger.debug("Setting 'rowCount' to", newRowCount);
      apiRef.current.setState((state) => _extends({}, state, {
        pagination: _extends({}, state.pagination, {
          rowCount: newRowCount
        })
      }));
    }, [apiRef, logger, rowCount]);
    const paginationRowCountApi = {
      setRowCount
    };
    useGridApiMethod(apiRef, paginationRowCountApi, "public");
    const stateExportPreProcessing = React202.useCallback((prevState, context) => {
      var _props$initialState;
      const exportedRowCount = gridPaginationRowCountSelector(apiRef);
      const shouldExportRowCount = (
        // Always export if the `exportOnlyDirtyModels` property is not activated
        !context.exportOnlyDirtyModels || // Always export if the `rowCount` is controlled
        props.rowCount != null || // Always export if the `rowCount` has been initialized
        ((_props$initialState = props.initialState) == null || (_props$initialState = _props$initialState.pagination) == null ? void 0 : _props$initialState.rowCount) != null
      );
      if (!shouldExportRowCount) {
        return prevState;
      }
      return _extends({}, prevState, {
        pagination: _extends({}, prevState.pagination, {
          rowCount: exportedRowCount
        })
      });
    }, [apiRef, props.rowCount, (_props$initialState2 = props.initialState) == null || (_props$initialState2 = _props$initialState2.pagination) == null ? void 0 : _props$initialState2.rowCount]);
    const stateRestorePreProcessing = React202.useCallback((params, context) => {
      var _context$stateToResto;
      const restoredRowCount = (_context$stateToResto = context.stateToRestore.pagination) != null && _context$stateToResto.rowCount ? context.stateToRestore.pagination.rowCount : gridPaginationRowCountSelector(apiRef);
      apiRef.current.setState((state) => _extends({}, state, {
        pagination: _extends({}, state.pagination, {
          rowCount: restoredRowCount
        })
      }));
      return params;
    }, [apiRef]);
    useGridRegisterPipeProcessor(apiRef, "exportState", stateExportPreProcessing);
    useGridRegisterPipeProcessor(apiRef, "restoreState", stateRestorePreProcessing);
    React202.useEffect(() => {
      if (true) {
        if (props.paginationMode === "server" && props.rowCount == null) {
          noRowCountInServerMode();
        }
      }
    }, [props.rowCount, props.paginationMode]);
    React202.useEffect(() => {
      if (props.paginationMode === "client") {
        apiRef.current.setRowCount(visibleTopLevelRowCount);
      } else if (props.rowCount != null) {
        apiRef.current.setRowCount(props.rowCount);
      }
    }, [apiRef, visibleTopLevelRowCount, props.paginationMode, props.rowCount]);
  };

  // node_modules/@mui/x-data-grid/hooks/features/pagination/useGridPagination.js
  var paginationStateInitializer = (state, props) => {
    var _props$paginationMode, _props$initialState, _ref, _props$rowCount, _props$initialState2;
    const paginationModel = _extends({}, getDefaultGridPaginationModel(props.autoPageSize), (_props$paginationMode = props.paginationModel) != null ? _props$paginationMode : (_props$initialState = props.initialState) == null || (_props$initialState = _props$initialState.pagination) == null ? void 0 : _props$initialState.paginationModel);
    throwIfPageSizeExceedsTheLimit(paginationModel.pageSize, props.signature);
    const rowCount = (_ref = (_props$rowCount = props.rowCount) != null ? _props$rowCount : (_props$initialState2 = props.initialState) == null || (_props$initialState2 = _props$initialState2.pagination) == null ? void 0 : _props$initialState2.rowCount) != null ? _ref : 0;
    return _extends({}, state, {
      pagination: {
        paginationModel,
        rowCount
      }
    });
  };
  var useGridPagination = (apiRef, props) => {
    useGridPaginationModel(apiRef, props);
    useGridRowCount(apiRef, props);
  };

  // node_modules/@mui/x-data-grid/hooks/features/preferencesPanel/useGridPreferencesPanel.js
  init_extends();
  var React203 = __toESM(require_react());
  var preferencePanelStateInitializer = (state, props) => {
    var _props$initialState$p, _props$initialState;
    return _extends({}, state, {
      preferencePanel: (_props$initialState$p = (_props$initialState = props.initialState) == null ? void 0 : _props$initialState.preferencePanel) != null ? _props$initialState$p : {
        open: false
      }
    });
  };
  var useGridPreferencesPanel = (apiRef, props) => {
    var _props$initialState3;
    const logger = useGridLogger(apiRef, "useGridPreferencesPanel");
    const hideTimeout = React203.useRef();
    const immediateTimeout = React203.useRef();
    const hidePreferences = React203.useCallback(() => {
      logger.debug("Hiding Preferences Panel");
      const preferencePanelState = gridPreferencePanelStateSelector(apiRef.current.state);
      if (preferencePanelState.openedPanelValue) {
        apiRef.current.publishEvent("preferencePanelClose", {
          openedPanelValue: preferencePanelState.openedPanelValue
        });
      }
      apiRef.current.setState((state) => _extends({}, state, {
        preferencePanel: {
          open: false
        }
      }));
      apiRef.current.forceUpdate();
    }, [apiRef, logger]);
    const doNotHidePanel = React203.useCallback(() => {
      immediateTimeout.current = setTimeout(() => clearTimeout(hideTimeout.current), 0);
    }, []);
    const hidePreferencesDelayed = React203.useCallback(() => {
      hideTimeout.current = setTimeout(hidePreferences, 100);
    }, [hidePreferences]);
    const showPreferences = React203.useCallback((newValue, panelId, labelId) => {
      logger.debug("Opening Preferences Panel");
      doNotHidePanel();
      apiRef.current.setState((state) => _extends({}, state, {
        preferencePanel: _extends({}, state.preferencePanel, {
          open: true,
          openedPanelValue: newValue,
          panelId,
          labelId
        })
      }));
      apiRef.current.publishEvent("preferencePanelOpen", {
        openedPanelValue: newValue
      });
      apiRef.current.forceUpdate();
    }, [logger, doNotHidePanel, apiRef]);
    useGridApiMethod(apiRef, {
      showPreferences,
      hidePreferences: hidePreferencesDelayed
    }, "public");
    const stateExportPreProcessing = React203.useCallback((prevState, context) => {
      var _props$initialState2;
      const preferencePanelToExport = gridPreferencePanelStateSelector(apiRef.current.state);
      const shouldExportPreferencePanel = (
        // Always export if the `exportOnlyDirtyModels` property is not activated
        !context.exportOnlyDirtyModels || // Always export if the panel was initialized
        ((_props$initialState2 = props.initialState) == null ? void 0 : _props$initialState2.preferencePanel) != null || // Always export if the panel is opened
        preferencePanelToExport.open
      );
      if (!shouldExportPreferencePanel) {
        return prevState;
      }
      return _extends({}, prevState, {
        preferencePanel: preferencePanelToExport
      });
    }, [apiRef, (_props$initialState3 = props.initialState) == null ? void 0 : _props$initialState3.preferencePanel]);
    const stateRestorePreProcessing = React203.useCallback((params, context) => {
      const preferencePanel = context.stateToRestore.preferencePanel;
      if (preferencePanel != null) {
        apiRef.current.setState((state) => _extends({}, state, {
          preferencePanel
        }));
      }
      return params;
    }, [apiRef]);
    useGridRegisterPipeProcessor(apiRef, "exportState", stateExportPreProcessing);
    useGridRegisterPipeProcessor(apiRef, "restoreState", stateRestorePreProcessing);
    React203.useEffect(() => {
      return () => {
        clearTimeout(hideTimeout.current);
        clearTimeout(immediateTimeout.current);
      };
    }, []);
  };

  // node_modules/@mui/x-data-grid/hooks/features/editing/useGridEditing.js
  init_extends();
  var React206 = __toESM(require_react());

  // node_modules/@mui/x-data-grid/hooks/features/editing/useGridCellEditing.js
  init_extends();
  var React204 = __toESM(require_react());
  var _excluded114 = ["id", "field"];
  var _excluded217 = ["id", "field"];
  var missingOnProcessRowUpdateErrorWarning = buildWarning(["MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.", "To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.", "For more detail, see http://mui.com/components/data-grid/editing/#server-side-persistence."], "error");
  var useGridCellEditing = (apiRef, props) => {
    const [cellModesModel, setCellModesModel] = React204.useState({});
    const cellModesModelRef = React204.useRef(cellModesModel);
    const prevCellModesModel = React204.useRef({});
    const {
      processRowUpdate,
      onProcessRowUpdateError,
      cellModesModel: cellModesModelProp,
      onCellModesModelChange
    } = props;
    const runIfEditModeIsCell = (callback) => (...args) => {
      if (props.editMode === GridEditModes.Cell) {
        callback(...args);
      }
    };
    const throwIfNotEditable = React204.useCallback((id, field) => {
      const params = apiRef.current.getCellParams(id, field);
      if (!apiRef.current.isCellEditable(params)) {
        throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`);
      }
    }, [apiRef]);
    const throwIfNotInMode = React204.useCallback((id, field, mode) => {
      if (apiRef.current.getCellMode(id, field) !== mode) {
        throw new Error(`MUI: The cell with id=${id} and field=${field} is not in ${mode} mode.`);
      }
    }, [apiRef]);
    const handleCellDoubleClick = React204.useCallback((params, event) => {
      if (!params.isEditable) {
        return;
      }
      if (params.cellMode === GridCellModes.Edit) {
        return;
      }
      const newParams = _extends({}, params, {
        reason: GridCellEditStartReasons.cellDoubleClick
      });
      apiRef.current.publishEvent("cellEditStart", newParams, event);
    }, [apiRef]);
    const handleCellFocusOut = React204.useCallback((params, event) => {
      if (params.cellMode === GridCellModes.View) {
        return;
      }
      if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.View) {
        return;
      }
      const newParams = _extends({}, params, {
        reason: GridCellEditStopReasons.cellFocusOut
      });
      apiRef.current.publishEvent("cellEditStop", newParams, event);
    }, [apiRef]);
    const handleCellKeyDown = React204.useCallback((params, event) => {
      if (params.cellMode === GridCellModes.Edit) {
        if (event.which === 229) {
          return;
        }
        let reason;
        if (event.key === "Escape") {
          reason = GridCellEditStopReasons.escapeKeyDown;
        } else if (event.key === "Enter") {
          reason = GridCellEditStopReasons.enterKeyDown;
        } else if (event.key === "Tab") {
          reason = event.shiftKey ? GridCellEditStopReasons.shiftTabKeyDown : GridCellEditStopReasons.tabKeyDown;
          event.preventDefault();
        }
        if (reason) {
          const newParams = _extends({}, params, {
            reason
          });
          apiRef.current.publishEvent("cellEditStop", newParams, event);
        }
      } else if (params.isEditable) {
        let reason;
        const canStartEditing = apiRef.current.unstable_applyPipeProcessors("canStartEditing", true, {
          event,
          cellParams: params,
          editMode: "cell"
        });
        if (!canStartEditing) {
          return;
        }
        if (isPrintableKey(event)) {
          reason = GridCellEditStartReasons.printableKeyDown;
        } else if ((event.ctrlKey || event.metaKey) && event.key === "v") {
          reason = GridCellEditStartReasons.pasteKeyDown;
        } else if (event.key === "Enter") {
          reason = GridCellEditStartReasons.enterKeyDown;
        } else if (event.key === "Delete" || event.key === "Backspace") {
          reason = GridCellEditStartReasons.deleteKeyDown;
        }
        if (reason) {
          const newParams = _extends({}, params, {
            reason,
            key: event.key
          });
          apiRef.current.publishEvent("cellEditStart", newParams, event);
        }
      }
    }, [apiRef]);
    const handleCellEditStart = React204.useCallback((params) => {
      const {
        id,
        field,
        reason
      } = params;
      const startCellEditModeParams = {
        id,
        field
      };
      if (reason === GridCellEditStartReasons.printableKeyDown || reason === GridCellEditStartReasons.deleteKeyDown || reason === GridCellEditStartReasons.pasteKeyDown) {
        startCellEditModeParams.deleteValue = true;
      }
      apiRef.current.startCellEditMode(startCellEditModeParams);
    }, [apiRef]);
    const handleCellEditStop = React204.useCallback((params) => {
      const {
        id,
        field,
        reason
      } = params;
      apiRef.current.runPendingEditCellValueMutation(id, field);
      let cellToFocusAfter;
      if (reason === GridCellEditStopReasons.enterKeyDown) {
        cellToFocusAfter = "below";
      } else if (reason === GridCellEditStopReasons.tabKeyDown) {
        cellToFocusAfter = "right";
      } else if (reason === GridCellEditStopReasons.shiftTabKeyDown) {
        cellToFocusAfter = "left";
      }
      const ignoreModifications = reason === "escapeKeyDown";
      apiRef.current.stopCellEditMode({
        id,
        field,
        ignoreModifications,
        cellToFocusAfter
      });
    }, [apiRef]);
    useGridApiEventHandler(apiRef, "cellDoubleClick", runIfEditModeIsCell(handleCellDoubleClick));
    useGridApiEventHandler(apiRef, "cellFocusOut", runIfEditModeIsCell(handleCellFocusOut));
    useGridApiEventHandler(apiRef, "cellKeyDown", runIfEditModeIsCell(handleCellKeyDown));
    useGridApiEventHandler(apiRef, "cellEditStart", runIfEditModeIsCell(handleCellEditStart));
    useGridApiEventHandler(apiRef, "cellEditStop", runIfEditModeIsCell(handleCellEditStop));
    useGridApiOptionHandler(apiRef, "cellEditStart", props.onCellEditStart);
    useGridApiOptionHandler(apiRef, "cellEditStop", props.onCellEditStop);
    const getCellMode = React204.useCallback((id, field) => {
      const editingState = gridEditRowsStateSelector(apiRef.current.state);
      const isEditing = editingState[id] && editingState[id][field];
      return isEditing ? GridCellModes.Edit : GridCellModes.View;
    }, [apiRef]);
    const updateCellModesModel = useEventCallback_default((newModel) => {
      const isNewModelDifferentFromProp = newModel !== props.cellModesModel;
      if (onCellModesModelChange && isNewModelDifferentFromProp) {
        onCellModesModelChange(newModel, {});
      }
      if (props.cellModesModel && isNewModelDifferentFromProp) {
        return;
      }
      setCellModesModel(newModel);
      cellModesModelRef.current = newModel;
      apiRef.current.publishEvent("cellModesModelChange", newModel);
    });
    const updateFieldInCellModesModel = React204.useCallback((id, field, newProps) => {
      const newModel = _extends({}, cellModesModelRef.current);
      if (newProps !== null) {
        newModel[id] = _extends({}, newModel[id], {
          [field]: _extends({}, newProps)
        });
      } else {
        const _newModel$id = newModel[id], otherFields = _objectWithoutPropertiesLoose(_newModel$id, [field].map(toPropertyKey));
        newModel[id] = otherFields;
        if (Object.keys(newModel[id]).length === 0) {
          delete newModel[id];
        }
      }
      updateCellModesModel(newModel);
    }, [updateCellModesModel]);
    const updateOrDeleteFieldState = React204.useCallback((id, field, newProps) => {
      apiRef.current.setState((state) => {
        const newEditingState = _extends({}, state.editRows);
        if (newProps !== null) {
          newEditingState[id] = _extends({}, newEditingState[id], {
            [field]: _extends({}, newProps)
          });
        } else {
          delete newEditingState[id][field];
          if (Object.keys(newEditingState[id]).length === 0) {
            delete newEditingState[id];
          }
        }
        return _extends({}, state, {
          editRows: newEditingState
        });
      });
      apiRef.current.forceUpdate();
    }, [apiRef]);
    const startCellEditMode = React204.useCallback((params) => {
      const {
        id,
        field
      } = params, other = _objectWithoutPropertiesLoose(params, _excluded114);
      throwIfNotEditable(id, field);
      throwIfNotInMode(id, field, GridCellModes.View);
      updateFieldInCellModesModel(id, field, _extends({
        mode: GridCellModes.Edit
      }, other));
    }, [throwIfNotEditable, throwIfNotInMode, updateFieldInCellModesModel]);
    const updateStateToStartCellEditMode = useEventCallback_default((params) => {
      const {
        id,
        field,
        deleteValue,
        initialValue
      } = params;
      let newValue = apiRef.current.getCellValue(id, field);
      if (deleteValue || initialValue) {
        newValue = deleteValue ? "" : initialValue;
      }
      const newProps = {
        value: newValue,
        error: false,
        isProcessingProps: false
      };
      updateOrDeleteFieldState(id, field, newProps);
      apiRef.current.setCellFocus(id, field);
    });
    const stopCellEditMode = React204.useCallback((params) => {
      const {
        id,
        field
      } = params, other = _objectWithoutPropertiesLoose(params, _excluded217);
      throwIfNotInMode(id, field, GridCellModes.Edit);
      updateFieldInCellModesModel(id, field, _extends({
        mode: GridCellModes.View
      }, other));
    }, [throwIfNotInMode, updateFieldInCellModesModel]);
    const updateStateToStopCellEditMode = useEventCallback_default(async (params) => {
      const {
        id,
        field,
        ignoreModifications,
        cellToFocusAfter = "none"
      } = params;
      throwIfNotInMode(id, field, GridCellModes.Edit);
      apiRef.current.runPendingEditCellValueMutation(id, field);
      const finishCellEditMode = () => {
        updateOrDeleteFieldState(id, field, null);
        updateFieldInCellModesModel(id, field, null);
        if (cellToFocusAfter !== "none") {
          apiRef.current.moveFocusToRelativeCell(id, field, cellToFocusAfter);
        }
      };
      if (ignoreModifications) {
        finishCellEditMode();
        return;
      }
      const editingState = gridEditRowsStateSelector(apiRef.current.state);
      const {
        error,
        isProcessingProps
      } = editingState[id][field];
      if (error || isProcessingProps) {
        prevCellModesModel.current[id][field].mode = GridCellModes.Edit;
        updateFieldInCellModesModel(id, field, {
          mode: GridCellModes.Edit
        });
        return;
      }
      const rowUpdate = apiRef.current.getRowWithUpdatedValuesFromCellEditing(id, field);
      if (processRowUpdate) {
        const handleError = (errorThrown) => {
          prevCellModesModel.current[id][field].mode = GridCellModes.Edit;
          updateFieldInCellModesModel(id, field, {
            mode: GridCellModes.Edit
          });
          if (onProcessRowUpdateError) {
            onProcessRowUpdateError(errorThrown);
          } else {
            missingOnProcessRowUpdateErrorWarning();
          }
        };
        try {
          const row = apiRef.current.getRow(id);
          Promise.resolve(processRowUpdate(rowUpdate, row)).then((finalRowUpdate) => {
            apiRef.current.updateRows([finalRowUpdate]);
            finishCellEditMode();
          }).catch(handleError);
        } catch (errorThrown) {
          handleError(errorThrown);
        }
      } else {
        apiRef.current.updateRows([rowUpdate]);
        finishCellEditMode();
      }
    });
    const setCellEditingEditCellValue = React204.useCallback(async (params) => {
      var _editingState$id;
      const {
        id,
        field,
        value,
        debounceMs,
        unstable_skipValueParser: skipValueParser
      } = params;
      throwIfNotEditable(id, field);
      throwIfNotInMode(id, field, GridCellModes.Edit);
      const column2 = apiRef.current.getColumn(field);
      const row = apiRef.current.getRow(id);
      let parsedValue = value;
      if (column2.valueParser && !skipValueParser) {
        parsedValue = column2.valueParser(value, apiRef.current.getCellParams(id, field));
      }
      let editingState = gridEditRowsStateSelector(apiRef.current.state);
      let newProps = _extends({}, editingState[id][field], {
        value: parsedValue,
        changeReason: debounceMs ? "debouncedSetEditCellValue" : "setEditCellValue"
      });
      if (column2.preProcessEditCellProps) {
        const hasChanged = value !== editingState[id][field].value;
        newProps = _extends({}, newProps, {
          isProcessingProps: true
        });
        updateOrDeleteFieldState(id, field, newProps);
        newProps = await Promise.resolve(column2.preProcessEditCellProps({
          id,
          row,
          props: newProps,
          hasChanged
        }));
      }
      if (apiRef.current.getCellMode(id, field) === GridCellModes.View) {
        return false;
      }
      editingState = gridEditRowsStateSelector(apiRef.current.state);
      newProps = _extends({}, newProps, {
        isProcessingProps: false
      });
      newProps.value = column2.preProcessEditCellProps ? editingState[id][field].value : parsedValue;
      updateOrDeleteFieldState(id, field, newProps);
      editingState = gridEditRowsStateSelector(apiRef.current.state);
      return !((_editingState$id = editingState[id]) != null && (_editingState$id = _editingState$id[field]) != null && _editingState$id.error);
    }, [apiRef, throwIfNotEditable, throwIfNotInMode, updateOrDeleteFieldState]);
    const getRowWithUpdatedValuesFromCellEditing = React204.useCallback((id, field) => {
      const column2 = apiRef.current.getColumn(field);
      const editingState = gridEditRowsStateSelector(apiRef.current.state);
      const row = apiRef.current.getRow(id);
      if (!editingState[id] || !editingState[id][field]) {
        return apiRef.current.getRow(id);
      }
      const {
        value
      } = editingState[id][field];
      return column2.valueSetter ? column2.valueSetter({
        value,
        row
      }) : _extends({}, row, {
        [field]: value
      });
    }, [apiRef]);
    const editingApi = {
      getCellMode,
      startCellEditMode,
      stopCellEditMode
    };
    const editingPrivateApi = {
      setCellEditingEditCellValue,
      getRowWithUpdatedValuesFromCellEditing
    };
    useGridApiMethod(apiRef, editingApi, "public");
    useGridApiMethod(apiRef, editingPrivateApi, "private");
    React204.useEffect(() => {
      if (cellModesModelProp) {
        updateCellModesModel(cellModesModelProp);
      }
    }, [cellModesModelProp, updateCellModesModel]);
    useEnhancedEffect_default(() => {
      const idToIdLookup = gridRowsDataRowIdToIdLookupSelector(apiRef);
      const copyOfPrevCellModes = prevCellModesModel.current;
      prevCellModesModel.current = deepClone(cellModesModel);
      Object.entries(cellModesModel).forEach(([id, fields]) => {
        Object.entries(fields).forEach(([field, params]) => {
          var _copyOfPrevCellModes$, _idToIdLookup$id;
          const prevMode = ((_copyOfPrevCellModes$ = copyOfPrevCellModes[id]) == null || (_copyOfPrevCellModes$ = _copyOfPrevCellModes$[field]) == null ? void 0 : _copyOfPrevCellModes$.mode) || GridCellModes.View;
          const originalId = (_idToIdLookup$id = idToIdLookup[id]) != null ? _idToIdLookup$id : id;
          if (params.mode === GridCellModes.Edit && prevMode === GridCellModes.View) {
            updateStateToStartCellEditMode(_extends({
              id: originalId,
              field
            }, params));
          } else if (params.mode === GridCellModes.View && prevMode === GridCellModes.Edit) {
            updateStateToStopCellEditMode(_extends({
              id: originalId,
              field
            }, params));
          }
        });
      });
    }, [apiRef, cellModesModel, updateStateToStartCellEditMode, updateStateToStopCellEditMode]);
  };

  // node_modules/@mui/x-data-grid/hooks/features/editing/useGridRowEditing.js
  init_extends();
  var React205 = __toESM(require_react());
  var _excluded115 = ["id"];
  var _excluded218 = ["id"];
  var missingOnProcessRowUpdateErrorWarning2 = buildWarning(["MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.", "To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.", "For more detail, see http://mui.com/components/data-grid/editing/#server-side-persistence."], "error");
  var useGridRowEditing = (apiRef, props) => {
    const [rowModesModel, setRowModesModel] = React205.useState({});
    const rowModesModelRef = React205.useRef(rowModesModel);
    const prevRowModesModel = React205.useRef({});
    const focusTimeout = React205.useRef(null);
    const nextFocusedCell = React205.useRef(null);
    const {
      processRowUpdate,
      onProcessRowUpdateError,
      rowModesModel: rowModesModelProp,
      onRowModesModelChange
    } = props;
    const runIfEditModeIsRow = (callback) => (...args) => {
      if (props.editMode === GridEditModes.Row) {
        callback(...args);
      }
    };
    const throwIfNotEditable = React205.useCallback((id, field) => {
      const params = apiRef.current.getCellParams(id, field);
      if (!apiRef.current.isCellEditable(params)) {
        throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`);
      }
    }, [apiRef]);
    const throwIfNotInMode = React205.useCallback((id, mode) => {
      if (apiRef.current.getRowMode(id) !== mode) {
        throw new Error(`MUI: The row with id=${id} is not in ${mode} mode.`);
      }
    }, [apiRef]);
    const handleCellDoubleClick = React205.useCallback((params, event) => {
      if (!params.isEditable) {
        return;
      }
      if (apiRef.current.getRowMode(params.id) === GridRowModes.Edit) {
        return;
      }
      const rowParams = apiRef.current.getRowParams(params.id);
      const newParams = _extends({}, rowParams, {
        field: params.field,
        reason: GridRowEditStartReasons.cellDoubleClick
      });
      apiRef.current.publishEvent("rowEditStart", newParams, event);
    }, [apiRef]);
    const handleCellFocusIn = React205.useCallback((params) => {
      nextFocusedCell.current = params;
    }, []);
    const handleCellFocusOut = React205.useCallback((params, event) => {
      if (!params.isEditable) {
        return;
      }
      if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {
        return;
      }
      nextFocusedCell.current = null;
      focusTimeout.current = setTimeout(() => {
        var _nextFocusedCell$curr;
        focusTimeout.current = null;
        if (((_nextFocusedCell$curr = nextFocusedCell.current) == null ? void 0 : _nextFocusedCell$curr.id) !== params.id) {
          if (!apiRef.current.getRow(params.id)) {
            return;
          }
          if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {
            return;
          }
          const rowParams = apiRef.current.getRowParams(params.id);
          const newParams = _extends({}, rowParams, {
            field: params.field,
            reason: GridRowEditStopReasons.rowFocusOut
          });
          apiRef.current.publishEvent("rowEditStop", newParams, event);
        }
      });
    }, [apiRef]);
    React205.useEffect(() => {
      return () => {
        clearTimeout(focusTimeout.current);
      };
    }, []);
    const handleCellKeyDown = React205.useCallback((params, event) => {
      if (params.cellMode === GridRowModes.Edit) {
        if (event.which === 229) {
          return;
        }
        let reason;
        if (event.key === "Escape") {
          reason = GridRowEditStopReasons.escapeKeyDown;
        } else if (event.key === "Enter") {
          reason = GridRowEditStopReasons.enterKeyDown;
        } else if (event.key === "Tab") {
          const columnFields = gridVisibleColumnFieldsSelector(apiRef).filter((field) => {
            const column2 = apiRef.current.getColumn(field);
            if (column2.type === GRID_ACTIONS_COLUMN_TYPE) {
              return true;
            }
            return apiRef.current.isCellEditable(apiRef.current.getCellParams(params.id, field));
          });
          if (event.shiftKey) {
            if (params.field === columnFields[0]) {
              reason = GridRowEditStopReasons.shiftTabKeyDown;
            }
          } else if (params.field === columnFields[columnFields.length - 1]) {
            reason = GridRowEditStopReasons.tabKeyDown;
          }
          event.preventDefault();
          if (!reason) {
            const index = columnFields.findIndex((field) => field === params.field);
            const nextFieldToFocus = columnFields[event.shiftKey ? index - 1 : index + 1];
            apiRef.current.setCellFocus(params.id, nextFieldToFocus);
          }
        }
        if (reason) {
          const newParams = _extends({}, apiRef.current.getRowParams(params.id), {
            reason,
            field: params.field
          });
          apiRef.current.publishEvent("rowEditStop", newParams, event);
        }
      } else if (params.isEditable) {
        let reason;
        const canStartEditing = apiRef.current.unstable_applyPipeProcessors("canStartEditing", true, {
          event,
          cellParams: params,
          editMode: "row"
        });
        if (!canStartEditing) {
          return;
        }
        if (isPrintableKey(event)) {
          reason = GridRowEditStartReasons.printableKeyDown;
        } else if ((event.ctrlKey || event.metaKey) && event.key === "v") {
          reason = GridRowEditStartReasons.printableKeyDown;
        } else if (event.key === "Enter") {
          reason = GridRowEditStartReasons.enterKeyDown;
        } else if (event.key === "Delete" || event.key === "Backspace") {
          reason = GridRowEditStartReasons.deleteKeyDown;
        }
        if (reason) {
          const rowParams = apiRef.current.getRowParams(params.id);
          const newParams = _extends({}, rowParams, {
            field: params.field,
            reason
          });
          apiRef.current.publishEvent("rowEditStart", newParams, event);
        }
      }
    }, [apiRef]);
    const handleRowEditStart = React205.useCallback((params) => {
      const {
        id,
        field,
        reason
      } = params;
      const startRowEditModeParams = {
        id,
        fieldToFocus: field
      };
      if (reason === GridRowEditStartReasons.printableKeyDown || reason === GridRowEditStartReasons.deleteKeyDown) {
        startRowEditModeParams.deleteValue = !!field;
      }
      apiRef.current.startRowEditMode(startRowEditModeParams);
    }, [apiRef]);
    const handleRowEditStop = React205.useCallback((params) => {
      const {
        id,
        reason,
        field
      } = params;
      apiRef.current.runPendingEditCellValueMutation(id);
      let cellToFocusAfter;
      if (reason === GridRowEditStopReasons.enterKeyDown) {
        cellToFocusAfter = "below";
      } else if (reason === GridRowEditStopReasons.tabKeyDown) {
        cellToFocusAfter = "right";
      } else if (reason === GridRowEditStopReasons.shiftTabKeyDown) {
        cellToFocusAfter = "left";
      }
      const ignoreModifications = reason === "escapeKeyDown";
      apiRef.current.stopRowEditMode({
        id,
        ignoreModifications,
        field,
        cellToFocusAfter
      });
    }, [apiRef]);
    useGridApiEventHandler(apiRef, "cellDoubleClick", runIfEditModeIsRow(handleCellDoubleClick));
    useGridApiEventHandler(apiRef, "cellFocusIn", runIfEditModeIsRow(handleCellFocusIn));
    useGridApiEventHandler(apiRef, "cellFocusOut", runIfEditModeIsRow(handleCellFocusOut));
    useGridApiEventHandler(apiRef, "cellKeyDown", runIfEditModeIsRow(handleCellKeyDown));
    useGridApiEventHandler(apiRef, "rowEditStart", runIfEditModeIsRow(handleRowEditStart));
    useGridApiEventHandler(apiRef, "rowEditStop", runIfEditModeIsRow(handleRowEditStop));
    useGridApiOptionHandler(apiRef, "rowEditStart", props.onRowEditStart);
    useGridApiOptionHandler(apiRef, "rowEditStop", props.onRowEditStop);
    const getRowMode = React205.useCallback((id) => {
      if (props.editMode === GridEditModes.Cell) {
        return GridRowModes.View;
      }
      const editingState = gridEditRowsStateSelector(apiRef.current.state);
      const isEditing = editingState[id] && Object.keys(editingState[id]).length > 0;
      return isEditing ? GridRowModes.Edit : GridRowModes.View;
    }, [apiRef, props.editMode]);
    const updateRowModesModel = useEventCallback_default((newModel) => {
      const isNewModelDifferentFromProp = newModel !== props.rowModesModel;
      if (onRowModesModelChange && isNewModelDifferentFromProp) {
        onRowModesModelChange(newModel, {});
      }
      if (props.rowModesModel && isNewModelDifferentFromProp) {
        return;
      }
      setRowModesModel(newModel);
      rowModesModelRef.current = newModel;
      apiRef.current.publishEvent("rowModesModelChange", newModel);
    });
    const updateRowInRowModesModel = React205.useCallback((id, newProps) => {
      const newModel = _extends({}, rowModesModelRef.current);
      if (newProps !== null) {
        newModel[id] = _extends({}, newProps);
      } else {
        delete newModel[id];
      }
      updateRowModesModel(newModel);
    }, [updateRowModesModel]);
    const updateOrDeleteRowState = React205.useCallback((id, newProps) => {
      apiRef.current.setState((state) => {
        const newEditingState = _extends({}, state.editRows);
        if (newProps !== null) {
          newEditingState[id] = newProps;
        } else {
          delete newEditingState[id];
        }
        return _extends({}, state, {
          editRows: newEditingState
        });
      });
      apiRef.current.forceUpdate();
    }, [apiRef]);
    const updateOrDeleteFieldState = React205.useCallback((id, field, newProps) => {
      apiRef.current.setState((state) => {
        const newEditingState = _extends({}, state.editRows);
        if (newProps !== null) {
          newEditingState[id] = _extends({}, newEditingState[id], {
            [field]: _extends({}, newProps)
          });
        } else {
          delete newEditingState[id][field];
          if (Object.keys(newEditingState[id]).length === 0) {
            delete newEditingState[id];
          }
        }
        return _extends({}, state, {
          editRows: newEditingState
        });
      });
      apiRef.current.forceUpdate();
    }, [apiRef]);
    const startRowEditMode = React205.useCallback((params) => {
      const {
        id
      } = params, other = _objectWithoutPropertiesLoose(params, _excluded115);
      throwIfNotInMode(id, GridRowModes.View);
      updateRowInRowModesModel(id, _extends({
        mode: GridRowModes.Edit
      }, other));
    }, [throwIfNotInMode, updateRowInRowModesModel]);
    const updateStateToStartRowEditMode = useEventCallback_default((params) => {
      const {
        id,
        fieldToFocus,
        deleteValue,
        initialValue
      } = params;
      const columnFields = gridColumnFieldsSelector(apiRef);
      const newProps = columnFields.reduce((acc, field) => {
        const cellParams = apiRef.current.getCellParams(id, field);
        if (!cellParams.isEditable) {
          return acc;
        }
        let newValue = apiRef.current.getCellValue(id, field);
        if (fieldToFocus === field && (deleteValue || initialValue)) {
          newValue = deleteValue ? "" : initialValue;
        }
        acc[field] = {
          value: newValue,
          error: false,
          isProcessingProps: false
        };
        return acc;
      }, {});
      updateOrDeleteRowState(id, newProps);
      if (fieldToFocus) {
        apiRef.current.setCellFocus(id, fieldToFocus);
      }
    });
    const stopRowEditMode = React205.useCallback((params) => {
      const {
        id
      } = params, other = _objectWithoutPropertiesLoose(params, _excluded218);
      throwIfNotInMode(id, GridRowModes.Edit);
      updateRowInRowModesModel(id, _extends({
        mode: GridRowModes.View
      }, other));
    }, [throwIfNotInMode, updateRowInRowModesModel]);
    const updateStateToStopRowEditMode = useEventCallback_default((params) => {
      const {
        id,
        ignoreModifications,
        field: focusedField,
        cellToFocusAfter = "none"
      } = params;
      apiRef.current.runPendingEditCellValueMutation(id);
      const finishRowEditMode = () => {
        if (cellToFocusAfter !== "none" && focusedField) {
          apiRef.current.moveFocusToRelativeCell(id, focusedField, cellToFocusAfter);
        }
        updateOrDeleteRowState(id, null);
        updateRowInRowModesModel(id, null);
      };
      if (ignoreModifications) {
        finishRowEditMode();
        return;
      }
      const editingState = gridEditRowsStateSelector(apiRef.current.state);
      const row = apiRef.current.getRow(id);
      const isSomeFieldProcessingProps = Object.values(editingState[id]).some((fieldProps) => fieldProps.isProcessingProps);
      if (isSomeFieldProcessingProps) {
        prevRowModesModel.current[id].mode = GridRowModes.Edit;
        return;
      }
      const hasSomeFieldWithError = Object.values(editingState[id]).some((fieldProps) => fieldProps.error);
      if (hasSomeFieldWithError) {
        prevRowModesModel.current[id].mode = GridRowModes.Edit;
        updateRowInRowModesModel(id, {
          mode: GridRowModes.Edit
        });
        return;
      }
      const rowUpdate = apiRef.current.getRowWithUpdatedValuesFromRowEditing(id);
      if (processRowUpdate) {
        const handleError = (errorThrown) => {
          prevRowModesModel.current[id].mode = GridRowModes.Edit;
          updateRowInRowModesModel(id, {
            mode: GridRowModes.Edit
          });
          if (onProcessRowUpdateError) {
            onProcessRowUpdateError(errorThrown);
          } else {
            missingOnProcessRowUpdateErrorWarning2();
          }
        };
        try {
          Promise.resolve(processRowUpdate(rowUpdate, row)).then((finalRowUpdate) => {
            apiRef.current.updateRows([finalRowUpdate]);
            finishRowEditMode();
          }).catch(handleError);
        } catch (errorThrown) {
          handleError(errorThrown);
        }
      } else {
        apiRef.current.updateRows([rowUpdate]);
        finishRowEditMode();
      }
    });
    const setRowEditingEditCellValue = React205.useCallback((params) => {
      const {
        id,
        field,
        value,
        debounceMs,
        unstable_skipValueParser: skipValueParser
      } = params;
      throwIfNotEditable(id, field);
      const column2 = apiRef.current.getColumn(field);
      const row = apiRef.current.getRow(id);
      let parsedValue = value;
      if (column2.valueParser && !skipValueParser) {
        parsedValue = column2.valueParser(value, apiRef.current.getCellParams(id, field));
      }
      let editingState = gridEditRowsStateSelector(apiRef.current.state);
      let newProps = _extends({}, editingState[id][field], {
        value: parsedValue,
        changeReason: debounceMs ? "debouncedSetEditCellValue" : "setEditCellValue"
      });
      if (!column2.preProcessEditCellProps) {
        updateOrDeleteFieldState(id, field, newProps);
      }
      return new Promise((resolve) => {
        const promises = [];
        if (column2.preProcessEditCellProps) {
          const hasChanged = newProps.value !== editingState[id][field].value;
          newProps = _extends({}, newProps, {
            isProcessingProps: true
          });
          updateOrDeleteFieldState(id, field, newProps);
          const _editingState$id = editingState[id], otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id, [field].map(toPropertyKey));
          const promise = Promise.resolve(column2.preProcessEditCellProps({
            id,
            row,
            props: newProps,
            hasChanged,
            otherFieldsProps
          })).then((processedProps) => {
            if (apiRef.current.getRowMode(id) === GridRowModes.View) {
              resolve(false);
              return;
            }
            editingState = gridEditRowsStateSelector(apiRef.current.state);
            processedProps = _extends({}, processedProps, {
              isProcessingProps: false
            });
            processedProps.value = column2.preProcessEditCellProps ? editingState[id][field].value : parsedValue;
            updateOrDeleteFieldState(id, field, processedProps);
          });
          promises.push(promise);
        }
        Object.entries(editingState[id]).forEach(([thisField, fieldProps]) => {
          if (thisField === field) {
            return;
          }
          const fieldColumn = apiRef.current.getColumn(thisField);
          if (!fieldColumn.preProcessEditCellProps) {
            return;
          }
          fieldProps = _extends({}, fieldProps, {
            isProcessingProps: true
          });
          updateOrDeleteFieldState(id, thisField, fieldProps);
          editingState = gridEditRowsStateSelector(apiRef.current.state);
          const _editingState$id2 = editingState[id], otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id2, [thisField].map(toPropertyKey));
          const promise = Promise.resolve(fieldColumn.preProcessEditCellProps({
            id,
            row,
            props: fieldProps,
            hasChanged: false,
            otherFieldsProps
          })).then((processedProps) => {
            if (apiRef.current.getRowMode(id) === GridRowModes.View) {
              resolve(false);
              return;
            }
            processedProps = _extends({}, processedProps, {
              isProcessingProps: false
            });
            updateOrDeleteFieldState(id, thisField, processedProps);
          });
          promises.push(promise);
        });
        Promise.all(promises).then(() => {
          if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {
            editingState = gridEditRowsStateSelector(apiRef.current.state);
            resolve(!editingState[id][field].error);
          } else {
            resolve(false);
          }
        });
      });
    }, [apiRef, throwIfNotEditable, updateOrDeleteFieldState]);
    const getRowWithUpdatedValuesFromRowEditing = React205.useCallback((id) => {
      const editingState = gridEditRowsStateSelector(apiRef.current.state);
      const row = apiRef.current.getRow(id);
      if (!editingState[id]) {
        return apiRef.current.getRow(id);
      }
      let rowUpdate = _extends({}, row);
      Object.entries(editingState[id]).forEach(([field, fieldProps]) => {
        const column2 = apiRef.current.getColumn(field);
        if (column2.valueSetter) {
          rowUpdate = column2.valueSetter({
            value: fieldProps.value,
            row: rowUpdate
          });
        } else {
          rowUpdate[field] = fieldProps.value;
        }
      });
      return rowUpdate;
    }, [apiRef]);
    const editingApi = {
      getRowMode,
      startRowEditMode,
      stopRowEditMode
    };
    const editingPrivateApi = {
      setRowEditingEditCellValue,
      getRowWithUpdatedValuesFromRowEditing
    };
    useGridApiMethod(apiRef, editingApi, "public");
    useGridApiMethod(apiRef, editingPrivateApi, "private");
    React205.useEffect(() => {
      if (rowModesModelProp) {
        updateRowModesModel(rowModesModelProp);
      }
    }, [rowModesModelProp, updateRowModesModel]);
    useEnhancedEffect_default(() => {
      const idToIdLookup = gridRowsDataRowIdToIdLookupSelector(apiRef);
      const copyOfPrevRowModesModel = prevRowModesModel.current;
      prevRowModesModel.current = deepClone(rowModesModel);
      Object.entries(rowModesModel).forEach(([id, params]) => {
        var _copyOfPrevRowModesMo, _idToIdLookup$id;
        const prevMode = ((_copyOfPrevRowModesMo = copyOfPrevRowModesModel[id]) == null ? void 0 : _copyOfPrevRowModesMo.mode) || GridRowModes.View;
        const originalId = (_idToIdLookup$id = idToIdLookup[id]) != null ? _idToIdLookup$id : id;
        if (params.mode === GridRowModes.Edit && prevMode === GridRowModes.View) {
          updateStateToStartRowEditMode(_extends({
            id: originalId
          }, params));
        } else if (params.mode === GridRowModes.View && prevMode === GridRowModes.Edit) {
          updateStateToStopRowEditMode(_extends({
            id: originalId
          }, params));
        }
      });
    }, [apiRef, rowModesModel, updateStateToStartRowEditMode, updateStateToStopRowEditMode]);
  };

  // node_modules/@mui/x-data-grid/hooks/features/editing/useGridEditing.js
  var editingStateInitializer = (state) => _extends({}, state, {
    editRows: {}
  });
  var useGridEditing = (apiRef, props) => {
    useGridCellEditing(apiRef, props);
    useGridRowEditing(apiRef, props);
    const debounceMap = React206.useRef({});
    const {
      isCellEditable: isCellEditableProp
    } = props;
    const isCellEditable = React206.useCallback((params) => {
      if (isAutoGeneratedRow(params.rowNode)) {
        return false;
      }
      if (!params.colDef.editable) {
        return false;
      }
      if (!params.colDef.renderEditCell) {
        return false;
      }
      if (isCellEditableProp) {
        return isCellEditableProp(params);
      }
      return true;
    }, [isCellEditableProp]);
    const maybeDebounce = (id, field, debounceMs, callback) => {
      if (!debounceMs) {
        callback();
        return;
      }
      if (!debounceMap.current[id]) {
        debounceMap.current[id] = {};
      }
      if (debounceMap.current[id][field]) {
        const [timeout3] = debounceMap.current[id][field];
        clearTimeout(timeout3);
      }
      const runImmediately = () => {
        const [timeout3] = debounceMap.current[id][field];
        clearTimeout(timeout3);
        callback();
        delete debounceMap.current[id][field];
      };
      const timeout2 = setTimeout(() => {
        callback();
        delete debounceMap.current[id][field];
      }, debounceMs);
      debounceMap.current[id][field] = [timeout2, runImmediately];
    };
    React206.useEffect(() => {
      const debounces = debounceMap.current;
      return () => {
        Object.entries(debounces).forEach(([id, fields]) => {
          Object.keys(fields).forEach((field) => {
            const [timeout2] = debounces[id][field];
            clearTimeout(timeout2);
            delete debounces[id][field];
          });
        });
      };
    }, []);
    const runPendingEditCellValueMutation = React206.useCallback((id, field) => {
      if (!debounceMap.current[id]) {
        return;
      }
      if (!field) {
        Object.keys(debounceMap.current[id]).forEach((debouncedField) => {
          const [, runCallback] = debounceMap.current[id][debouncedField];
          runCallback();
        });
      } else if (debounceMap.current[id][field]) {
        const [, runCallback] = debounceMap.current[id][field];
        runCallback();
      }
    }, []);
    const setEditCellValue = React206.useCallback((params) => {
      const {
        id,
        field,
        debounceMs
      } = params;
      return new Promise((resolve) => {
        maybeDebounce(id, field, debounceMs, async () => {
          const setEditCellValueToCall = props.editMode === GridEditModes.Row ? apiRef.current.setRowEditingEditCellValue : apiRef.current.setCellEditingEditCellValue;
          if (apiRef.current.getCellMode(id, field) === GridCellModes.Edit) {
            const result = await setEditCellValueToCall(params);
            resolve(result);
          }
        });
      });
    }, [apiRef, props.editMode]);
    const getRowWithUpdatedValues = React206.useCallback((id, field) => {
      return props.editMode === GridEditModes.Cell ? apiRef.current.getRowWithUpdatedValuesFromCellEditing(id, field) : apiRef.current.getRowWithUpdatedValuesFromRowEditing(id);
    }, [apiRef, props.editMode]);
    const getEditCellMeta = React206.useCallback((id, field) => {
      var _editingState$id$fiel, _editingState$id;
      const editingState = gridEditRowsStateSelector(apiRef.current.state);
      return (_editingState$id$fiel = (_editingState$id = editingState[id]) == null ? void 0 : _editingState$id[field]) != null ? _editingState$id$fiel : null;
    }, [apiRef]);
    const editingSharedApi = {
      isCellEditable,
      setEditCellValue,
      getRowWithUpdatedValues,
      unstable_getEditCellMeta: getEditCellMeta
    };
    const editingSharedPrivateApi = {
      runPendingEditCellValueMutation
    };
    useGridApiMethod(apiRef, editingSharedApi, "public");
    useGridApiMethod(apiRef, editingSharedPrivateApi, "private");
  };

  // node_modules/@mui/x-data-grid/hooks/features/rows/useGridRows.js
  init_extends();
  var React207 = __toESM(require_react());
  var rowsStateInitializer = (state, props, apiRef) => {
    apiRef.current.caches.rows = createRowsInternalCache({
      rows: props.rows,
      getRowId: props.getRowId,
      loading: props.loading,
      rowCount: props.rowCount
    });
    return _extends({}, state, {
      rows: getRowsStateFromCache({
        apiRef,
        rowCountProp: props.rowCount,
        loadingProp: props.loading,
        previousTree: null,
        previousTreeDepths: null
      })
    });
  };
  var useGridRows = (apiRef, props) => {
    if (true) {
      try {
        Object.freeze(props.rows);
      } catch (error) {
      }
    }
    const logger = useGridLogger(apiRef, "useGridRows");
    const currentPage = useGridVisibleRows(apiRef, props);
    const lastUpdateMs = React207.useRef(Date.now());
    const timeout2 = useTimeout2();
    const getRow = React207.useCallback((id) => {
      const model = gridRowsLookupSelector(apiRef)[id];
      if (model) {
        return model;
      }
      const node2 = apiRef.current.getRowNode(id);
      if (node2 && isAutoGeneratedRow(node2)) {
        return {
          [GRID_ID_AUTOGENERATED]: id
        };
      }
      return null;
    }, [apiRef]);
    const getRowIdProp = props.getRowId;
    const getRowId = React207.useCallback((row) => {
      if (GRID_ID_AUTOGENERATED in row) {
        return row[GRID_ID_AUTOGENERATED];
      }
      if (getRowIdProp) {
        return getRowIdProp(row);
      }
      return row.id;
    }, [getRowIdProp]);
    const lookup = React207.useMemo(() => currentPage.rows.reduce((acc, {
      id
    }, index) => {
      acc[id] = index;
      return acc;
    }, {}), [currentPage.rows]);
    const throttledRowsChange = React207.useCallback(({
      cache,
      throttle
    }) => {
      const run = () => {
        lastUpdateMs.current = Date.now();
        apiRef.current.setState((state) => _extends({}, state, {
          rows: getRowsStateFromCache({
            apiRef,
            rowCountProp: props.rowCount,
            loadingProp: props.loading,
            previousTree: gridRowTreeSelector(apiRef),
            previousTreeDepths: gridRowTreeDepthsSelector(apiRef)
          })
        }));
        apiRef.current.publishEvent("rowsSet");
        apiRef.current.forceUpdate();
      };
      timeout2.clear();
      apiRef.current.caches.rows = cache;
      if (!throttle) {
        run();
        return;
      }
      const throttleRemainingTimeMs = props.throttleRowsMs - (Date.now() - lastUpdateMs.current);
      if (throttleRemainingTimeMs > 0) {
        timeout2.start(throttleRemainingTimeMs, run);
        return;
      }
      run();
    }, [props.throttleRowsMs, props.rowCount, props.loading, apiRef, timeout2]);
    const setRows = React207.useCallback((rows) => {
      logger.debug(`Updating all rows, new length ${rows.length}`);
      const cache = createRowsInternalCache({
        rows,
        getRowId: props.getRowId,
        loading: props.loading,
        rowCount: props.rowCount
      });
      const prevCache = apiRef.current.caches.rows;
      cache.rowsBeforePartialUpdates = prevCache.rowsBeforePartialUpdates;
      throttledRowsChange({
        cache,
        throttle: true
      });
    }, [logger, props.getRowId, props.loading, props.rowCount, throttledRowsChange, apiRef]);
    const updateRows = React207.useCallback((updates) => {
      if (props.signature === GridSignature.DataGrid && updates.length > 1) {
        throw new Error(["MUI: You can't update several rows at once in `apiRef.current.updateRows` on the DataGrid.", "You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature."].join("\n"));
      }
      const nonPinnedRowsUpdates = [];
      updates.forEach((update) => {
        const id = getRowIdFromRowModel(update, props.getRowId, "A row was provided without id when calling updateRows():");
        const rowNode = apiRef.current.getRowNode(id);
        if ((rowNode == null ? void 0 : rowNode.type) === "pinnedRow") {
          const pinnedRowsCache = apiRef.current.caches.pinnedRows;
          const prevModel = pinnedRowsCache.idLookup[id];
          if (prevModel) {
            pinnedRowsCache.idLookup[id] = _extends({}, prevModel, update);
          }
        } else {
          nonPinnedRowsUpdates.push(update);
        }
      });
      const cache = updateCacheWithNewRows({
        updates: nonPinnedRowsUpdates,
        getRowId: props.getRowId,
        previousCache: apiRef.current.caches.rows
      });
      throttledRowsChange({
        cache,
        throttle: true
      });
    }, [props.signature, props.getRowId, throttledRowsChange, apiRef]);
    const getRowModels = React207.useCallback(() => {
      const dataRows = gridDataRowIdsSelector(apiRef);
      const idRowsLookup = gridRowsLookupSelector(apiRef);
      return new Map(dataRows.map((id) => {
        var _idRowsLookup$id;
        return [id, (_idRowsLookup$id = idRowsLookup[id]) != null ? _idRowsLookup$id : {}];
      }));
    }, [apiRef]);
    const getRowsCount = React207.useCallback(() => gridRowCountSelector(apiRef), [apiRef]);
    const getAllRowIds = React207.useCallback(() => gridDataRowIdsSelector(apiRef), [apiRef]);
    const getRowIndexRelativeToVisibleRows = React207.useCallback((id) => lookup[id], [lookup]);
    const setRowChildrenExpansion = React207.useCallback((id, isExpanded) => {
      const currentNode = apiRef.current.getRowNode(id);
      if (!currentNode) {
        throw new Error(`MUI: No row with id #${id} found`);
      }
      if (currentNode.type !== "group") {
        throw new Error("MUI: Only group nodes can be expanded or collapsed");
      }
      const newNode = _extends({}, currentNode, {
        childrenExpanded: isExpanded
      });
      apiRef.current.setState((state) => {
        return _extends({}, state, {
          rows: _extends({}, state.rows, {
            tree: _extends({}, state.rows.tree, {
              [id]: newNode
            })
          })
        });
      });
      apiRef.current.forceUpdate();
      apiRef.current.publishEvent("rowExpansionChange", newNode);
    }, [apiRef]);
    const getRowNode = React207.useCallback((id) => {
      var _ref;
      return (_ref = gridRowTreeSelector(apiRef)[id]) != null ? _ref : null;
    }, [apiRef]);
    const getRowGroupChildren = React207.useCallback(({
      skipAutoGeneratedRows = true,
      groupId,
      applySorting,
      applyFiltering
    }) => {
      const tree = gridRowTreeSelector(apiRef);
      let children;
      if (applySorting) {
        const groupNode = tree[groupId];
        if (!groupNode) {
          return [];
        }
        const sortedRowIds = gridSortedRowIdsSelector(apiRef);
        children = [];
        const startIndex = sortedRowIds.findIndex((id) => id === groupId) + 1;
        for (let index = startIndex; index < sortedRowIds.length && tree[sortedRowIds[index]].depth > groupNode.depth; index += 1) {
          const id = sortedRowIds[index];
          if (!skipAutoGeneratedRows || !isAutoGeneratedRow(tree[id])) {
            children.push(id);
          }
        }
      } else {
        children = getTreeNodeDescendants(tree, groupId, skipAutoGeneratedRows);
      }
      if (applyFiltering) {
        const filteredRowsLookup = gridFilteredRowsLookupSelector(apiRef);
        children = children.filter((childId) => filteredRowsLookup[childId] !== false);
      }
      return children;
    }, [apiRef]);
    const setRowIndex = React207.useCallback((rowId, targetIndex) => {
      const node2 = apiRef.current.getRowNode(rowId);
      if (!node2) {
        throw new Error(`MUI: No row with id #${rowId} found`);
      }
      if (node2.parent !== GRID_ROOT_GROUP_ID) {
        throw new Error(`MUI: The row reordering do not support reordering of grouped rows yet`);
      }
      if (node2.type !== "leaf") {
        throw new Error(`MUI: The row reordering do not support reordering of footer or grouping rows`);
      }
      apiRef.current.setState((state) => {
        const group = gridRowTreeSelector(state, apiRef.current.instanceId)[GRID_ROOT_GROUP_ID];
        const allRows = group.children;
        const oldIndex = allRows.findIndex((row) => row === rowId);
        if (oldIndex === -1 || oldIndex === targetIndex) {
          return state;
        }
        logger.debug(`Moving row ${rowId} to index ${targetIndex}`);
        const updatedRows = [...allRows];
        updatedRows.splice(targetIndex, 0, updatedRows.splice(oldIndex, 1)[0]);
        return _extends({}, state, {
          rows: _extends({}, state.rows, {
            tree: _extends({}, state.rows.tree, {
              [GRID_ROOT_GROUP_ID]: _extends({}, group, {
                children: updatedRows
              })
            })
          })
        });
      });
      apiRef.current.publishEvent("rowsSet");
    }, [apiRef, logger]);
    const replaceRows = React207.useCallback((firstRowToRender, newRows) => {
      if (props.signature === GridSignature.DataGrid && newRows.length > 1) {
        throw new Error(["MUI: You can't replace rows using `apiRef.current.unstable_replaceRows` on the DataGrid.", "You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature."].join("\n"));
      }
      if (newRows.length === 0) {
        return;
      }
      const treeDepth = gridRowMaximumTreeDepthSelector(apiRef);
      if (treeDepth > 1) {
        throw new Error("`apiRef.current.unstable_replaceRows` is not compatible with tree data and row grouping");
      }
      const tree = _extends({}, gridRowTreeSelector(apiRef));
      const dataRowIdToModelLookup = _extends({}, gridRowsLookupSelector(apiRef));
      const dataRowIdToIdLookup = _extends({}, gridRowsDataRowIdToIdLookupSelector(apiRef));
      const rootGroup = tree[GRID_ROOT_GROUP_ID];
      const rootGroupChildren = [...rootGroup.children];
      const seenIds = /* @__PURE__ */ new Set();
      for (let i = 0; i < newRows.length; i += 1) {
        const rowModel = newRows[i];
        const rowId = getRowIdFromRowModel(rowModel, props.getRowId, "A row was provided without id when calling replaceRows().");
        const [removedRowId] = rootGroupChildren.splice(firstRowToRender + i, 1, rowId);
        if (!seenIds.has(removedRowId)) {
          delete dataRowIdToModelLookup[removedRowId];
          delete dataRowIdToIdLookup[removedRowId];
          delete tree[removedRowId];
        }
        const rowTreeNodeConfig = {
          id: rowId,
          depth: 0,
          parent: GRID_ROOT_GROUP_ID,
          type: "leaf",
          groupingKey: null
        };
        dataRowIdToModelLookup[rowId] = rowModel;
        dataRowIdToIdLookup[rowId] = rowId;
        tree[rowId] = rowTreeNodeConfig;
        seenIds.add(rowId);
      }
      tree[GRID_ROOT_GROUP_ID] = _extends({}, rootGroup, {
        children: rootGroupChildren
      });
      const dataRowIds = rootGroupChildren.filter((childId) => tree[childId].type === "leaf");
      apiRef.current.caches.rows.dataRowIdToModelLookup = dataRowIdToModelLookup;
      apiRef.current.caches.rows.dataRowIdToIdLookup = dataRowIdToIdLookup;
      apiRef.current.setState((state) => _extends({}, state, {
        rows: _extends({}, state.rows, {
          dataRowIdToModelLookup,
          dataRowIdToIdLookup,
          dataRowIds,
          tree
        })
      }));
      apiRef.current.publishEvent("rowsSet");
    }, [apiRef, props.signature, props.getRowId]);
    const rowApi = {
      getRow,
      getRowId,
      getRowModels,
      getRowsCount,
      getAllRowIds,
      setRows,
      updateRows,
      getRowNode,
      getRowIndexRelativeToVisibleRows,
      unstable_replaceRows: replaceRows
    };
    const rowProApi = {
      setRowIndex,
      setRowChildrenExpansion,
      getRowGroupChildren
    };
    const groupRows = React207.useCallback(() => {
      logger.info(`Row grouping pre-processing have changed, regenerating the row tree`);
      let cache;
      if (apiRef.current.caches.rows.rowsBeforePartialUpdates === props.rows) {
        cache = _extends({}, apiRef.current.caches.rows, {
          updates: {
            type: "full",
            rows: gridDataRowIdsSelector(apiRef)
          }
        });
      } else {
        cache = createRowsInternalCache({
          rows: props.rows,
          getRowId: props.getRowId,
          loading: props.loading,
          rowCount: props.rowCount
        });
      }
      throttledRowsChange({
        cache,
        throttle: false
      });
    }, [logger, apiRef, props.rows, props.getRowId, props.loading, props.rowCount, throttledRowsChange]);
    const handleStrategyProcessorChange = React207.useCallback((methodName) => {
      if (methodName === "rowTreeCreation") {
        groupRows();
      }
    }, [groupRows]);
    const handleStrategyActivityChange = React207.useCallback(() => {
      if (apiRef.current.getActiveStrategy("rowTree") !== gridRowGroupingNameSelector(apiRef)) {
        groupRows();
      }
    }, [apiRef, groupRows]);
    useGridApiEventHandler(apiRef, "activeStrategyProcessorChange", handleStrategyProcessorChange);
    useGridApiEventHandler(apiRef, "strategyAvailabilityChange", handleStrategyActivityChange);
    const applyHydrateRowsProcessor = React207.useCallback(() => {
      apiRef.current.setState((state) => {
        const response = apiRef.current.unstable_applyPipeProcessors("hydrateRows", {
          tree: gridRowTreeSelector(state, apiRef.current.instanceId),
          treeDepths: gridRowTreeDepthsSelector(state, apiRef.current.instanceId),
          dataRowIds: gridDataRowIdsSelector(state, apiRef.current.instanceId),
          dataRowIdToModelLookup: gridRowsLookupSelector(state, apiRef.current.instanceId),
          dataRowIdToIdLookup: gridRowsDataRowIdToIdLookupSelector(state, apiRef.current.instanceId)
        });
        return _extends({}, state, {
          rows: _extends({}, state.rows, response, {
            totalTopLevelRowCount: getTopLevelRowCount({
              tree: response.tree,
              rowCountProp: props.rowCount
            })
          })
        });
      });
      apiRef.current.publishEvent("rowsSet");
      apiRef.current.forceUpdate();
    }, [apiRef, props.rowCount]);
    useGridRegisterPipeApplier(apiRef, "hydrateRows", applyHydrateRowsProcessor);
    useGridApiMethod(apiRef, rowApi, "public");
    useGridApiMethod(apiRef, rowProApi, props.signature === GridSignature.DataGrid ? "private" : "public");
    const isFirstRender = React207.useRef(true);
    React207.useEffect(() => {
      if (isFirstRender.current) {
        isFirstRender.current = false;
        return;
      }
      const areNewRowsAlreadyInState = apiRef.current.caches.rows.rowsBeforePartialUpdates === props.rows;
      const isNewLoadingAlreadyInState = apiRef.current.caches.rows.loadingPropBeforePartialUpdates === props.loading;
      const isNewRowCountAlreadyInState = apiRef.current.caches.rows.rowCountPropBeforePartialUpdates === props.rowCount;
      if (areNewRowsAlreadyInState) {
        if (!isNewLoadingAlreadyInState) {
          apiRef.current.setState((state) => _extends({}, state, {
            rows: _extends({}, state.rows, {
              loading: props.loading
            })
          }));
          apiRef.current.caches.rows.loadingPropBeforePartialUpdates = props.loading;
          apiRef.current.forceUpdate();
        }
        if (!isNewRowCountAlreadyInState) {
          apiRef.current.setState((state) => _extends({}, state, {
            rows: _extends({}, state.rows, {
              totalRowCount: Math.max(props.rowCount || 0, state.rows.totalRowCount),
              totalTopLevelRowCount: Math.max(props.rowCount || 0, state.rows.totalTopLevelRowCount)
            })
          }));
          apiRef.current.caches.rows.rowCountPropBeforePartialUpdates = props.rowCount;
          apiRef.current.forceUpdate();
        }
        return;
      }
      logger.debug(`Updating all rows, new length ${props.rows.length}`);
      throttledRowsChange({
        cache: createRowsInternalCache({
          rows: props.rows,
          getRowId: props.getRowId,
          loading: props.loading,
          rowCount: props.rowCount
        }),
        throttle: false
      });
    }, [props.rows, props.rowCount, props.getRowId, props.loading, logger, throttledRowsChange, apiRef]);
  };

  // node_modules/@mui/x-data-grid/hooks/features/rows/useGridRowsPreProcessors.js
  init_extends();
  var createFlatRowTree = (rows) => {
    const tree = {
      [GRID_ROOT_GROUP_ID]: _extends({}, buildRootGroup(), {
        children: rows
      })
    };
    for (let i = 0; i < rows.length; i += 1) {
      const rowId = rows[i];
      tree[rowId] = {
        id: rowId,
        depth: 0,
        parent: GRID_ROOT_GROUP_ID,
        type: "leaf",
        groupingKey: null
      };
    }
    return {
      groupingName: GRID_DEFAULT_STRATEGY,
      tree,
      treeDepths: {
        0: rows.length
      },
      dataRowIds: rows
    };
  };
  var updateFlatRowTree = ({
    previousTree,
    actions
  }) => {
    const tree = _extends({}, previousTree);
    const idsToRemoveFromRootGroup = {};
    for (let i = 0; i < actions.remove.length; i += 1) {
      const idToDelete = actions.remove[i];
      idsToRemoveFromRootGroup[idToDelete] = true;
      delete tree[idToDelete];
    }
    for (let i = 0; i < actions.insert.length; i += 1) {
      const idToInsert = actions.insert[i];
      tree[idToInsert] = {
        id: idToInsert,
        depth: 0,
        parent: GRID_ROOT_GROUP_ID,
        type: "leaf",
        groupingKey: null
      };
    }
    const rootGroup = tree[GRID_ROOT_GROUP_ID];
    let rootGroupChildren = [...rootGroup.children, ...actions.insert];
    if (Object.values(idsToRemoveFromRootGroup).length) {
      rootGroupChildren = rootGroupChildren.filter((id) => !idsToRemoveFromRootGroup[id]);
    }
    tree[GRID_ROOT_GROUP_ID] = _extends({}, rootGroup, {
      children: rootGroupChildren
    });
    return {
      groupingName: GRID_DEFAULT_STRATEGY,
      tree,
      treeDepths: {
        0: rootGroupChildren.length
      },
      dataRowIds: rootGroupChildren
    };
  };
  var flatRowTreeCreationMethod = (params) => {
    if (params.updates.type === "full") {
      return createFlatRowTree(params.updates.rows);
    }
    return updateFlatRowTree({
      previousTree: params.previousTree,
      actions: params.updates.actions
    });
  };
  var useGridRowsPreProcessors = (apiRef) => {
    useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, "rowTreeCreation", flatRowTreeCreationMethod);
  };

  // node_modules/@mui/x-data-grid/hooks/features/rowSelection/useGridRowSelection.js
  init_extends();
  var React208 = __toESM(require_react());
  var getSelectionModelPropValue = (selectionModelProp, prevSelectionModel) => {
    if (selectionModelProp == null) {
      return selectionModelProp;
    }
    if (Array.isArray(selectionModelProp)) {
      return selectionModelProp;
    }
    if (prevSelectionModel && prevSelectionModel[0] === selectionModelProp) {
      return prevSelectionModel;
    }
    return [selectionModelProp];
  };
  var rowSelectionStateInitializer = (state, props) => {
    var _getSelectionModelPro;
    return _extends({}, state, {
      rowSelection: props.rowSelection ? (_getSelectionModelPro = getSelectionModelPropValue(props.rowSelectionModel)) != null ? _getSelectionModelPro : [] : []
    });
  };
  var useGridRowSelection = (apiRef, props) => {
    const logger = useGridLogger(apiRef, "useGridSelection");
    const runIfRowSelectionIsEnabled = (callback) => (...args) => {
      if (props.rowSelection) {
        callback(...args);
      }
    };
    const propRowSelectionModel = React208.useMemo(() => {
      return getSelectionModelPropValue(props.rowSelectionModel, gridRowSelectionStateSelector(apiRef.current.state));
    }, [apiRef, props.rowSelectionModel]);
    const lastRowToggled = React208.useRef(null);
    apiRef.current.registerControlState({
      stateId: "rowSelection",
      propModel: propRowSelectionModel,
      propOnChange: props.onRowSelectionModelChange,
      stateSelector: gridRowSelectionStateSelector,
      changeEvent: "rowSelectionChange"
    });
    const {
      checkboxSelection,
      disableMultipleRowSelection,
      disableRowSelectionOnClick,
      isRowSelectable: propIsRowSelectable
    } = props;
    const canHaveMultipleSelection = !disableMultipleRowSelection || checkboxSelection;
    const visibleRows = useGridVisibleRows(apiRef, props);
    const expandMouseRowRangeSelection = React208.useCallback((id) => {
      var _lastRowToggled$curre;
      let endId = id;
      const startId = (_lastRowToggled$curre = lastRowToggled.current) != null ? _lastRowToggled$curre : id;
      const isSelected = apiRef.current.isRowSelected(id);
      if (isSelected) {
        const visibleRowIds = gridExpandedSortedRowIdsSelector(apiRef);
        const startIndex = visibleRowIds.findIndex((rowId) => rowId === startId);
        const endIndex = visibleRowIds.findIndex((rowId) => rowId === endId);
        if (startIndex === endIndex) {
          return;
        }
        if (startIndex > endIndex) {
          endId = visibleRowIds[endIndex + 1];
        } else {
          endId = visibleRowIds[endIndex - 1];
        }
      }
      lastRowToggled.current = id;
      apiRef.current.selectRowRange({
        startId,
        endId
      }, !isSelected);
    }, [apiRef]);
    const setRowSelectionModel = React208.useCallback((model) => {
      if (props.signature === GridSignature.DataGrid && !props.checkboxSelection && Array.isArray(model) && model.length > 1) {
        throw new Error(["MUI: `rowSelectionModel` can only contain 1 item in DataGrid.", "You need to upgrade to DataGridPro or DataGridPremium component to unlock multiple selection."].join("\n"));
      }
      const currentModel = gridRowSelectionStateSelector(apiRef.current.state);
      if (currentModel !== model) {
        logger.debug(`Setting selection model`);
        apiRef.current.setState((state) => _extends({}, state, {
          rowSelection: props.rowSelection ? model : []
        }));
        apiRef.current.forceUpdate();
      }
    }, [apiRef, logger, props.rowSelection, props.signature, props.checkboxSelection]);
    const isRowSelected = React208.useCallback((id) => gridRowSelectionStateSelector(apiRef.current.state).includes(id), [apiRef]);
    const isRowSelectable = React208.useCallback((id) => {
      if (propIsRowSelectable && !propIsRowSelectable(apiRef.current.getRowParams(id))) {
        return false;
      }
      const rowNode = apiRef.current.getRowNode(id);
      if ((rowNode == null ? void 0 : rowNode.type) === "footer" || (rowNode == null ? void 0 : rowNode.type) === "pinnedRow") {
        return false;
      }
      return true;
    }, [apiRef, propIsRowSelectable]);
    const getSelectedRows = React208.useCallback(() => selectedGridRowsSelector(apiRef), [apiRef]);
    const selectRow = React208.useCallback((id, isSelected = true, resetSelection = false) => {
      if (!apiRef.current.isRowSelectable(id)) {
        return;
      }
      lastRowToggled.current = id;
      if (resetSelection) {
        logger.debug(`Setting selection for row ${id}`);
        apiRef.current.setRowSelectionModel(isSelected ? [id] : []);
      } else {
        logger.debug(`Toggling selection for row ${id}`);
        const selection = gridRowSelectionStateSelector(apiRef.current.state);
        const newSelection = selection.filter((el) => el !== id);
        if (isSelected) {
          newSelection.push(id);
        }
        const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;
        if (isSelectionValid) {
          apiRef.current.setRowSelectionModel(newSelection);
        }
      }
    }, [apiRef, logger, canHaveMultipleSelection]);
    const selectRows = React208.useCallback((ids, isSelected = true, resetSelection = false) => {
      logger.debug(`Setting selection for several rows`);
      const selectableIds = ids.filter((id) => apiRef.current.isRowSelectable(id));
      let newSelection;
      if (resetSelection) {
        newSelection = isSelected ? selectableIds : [];
      } else {
        const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));
        selectableIds.forEach((id) => {
          if (isSelected) {
            selectionLookup[id] = id;
          } else {
            delete selectionLookup[id];
          }
        });
        newSelection = Object.values(selectionLookup);
      }
      const isSelectionValid = newSelection.length < 2 || canHaveMultipleSelection;
      if (isSelectionValid) {
        apiRef.current.setRowSelectionModel(newSelection);
      }
    }, [apiRef, logger, canHaveMultipleSelection]);
    const selectRowRange = React208.useCallback(({
      startId,
      endId
    }, isSelected = true, resetSelection = false) => {
      if (!apiRef.current.getRow(startId) || !apiRef.current.getRow(endId)) {
        return;
      }
      logger.debug(`Expanding selection from row ${startId} to row ${endId}`);
      const allPagesRowIds = gridExpandedSortedRowIdsSelector(apiRef);
      const startIndex = allPagesRowIds.indexOf(startId);
      const endIndex = allPagesRowIds.indexOf(endId);
      const [start2, end2] = startIndex > endIndex ? [endIndex, startIndex] : [startIndex, endIndex];
      const rowsBetweenStartAndEnd = allPagesRowIds.slice(start2, end2 + 1);
      apiRef.current.selectRows(rowsBetweenStartAndEnd, isSelected, resetSelection);
    }, [apiRef, logger]);
    const selectionPublicApi = {
      selectRow,
      setRowSelectionModel,
      getSelectedRows,
      isRowSelected,
      isRowSelectable
    };
    const selectionPrivateApi = {
      selectRows,
      selectRowRange
    };
    useGridApiMethod(apiRef, selectionPublicApi, "public");
    useGridApiMethod(apiRef, selectionPrivateApi, props.signature === GridSignature.DataGrid ? "private" : "public");
    const removeOutdatedSelection = React208.useCallback(() => {
      if (props.keepNonExistentRowsSelected) {
        return;
      }
      const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);
      const rowsLookup = gridRowsLookupSelector(apiRef);
      const selectionLookup = _extends({}, selectedIdsLookupSelector(apiRef));
      let hasChanged = false;
      currentSelection.forEach((id) => {
        if (!rowsLookup[id]) {
          delete selectionLookup[id];
          hasChanged = true;
        }
      });
      if (hasChanged) {
        apiRef.current.setRowSelectionModel(Object.values(selectionLookup));
      }
    }, [apiRef, props.keepNonExistentRowsSelected]);
    const handleSingleRowSelection = React208.useCallback((id, event) => {
      const hasCtrlKey = event.metaKey || event.ctrlKey;
      const isMultipleSelectionDisabled = !checkboxSelection && !hasCtrlKey && !isKeyboardEvent(event);
      const resetSelection = !canHaveMultipleSelection || isMultipleSelectionDisabled;
      const isSelected = apiRef.current.isRowSelected(id);
      if (resetSelection) {
        apiRef.current.selectRow(id, !isMultipleSelectionDisabled ? !isSelected : true, true);
      } else {
        apiRef.current.selectRow(id, !isSelected, false);
      }
    }, [apiRef, canHaveMultipleSelection, checkboxSelection]);
    const handleRowClick = React208.useCallback((params, event) => {
      var _closest;
      if (disableRowSelectionOnClick) {
        return;
      }
      const field = (_closest = event.target.closest(`.${gridClasses.cell}`)) == null ? void 0 : _closest.getAttribute("data-field");
      if (field === GRID_CHECKBOX_SELECTION_COL_DEF.field) {
        return;
      }
      if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {
        return;
      }
      if (field) {
        const column2 = apiRef.current.getColumn(field);
        if ((column2 == null ? void 0 : column2.type) === GRID_ACTIONS_COLUMN_TYPE) {
          return;
        }
      }
      const rowNode = apiRef.current.getRowNode(params.id);
      if (rowNode.type === "pinnedRow") {
        return;
      }
      if (event.shiftKey && (canHaveMultipleSelection || checkboxSelection)) {
        expandMouseRowRangeSelection(params.id);
      } else {
        handleSingleRowSelection(params.id, event);
      }
    }, [disableRowSelectionOnClick, canHaveMultipleSelection, checkboxSelection, apiRef, expandMouseRowRangeSelection, handleSingleRowSelection]);
    const preventSelectionOnShift = React208.useCallback((params, event) => {
      if (canHaveMultipleSelection && event.shiftKey) {
        var _window$getSelection;
        (_window$getSelection = window.getSelection()) == null || _window$getSelection.removeAllRanges();
      }
    }, [canHaveMultipleSelection]);
    const handleRowSelectionCheckboxChange = React208.useCallback((params, event) => {
      if (event.nativeEvent.shiftKey) {
        expandMouseRowRangeSelection(params.id);
      } else {
        apiRef.current.selectRow(params.id, params.value);
      }
    }, [apiRef, expandMouseRowRangeSelection]);
    const handleHeaderSelectionCheckboxChange = React208.useCallback((params) => {
      const shouldLimitSelectionToCurrentPage = props.checkboxSelectionVisibleOnly && props.pagination;
      const rowsToBeSelected = shouldLimitSelectionToCurrentPage ? gridPaginatedVisibleSortedGridRowIdsSelector(apiRef) : gridExpandedSortedRowIdsSelector(apiRef);
      const filterModel = gridFilterModelSelector(apiRef);
      apiRef.current.selectRows(rowsToBeSelected, params.value, (filterModel == null ? void 0 : filterModel.items.length) > 0);
    }, [apiRef, props.checkboxSelectionVisibleOnly, props.pagination]);
    const handleCellKeyDown = React208.useCallback((params, event) => {
      if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.Edit) {
        return;
      }
      if (isEventTargetInPortal(event)) {
        return;
      }
      if (isNavigationKey(event.key) && event.shiftKey) {
        const focusCell = gridFocusCellSelector(apiRef);
        if (focusCell && focusCell.id !== params.id) {
          event.preventDefault();
          const isNextRowSelected = apiRef.current.isRowSelected(focusCell.id);
          if (!canHaveMultipleSelection) {
            apiRef.current.selectRow(focusCell.id, !isNextRowSelected, true);
            return;
          }
          const newRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(focusCell.id);
          const previousRowIndex = apiRef.current.getRowIndexRelativeToVisibleRows(params.id);
          let start2;
          let end2;
          if (newRowIndex > previousRowIndex) {
            if (isNextRowSelected) {
              start2 = previousRowIndex;
              end2 = newRowIndex - 1;
            } else {
              start2 = previousRowIndex;
              end2 = newRowIndex;
            }
          } else {
            if (isNextRowSelected) {
              start2 = newRowIndex + 1;
              end2 = previousRowIndex;
            } else {
              start2 = newRowIndex;
              end2 = previousRowIndex;
            }
          }
          const rowsBetweenStartAndEnd = visibleRows.rows.slice(start2, end2 + 1).map((row) => row.id);
          apiRef.current.selectRows(rowsBetweenStartAndEnd, !isNextRowSelected);
          return;
        }
      }
      if (event.key === " " && event.shiftKey) {
        event.preventDefault();
        handleSingleRowSelection(params.id, event);
        return;
      }
      if (event.key === "a" && (event.ctrlKey || event.metaKey)) {
        event.preventDefault();
        selectRows(apiRef.current.getAllRowIds(), true);
      }
    }, [apiRef, handleSingleRowSelection, selectRows, visibleRows.rows, canHaveMultipleSelection]);
    useGridApiEventHandler(apiRef, "sortedRowsSet", runIfRowSelectionIsEnabled(removeOutdatedSelection));
    useGridApiEventHandler(apiRef, "rowClick", runIfRowSelectionIsEnabled(handleRowClick));
    useGridApiEventHandler(apiRef, "rowSelectionCheckboxChange", runIfRowSelectionIsEnabled(handleRowSelectionCheckboxChange));
    useGridApiEventHandler(apiRef, "headerSelectionCheckboxChange", handleHeaderSelectionCheckboxChange);
    useGridApiEventHandler(apiRef, "cellMouseDown", runIfRowSelectionIsEnabled(preventSelectionOnShift));
    useGridApiEventHandler(apiRef, "cellKeyDown", runIfRowSelectionIsEnabled(handleCellKeyDown));
    React208.useEffect(() => {
      if (propRowSelectionModel !== void 0) {
        apiRef.current.setRowSelectionModel(propRowSelectionModel);
      }
    }, [apiRef, propRowSelectionModel, props.rowSelection]);
    React208.useEffect(() => {
      if (!props.rowSelection) {
        apiRef.current.setRowSelectionModel([]);
      }
    }, [apiRef, props.rowSelection]);
    const isStateControlled = propRowSelectionModel != null;
    React208.useEffect(() => {
      if (isStateControlled || !props.rowSelection) {
        return;
      }
      const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);
      if (isRowSelectable) {
        const newSelection = currentSelection.filter((id) => isRowSelectable(id));
        if (newSelection.length < currentSelection.length) {
          apiRef.current.setRowSelectionModel(newSelection);
        }
      }
    }, [apiRef, isRowSelectable, isStateControlled, props.rowSelection]);
    React208.useEffect(() => {
      if (!props.rowSelection || isStateControlled) {
        return;
      }
      const currentSelection = gridRowSelectionStateSelector(apiRef.current.state);
      if (!canHaveMultipleSelection && currentSelection.length > 1) {
        apiRef.current.setRowSelectionModel([]);
      }
    }, [apiRef, canHaveMultipleSelection, checkboxSelection, isStateControlled, props.rowSelection]);
  };

  // node_modules/@mui/x-data-grid/hooks/features/rowSelection/useGridRowSelectionPreProcessors.js
  init_extends();
  var React209 = __toESM(require_react());

  // node_modules/@mui/x-data-grid/constants/localeTextConstants.js
  var GRID_DEFAULT_LOCALE_TEXT = {
    // Root
    noRowsLabel: "No rows",
    noResultsOverlayLabel: "No results found.",
    // Density selector toolbar button text
    toolbarDensity: "Density",
    toolbarDensityLabel: "Density",
    toolbarDensityCompact: "Compact",
    toolbarDensityStandard: "Standard",
    toolbarDensityComfortable: "Comfortable",
    // Columns selector toolbar button text
    toolbarColumns: "Columns",
    toolbarColumnsLabel: "Select columns",
    // Filters toolbar button text
    toolbarFilters: "Filters",
    toolbarFiltersLabel: "Show filters",
    toolbarFiltersTooltipHide: "Hide filters",
    toolbarFiltersTooltipShow: "Show filters",
    toolbarFiltersTooltipActive: (count) => count !== 1 ? `${count} active filters` : `${count} active filter`,
    // Quick filter toolbar field
    toolbarQuickFilterPlaceholder: "Search\u2026",
    toolbarQuickFilterLabel: "Search",
    toolbarQuickFilterDeleteIconLabel: "Clear",
    // Export selector toolbar button text
    toolbarExport: "Export",
    toolbarExportLabel: "Export",
    toolbarExportCSV: "Download as CSV",
    toolbarExportPrint: "Print",
    toolbarExportExcel: "Download as Excel",
    // Columns panel text
    columnsPanelTextFieldLabel: "Find column",
    columnsPanelTextFieldPlaceholder: "Column title",
    columnsPanelDragIconLabel: "Reorder column",
    columnsPanelShowAllButton: "Show all",
    columnsPanelHideAllButton: "Hide all",
    // Filter panel text
    filterPanelAddFilter: "Add filter",
    filterPanelRemoveAll: "Remove all",
    filterPanelDeleteIconLabel: "Delete",
    filterPanelLogicOperator: "Logic operator",
    filterPanelOperator: "Operator",
    filterPanelOperatorAnd: "And",
    filterPanelOperatorOr: "Or",
    filterPanelColumns: "Columns",
    filterPanelInputLabel: "Value",
    filterPanelInputPlaceholder: "Filter value",
    // Filter operators text
    filterOperatorContains: "contains",
    filterOperatorEquals: "equals",
    filterOperatorStartsWith: "starts with",
    filterOperatorEndsWith: "ends with",
    filterOperatorIs: "is",
    filterOperatorNot: "is not",
    filterOperatorAfter: "is after",
    filterOperatorOnOrAfter: "is on or after",
    filterOperatorBefore: "is before",
    filterOperatorOnOrBefore: "is on or before",
    filterOperatorIsEmpty: "is empty",
    filterOperatorIsNotEmpty: "is not empty",
    filterOperatorIsAnyOf: "is any of",
    "filterOperator=": "=",
    "filterOperator!=": "!=",
    "filterOperator>": ">",
    "filterOperator>=": ">=",
    "filterOperator<": "<",
    "filterOperator<=": "<=",
    // Header filter operators text
    headerFilterOperatorContains: "Contains",
    headerFilterOperatorEquals: "Equals",
    headerFilterOperatorStartsWith: "Starts with",
    headerFilterOperatorEndsWith: "Ends with",
    headerFilterOperatorIs: "Is",
    headerFilterOperatorNot: "Is not",
    headerFilterOperatorAfter: "Is after",
    headerFilterOperatorOnOrAfter: "Is on or after",
    headerFilterOperatorBefore: "Is before",
    headerFilterOperatorOnOrBefore: "Is on or before",
    headerFilterOperatorIsEmpty: "Is empty",
    headerFilterOperatorIsNotEmpty: "Is not empty",
    headerFilterOperatorIsAnyOf: "Is any of",
    "headerFilterOperator=": "Equals",
    "headerFilterOperator!=": "Not equals",
    "headerFilterOperator>": "Greater than",
    "headerFilterOperator>=": "Greater than or equal to",
    "headerFilterOperator<": "Less than",
    "headerFilterOperator<=": "Less than or equal to",
    // Filter values text
    filterValueAny: "any",
    filterValueTrue: "true",
    filterValueFalse: "false",
    // Column menu text
    columnMenuLabel: "Menu",
    columnMenuShowColumns: "Show columns",
    columnMenuManageColumns: "Manage columns",
    columnMenuFilter: "Filter",
    columnMenuHideColumn: "Hide column",
    columnMenuUnsort: "Unsort",
    columnMenuSortAsc: "Sort by ASC",
    columnMenuSortDesc: "Sort by DESC",
    // Column header text
    columnHeaderFiltersTooltipActive: (count) => count !== 1 ? `${count} active filters` : `${count} active filter`,
    columnHeaderFiltersLabel: "Show filters",
    columnHeaderSortIconLabel: "Sort",
    // Rows selected footer text
    footerRowSelected: (count) => count !== 1 ? `${count.toLocaleString()} rows selected` : `${count.toLocaleString()} row selected`,
    // Total row amount footer text
    footerTotalRows: "Total Rows:",
    // Total visible row amount footer text
    footerTotalVisibleRows: (visibleCount, totalCount) => `${visibleCount.toLocaleString()} of ${totalCount.toLocaleString()}`,
    // Checkbox selection text
    checkboxSelectionHeaderName: "Checkbox selection",
    checkboxSelectionSelectAllRows: "Select all rows",
    checkboxSelectionUnselectAllRows: "Unselect all rows",
    checkboxSelectionSelectRow: "Select row",
    checkboxSelectionUnselectRow: "Unselect row",
    // Boolean cell text
    booleanCellTrueLabel: "yes",
    booleanCellFalseLabel: "no",
    // Actions cell more text
    actionsCellMore: "more",
    // Column pinning text
    pinToLeft: "Pin to left",
    pinToRight: "Pin to right",
    unpin: "Unpin",
    // Tree Data
    treeDataGroupingHeaderName: "Group",
    treeDataExpand: "see children",
    treeDataCollapse: "hide children",
    // Grouping columns
    groupingColumnHeaderName: "Group",
    groupColumn: (name) => `Group by ${name}`,
    unGroupColumn: (name) => `Stop grouping by ${name}`,
    // Master/detail
    detailPanelToggle: "Detail panel toggle",
    expandDetailPanel: "Expand",
    collapseDetailPanel: "Collapse",
    // Used core components translation keys
    MuiTablePagination: {},
    // Row reordering text
    rowReorderingHeaderName: "Row reordering",
    // Aggregation
    aggregationMenuItemHeader: "Aggregation",
    aggregationFunctionLabelSum: "sum",
    aggregationFunctionLabelAvg: "avg",
    aggregationFunctionLabelMin: "min",
    aggregationFunctionLabelMax: "max",
    aggregationFunctionLabelSize: "size"
  };

  // node_modules/@mui/x-data-grid/hooks/features/rowSelection/useGridRowSelectionPreProcessors.js
  var useUtilityClasses72 = (ownerState) => {
    const {
      classes
    } = ownerState;
    return React209.useMemo(() => {
      const slots = {
        cellCheckbox: ["cellCheckbox"],
        columnHeaderCheckbox: ["columnHeaderCheckbox"]
      };
      return composeClasses(slots, getDataGridUtilityClass, classes);
    }, [classes]);
  };
  var useGridRowSelectionPreProcessors = (apiRef, props) => {
    const ownerState = {
      classes: props.classes
    };
    const classes = useUtilityClasses72(ownerState);
    const updateSelectionColumn = React209.useCallback((columnsState) => {
      const selectionColumn = _extends({}, GRID_CHECKBOX_SELECTION_COL_DEF, {
        cellClassName: classes.cellCheckbox,
        headerClassName: classes.columnHeaderCheckbox,
        headerName: apiRef.current.getLocaleText("checkboxSelectionHeaderName")
      });
      const shouldHaveSelectionColumn = props.checkboxSelection;
      const haveSelectionColumn = columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD] != null;
      if (shouldHaveSelectionColumn && !haveSelectionColumn) {
        columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD] = selectionColumn;
        columnsState.orderedFields = [GRID_CHECKBOX_SELECTION_FIELD, ...columnsState.orderedFields];
      } else if (!shouldHaveSelectionColumn && haveSelectionColumn) {
        delete columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD];
        columnsState.orderedFields = columnsState.orderedFields.filter((field) => field !== GRID_CHECKBOX_SELECTION_FIELD);
      } else if (shouldHaveSelectionColumn && haveSelectionColumn) {
        columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD] = _extends({}, selectionColumn, columnsState.lookup[GRID_CHECKBOX_SELECTION_FIELD]);
      }
      return columnsState;
    }, [apiRef, classes, props.checkboxSelection]);
    useGridRegisterPipeProcessor(apiRef, "hydrateColumns", updateSelectionColumn);
  };

  // node_modules/@mui/x-data-grid/hooks/features/sorting/useGridSorting.js
  init_extends();
  var React210 = __toESM(require_react());
  var sortingStateInitializer = (state, props) => {
    var _ref, _props$sortModel, _props$initialState;
    const sortModel = (_ref = (_props$sortModel = props.sortModel) != null ? _props$sortModel : (_props$initialState = props.initialState) == null || (_props$initialState = _props$initialState.sorting) == null ? void 0 : _props$initialState.sortModel) != null ? _ref : [];
    return _extends({}, state, {
      sorting: {
        sortModel: sanitizeSortModel(sortModel, props.disableMultipleColumnsSorting),
        sortedRows: []
      }
    });
  };
  var useGridSorting = (apiRef, props) => {
    var _props$initialState3;
    const logger = useGridLogger(apiRef, "useGridSorting");
    apiRef.current.registerControlState({
      stateId: "sortModel",
      propModel: props.sortModel,
      propOnChange: props.onSortModelChange,
      stateSelector: gridSortModelSelector,
      changeEvent: "sortModelChange"
    });
    const upsertSortModel = React210.useCallback((field, sortItem) => {
      const sortModel = gridSortModelSelector(apiRef);
      const existingIdx = sortModel.findIndex((c) => c.field === field);
      let newSortModel = [...sortModel];
      if (existingIdx > -1) {
        if (!sortItem) {
          newSortModel.splice(existingIdx, 1);
        } else {
          newSortModel.splice(existingIdx, 1, sortItem);
        }
      } else {
        newSortModel = [...sortModel, sortItem];
      }
      return newSortModel;
    }, [apiRef]);
    const createSortItem = React210.useCallback((col, directionOverride) => {
      var _col$sortingOrder2;
      const sortModel = gridSortModelSelector(apiRef);
      const existing = sortModel.find((c) => c.field === col.field);
      if (existing) {
        var _col$sortingOrder;
        const nextSort = directionOverride === void 0 ? getNextGridSortDirection((_col$sortingOrder = col.sortingOrder) != null ? _col$sortingOrder : props.sortingOrder, existing.sort) : directionOverride;
        return nextSort == null ? void 0 : _extends({}, existing, {
          sort: nextSort
        });
      }
      return {
        field: col.field,
        sort: directionOverride === void 0 ? getNextGridSortDirection((_col$sortingOrder2 = col.sortingOrder) != null ? _col$sortingOrder2 : props.sortingOrder) : directionOverride
      };
    }, [apiRef, props.sortingOrder]);
    const addColumnMenuItem = React210.useCallback((columnMenuItems, colDef) => {
      if (colDef == null || colDef.sortable === false) {
        return columnMenuItems;
      }
      const sortingOrder = colDef.sortingOrder || props.sortingOrder;
      if (sortingOrder.some((item) => !!item)) {
        return [...columnMenuItems, "columnMenuSortItem"];
      }
      return columnMenuItems;
    }, [props.sortingOrder]);
    const applySorting = React210.useCallback(() => {
      apiRef.current.setState((state) => {
        if (props.sortingMode === "server") {
          logger.debug("Skipping sorting rows as sortingMode = server");
          return _extends({}, state, {
            sorting: _extends({}, state.sorting, {
              sortedRows: getTreeNodeDescendants(gridRowTreeSelector(apiRef), GRID_ROOT_GROUP_ID, false)
            })
          });
        }
        const sortModel = gridSortModelSelector(state, apiRef.current.instanceId);
        const sortRowList = buildAggregatedSortingApplier(sortModel, apiRef);
        const sortedRows = apiRef.current.applyStrategyProcessor("sorting", {
          sortRowList
        });
        return _extends({}, state, {
          sorting: _extends({}, state.sorting, {
            sortedRows
          })
        });
      });
      apiRef.current.publishEvent("sortedRowsSet");
      apiRef.current.forceUpdate();
    }, [apiRef, logger, props.sortingMode]);
    const setSortModel = React210.useCallback((model) => {
      const currentModel = gridSortModelSelector(apiRef);
      if (currentModel !== model) {
        logger.debug(`Setting sort model`);
        apiRef.current.setState(mergeStateWithSortModel(model, props.disableMultipleColumnsSorting));
        apiRef.current.forceUpdate();
        apiRef.current.applySorting();
      }
    }, [apiRef, logger, props.disableMultipleColumnsSorting]);
    const sortColumn = React210.useCallback((column2, direction, allowMultipleSorting) => {
      if (!column2.sortable) {
        return;
      }
      const sortItem = createSortItem(column2, direction);
      let sortModel;
      if (!allowMultipleSorting || props.disableMultipleColumnsSorting) {
        sortModel = !sortItem ? [] : [sortItem];
      } else {
        sortModel = upsertSortModel(column2.field, sortItem);
      }
      apiRef.current.setSortModel(sortModel);
    }, [apiRef, upsertSortModel, createSortItem, props.disableMultipleColumnsSorting]);
    const getSortModel = React210.useCallback(() => gridSortModelSelector(apiRef), [apiRef]);
    const getSortedRows = React210.useCallback(() => {
      const sortedRows = gridSortedRowEntriesSelector(apiRef);
      return sortedRows.map((row) => row.model);
    }, [apiRef]);
    const getSortedRowIds = React210.useCallback(() => gridSortedRowIdsSelector(apiRef), [apiRef]);
    const getRowIdFromRowIndex = React210.useCallback((index) => apiRef.current.getSortedRowIds()[index], [apiRef]);
    const sortApi = {
      getSortModel,
      getSortedRows,
      getSortedRowIds,
      getRowIdFromRowIndex,
      setSortModel,
      sortColumn,
      applySorting
    };
    useGridApiMethod(apiRef, sortApi, "public");
    const stateExportPreProcessing = React210.useCallback((prevState, context) => {
      var _props$initialState2;
      const sortModelToExport = gridSortModelSelector(apiRef);
      const shouldExportSortModel = (
        // Always export if the `exportOnlyDirtyModels` property is not activated
        !context.exportOnlyDirtyModels || // Always export if the model is controlled
        props.sortModel != null || // Always export if the model has been initialized
        ((_props$initialState2 = props.initialState) == null || (_props$initialState2 = _props$initialState2.sorting) == null ? void 0 : _props$initialState2.sortModel) != null || // Export if the model is not empty
        sortModelToExport.length > 0
      );
      if (!shouldExportSortModel) {
        return prevState;
      }
      return _extends({}, prevState, {
        sorting: {
          sortModel: sortModelToExport
        }
      });
    }, [apiRef, props.sortModel, (_props$initialState3 = props.initialState) == null || (_props$initialState3 = _props$initialState3.sorting) == null ? void 0 : _props$initialState3.sortModel]);
    const stateRestorePreProcessing = React210.useCallback((params, context) => {
      var _context$stateToResto;
      const sortModel = (_context$stateToResto = context.stateToRestore.sorting) == null ? void 0 : _context$stateToResto.sortModel;
      if (sortModel == null) {
        return params;
      }
      apiRef.current.setState(mergeStateWithSortModel(sortModel, props.disableMultipleColumnsSorting));
      return _extends({}, params, {
        callbacks: [...params.callbacks, apiRef.current.applySorting]
      });
    }, [apiRef, props.disableMultipleColumnsSorting]);
    const flatSortingMethod = React210.useCallback((params) => {
      const rowTree = gridRowTreeSelector(apiRef);
      const rootGroupNode = rowTree[GRID_ROOT_GROUP_ID];
      const sortedChildren = params.sortRowList ? params.sortRowList(rootGroupNode.children.map((childId) => rowTree[childId])) : [...rootGroupNode.children];
      if (rootGroupNode.footerId != null) {
        sortedChildren.push(rootGroupNode.footerId);
      }
      return sortedChildren;
    }, [apiRef]);
    useGridRegisterPipeProcessor(apiRef, "exportState", stateExportPreProcessing);
    useGridRegisterPipeProcessor(apiRef, "restoreState", stateRestorePreProcessing);
    useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, "sorting", flatSortingMethod);
    const handleColumnHeaderClick = React210.useCallback(({
      colDef
    }, event) => {
      const allowMultipleSorting = event.shiftKey || event.metaKey || event.ctrlKey;
      sortColumn(colDef, void 0, allowMultipleSorting);
    }, [sortColumn]);
    const handleColumnHeaderKeyDown = React210.useCallback(({
      colDef
    }, event) => {
      if (isEnterKey(event.key) && !event.ctrlKey && !event.metaKey) {
        sortColumn(colDef, void 0, event.shiftKey);
      }
    }, [sortColumn]);
    const handleColumnsChange = React210.useCallback(() => {
      const sortModel = gridSortModelSelector(apiRef);
      const latestColumns = gridColumnLookupSelector(apiRef);
      if (sortModel.length > 0) {
        const newModel = sortModel.filter((sortItem) => latestColumns[sortItem.field]);
        if (newModel.length < sortModel.length) {
          apiRef.current.setSortModel(newModel);
        }
      }
    }, [apiRef]);
    const handleStrategyProcessorChange = React210.useCallback((methodName) => {
      if (methodName === "sorting") {
        apiRef.current.applySorting();
      }
    }, [apiRef]);
    useGridRegisterPipeProcessor(apiRef, "columnMenu", addColumnMenuItem);
    useGridApiEventHandler(apiRef, "columnHeaderClick", handleColumnHeaderClick);
    useGridApiEventHandler(apiRef, "columnHeaderKeyDown", handleColumnHeaderKeyDown);
    useGridApiEventHandler(apiRef, "rowsSet", apiRef.current.applySorting);
    useGridApiEventHandler(apiRef, "columnsChange", handleColumnsChange);
    useGridApiEventHandler(apiRef, "activeStrategyProcessorChange", handleStrategyProcessorChange);
    useFirstRender(() => {
      apiRef.current.applySorting();
    });
    useEnhancedEffect_default(() => {
      if (props.sortModel !== void 0) {
        apiRef.current.setSortModel(props.sortModel);
      }
    }, [apiRef, props.sortModel]);
  };

  // node_modules/@mui/x-data-grid/hooks/features/scroll/useGridScroll.js
  var React211 = __toESM(require_react());
  function scrollIntoView(dimensions) {
    const {
      clientHeight,
      scrollTop,
      offsetHeight,
      offsetTop
    } = dimensions;
    const elementBottom = offsetTop + offsetHeight;
    if (offsetHeight > clientHeight) {
      return offsetTop;
    }
    if (elementBottom - clientHeight > scrollTop) {
      return elementBottom - clientHeight;
    }
    if (offsetTop < scrollTop) {
      return offsetTop;
    }
    return void 0;
  }
  var useGridScroll = (apiRef, props) => {
    const theme = useTheme5();
    const logger = useGridLogger(apiRef, "useGridScroll");
    const colRef = apiRef.current.columnHeadersElementRef;
    const virtualScrollerRef = apiRef.current.virtualScrollerRef;
    const visibleSortedRows = useGridSelector(apiRef, gridExpandedSortedRowEntriesSelector);
    const scrollToIndexes = React211.useCallback((params) => {
      const totalRowCount = gridRowCountSelector(apiRef);
      const visibleColumns = gridVisibleColumnDefinitionsSelector(apiRef);
      const scrollToHeader = params.rowIndex == null;
      if (!scrollToHeader && totalRowCount === 0 || visibleColumns.length === 0) {
        return false;
      }
      logger.debug(`Scrolling to cell at row ${params.rowIndex}, col: ${params.colIndex} `);
      let scrollCoordinates = {};
      if (params.colIndex != null) {
        const columnPositions = gridColumnPositionsSelector(apiRef);
        let cellWidth;
        if (typeof params.rowIndex !== "undefined") {
          var _visibleSortedRows$pa;
          const rowId = (_visibleSortedRows$pa = visibleSortedRows[params.rowIndex]) == null ? void 0 : _visibleSortedRows$pa.id;
          const cellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, params.colIndex);
          if (cellColSpanInfo && !cellColSpanInfo.spannedByColSpan) {
            cellWidth = cellColSpanInfo.cellProps.width;
          }
        }
        if (typeof cellWidth === "undefined") {
          cellWidth = visibleColumns[params.colIndex].computedWidth;
        }
        scrollCoordinates.left = scrollIntoView({
          clientHeight: virtualScrollerRef.current.clientWidth,
          scrollTop: Math.abs(virtualScrollerRef.current.scrollLeft),
          offsetHeight: cellWidth,
          offsetTop: columnPositions[params.colIndex]
        });
      }
      if (params.rowIndex != null) {
        var _querySelector, _querySelector2;
        const rowsMeta = gridRowsMetaSelector(apiRef.current.state);
        const page = gridPageSelector(apiRef);
        const pageSize2 = gridPageSizeSelector(apiRef);
        const elementIndex = !props.pagination ? params.rowIndex : params.rowIndex - page * pageSize2;
        const targetOffsetHeight = rowsMeta.positions[elementIndex + 1] ? rowsMeta.positions[elementIndex + 1] - rowsMeta.positions[elementIndex] : rowsMeta.currentPageTotalHeight - rowsMeta.positions[elementIndex];
        const topPinnedRowsHeight = ((_querySelector = virtualScrollerRef.current.querySelector(`.${gridClasses["pinnedRows--top"]}`)) == null ? void 0 : _querySelector.clientHeight) || 0;
        const bottomPinnedRowsHeight = ((_querySelector2 = virtualScrollerRef.current.querySelector(`.${gridClasses["pinnedRows--bottom"]}`)) == null ? void 0 : _querySelector2.clientHeight) || 0;
        scrollCoordinates.top = scrollIntoView({
          clientHeight: virtualScrollerRef.current.clientHeight - topPinnedRowsHeight - bottomPinnedRowsHeight,
          scrollTop: virtualScrollerRef.current.scrollTop,
          offsetHeight: targetOffsetHeight,
          offsetTop: rowsMeta.positions[elementIndex]
        });
      }
      scrollCoordinates = apiRef.current.unstable_applyPipeProcessors("scrollToIndexes", scrollCoordinates, params);
      if (typeof scrollCoordinates.left !== void 0 || typeof scrollCoordinates.top !== void 0) {
        apiRef.current.scroll(scrollCoordinates);
        return true;
      }
      return false;
    }, [logger, apiRef, virtualScrollerRef, props.pagination, visibleSortedRows]);
    const scroll = React211.useCallback((params) => {
      if (virtualScrollerRef.current && params.left != null && colRef.current) {
        const direction = theme.direction === "rtl" ? -1 : 1;
        colRef.current.scrollLeft = params.left;
        virtualScrollerRef.current.scrollLeft = direction * params.left;
        logger.debug(`Scrolling left: ${params.left}`);
      }
      if (virtualScrollerRef.current && params.top != null) {
        virtualScrollerRef.current.scrollTop = params.top;
        logger.debug(`Scrolling top: ${params.top}`);
      }
      logger.debug(`Scrolling, updating container, and viewport`);
    }, [virtualScrollerRef, theme.direction, colRef, logger]);
    const getScrollPosition = React211.useCallback(() => {
      if (!(virtualScrollerRef != null && virtualScrollerRef.current)) {
        return {
          top: 0,
          left: 0
        };
      }
      return {
        top: virtualScrollerRef.current.scrollTop,
        left: virtualScrollerRef.current.scrollLeft
      };
    }, [virtualScrollerRef]);
    const scrollApi = {
      scroll,
      scrollToIndexes,
      getScrollPosition
    };
    useGridApiMethod(apiRef, scrollApi, "public");
  };

  // node_modules/@mui/x-data-grid/hooks/features/events/useGridEvents.js
  function useGridEvents(apiRef, props) {
    useGridApiOptionHandler(apiRef, "columnHeaderClick", props.onColumnHeaderClick);
    useGridApiOptionHandler(apiRef, "columnHeaderDoubleClick", props.onColumnHeaderDoubleClick);
    useGridApiOptionHandler(apiRef, "columnHeaderOver", props.onColumnHeaderOver);
    useGridApiOptionHandler(apiRef, "columnHeaderOut", props.onColumnHeaderOut);
    useGridApiOptionHandler(apiRef, "columnHeaderEnter", props.onColumnHeaderEnter);
    useGridApiOptionHandler(apiRef, "columnHeaderLeave", props.onColumnHeaderLeave);
    useGridApiOptionHandler(apiRef, "cellClick", props.onCellClick);
    useGridApiOptionHandler(apiRef, "cellDoubleClick", props.onCellDoubleClick);
    useGridApiOptionHandler(apiRef, "cellKeyDown", props.onCellKeyDown);
    useGridApiOptionHandler(apiRef, "preferencePanelClose", props.onPreferencePanelClose);
    useGridApiOptionHandler(apiRef, "preferencePanelOpen", props.onPreferencePanelOpen);
    useGridApiOptionHandler(apiRef, "menuOpen", props.onMenuOpen);
    useGridApiOptionHandler(apiRef, "menuClose", props.onMenuClose);
    useGridApiOptionHandler(apiRef, "rowDoubleClick", props.onRowDoubleClick);
    useGridApiOptionHandler(apiRef, "rowClick", props.onRowClick);
    useGridApiOptionHandler(apiRef, "stateChange", props.onStateChange);
  }

  // node_modules/@mui/x-data-grid/hooks/features/dimensions/useGridDimensions.js
  var React212 = __toESM(require_react());
  var isTestEnvironment = false;
  var hasScroll = ({
    content,
    container,
    scrollBarSize
  }) => {
    const hasScrollXIfNoYScrollBar = content.width > container.width;
    const hasScrollYIfNoXScrollBar = content.height > container.height;
    let hasScrollX = false;
    let hasScrollY = false;
    if (hasScrollXIfNoYScrollBar || hasScrollYIfNoXScrollBar) {
      hasScrollX = hasScrollXIfNoYScrollBar;
      hasScrollY = content.height + (hasScrollX ? scrollBarSize : 0) > container.height;
      if (hasScrollY) {
        hasScrollX = content.width + scrollBarSize > container.width;
      }
    }
    return {
      hasScrollX,
      hasScrollY
    };
  };
  function useGridDimensions(apiRef, props) {
    const logger = useGridLogger(apiRef, "useResizeContainer");
    const errorShown = React212.useRef(false);
    const rootDimensionsRef = React212.useRef(null);
    const fullDimensionsRef = React212.useRef(null);
    const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);
    const densityFactor = useGridSelector(apiRef, gridDensityFactorSelector);
    const rowHeight = Math.floor(props.rowHeight * densityFactor);
    const totalHeaderHeight = getTotalHeaderHeight(apiRef, props.columnHeaderHeight);
    const updateGridDimensionsRef = React212.useCallback(() => {
      var _apiRef$current$rootE;
      const rootElement = (_apiRef$current$rootE = apiRef.current.rootElementRef) == null ? void 0 : _apiRef$current$rootE.current;
      const columnsTotalWidth = gridColumnsTotalWidthSelector(apiRef);
      const pinnedRowsHeight = calculatePinnedRowsHeight(apiRef);
      if (!rootDimensionsRef.current) {
        return;
      }
      let scrollBarSize;
      if (props.scrollbarSize != null) {
        scrollBarSize = props.scrollbarSize;
      } else if (!columnsTotalWidth || !rootElement) {
        scrollBarSize = 0;
      } else {
        const doc = ownerDocument(rootElement);
        const scrollDiv = doc.createElement("div");
        scrollDiv.style.width = "99px";
        scrollDiv.style.height = "99px";
        scrollDiv.style.position = "absolute";
        scrollDiv.style.overflow = "scroll";
        scrollDiv.className = "scrollDiv";
        rootElement.appendChild(scrollDiv);
        scrollBarSize = scrollDiv.offsetWidth - scrollDiv.clientWidth;
        rootElement.removeChild(scrollDiv);
      }
      let viewportOuterSize;
      let hasScrollX;
      let hasScrollY;
      if (props.autoHeight) {
        hasScrollY = false;
        hasScrollX = Math.round(columnsTotalWidth) > Math.round(rootDimensionsRef.current.width);
        viewportOuterSize = {
          width: rootDimensionsRef.current.width,
          height: rowsMeta.currentPageTotalHeight + (hasScrollX ? scrollBarSize : 0)
        };
      } else {
        viewportOuterSize = {
          width: rootDimensionsRef.current.width,
          height: Math.max(rootDimensionsRef.current.height - totalHeaderHeight, 0)
        };
        const scrollInformation = hasScroll({
          content: {
            width: Math.round(columnsTotalWidth),
            height: rowsMeta.currentPageTotalHeight
          },
          container: {
            width: Math.round(viewportOuterSize.width),
            height: viewportOuterSize.height - pinnedRowsHeight.top - pinnedRowsHeight.bottom
          },
          scrollBarSize
        });
        hasScrollY = scrollInformation.hasScrollY;
        hasScrollX = scrollInformation.hasScrollX;
      }
      const viewportInnerSize = {
        width: viewportOuterSize.width - (hasScrollY ? scrollBarSize : 0),
        height: viewportOuterSize.height - (hasScrollX ? scrollBarSize : 0)
      };
      const newFullDimensions = {
        viewportOuterSize,
        viewportInnerSize,
        hasScrollX,
        hasScrollY,
        scrollBarSize
      };
      const prevDimensions = fullDimensionsRef.current;
      fullDimensionsRef.current = newFullDimensions;
      if (newFullDimensions.viewportInnerSize.width !== (prevDimensions == null ? void 0 : prevDimensions.viewportInnerSize.width) || newFullDimensions.viewportInnerSize.height !== (prevDimensions == null ? void 0 : prevDimensions.viewportInnerSize.height)) {
        apiRef.current.publishEvent("viewportInnerSizeChange", newFullDimensions.viewportInnerSize);
      }
    }, [apiRef, props.scrollbarSize, props.autoHeight, rowsMeta.currentPageTotalHeight, totalHeaderHeight]);
    const [savedSize, setSavedSize] = React212.useState();
    const debouncedSetSavedSize = React212.useMemo(() => debounce(setSavedSize, 60), []);
    const previousSize = React212.useRef();
    useEnhancedEffect_default(() => {
      if (savedSize) {
        updateGridDimensionsRef();
        apiRef.current.publishEvent("debouncedResize", rootDimensionsRef.current);
      }
    }, [apiRef, savedSize, updateGridDimensionsRef]);
    const resize = React212.useCallback(() => {
      apiRef.current.computeSizeAndPublishResizeEvent();
    }, [apiRef]);
    const getRootDimensions = React212.useCallback(() => fullDimensionsRef.current, []);
    const getViewportPageSize = React212.useCallback(() => {
      const dimensions = apiRef.current.getRootDimensions();
      if (!dimensions) {
        return 0;
      }
      const currentPage = getVisibleRows(apiRef, {
        pagination: props.pagination,
        paginationMode: props.paginationMode
      });
      if (props.getRowHeight) {
        const renderContext = apiRef.current.getRenderContext();
        const viewportPageSize = renderContext.lastRowIndex - renderContext.firstRowIndex;
        return Math.min(viewportPageSize - 1, currentPage.rows.length);
      }
      const maximumPageSizeWithoutScrollBar = Math.floor(dimensions.viewportInnerSize.height / rowHeight);
      return Math.min(maximumPageSizeWithoutScrollBar, currentPage.rows.length);
    }, [apiRef, props.pagination, props.paginationMode, props.getRowHeight, rowHeight]);
    const computeSizeAndPublishResizeEvent = React212.useCallback(() => {
      var _apiRef$current$mainE, _previousSize$current, _previousSize$current2;
      const mainEl = (_apiRef$current$mainE = apiRef.current.mainElementRef) == null ? void 0 : _apiRef$current$mainE.current;
      if (!mainEl) {
        return;
      }
      const win = ownerWindow(mainEl);
      const computedStyle = win.getComputedStyle(mainEl);
      const height2 = parseFloat(computedStyle.height) || 0;
      const width2 = parseFloat(computedStyle.width) || 0;
      const hasHeightChanged = height2 !== ((_previousSize$current = previousSize.current) == null ? void 0 : _previousSize$current.height);
      const hasWidthChanged = width2 !== ((_previousSize$current2 = previousSize.current) == null ? void 0 : _previousSize$current2.width);
      if (!previousSize.current || hasHeightChanged || hasWidthChanged) {
        const size = {
          width: width2,
          height: height2
        };
        apiRef.current.publishEvent("resize", size);
        previousSize.current = size;
      }
    }, [apiRef]);
    const dimensionsApi = {
      resize,
      getRootDimensions
    };
    const dimensionsPrivateApi = {
      getViewportPageSize,
      updateGridDimensionsRef,
      computeSizeAndPublishResizeEvent
    };
    useGridApiMethod(apiRef, dimensionsApi, "public");
    useGridApiMethod(apiRef, dimensionsPrivateApi, "private");
    const isFirstSizing = React212.useRef(true);
    const handleResize = React212.useCallback((size) => {
      rootDimensionsRef.current = size;
      const isJSDOM = /jsdom/.test(window.navigator.userAgent);
      if (size.height === 0 && !errorShown.current && !props.autoHeight && !isJSDOM) {
        logger.error(["The parent DOM element of the data grid has an empty height.", "Please make sure that this element has an intrinsic height.", "The grid displays with a height of 0px.", "", "More details: https://mui.com/r/x-data-grid-no-dimensions."].join("\n"));
        errorShown.current = true;
      }
      if (size.width === 0 && !errorShown.current && !isJSDOM) {
        logger.error(["The parent DOM element of the data grid has an empty width.", "Please make sure that this element has an intrinsic width.", "The grid displays with a width of 0px.", "", "More details: https://mui.com/r/x-data-grid-no-dimensions."].join("\n"));
        errorShown.current = true;
      }
      if (isTestEnvironment) {
        setSavedSize(size);
        isFirstSizing.current = false;
        return;
      }
      if (isFirstSizing.current) {
        setSavedSize(size);
        isFirstSizing.current = false;
        return;
      }
      debouncedSetSavedSize(size);
    }, [props.autoHeight, debouncedSetSavedSize, logger]);
    useEnhancedEffect_default(() => updateGridDimensionsRef(), [updateGridDimensionsRef]);
    useGridApiOptionHandler(apiRef, "sortedRowsSet", updateGridDimensionsRef);
    useGridApiOptionHandler(apiRef, "paginationModelChange", updateGridDimensionsRef);
    useGridApiOptionHandler(apiRef, "columnsChange", updateGridDimensionsRef);
    useGridApiEventHandler(apiRef, "resize", handleResize);
    useGridApiOptionHandler(apiRef, "debouncedResize", props.onResize);
  }

  // node_modules/@mui/x-data-grid/hooks/features/rows/useGridRowsMeta.js
  init_extends();
  var React233 = __toESM(require_react());

  // node_modules/@mui/x-data-grid/DataGrid/useDataGridProps.js
  init_extends();
  var React232 = __toESM(require_react());

  // node_modules/@mui/x-data-grid/constants/defaultGridSlotsComponents.js
  init_extends();

  // node_modules/@mui/x-data-grid/components/GridColumnHeaders.js
  init_extends();
  var React218 = __toESM(require_react());
  var import_prop_types123 = __toESM(require_prop_types());

  // node_modules/@mui/x-data-grid/hooks/features/columnHeaders/useGridColumnHeaders.js
  init_extends();
  var React215 = __toESM(require_react());
  var ReactDOM4 = __toESM(require_react_dom());

  // node_modules/@mui/x-data-grid/hooks/features/virtualization/useGridVirtualScroller.js
  init_extends();
  var React213 = __toESM(require_react());
  var ReactDOM3 = __toESM(require_react_dom());
  var import_jsx_runtime184 = __toESM(require_jsx_runtime());
  var _excluded116 = ["style"];
  var _excluded219 = ["style"];
  function binarySearch(offset2, positions, sliceStart = 0, sliceEnd = positions.length) {
    if (positions.length <= 0) {
      return -1;
    }
    if (sliceStart >= sliceEnd) {
      return sliceStart;
    }
    const pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);
    const itemOffset = positions[pivot];
    return offset2 <= itemOffset ? binarySearch(offset2, positions, sliceStart, pivot) : binarySearch(offset2, positions, pivot + 1, sliceEnd);
  }
  function exponentialSearch(offset2, positions, index) {
    let interval = 1;
    while (index < positions.length && Math.abs(positions[index]) < offset2) {
      index += interval;
      interval *= 2;
    }
    return binarySearch(offset2, positions, Math.floor(index / 2), Math.min(index, positions.length));
  }
  var getRenderableIndexes = ({
    firstIndex,
    lastIndex,
    buffer,
    minFirstIndex,
    maxLastIndex
  }) => {
    return [clamp2(firstIndex - buffer, minFirstIndex, maxLastIndex), clamp2(lastIndex + buffer, minFirstIndex, maxLastIndex)];
  };
  var areRenderContextsEqual = (context1, context2) => {
    if (context1 === context2) {
      return true;
    }
    return context1.firstRowIndex === context2.firstRowIndex && context1.lastRowIndex === context2.lastRowIndex && context1.firstColumnIndex === context2.firstColumnIndex && context1.lastColumnIndex === context2.lastColumnIndex;
  };
  var MEMOIZE_OPTIONS = {
    maxSize: 3
  };
  var useGridVirtualScroller = (props) => {
    const apiRef = useGridPrivateApiContext();
    const rootProps = useGridRootProps();
    const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);
    const enabled = useGridSelector(apiRef, gridVirtualizationEnabledSelector);
    const enabledForColumns = useGridSelector(apiRef, gridVirtualizationColumnEnabledSelector);
    const {
      ref,
      onRenderZonePositioning,
      renderZoneMinColumnIndex = 0,
      renderZoneMaxColumnIndex = visibleColumns.length,
      getRowProps
    } = props;
    const theme = useTheme5();
    const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);
    const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);
    const cellFocus = useGridSelector(apiRef, gridFocusCellSelector);
    const cellTabIndex = useGridSelector(apiRef, gridTabIndexCellSelector);
    const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);
    const selectedRowsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);
    const currentPage = useGridVisibleRows(apiRef, rootProps);
    const renderZoneRef = React213.useRef(null);
    const rootRef = React213.useRef(null);
    const handleRef = useForkRef(ref, rootRef);
    const [renderContext, setRenderContextState] = React213.useState(null);
    const prevRenderContext = React213.useRef(renderContext);
    const scrollPosition = React213.useRef({
      top: 0,
      left: 0
    });
    const [containerDimensions, setContainerDimensions] = React213.useState({
      width: null,
      height: null
    });
    const prevTotalWidth = React213.useRef(columnsTotalWidth);
    const [hoveredRowId, setHoveredRowId] = React213.useState(null);
    const rowStyleCache = React213.useRef(/* @__PURE__ */ Object.create(null));
    const prevGetRowProps = React213.useRef();
    const prevRootRowStyle = React213.useRef();
    const getRenderedColumnsRef = React213.useRef(defaultMemoize((columns, firstColumnToRender, lastColumnToRender, minFirstColumn, maxLastColumn, indexOfColumnWithFocusedCell2) => {
      let focusedCellColumnIndexNotInRange;
      const renderedColumns = columns.slice(firstColumnToRender, lastColumnToRender);
      if (indexOfColumnWithFocusedCell2 > -1) {
        if (firstColumnToRender > indexOfColumnWithFocusedCell2 && indexOfColumnWithFocusedCell2 >= minFirstColumn) {
          focusedCellColumnIndexNotInRange = indexOfColumnWithFocusedCell2;
        } else if (lastColumnToRender < indexOfColumnWithFocusedCell2 && indexOfColumnWithFocusedCell2 < maxLastColumn) {
          focusedCellColumnIndexNotInRange = indexOfColumnWithFocusedCell2;
        }
      }
      return {
        focusedCellColumnIndexNotInRange,
        renderedColumns
      };
    }, MEMOIZE_OPTIONS));
    const indexOfColumnWithFocusedCell = React213.useMemo(() => {
      if (cellFocus !== null) {
        return visibleColumns.findIndex((column2) => column2.field === cellFocus.field);
      }
      return -1;
    }, [cellFocus, visibleColumns]);
    const computeRenderContext = React213.useCallback(() => {
      if (!enabled) {
        return {
          firstRowIndex: 0,
          lastRowIndex: currentPage.rows.length,
          firstColumnIndex: 0,
          lastColumnIndex: visibleColumns.length
        };
      }
      const {
        top: top2,
        left: left2
      } = scrollPosition.current;
      const firstRowIndex = Math.min(getNearestIndexToRender(apiRef, currentPage, rowsMeta, top2), rowsMeta.positions.length - 1);
      const lastRowIndex = rootProps.autoHeight ? firstRowIndex + currentPage.rows.length : getNearestIndexToRender(apiRef, currentPage, rowsMeta, top2 + containerDimensions.height);
      let firstColumnIndex = 0;
      let lastColumnIndex = columnPositions.length;
      if (enabledForColumns) {
        let hasRowWithAutoHeight = false;
        const [firstRowToRender, lastRowToRender] = getRenderableIndexes({
          firstIndex: firstRowIndex,
          lastIndex: lastRowIndex,
          minFirstIndex: 0,
          maxLastIndex: currentPage.rows.length,
          buffer: rootProps.rowBuffer
        });
        for (let i = firstRowToRender; i < lastRowToRender && !hasRowWithAutoHeight; i += 1) {
          const row = currentPage.rows[i];
          hasRowWithAutoHeight = apiRef.current.rowHasAutoHeight(row.id);
        }
        if (!hasRowWithAutoHeight) {
          firstColumnIndex = binarySearch(Math.abs(left2), columnPositions);
          lastColumnIndex = binarySearch(Math.abs(left2) + containerDimensions.width, columnPositions);
        }
      }
      return {
        firstRowIndex,
        lastRowIndex,
        firstColumnIndex,
        lastColumnIndex
      };
    }, [enabled, enabledForColumns, rowsMeta, rootProps.autoHeight, rootProps.rowBuffer, currentPage, columnPositions, visibleColumns.length, apiRef, containerDimensions]);
    useEnhancedEffect_default(() => {
      if (enabled) {
        rootRef.current.scrollLeft = 0;
        rootRef.current.scrollTop = 0;
      } else {
        renderZoneRef.current.style.transform = `translate3d(0px, 0px, 0px)`;
      }
    }, [enabled]);
    useEnhancedEffect_default(() => {
      setContainerDimensions({
        width: rootRef.current.clientWidth,
        height: rootRef.current.clientHeight
      });
    }, [rowsMeta.currentPageTotalHeight]);
    const handleResize = React213.useCallback(() => {
      if (rootRef.current) {
        setContainerDimensions({
          width: rootRef.current.clientWidth,
          height: rootRef.current.clientHeight
        });
      }
    }, []);
    useGridApiEventHandler(apiRef, "debouncedResize", handleResize);
    const updateRenderZonePosition = React213.useCallback((nextRenderContext) => {
      const [firstRowToRender, lastRowToRender] = getRenderableIndexes({
        firstIndex: nextRenderContext.firstRowIndex,
        lastIndex: nextRenderContext.lastRowIndex,
        minFirstIndex: 0,
        maxLastIndex: currentPage.rows.length,
        buffer: rootProps.rowBuffer
      });
      const [initialFirstColumnToRender] = getRenderableIndexes({
        firstIndex: nextRenderContext.firstColumnIndex,
        lastIndex: nextRenderContext.lastColumnIndex,
        minFirstIndex: renderZoneMinColumnIndex,
        maxLastIndex: renderZoneMaxColumnIndex,
        buffer: rootProps.columnBuffer
      });
      const firstColumnToRender = getFirstNonSpannedColumnToRender({
        firstColumnToRender: initialFirstColumnToRender,
        apiRef,
        firstRowToRender,
        lastRowToRender,
        visibleRows: currentPage.rows
      });
      const direction = theme.direction === "ltr" ? 1 : -1;
      const top2 = gridRowsMetaSelector(apiRef.current.state).positions[firstRowToRender];
      const left2 = direction * gridColumnPositionsSelector(apiRef)[firstColumnToRender];
      renderZoneRef.current.style.transform = `translate3d(${left2}px, ${top2}px, 0px)`;
      if (typeof onRenderZonePositioning === "function") {
        onRenderZonePositioning({
          top: top2,
          left: left2
        });
      }
    }, [apiRef, currentPage.rows, onRenderZonePositioning, renderZoneMinColumnIndex, renderZoneMaxColumnIndex, rootProps.columnBuffer, rootProps.rowBuffer, theme.direction]);
    const getRenderContext = React213.useCallback(() => prevRenderContext.current, []);
    const setRenderContext = React213.useCallback((nextRenderContext) => {
      if (prevRenderContext.current && areRenderContextsEqual(nextRenderContext, prevRenderContext.current)) {
        updateRenderZonePosition(nextRenderContext);
        return;
      }
      setRenderContextState(nextRenderContext);
      updateRenderZonePosition(nextRenderContext);
      const [firstRowToRender, lastRowToRender] = getRenderableIndexes({
        firstIndex: nextRenderContext.firstRowIndex,
        lastIndex: nextRenderContext.lastRowIndex,
        minFirstIndex: 0,
        maxLastIndex: currentPage.rows.length,
        buffer: rootProps.rowBuffer
      });
      apiRef.current.publishEvent("renderedRowsIntervalChange", {
        firstRowToRender,
        lastRowToRender
      });
      prevRenderContext.current = nextRenderContext;
    }, [apiRef, setRenderContextState, prevRenderContext, currentPage.rows.length, rootProps.rowBuffer, updateRenderZonePosition]);
    useEnhancedEffect_default(() => {
      if (containerDimensions.width == null) {
        return;
      }
      const initialRenderContext = computeRenderContext();
      setRenderContext(initialRenderContext);
      const {
        top: top2,
        left: left2
      } = scrollPosition.current;
      const params = {
        top: top2,
        left: left2,
        renderContext: initialRenderContext
      };
      apiRef.current.publishEvent("scrollPositionChange", params);
    }, [apiRef, computeRenderContext, containerDimensions.width, setRenderContext]);
    const handleScroll = useEventCallback_default((event) => {
      const {
        scrollTop,
        scrollLeft
      } = event.currentTarget;
      scrollPosition.current.top = scrollTop;
      scrollPosition.current.left = scrollLeft;
      if (!prevRenderContext.current || scrollTop < 0) {
        return;
      }
      if (theme.direction === "ltr") {
        if (scrollLeft < 0) {
          return;
        }
      }
      if (theme.direction === "rtl") {
        if (scrollLeft > 0) {
          return;
        }
      }
      const nextRenderContext = enabled ? computeRenderContext() : prevRenderContext.current;
      const topRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstRowIndex - prevRenderContext.current.firstRowIndex);
      const bottomRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastRowIndex - prevRenderContext.current.lastRowIndex);
      const topColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstColumnIndex - prevRenderContext.current.firstColumnIndex);
      const bottomColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastColumnIndex - prevRenderContext.current.lastColumnIndex);
      const shouldSetState = topRowsScrolledSincePreviousRender >= rootProps.rowThreshold || bottomRowsScrolledSincePreviousRender >= rootProps.rowThreshold || topColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || bottomColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || prevTotalWidth.current !== columnsTotalWidth;
      apiRef.current.publishEvent("scrollPositionChange", {
        top: scrollTop,
        left: scrollLeft,
        renderContext: shouldSetState ? nextRenderContext : prevRenderContext.current
      }, event);
      if (shouldSetState) {
        ReactDOM3.flushSync(() => {
          setRenderContext(nextRenderContext);
        });
        prevTotalWidth.current = columnsTotalWidth;
      }
    });
    const handleWheel = useEventCallback_default((event) => {
      apiRef.current.publishEvent("virtualScrollerWheel", {}, event);
    });
    const handleTouchMove = useEventCallback_default((event) => {
      apiRef.current.publishEvent("virtualScrollerTouchMove", {}, event);
    });
    const indexOfRowWithFocusedCell = React213.useMemo(() => {
      if (cellFocus !== null) {
        return currentPage.rows.findIndex((row) => row.id === cellFocus.id);
      }
      return -1;
    }, [cellFocus, currentPage.rows]);
    useGridApiEventHandler(apiRef, "rowMouseOver", (params, event) => {
      var _params$id;
      if (event.currentTarget.contains(event.relatedTarget)) {
        return;
      }
      setHoveredRowId((_params$id = params.id) != null ? _params$id : null);
    });
    useGridApiEventHandler(apiRef, "rowMouseOut", (params, event) => {
      if (event.currentTarget.contains(event.relatedTarget)) {
        return;
      }
      setHoveredRowId(null);
    });
    const getRows = (params = {
      renderContext
    }) => {
      var _rootProps$slotProps;
      const {
        onRowRender,
        renderContext: nextRenderContext,
        minFirstColumn = renderZoneMinColumnIndex,
        maxLastColumn = renderZoneMaxColumnIndex,
        availableSpace = containerDimensions.width,
        rowIndexOffset = 0,
        position: position2 = "center"
      } = params;
      if (!nextRenderContext || availableSpace == null) {
        return null;
      }
      const rowBuffer = enabled ? rootProps.rowBuffer : 0;
      const columnBuffer = enabled ? rootProps.columnBuffer : 0;
      const [firstRowToRender, lastRowToRender] = getRenderableIndexes({
        firstIndex: nextRenderContext.firstRowIndex,
        lastIndex: nextRenderContext.lastRowIndex,
        minFirstIndex: 0,
        maxLastIndex: currentPage.rows.length,
        buffer: rowBuffer
      });
      const renderedRows = [];
      if (params.rows) {
        params.rows.forEach((row) => {
          renderedRows.push(row);
          apiRef.current.calculateColSpan({
            rowId: row.id,
            minFirstColumn,
            maxLastColumn,
            columns: visibleColumns
          });
        });
      } else {
        if (!currentPage.range) {
          return null;
        }
        for (let i = firstRowToRender; i < lastRowToRender; i += 1) {
          const row = currentPage.rows[i];
          renderedRows.push(row);
          apiRef.current.calculateColSpan({
            rowId: row.id,
            minFirstColumn,
            maxLastColumn,
            columns: visibleColumns
          });
        }
      }
      let isRowWithFocusedCellNotInRange = false;
      if (indexOfRowWithFocusedCell > -1) {
        const rowWithFocusedCell = currentPage.rows[indexOfRowWithFocusedCell];
        if (firstRowToRender > indexOfRowWithFocusedCell || lastRowToRender < indexOfRowWithFocusedCell) {
          isRowWithFocusedCellNotInRange = true;
          if (indexOfRowWithFocusedCell > firstRowToRender) {
            renderedRows.push(rowWithFocusedCell);
          } else {
            renderedRows.unshift(rowWithFocusedCell);
          }
          apiRef.current.calculateColSpan({
            rowId: rowWithFocusedCell.id,
            minFirstColumn,
            maxLastColumn,
            columns: visibleColumns
          });
        }
      }
      const [initialFirstColumnToRender, lastColumnToRender] = getRenderableIndexes({
        firstIndex: nextRenderContext.firstColumnIndex,
        lastIndex: nextRenderContext.lastColumnIndex,
        minFirstIndex: minFirstColumn,
        maxLastIndex: maxLastColumn,
        buffer: columnBuffer
      });
      const firstColumnToRender = getFirstNonSpannedColumnToRender({
        firstColumnToRender: initialFirstColumnToRender,
        apiRef,
        firstRowToRender,
        lastRowToRender,
        visibleRows: currentPage.rows
      });
      let isColumnWihFocusedCellNotInRange = false;
      if (firstColumnToRender > indexOfColumnWithFocusedCell || lastColumnToRender < indexOfColumnWithFocusedCell) {
        isColumnWihFocusedCellNotInRange = true;
      }
      const {
        focusedCellColumnIndexNotInRange,
        renderedColumns
      } = getRenderedColumnsRef.current(visibleColumns, firstColumnToRender, lastColumnToRender, minFirstColumn, maxLastColumn, isColumnWihFocusedCellNotInRange ? indexOfColumnWithFocusedCell : -1);
      const _ref = ((_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.row) || {}, {
        style: rootRowStyle
      } = _ref, rootRowProps = _objectWithoutPropertiesLoose(_ref, _excluded116);
      const invalidatesCachedRowStyle = prevGetRowProps.current !== getRowProps || prevRootRowStyle.current !== rootRowStyle;
      if (invalidatesCachedRowStyle) {
        rowStyleCache.current = /* @__PURE__ */ Object.create(null);
      }
      const rows = [];
      let isRowWithFocusedCellRendered = false;
      for (let i = 0; i < renderedRows.length; i += 1) {
        var _currentPage$range;
        const {
          id,
          model
        } = renderedRows[i];
        const isRowNotVisible = isRowWithFocusedCellNotInRange && cellFocus.id === id;
        const lastVisibleRowIndex = isRowWithFocusedCellNotInRange ? firstRowToRender + i === currentPage.rows.length : firstRowToRender + i === currentPage.rows.length - 1;
        const baseRowHeight = !apiRef.current.rowHasAutoHeight(id) ? apiRef.current.unstable_getRowHeight(id) : "auto";
        let isSelected;
        if (selectedRowsLookup[id] == null) {
          isSelected = false;
        } else {
          isSelected = apiRef.current.isRowSelectable(id);
        }
        if (onRowRender) {
          onRowRender(id);
        }
        const focusedCell = cellFocus !== null && cellFocus.id === id ? cellFocus.field : null;
        const columnWithFocusedCellNotInRange = focusedCellColumnIndexNotInRange !== void 0 && visibleColumns[focusedCellColumnIndexNotInRange];
        const renderedColumnsWithFocusedCell = columnWithFocusedCellNotInRange && focusedCell ? [columnWithFocusedCellNotInRange, ...renderedColumns] : renderedColumns;
        let tabbableCell = null;
        if (cellTabIndex !== null && cellTabIndex.id === id) {
          const cellParams = apiRef.current.getCellParams(id, cellTabIndex.field);
          tabbableCell = cellParams.cellMode === "view" ? cellTabIndex.field : null;
        }
        const _ref2 = typeof getRowProps === "function" && getRowProps(id, model) || {}, {
          style: rowStyle
        } = _ref2, rowProps = _objectWithoutPropertiesLoose(_ref2, _excluded219);
        if (!rowStyleCache.current[id]) {
          const style4 = _extends({}, rowStyle, rootRowStyle);
          rowStyleCache.current[id] = style4;
        }
        let index = rowIndexOffset + ((currentPage == null || (_currentPage$range = currentPage.range) == null ? void 0 : _currentPage$range.firstRowIndex) || 0) + firstRowToRender + i;
        if (isRowWithFocusedCellNotInRange && (cellFocus == null ? void 0 : cellFocus.id) === id) {
          index = indexOfRowWithFocusedCell;
          isRowWithFocusedCellRendered = true;
        } else if (isRowWithFocusedCellRendered) {
          index -= 1;
        }
        rows.push(/* @__PURE__ */ (0, import_jsx_runtime184.jsx)(rootProps.slots.row, _extends({
          row: model,
          rowId: id,
          focusedCellColumnIndexNotInRange,
          isNotVisible: isRowNotVisible,
          rowHeight: baseRowHeight,
          focusedCell,
          tabbableCell,
          renderedColumns: renderedColumnsWithFocusedCell,
          visibleColumns,
          firstColumnToRender,
          lastColumnToRender,
          selected: isSelected,
          index,
          containerWidth: availableSpace,
          isLastVisible: lastVisibleRowIndex,
          position: position2
        }, rowProps, rootRowProps, {
          hovered: hoveredRowId === id,
          style: rowStyleCache.current[id]
        }), id));
      }
      prevGetRowProps.current = getRowProps;
      prevRootRowStyle.current = rootRowStyle;
      return rows;
    };
    const needsHorizontalScrollbar = containerDimensions.width && columnsTotalWidth >= containerDimensions.width;
    const contentSize = React213.useMemo(() => {
      const height2 = Math.max(rowsMeta.currentPageTotalHeight, 1);
      let shouldExtendContent = false;
      if (rootRef != null && rootRef.current && height2 <= (rootRef == null ? void 0 : rootRef.current.clientHeight)) {
        shouldExtendContent = true;
      }
      const size = {
        width: needsHorizontalScrollbar ? columnsTotalWidth : "auto",
        height: height2,
        minHeight: shouldExtendContent ? "100%" : "auto"
      };
      if (rootProps.autoHeight && currentPage.rows.length === 0) {
        size.height = getMinimalContentHeight(apiRef, rootProps.rowHeight);
      }
      return size;
    }, [apiRef, rootRef, columnsTotalWidth, rowsMeta.currentPageTotalHeight, needsHorizontalScrollbar, rootProps.autoHeight, rootProps.rowHeight, currentPage.rows.length]);
    React213.useEffect(() => {
      apiRef.current.publishEvent("virtualScrollerContentSizeChange");
    }, [apiRef, contentSize]);
    const rootStyle = React213.useMemo(() => {
      const style4 = {};
      if (!needsHorizontalScrollbar) {
        style4.overflowX = "hidden";
      }
      if (rootProps.autoHeight) {
        style4.overflowY = "hidden";
      }
      return style4;
    }, [needsHorizontalScrollbar, rootProps.autoHeight]);
    apiRef.current.register("private", {
      getRenderContext
    });
    return {
      renderContext,
      updateRenderZonePosition,
      getRows,
      getRootProps: (inputProps = {}) => _extends({
        ref: handleRef,
        onScroll: handleScroll,
        onWheel: handleWheel,
        onTouchMove: handleTouchMove
      }, inputProps, {
        style: inputProps.style ? _extends({}, inputProps.style, rootStyle) : rootStyle,
        role: "presentation"
      }),
      getContentProps: ({
        style: style4
      } = {}) => ({
        style: style4 ? _extends({}, style4, contentSize) : contentSize,
        role: "presentation"
      }),
      getRenderZoneProps: () => ({
        ref: renderZoneRef,
        role: "rowgroup"
      })
    };
  };
  function getNearestIndexToRender(apiRef, currentPage, rowsMeta, offset2) {
    var _currentPage$range2, _currentPage$range3;
    const lastMeasuredIndexRelativeToAllRows = apiRef.current.getLastMeasuredRowIndex();
    let allRowsMeasured = lastMeasuredIndexRelativeToAllRows === Infinity;
    if ((_currentPage$range2 = currentPage.range) != null && _currentPage$range2.lastRowIndex && !allRowsMeasured) {
      allRowsMeasured = lastMeasuredIndexRelativeToAllRows >= currentPage.range.lastRowIndex;
    }
    const lastMeasuredIndexRelativeToCurrentPage = clamp2(lastMeasuredIndexRelativeToAllRows - (((_currentPage$range3 = currentPage.range) == null ? void 0 : _currentPage$range3.firstRowIndex) || 0), 0, rowsMeta.positions.length);
    if (allRowsMeasured || rowsMeta.positions[lastMeasuredIndexRelativeToCurrentPage] >= offset2) {
      return binarySearch(offset2, rowsMeta.positions);
    }
    return exponentialSearch(offset2, rowsMeta.positions, lastMeasuredIndexRelativeToCurrentPage);
  }

  // node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnGroupHeader.js
  init_extends();
  var React214 = __toESM(require_react());
  var import_jsx_runtime185 = __toESM(require_jsx_runtime());
  var useUtilityClasses73 = (ownerState) => {
    const {
      classes,
      headerAlign,
      isDragging,
      showColumnBorder,
      groupId
    } = ownerState;
    const slots = {
      root: ["columnHeader", headerAlign === "left" && "columnHeader--alignLeft", headerAlign === "center" && "columnHeader--alignCenter", headerAlign === "right" && "columnHeader--alignRight", isDragging && "columnHeader--moving", showColumnBorder && "columnHeader--showColumnBorder", showColumnBorder && "columnHeader--withRightBorder", "withBorderColor", groupId === null ? "columnHeader--emptyGroup" : "columnHeader--filledGroup"],
      draggableContainer: ["columnHeaderDraggableContainer"],
      titleContainer: ["columnHeaderTitleContainer", "withBorderColor"],
      titleContainerContent: ["columnHeaderTitleContainerContent"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  function GridColumnGroupHeader(props) {
    var _columnGroupsLookup$g;
    const {
      groupId,
      width: width2,
      depth,
      maxDepth,
      fields,
      height: height2,
      colIndex,
      hasFocus,
      tabIndex,
      isLastColumn
    } = props;
    const rootProps = useGridRootProps();
    const headerCellRef = React214.useRef(null);
    const apiRef = useGridApiContext();
    const columnGroupsLookup = useGridSelector(apiRef, gridColumnGroupsLookupSelector);
    const group = groupId ? columnGroupsLookup[groupId] : {};
    const {
      headerName = groupId != null ? groupId : "",
      description = "",
      headerAlign = void 0
    } = group;
    let headerComponent;
    const render = groupId && ((_columnGroupsLookup$g = columnGroupsLookup[groupId]) == null ? void 0 : _columnGroupsLookup$g.renderHeaderGroup);
    const renderParams = React214.useMemo(() => ({
      groupId,
      headerName,
      description,
      depth,
      maxDepth,
      fields,
      colIndex,
      isLastColumn
    }), [groupId, headerName, description, depth, maxDepth, fields, colIndex, isLastColumn]);
    if (groupId && render) {
      headerComponent = render(renderParams);
    }
    const showColumnBorder = rootProps.showColumnVerticalBorder;
    const ownerState = _extends({}, props, {
      classes: rootProps.classes,
      showColumnBorder,
      headerAlign,
      depth,
      isDragging: false
    });
    const label = headerName != null ? headerName : groupId;
    const id = useId();
    const elementId = groupId === null ? `empty-group-cell-${id}` : groupId;
    const classes = useUtilityClasses73(ownerState);
    React214.useLayoutEffect(() => {
      if (hasFocus) {
        const focusableElement = headerCellRef.current.querySelector('[tabindex="0"]');
        const elementToFocus = focusableElement || headerCellRef.current;
        elementToFocus == null || elementToFocus.focus();
      }
    }, [apiRef, hasFocus]);
    const publish = React214.useCallback(
      (eventName) => (event) => {
        if (isEventTargetInPortal(event)) {
          return;
        }
        apiRef.current.publishEvent(eventName, renderParams, event);
      },
      // For now this is stupid, because renderParams change all the time.
      // Need to move it's computation in the api, such that for a given depth+columnField, I can get the group parameters
      [apiRef, renderParams]
    );
    const mouseEventsHandlers = React214.useMemo(() => ({
      onKeyDown: publish("columnGroupHeaderKeyDown"),
      onFocus: publish("columnGroupHeaderFocus"),
      onBlur: publish("columnGroupHeaderBlur")
    }), [publish]);
    const headerClassName = typeof group.headerClassName === "function" ? group.headerClassName(renderParams) : group.headerClassName;
    return /* @__PURE__ */ (0, import_jsx_runtime185.jsx)(GridGenericColumnHeaderItem, _extends({
      ref: headerCellRef,
      classes,
      columnMenuOpen: false,
      colIndex,
      height: height2,
      isResizing: false,
      sortDirection: null,
      hasFocus: false,
      tabIndex,
      isDraggable: false,
      headerComponent,
      headerClassName,
      description,
      elementId,
      width: width2,
      columnMenuIconButton: null,
      columnTitleIconButtons: null,
      resizable: false,
      label,
      "aria-colspan": fields.length,
      "data-fields": `|-${fields.join("-|-")}-|`
    }, mouseEventsHandlers));
  }

  // node_modules/@mui/x-data-grid/hooks/features/columnHeaders/useGridColumnHeaders.js
  var import_jsx_runtime186 = __toESM(require_jsx_runtime());
  var GridColumnHeaderRow = styled_default2("div", {
    name: "MuiDataGrid",
    slot: "ColumnHeaderRow",
    overridesResolver: (props, styles4) => styles4.columnHeaderRow
  })(() => ({
    display: "flex"
  }));
  function isUIEvent(event) {
    return !!event.target;
  }
  var useGridColumnHeaders = (props) => {
    const {
      innerRef: innerRefProp,
      minColumnIndex = 0,
      visibleColumns,
      sortColumnLookup,
      filterColumnLookup,
      columnPositions,
      columnHeaderTabIndexState,
      columnGroupHeaderTabIndexState,
      columnHeaderFocus,
      columnGroupHeaderFocus,
      densityFactor,
      headerGroupingMaxDepth,
      columnMenuState,
      columnVisibility,
      columnGroupsHeaderStructure,
      hasOtherElementInTabSequence
    } = props;
    const theme = useTheme5();
    const [dragCol, setDragCol] = React215.useState("");
    const [resizeCol, setResizeCol] = React215.useState("");
    const apiRef = useGridPrivateApiContext();
    const hasVirtualization = useGridSelector(apiRef, gridVirtualizationColumnEnabledSelector);
    const rootProps = useGridRootProps();
    const innerRef = React215.useRef(null);
    const handleInnerRef = useForkRef(innerRefProp, innerRef);
    const [renderContext, setRenderContextRaw] = React215.useState(null);
    const prevRenderContext = React215.useRef(renderContext);
    const prevScrollLeft = React215.useRef(0);
    const currentPage = useGridVisibleRows(apiRef, rootProps);
    const totalHeaderHeight = getTotalHeaderHeight(apiRef, rootProps.columnHeaderHeight);
    const headerHeight = Math.floor(rootProps.columnHeaderHeight * densityFactor);
    const setRenderContext = React215.useCallback((nextRenderContext) => {
      if (renderContext && nextRenderContext && areRenderContextsEqual(renderContext, nextRenderContext)) {
        return;
      }
      setRenderContextRaw(nextRenderContext);
    }, [renderContext]);
    React215.useEffect(() => {
      var _apiRef$current$colum;
      if ((_apiRef$current$colum = apiRef.current.columnHeadersContainerElementRef) != null && _apiRef$current$colum.current) {
        apiRef.current.columnHeadersContainerElementRef.current.scrollLeft = 0;
      }
    }, [apiRef]);
    const getFirstColumnIndexToRenderRef = React215.useRef(defaultMemoize(getFirstColumnIndexToRender, {
      equalityCheck: (a, b) => ["firstColumnIndex", "minColumnIndex", "columnBuffer"].every((key) => a[key] === b[key])
    }));
    const updateInnerPosition = React215.useCallback((nextRenderContext) => {
      const [firstRowToRender, lastRowToRender] = getRenderableIndexes({
        firstIndex: nextRenderContext.firstRowIndex,
        lastIndex: nextRenderContext.lastRowIndex,
        minFirstIndex: 0,
        maxLastIndex: currentPage.rows.length,
        buffer: rootProps.rowBuffer
      });
      const firstColumnToRender = getFirstColumnIndexToRenderRef.current({
        firstColumnIndex: nextRenderContext.firstColumnIndex,
        minColumnIndex,
        columnBuffer: rootProps.columnBuffer,
        firstRowToRender,
        lastRowToRender,
        apiRef,
        visibleRows: currentPage.rows
      });
      const direction = theme.direction === "ltr" ? 1 : -1;
      const offset2 = firstColumnToRender > 0 ? prevScrollLeft.current - direction * columnPositions[firstColumnToRender] : prevScrollLeft.current;
      innerRef.current.style.transform = `translate3d(${-offset2}px, 0px, 0px)`;
    }, [columnPositions, minColumnIndex, rootProps.columnBuffer, apiRef, currentPage.rows, rootProps.rowBuffer, theme.direction]);
    React215.useLayoutEffect(() => {
      if (renderContext) {
        updateInnerPosition(renderContext);
      }
    }, [renderContext, updateInnerPosition]);
    const handleScroll = React215.useCallback(({
      left: left2,
      renderContext: nextRenderContext = null
    }, event) => {
      var _prevRenderContext$cu, _prevRenderContext$cu2;
      if (!innerRef.current) {
        return;
      }
      if (prevScrollLeft.current === left2 && ((_prevRenderContext$cu = prevRenderContext.current) == null ? void 0 : _prevRenderContext$cu.firstColumnIndex) === (nextRenderContext == null ? void 0 : nextRenderContext.firstColumnIndex) && ((_prevRenderContext$cu2 = prevRenderContext.current) == null ? void 0 : _prevRenderContext$cu2.lastColumnIndex) === (nextRenderContext == null ? void 0 : nextRenderContext.lastColumnIndex)) {
        return;
      }
      prevScrollLeft.current = left2;
      let canUpdateInnerPosition = false;
      if (nextRenderContext !== prevRenderContext.current || !prevRenderContext.current) {
        if (isUIEvent(event)) {
          ReactDOM4.flushSync(() => {
            setRenderContext(nextRenderContext);
          });
          canUpdateInnerPosition = true;
        } else {
          setRenderContext(nextRenderContext);
        }
        prevRenderContext.current = nextRenderContext;
      } else {
        canUpdateInnerPosition = true;
      }
      if (nextRenderContext && canUpdateInnerPosition) {
        updateInnerPosition(nextRenderContext);
      }
    }, [updateInnerPosition, setRenderContext]);
    const handleColumnResizeStart = React215.useCallback((params) => setResizeCol(params.field), []);
    const handleColumnResizeStop = React215.useCallback(() => setResizeCol(""), []);
    const handleColumnReorderStart = React215.useCallback((params) => setDragCol(params.field), []);
    const handleColumnReorderStop = React215.useCallback(() => setDragCol(""), []);
    useGridApiEventHandler(apiRef, "columnResizeStart", handleColumnResizeStart);
    useGridApiEventHandler(apiRef, "columnResizeStop", handleColumnResizeStop);
    useGridApiEventHandler(apiRef, "columnHeaderDragStart", handleColumnReorderStart);
    useGridApiEventHandler(apiRef, "columnHeaderDragEnd", handleColumnReorderStop);
    useGridApiEventHandler(apiRef, "scrollPositionChange", handleScroll);
    const getColumnsToRender = (params) => {
      const {
        renderContext: nextRenderContext = renderContext,
        minFirstColumn = minColumnIndex,
        maxLastColumn = visibleColumns.length
      } = params || {};
      if (!nextRenderContext) {
        return null;
      }
      const [firstRowToRender, lastRowToRender] = getRenderableIndexes({
        firstIndex: nextRenderContext.firstRowIndex,
        lastIndex: nextRenderContext.lastRowIndex,
        minFirstIndex: 0,
        maxLastIndex: currentPage.rows.length,
        buffer: rootProps.rowBuffer
      });
      const firstColumnToRender = !hasVirtualization ? 0 : getFirstColumnIndexToRenderRef.current({
        firstColumnIndex: nextRenderContext.firstColumnIndex,
        minColumnIndex: minFirstColumn,
        columnBuffer: rootProps.columnBuffer,
        apiRef,
        firstRowToRender,
        lastRowToRender,
        visibleRows: currentPage.rows
      });
      const lastColumnToRender = !hasVirtualization ? maxLastColumn : Math.min(nextRenderContext.lastColumnIndex + rootProps.columnBuffer, maxLastColumn);
      const renderedColumns = visibleColumns.slice(firstColumnToRender, lastColumnToRender);
      return {
        renderedColumns,
        firstColumnToRender,
        lastColumnToRender,
        minFirstColumn,
        maxLastColumn
      };
    };
    const getColumnHeaders = (params, other = {}) => {
      const columnsToRender = getColumnsToRender(params);
      if (columnsToRender == null) {
        return null;
      }
      const {
        renderedColumns,
        firstColumnToRender
      } = columnsToRender;
      const columns = [];
      for (let i = 0; i < renderedColumns.length; i += 1) {
        const colDef = renderedColumns[i];
        const columnIndex = firstColumnToRender + i;
        const isFirstColumn = columnIndex === 0;
        const tabIndex = columnHeaderTabIndexState !== null && columnHeaderTabIndexState.field === colDef.field || isFirstColumn && !hasOtherElementInTabSequence ? 0 : -1;
        const hasFocus = columnHeaderFocus !== null && columnHeaderFocus.field === colDef.field;
        const open = columnMenuState.open && columnMenuState.field === colDef.field;
        columns.push(/* @__PURE__ */ (0, import_jsx_runtime186.jsx)(GridColumnHeaderItem, _extends({}, sortColumnLookup[colDef.field], {
          columnMenuOpen: open,
          filterItemsCounter: filterColumnLookup[colDef.field] && filterColumnLookup[colDef.field].length,
          headerHeight,
          isDragging: colDef.field === dragCol,
          colDef,
          colIndex: columnIndex,
          isResizing: resizeCol === colDef.field,
          hasFocus,
          tabIndex
        }, other), colDef.field));
      }
      return /* @__PURE__ */ (0, import_jsx_runtime186.jsx)(GridColumnHeaderRow, {
        role: "row",
        "aria-rowindex": headerGroupingMaxDepth + 1,
        ownerState: rootProps,
        children: columns
      });
    };
    const getColumnGroupHeaders = (params) => {
      if (headerGroupingMaxDepth === 0) {
        return null;
      }
      const columnsToRender = getColumnsToRender(params);
      if (columnsToRender == null || columnsToRender.renderedColumns.length === 0) {
        return null;
      }
      const {
        firstColumnToRender,
        lastColumnToRender
      } = columnsToRender;
      const columns = [];
      const headerToRender = [];
      for (let depth = 0; depth < headerGroupingMaxDepth; depth += 1) {
        var _apiRef$current$unsta, _apiRef$current$unsta2;
        const rowStructure = columnGroupsHeaderStructure[depth];
        const firstColumnFieldToRender = visibleColumns[firstColumnToRender].field;
        const firstGroupToRender = (_apiRef$current$unsta = apiRef.current.unstable_getColumnGroupPath(firstColumnFieldToRender)[depth]) != null ? _apiRef$current$unsta : null;
        const firstGroupIndex = rowStructure.findIndex(({
          groupId,
          columnFields
        }) => groupId === firstGroupToRender && columnFields.includes(firstColumnFieldToRender));
        const lastColumnFieldToRender = visibleColumns[lastColumnToRender - 1].field;
        const lastGroupToRender = (_apiRef$current$unsta2 = apiRef.current.unstable_getColumnGroupPath(lastColumnFieldToRender)[depth]) != null ? _apiRef$current$unsta2 : null;
        const lastGroupIndex = rowStructure.findIndex(({
          groupId,
          columnFields
        }) => groupId === lastGroupToRender && columnFields.includes(lastColumnFieldToRender));
        const visibleColumnGroupHeader = rowStructure.slice(firstGroupIndex, lastGroupIndex + 1).map((groupStructure) => {
          return _extends({}, groupStructure, {
            columnFields: groupStructure.columnFields.filter((field) => columnVisibility[field] !== false)
          });
        }).filter((groupStructure) => groupStructure.columnFields.length > 0);
        const firstVisibleColumnIndex = visibleColumnGroupHeader[0].columnFields.indexOf(firstColumnFieldToRender);
        const hiddenGroupColumns = visibleColumnGroupHeader[0].columnFields.slice(0, firstVisibleColumnIndex);
        const leftOverflow = hiddenGroupColumns.reduce((acc, field) => {
          var _column$computedWidth;
          const column2 = apiRef.current.getColumn(field);
          return acc + ((_column$computedWidth = column2.computedWidth) != null ? _column$computedWidth : 0);
        }, 0);
        let columnIndex = firstColumnToRender;
        const elements = visibleColumnGroupHeader.map(({
          groupId,
          columnFields
        }) => {
          const hasFocus = columnGroupHeaderFocus !== null && columnGroupHeaderFocus.depth === depth && columnFields.includes(columnGroupHeaderFocus.field);
          const tabIndex = columnGroupHeaderTabIndexState !== null && columnGroupHeaderTabIndexState.depth === depth && columnFields.includes(columnGroupHeaderTabIndexState.field) ? 0 : -1;
          const headerInfo = {
            groupId,
            width: columnFields.reduce((acc, field) => acc + apiRef.current.getColumn(field).computedWidth, 0),
            fields: columnFields,
            colIndex: columnIndex,
            hasFocus,
            tabIndex
          };
          columnIndex += columnFields.length;
          return headerInfo;
        });
        headerToRender.push({
          leftOverflow,
          elements
        });
      }
      headerToRender.forEach((depthInfo, depthIndex) => {
        columns.push(/* @__PURE__ */ (0, import_jsx_runtime186.jsx)(GridColumnHeaderRow, {
          style: {
            height: `${headerHeight}px`,
            transform: `translateX(-${depthInfo.leftOverflow}px)`
          },
          role: "row",
          "aria-rowindex": depthIndex + 1,
          ownerState: rootProps,
          children: depthInfo.elements.map(({
            groupId,
            width: width2,
            fields,
            colIndex,
            hasFocus,
            tabIndex
          }, groupIndex) => {
            return /* @__PURE__ */ (0, import_jsx_runtime186.jsx)(GridColumnGroupHeader, {
              groupId,
              width: width2,
              fields,
              colIndex,
              depth: depthIndex,
              isLastColumn: colIndex === visibleColumns.length - fields.length,
              maxDepth: headerToRender.length,
              height: headerHeight,
              hasFocus,
              tabIndex
            }, groupIndex);
          })
        }, depthIndex));
      });
      return columns;
    };
    const rootStyle = {
      minHeight: totalHeaderHeight,
      maxHeight: totalHeaderHeight,
      lineHeight: `${headerHeight}px`
    };
    return {
      renderContext,
      getColumnHeaders,
      getColumnsToRender,
      getColumnGroupHeaders,
      isDragging: !!dragCol,
      getRootProps: (other = {}) => _extends({
        style: rootStyle
      }, other),
      getInnerProps: () => ({
        ref: handleInnerRef,
        role: "rowgroup"
      }),
      headerHeight
    };
  };

  // node_modules/@mui/x-data-grid/components/columnHeaders/GridBaseColumnHeaders.js
  init_extends();
  var React216 = __toESM(require_react());
  var import_jsx_runtime187 = __toESM(require_jsx_runtime());
  var _excluded117 = ["className"];
  var useUtilityClasses74 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["columnHeaders", "withBorderColor"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridColumnHeadersRoot = styled_default("div", {
    name: "MuiDataGrid",
    slot: "ColumnHeaders",
    overridesResolver: (props, styles4) => styles4.columnHeaders
  })({
    position: "relative",
    overflow: "hidden",
    display: "flex",
    alignItems: "center",
    boxSizing: "border-box",
    borderBottom: "1px solid",
    borderTopLeftRadius: "var(--unstable_DataGrid-radius)",
    borderTopRightRadius: "var(--unstable_DataGrid-radius)"
  });
  var GridBaseColumnHeaders = /* @__PURE__ */ React216.forwardRef(function GridColumnHeaders(props, ref) {
    const {
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded117);
    const rootProps = useGridRootProps();
    const classes = useUtilityClasses74(rootProps);
    return /* @__PURE__ */ (0, import_jsx_runtime187.jsx)(GridColumnHeadersRoot, _extends({
      ref,
      className: clsx_default(className, classes.root),
      ownerState: rootProps
    }, other, {
      role: "presentation"
    }));
  });

  // node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeadersInner.js
  init_extends();
  var React217 = __toESM(require_react());
  var import_jsx_runtime188 = __toESM(require_jsx_runtime());
  var _excluded118 = ["isDragging", "className"];
  var useUtilityClasses75 = (ownerState) => {
    const {
      isDragging,
      hasScrollX,
      classes
    } = ownerState;
    const slots = {
      root: ["columnHeadersInner", isDragging && "columnHeaderDropZone", hasScrollX && "columnHeadersInner--scrollable"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var GridColumnHeadersInnerRoot = styled_default("div", {
    name: "MuiDataGrid",
    slot: "columnHeadersInner",
    overridesResolver: (props, styles4) => [{
      [`&.${gridClasses.columnHeaderDropZone}`]: styles4.columnHeaderDropZone
    }, styles4.columnHeadersInner]
  })(() => ({
    display: "flex",
    alignItems: "flex-start",
    flexDirection: "column",
    [`&.${gridClasses.columnHeaderDropZone} .${gridClasses.columnHeaderDraggableContainer}`]: {
      cursor: "move"
    },
    [`&.${gridClasses["columnHeadersInner--scrollable"]} .${gridClasses.columnHeader}:last-child`]: {
      borderRight: "none"
    }
  }));
  var GridColumnHeadersInner = /* @__PURE__ */ React217.forwardRef(function GridColumnHeadersInner2(props, ref) {
    var _apiRef$current$getRo, _apiRef$current$getRo2;
    const {
      isDragging,
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded118);
    const apiRef = useGridApiContext();
    const rootProps = useGridRootProps();
    const ownerState = _extends({}, rootProps, {
      isDragging,
      hasScrollX: (_apiRef$current$getRo = (_apiRef$current$getRo2 = apiRef.current.getRootDimensions()) == null ? void 0 : _apiRef$current$getRo2.hasScrollX) != null ? _apiRef$current$getRo : false
    });
    const classes = useUtilityClasses75(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(GridColumnHeadersInnerRoot, _extends({
      ref,
      className: clsx_default(className, classes.root),
      ownerState
    }, other));
  });

  // node_modules/@mui/x-data-grid/components/GridColumnHeaders.js
  var import_jsx_runtime189 = __toESM(require_jsx_runtime());
  var import_jsx_runtime190 = __toESM(require_jsx_runtime());
  var _excluded119 = ["innerRef", "className", "visibleColumns", "sortColumnLookup", "filterColumnLookup", "columnPositions", "columnHeaderTabIndexState", "columnGroupHeaderTabIndexState", "columnHeaderFocus", "columnGroupHeaderFocus", "densityFactor", "headerGroupingMaxDepth", "columnMenuState", "columnVisibility", "columnGroupsHeaderStructure", "hasOtherElementInTabSequence"];
  var GridColumnHeaders2 = /* @__PURE__ */ React218.forwardRef(function GridColumnsHeaders(props, ref) {
    const {
      innerRef,
      visibleColumns,
      sortColumnLookup,
      filterColumnLookup,
      columnPositions,
      columnHeaderTabIndexState,
      columnGroupHeaderTabIndexState,
      columnHeaderFocus,
      columnGroupHeaderFocus,
      densityFactor,
      headerGroupingMaxDepth,
      columnMenuState,
      columnVisibility,
      columnGroupsHeaderStructure,
      hasOtherElementInTabSequence
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded119);
    const {
      isDragging,
      getRootProps,
      getInnerProps,
      getColumnHeaders,
      getColumnGroupHeaders
    } = useGridColumnHeaders({
      innerRef,
      visibleColumns,
      sortColumnLookup,
      filterColumnLookup,
      columnPositions,
      columnHeaderTabIndexState,
      columnGroupHeaderTabIndexState,
      columnHeaderFocus,
      columnGroupHeaderFocus,
      densityFactor,
      headerGroupingMaxDepth,
      columnMenuState,
      columnVisibility,
      columnGroupsHeaderStructure,
      hasOtherElementInTabSequence
    });
    return /* @__PURE__ */ (0, import_jsx_runtime190.jsx)(GridBaseColumnHeaders, _extends({
      ref
    }, getRootProps(other), {
      children: /* @__PURE__ */ (0, import_jsx_runtime189.jsxs)(GridColumnHeadersInner, _extends({
        isDragging
      }, getInnerProps(), {
        children: [getColumnGroupHeaders(), getColumnHeaders()]
      }))
    }));
  });
  true ? GridColumnHeaders2.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    columnGroupHeaderFocus: import_prop_types123.default.shape({
      depth: import_prop_types123.default.number.isRequired,
      field: import_prop_types123.default.string.isRequired
    }),
    columnGroupHeaderTabIndexState: import_prop_types123.default.shape({
      depth: import_prop_types123.default.number.isRequired,
      field: import_prop_types123.default.string.isRequired
    }),
    columnGroupsHeaderStructure: import_prop_types123.default.arrayOf(import_prop_types123.default.arrayOf(import_prop_types123.default.shape({
      columnFields: import_prop_types123.default.arrayOf(import_prop_types123.default.string).isRequired,
      groupId: import_prop_types123.default.string
    }))).isRequired,
    columnHeaderFocus: import_prop_types123.default.shape({
      field: import_prop_types123.default.string.isRequired
    }),
    columnHeaderTabIndexState: import_prop_types123.default.shape({
      field: import_prop_types123.default.string.isRequired
    }),
    columnMenuState: import_prop_types123.default.shape({
      field: import_prop_types123.default.string,
      open: import_prop_types123.default.bool.isRequired
    }).isRequired,
    columnPositions: import_prop_types123.default.arrayOf(import_prop_types123.default.number).isRequired,
    columnVisibility: import_prop_types123.default.object.isRequired,
    densityFactor: import_prop_types123.default.number.isRequired,
    filterColumnLookup: import_prop_types123.default.object.isRequired,
    hasOtherElementInTabSequence: import_prop_types123.default.bool.isRequired,
    headerGroupingMaxDepth: import_prop_types123.default.number.isRequired,
    innerRef: refType_default,
    minColumnIndex: import_prop_types123.default.number,
    sortColumnLookup: import_prop_types123.default.object.isRequired,
    visibleColumns: import_prop_types123.default.arrayOf(import_prop_types123.default.object).isRequired
  } : void 0;
  var MemoizedGridColumnHeaders = fastMemo(GridColumnHeaders2);

  // node_modules/@mui/x-data-grid/components/GridNoResultsOverlay.js
  init_extends();
  var React219 = __toESM(require_react());
  var import_jsx_runtime191 = __toESM(require_jsx_runtime());
  var GridNoResultsOverlay = /* @__PURE__ */ React219.forwardRef(function GridNoResultsOverlay2(props, ref) {
    const apiRef = useGridApiContext();
    const noResultsOverlayLabel = apiRef.current.getLocaleText("noResultsOverlayLabel");
    return /* @__PURE__ */ (0, import_jsx_runtime191.jsx)(GridOverlay, _extends({
      ref
    }, props, {
      children: noResultsOverlayLabel
    }));
  });

  // node_modules/@mui/x-data-grid/material/index.js
  init_extends();

  // node_modules/@mui/material/Checkbox/Checkbox.js
  init_extends();
  var React223 = __toESM(require_react());
  var import_prop_types124 = __toESM(require_prop_types());
  var import_colorManipulator10 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/internal/svg-icons/CheckBoxOutlineBlank.js
  var React220 = __toESM(require_react());
  var import_jsx_runtime192 = __toESM(require_jsx_runtime());
  var CheckBoxOutlineBlank_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime192.jsx)("path", {
    d: "M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
  }), "CheckBoxOutlineBlank");

  // node_modules/@mui/material/internal/svg-icons/CheckBox.js
  var React221 = __toESM(require_react());
  var import_jsx_runtime193 = __toESM(require_jsx_runtime());
  var CheckBox_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime193.jsx)("path", {
    d: "M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
  }), "CheckBox");

  // node_modules/@mui/material/internal/svg-icons/IndeterminateCheckBox.js
  var React222 = __toESM(require_react());
  var import_jsx_runtime194 = __toESM(require_jsx_runtime());
  var IndeterminateCheckBox_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime194.jsx)("path", {
    d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"
  }), "IndeterminateCheckBox");

  // node_modules/@mui/material/Checkbox/checkboxClasses.js
  function getCheckboxUtilityClass(slot) {
    return generateUtilityClass("MuiCheckbox", slot);
  }
  var checkboxClasses = generateUtilityClasses("MuiCheckbox", ["root", "checked", "disabled", "indeterminate", "colorPrimary", "colorSecondary", "sizeSmall", "sizeMedium"]);
  var checkboxClasses_default = checkboxClasses;

  // node_modules/@mui/material/Checkbox/Checkbox.js
  var import_jsx_runtime195 = __toESM(require_jsx_runtime());
  var _excluded120 = ["checkedIcon", "color", "icon", "indeterminate", "indeterminateIcon", "inputProps", "size", "className"];
  var useUtilityClasses76 = (ownerState) => {
    const {
      classes,
      indeterminate,
      color: color2,
      size
    } = ownerState;
    const slots = {
      root: ["root", indeterminate && "indeterminate", `color${capitalize_default(color2)}`, `size${capitalize_default(size)}`]
    };
    const composedClasses = composeClasses(slots, getCheckboxUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  var CheckboxRoot = styled_default2(SwitchBase_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    name: "MuiCheckbox",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, ownerState.indeterminate && styles4.indeterminate, styles4[`size${capitalize_default(ownerState.size)}`], ownerState.color !== "default" && styles4[`color${capitalize_default(ownerState.color)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    color: (theme.vars || theme).palette.text.secondary
  }, !ownerState.disableRipple && {
    "&:hover": {
      backgroundColor: theme.vars ? `rgba(${ownerState.color === "default" ? theme.vars.palette.action.activeChannel : theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, import_colorManipulator10.alpha)(ownerState.color === "default" ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    }
  }, ownerState.color !== "default" && {
    [`&.${checkboxClasses_default.checked}, &.${checkboxClasses_default.indeterminate}`]: {
      color: (theme.vars || theme).palette[ownerState.color].main
    },
    [`&.${checkboxClasses_default.disabled}`]: {
      color: (theme.vars || theme).palette.action.disabled
    }
  }));
  var defaultCheckedIcon = /* @__PURE__ */ (0, import_jsx_runtime195.jsx)(CheckBox_default, {});
  var defaultIcon = /* @__PURE__ */ (0, import_jsx_runtime195.jsx)(CheckBoxOutlineBlank_default, {});
  var defaultIndeterminateIcon = /* @__PURE__ */ (0, import_jsx_runtime195.jsx)(IndeterminateCheckBox_default, {});
  var Checkbox = /* @__PURE__ */ React223.forwardRef(function Checkbox2(inProps, ref) {
    var _icon$props$fontSize, _indeterminateIcon$pr;
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiCheckbox"
    });
    const {
      checkedIcon = defaultCheckedIcon,
      color: color2 = "primary",
      icon: iconProp = defaultIcon,
      indeterminate = false,
      indeterminateIcon: indeterminateIconProp = defaultIndeterminateIcon,
      inputProps,
      size = "medium",
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded120);
    const icon = indeterminate ? indeterminateIconProp : iconProp;
    const indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;
    const ownerState = _extends({}, props, {
      color: color2,
      indeterminate,
      size
    });
    const classes = useUtilityClasses76(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime195.jsx)(CheckboxRoot, _extends({
      type: "checkbox",
      inputProps: _extends({
        "data-indeterminate": indeterminate
      }, inputProps),
      icon: /* @__PURE__ */ React223.cloneElement(icon, {
        fontSize: (_icon$props$fontSize = icon.props.fontSize) != null ? _icon$props$fontSize : size
      }),
      checkedIcon: /* @__PURE__ */ React223.cloneElement(indeterminateIcon, {
        fontSize: (_indeterminateIcon$pr = indeterminateIcon.props.fontSize) != null ? _indeterminateIcon$pr : size
      }),
      ownerState,
      ref,
      className: clsx_default(classes.root, className)
    }, other, {
      classes
    }));
  });
  true ? Checkbox.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * If `true`, the component is checked.
     */
    checked: import_prop_types124.default.bool,
    /**
     * The icon to display when the component is checked.
     * @default <CheckBoxIcon />
     */
    checkedIcon: import_prop_types124.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types124.default.object,
    /**
     * @ignore
     */
    className: import_prop_types124.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'primary'
     */
    color: import_prop_types124.default.oneOfType([import_prop_types124.default.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types124.default.string]),
    /**
     * The default checked state. Use when the component is not controlled.
     */
    defaultChecked: import_prop_types124.default.bool,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types124.default.bool,
    /**
     * If `true`, the ripple effect is disabled.
     * @default false
     */
    disableRipple: import_prop_types124.default.bool,
    /**
     * The icon to display when the component is unchecked.
     * @default <CheckBoxOutlineBlankIcon />
     */
    icon: import_prop_types124.default.node,
    /**
     * The id of the `input` element.
     */
    id: import_prop_types124.default.string,
    /**
     * If `true`, the component appears indeterminate.
     * This does not set the native input element to indeterminate due
     * to inconsistent behavior across browsers.
     * However, we set a `data-indeterminate` attribute on the `input`.
     * @default false
     */
    indeterminate: import_prop_types124.default.bool,
    /**
     * The icon to display when the component is indeterminate.
     * @default <IndeterminateCheckBoxIcon />
     */
    indeterminateIcon: import_prop_types124.default.node,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     */
    inputProps: import_prop_types124.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: refType_default,
    /**
     * Callback fired when the state is changed.
     *
     * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
     * You can pull out the new checked state by accessing `event.target.checked` (boolean).
     */
    onChange: import_prop_types124.default.func,
    /**
     * If `true`, the `input` element is required.
     * @default false
     */
    required: import_prop_types124.default.bool,
    /**
     * The size of the component.
     * `small` is equivalent to the dense checkbox styling.
     * @default 'medium'
     */
    size: import_prop_types124.default.oneOfType([import_prop_types124.default.oneOf(["medium", "small"]), import_prop_types124.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types124.default.oneOfType([import_prop_types124.default.arrayOf(import_prop_types124.default.oneOfType([import_prop_types124.default.func, import_prop_types124.default.object, import_prop_types124.default.bool])), import_prop_types124.default.func, import_prop_types124.default.object]),
    /**
     * The value of the component. The DOM API casts this to a string.
     * The browser uses "on" as the default value.
     */
    value: import_prop_types124.default.any
  } : void 0;
  var Checkbox_default = Checkbox;

  // node_modules/@mui/material/Button/Button.js
  init_extends();
  var React226 = __toESM(require_react());
  var import_prop_types125 = __toESM(require_prop_types());
  var import_colorManipulator11 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/Button/buttonClasses.js
  function getButtonUtilityClass(slot) {
    return generateUtilityClass("MuiButton", slot);
  }
  var buttonClasses = generateUtilityClasses("MuiButton", ["root", "text", "textInherit", "textPrimary", "textSecondary", "textSuccess", "textError", "textInfo", "textWarning", "outlined", "outlinedInherit", "outlinedPrimary", "outlinedSecondary", "outlinedSuccess", "outlinedError", "outlinedInfo", "outlinedWarning", "contained", "containedInherit", "containedPrimary", "containedSecondary", "containedSuccess", "containedError", "containedInfo", "containedWarning", "disableElevation", "focusVisible", "disabled", "colorInherit", "colorPrimary", "colorSecondary", "colorSuccess", "colorError", "colorInfo", "colorWarning", "textSizeSmall", "textSizeMedium", "textSizeLarge", "outlinedSizeSmall", "outlinedSizeMedium", "outlinedSizeLarge", "containedSizeSmall", "containedSizeMedium", "containedSizeLarge", "sizeMedium", "sizeSmall", "sizeLarge", "fullWidth", "startIcon", "endIcon", "icon", "iconSizeSmall", "iconSizeMedium", "iconSizeLarge"]);
  var buttonClasses_default = buttonClasses;

  // node_modules/@mui/material/ButtonGroup/ButtonGroupContext.js
  var React224 = __toESM(require_react());
  var ButtonGroupContext = /* @__PURE__ */ React224.createContext({});
  if (true) {
    ButtonGroupContext.displayName = "ButtonGroupContext";
  }
  var ButtonGroupContext_default = ButtonGroupContext;

  // node_modules/@mui/material/ButtonGroup/ButtonGroupButtonContext.js
  var React225 = __toESM(require_react());
  var ButtonGroupButtonContext = /* @__PURE__ */ React225.createContext(void 0);
  if (true) {
    ButtonGroupButtonContext.displayName = "ButtonGroupButtonContext";
  }
  var ButtonGroupButtonContext_default = ButtonGroupButtonContext;

  // node_modules/@mui/material/Button/Button.js
  var import_jsx_runtime196 = __toESM(require_jsx_runtime());
  var import_jsx_runtime197 = __toESM(require_jsx_runtime());
  var _excluded121 = ["children", "color", "component", "className", "disabled", "disableElevation", "disableFocusRipple", "endIcon", "focusVisibleClassName", "fullWidth", "size", "startIcon", "type", "variant"];
  var useUtilityClasses77 = (ownerState) => {
    const {
      color: color2,
      disableElevation,
      fullWidth,
      size,
      variant,
      classes
    } = ownerState;
    const slots = {
      root: ["root", variant, `${variant}${capitalize_default(color2)}`, `size${capitalize_default(size)}`, `${variant}Size${capitalize_default(size)}`, `color${capitalize_default(color2)}`, disableElevation && "disableElevation", fullWidth && "fullWidth"],
      label: ["label"],
      startIcon: ["icon", "startIcon", `iconSize${capitalize_default(size)}`],
      endIcon: ["icon", "endIcon", `iconSize${capitalize_default(size)}`]
    };
    const composedClasses = composeClasses(slots, getButtonUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  var commonIconStyles = (ownerState) => _extends({}, ownerState.size === "small" && {
    "& > *:nth-of-type(1)": {
      fontSize: 18
    }
  }, ownerState.size === "medium" && {
    "& > *:nth-of-type(1)": {
      fontSize: 20
    }
  }, ownerState.size === "large" && {
    "& > *:nth-of-type(1)": {
      fontSize: 22
    }
  });
  var ButtonRoot = styled_default2(ButtonBase_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
    name: "MuiButton",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, styles4[ownerState.variant], styles4[`${ownerState.variant}${capitalize_default(ownerState.color)}`], styles4[`size${capitalize_default(ownerState.size)}`], styles4[`${ownerState.variant}Size${capitalize_default(ownerState.size)}`], ownerState.color === "inherit" && styles4.colorInherit, ownerState.disableElevation && styles4.disableElevation, ownerState.fullWidth && styles4.fullWidth];
    }
  })(({
    theme,
    ownerState
  }) => {
    var _theme$palette$getCon, _theme$palette;
    const inheritContainedBackgroundColor = theme.palette.mode === "light" ? theme.palette.grey[300] : theme.palette.grey[800];
    const inheritContainedHoverBackgroundColor = theme.palette.mode === "light" ? theme.palette.grey.A100 : theme.palette.grey[700];
    return _extends({}, theme.typography.button, {
      minWidth: 64,
      padding: "6px 16px",
      borderRadius: (theme.vars || theme).shape.borderRadius,
      transition: theme.transitions.create(["background-color", "box-shadow", "border-color", "color"], {
        duration: theme.transitions.duration.short
      }),
      "&:hover": _extends({
        textDecoration: "none",
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, import_colorManipulator11.alpha)(theme.palette.text.primary, theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }, ownerState.variant === "text" && ownerState.color !== "inherit" && {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, import_colorManipulator11.alpha)(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }, ownerState.variant === "outlined" && ownerState.color !== "inherit" && {
        border: `1px solid ${(theme.vars || theme).palette[ownerState.color].main}`,
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, import_colorManipulator11.alpha)(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }, ownerState.variant === "contained" && {
        backgroundColor: theme.vars ? theme.vars.palette.Button.inheritContainedHoverBg : inheritContainedHoverBackgroundColor,
        boxShadow: (theme.vars || theme).shadows[4],
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          boxShadow: (theme.vars || theme).shadows[2],
          backgroundColor: (theme.vars || theme).palette.grey[300]
        }
      }, ownerState.variant === "contained" && ownerState.color !== "inherit" && {
        backgroundColor: (theme.vars || theme).palette[ownerState.color].dark,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: (theme.vars || theme).palette[ownerState.color].main
        }
      }),
      "&:active": _extends({}, ownerState.variant === "contained" && {
        boxShadow: (theme.vars || theme).shadows[8]
      }),
      [`&.${buttonClasses_default.focusVisible}`]: _extends({}, ownerState.variant === "contained" && {
        boxShadow: (theme.vars || theme).shadows[6]
      }),
      [`&.${buttonClasses_default.disabled}`]: _extends({
        color: (theme.vars || theme).palette.action.disabled
      }, ownerState.variant === "outlined" && {
        border: `1px solid ${(theme.vars || theme).palette.action.disabledBackground}`
      }, ownerState.variant === "contained" && {
        color: (theme.vars || theme).palette.action.disabled,
        boxShadow: (theme.vars || theme).shadows[0],
        backgroundColor: (theme.vars || theme).palette.action.disabledBackground
      })
    }, ownerState.variant === "text" && {
      padding: "6px 8px"
    }, ownerState.variant === "text" && ownerState.color !== "inherit" && {
      color: (theme.vars || theme).palette[ownerState.color].main
    }, ownerState.variant === "outlined" && {
      padding: "5px 15px",
      border: "1px solid currentColor"
    }, ownerState.variant === "outlined" && ownerState.color !== "inherit" && {
      color: (theme.vars || theme).palette[ownerState.color].main,
      border: theme.vars ? `1px solid rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.5)` : `1px solid ${(0, import_colorManipulator11.alpha)(theme.palette[ownerState.color].main, 0.5)}`
    }, ownerState.variant === "contained" && {
      color: theme.vars ? (
        // this is safe because grey does not change between default light/dark mode
        theme.vars.palette.text.primary
      ) : (_theme$palette$getCon = (_theme$palette = theme.palette).getContrastText) == null ? void 0 : _theme$palette$getCon.call(_theme$palette, theme.palette.grey[300]),
      backgroundColor: theme.vars ? theme.vars.palette.Button.inheritContainedBg : inheritContainedBackgroundColor,
      boxShadow: (theme.vars || theme).shadows[2]
    }, ownerState.variant === "contained" && ownerState.color !== "inherit" && {
      color: (theme.vars || theme).palette[ownerState.color].contrastText,
      backgroundColor: (theme.vars || theme).palette[ownerState.color].main
    }, ownerState.color === "inherit" && {
      color: "inherit",
      borderColor: "currentColor"
    }, ownerState.size === "small" && ownerState.variant === "text" && {
      padding: "4px 5px",
      fontSize: theme.typography.pxToRem(13)
    }, ownerState.size === "large" && ownerState.variant === "text" && {
      padding: "8px 11px",
      fontSize: theme.typography.pxToRem(15)
    }, ownerState.size === "small" && ownerState.variant === "outlined" && {
      padding: "3px 9px",
      fontSize: theme.typography.pxToRem(13)
    }, ownerState.size === "large" && ownerState.variant === "outlined" && {
      padding: "7px 21px",
      fontSize: theme.typography.pxToRem(15)
    }, ownerState.size === "small" && ownerState.variant === "contained" && {
      padding: "4px 10px",
      fontSize: theme.typography.pxToRem(13)
    }, ownerState.size === "large" && ownerState.variant === "contained" && {
      padding: "8px 22px",
      fontSize: theme.typography.pxToRem(15)
    }, ownerState.fullWidth && {
      width: "100%"
    });
  }, ({
    ownerState
  }) => ownerState.disableElevation && {
    boxShadow: "none",
    "&:hover": {
      boxShadow: "none"
    },
    [`&.${buttonClasses_default.focusVisible}`]: {
      boxShadow: "none"
    },
    "&:active": {
      boxShadow: "none"
    },
    [`&.${buttonClasses_default.disabled}`]: {
      boxShadow: "none"
    }
  });
  var ButtonStartIcon = styled_default2("span", {
    name: "MuiButton",
    slot: "StartIcon",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.startIcon, styles4[`iconSize${capitalize_default(ownerState.size)}`]];
    }
  })(({
    ownerState
  }) => _extends({
    display: "inherit",
    marginRight: 8,
    marginLeft: -4
  }, ownerState.size === "small" && {
    marginLeft: -2
  }, commonIconStyles(ownerState)));
  var ButtonEndIcon = styled_default2("span", {
    name: "MuiButton",
    slot: "EndIcon",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.endIcon, styles4[`iconSize${capitalize_default(ownerState.size)}`]];
    }
  })(({
    ownerState
  }) => _extends({
    display: "inherit",
    marginRight: -4,
    marginLeft: 8
  }, ownerState.size === "small" && {
    marginRight: -2
  }, commonIconStyles(ownerState)));
  var Button = /* @__PURE__ */ React226.forwardRef(function Button2(inProps, ref) {
    const contextProps = React226.useContext(ButtonGroupContext_default);
    const buttonGroupButtonContextPositionClassName = React226.useContext(ButtonGroupButtonContext_default);
    const resolvedProps = resolveProps(contextProps, inProps);
    const props = useDefaultProps2({
      props: resolvedProps,
      name: "MuiButton"
    });
    const {
      children,
      color: color2 = "primary",
      component = "button",
      className,
      disabled = false,
      disableElevation = false,
      disableFocusRipple = false,
      endIcon: endIconProp,
      focusVisibleClassName,
      fullWidth = false,
      size = "medium",
      startIcon: startIconProp,
      type,
      variant = "text"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded121);
    const ownerState = _extends({}, props, {
      color: color2,
      component,
      disabled,
      disableElevation,
      disableFocusRipple,
      fullWidth,
      size,
      type,
      variant
    });
    const classes = useUtilityClasses77(ownerState);
    const startIcon = startIconProp && /* @__PURE__ */ (0, import_jsx_runtime196.jsx)(ButtonStartIcon, {
      className: classes.startIcon,
      ownerState,
      children: startIconProp
    });
    const endIcon = endIconProp && /* @__PURE__ */ (0, import_jsx_runtime196.jsx)(ButtonEndIcon, {
      className: classes.endIcon,
      ownerState,
      children: endIconProp
    });
    const positionClassName = buttonGroupButtonContextPositionClassName || "";
    return /* @__PURE__ */ (0, import_jsx_runtime197.jsxs)(ButtonRoot, _extends({
      ownerState,
      className: clsx_default(contextProps.className, classes.root, className, positionClassName),
      component,
      disabled,
      focusRipple: !disableFocusRipple,
      focusVisibleClassName: clsx_default(classes.focusVisible, focusVisibleClassName),
      ref,
      type
    }, other, {
      classes,
      children: [startIcon, children, endIcon]
    }));
  });
  true ? Button.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component.
     */
    children: import_prop_types125.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types125.default.object,
    /**
     * @ignore
     */
    className: import_prop_types125.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
     * @default 'primary'
     */
    color: import_prop_types125.default.oneOfType([import_prop_types125.default.oneOf(["inherit", "primary", "secondary", "success", "error", "info", "warning"]), import_prop_types125.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types125.default.elementType,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types125.default.bool,
    /**
     * If `true`, no elevation is used.
     * @default false
     */
    disableElevation: import_prop_types125.default.bool,
    /**
     * If `true`, the  keyboard focus ripple is disabled.
     * @default false
     */
    disableFocusRipple: import_prop_types125.default.bool,
    /**
     * If `true`, the ripple effect is disabled.
     *
     * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
     * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
     * @default false
     */
    disableRipple: import_prop_types125.default.bool,
    /**
     * Element placed after the children.
     */
    endIcon: import_prop_types125.default.node,
    /**
     * @ignore
     */
    focusVisibleClassName: import_prop_types125.default.string,
    /**
     * If `true`, the button will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types125.default.bool,
    /**
     * The URL to link to when the button is clicked.
     * If defined, an `a` element will be used as the root node.
     */
    href: import_prop_types125.default.string,
    /**
     * The size of the component.
     * `small` is equivalent to the dense button styling.
     * @default 'medium'
     */
    size: import_prop_types125.default.oneOfType([import_prop_types125.default.oneOf(["small", "medium", "large"]), import_prop_types125.default.string]),
    /**
     * Element placed before the children.
     */
    startIcon: import_prop_types125.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types125.default.oneOfType([import_prop_types125.default.arrayOf(import_prop_types125.default.oneOfType([import_prop_types125.default.func, import_prop_types125.default.object, import_prop_types125.default.bool])), import_prop_types125.default.func, import_prop_types125.default.object]),
    /**
     * @ignore
     */
    type: import_prop_types125.default.oneOfType([import_prop_types125.default.oneOf(["button", "reset", "submit"]), import_prop_types125.default.string]),
    /**
     * The variant to use.
     * @default 'text'
     */
    variant: import_prop_types125.default.oneOfType([import_prop_types125.default.oneOf(["contained", "outlined", "text"]), import_prop_types125.default.string])
  } : void 0;
  var Button_default = Button;

  // node_modules/@mui/material/InputAdornment/InputAdornment.js
  init_extends();
  var React227 = __toESM(require_react());
  var import_prop_types126 = __toESM(require_prop_types());

  // node_modules/@mui/material/InputAdornment/inputAdornmentClasses.js
  function getInputAdornmentUtilityClass(slot) {
    return generateUtilityClass("MuiInputAdornment", slot);
  }
  var inputAdornmentClasses = generateUtilityClasses("MuiInputAdornment", ["root", "filled", "standard", "outlined", "positionStart", "positionEnd", "disablePointerEvents", "hiddenLabel", "sizeSmall"]);
  var inputAdornmentClasses_default = inputAdornmentClasses;

  // node_modules/@mui/material/InputAdornment/InputAdornment.js
  var import_jsx_runtime198 = __toESM(require_jsx_runtime());
  var import_jsx_runtime199 = __toESM(require_jsx_runtime());
  var _span4;
  var _excluded122 = ["children", "className", "component", "disablePointerEvents", "disableTypography", "position", "variant"];
  var overridesResolver2 = (props, styles4) => {
    const {
      ownerState
    } = props;
    return [styles4.root, styles4[`position${capitalize_default(ownerState.position)}`], ownerState.disablePointerEvents === true && styles4.disablePointerEvents, styles4[ownerState.variant]];
  };
  var useUtilityClasses78 = (ownerState) => {
    const {
      classes,
      disablePointerEvents,
      hiddenLabel,
      position: position2,
      size,
      variant
    } = ownerState;
    const slots = {
      root: ["root", disablePointerEvents && "disablePointerEvents", position2 && `position${capitalize_default(position2)}`, variant, hiddenLabel && "hiddenLabel", size && `size${capitalize_default(size)}`]
    };
    return composeClasses(slots, getInputAdornmentUtilityClass, classes);
  };
  var InputAdornmentRoot = styled_default2("div", {
    name: "MuiInputAdornment",
    slot: "Root",
    overridesResolver: overridesResolver2
  })(({
    theme,
    ownerState
  }) => _extends({
    display: "flex",
    height: "0.01em",
    // Fix IE11 flexbox alignment. To remove at some point.
    maxHeight: "2em",
    alignItems: "center",
    whiteSpace: "nowrap",
    color: (theme.vars || theme).palette.action.active
  }, ownerState.variant === "filled" && {
    // Styles applied to the root element if `variant="filled"`.
    [`&.${inputAdornmentClasses_default.positionStart}&:not(.${inputAdornmentClasses_default.hiddenLabel})`]: {
      marginTop: 16
    }
  }, ownerState.position === "start" && {
    // Styles applied to the root element if `position="start"`.
    marginRight: 8
  }, ownerState.position === "end" && {
    // Styles applied to the root element if `position="end"`.
    marginLeft: 8
  }, ownerState.disablePointerEvents === true && {
    // Styles applied to the root element if `disablePointerEvents={true}`.
    pointerEvents: "none"
  }));
  var InputAdornment = /* @__PURE__ */ React227.forwardRef(function InputAdornment2(inProps, ref) {
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiInputAdornment"
    });
    const {
      children,
      className,
      component = "div",
      disablePointerEvents = false,
      disableTypography = false,
      position: position2,
      variant: variantProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded122);
    const muiFormControl = useFormControl() || {};
    let variant = variantProp;
    if (variantProp && muiFormControl.variant) {
      if (true) {
        if (variantProp === muiFormControl.variant) {
          console.error("MUI: The `InputAdornment` variant infers the variant prop you do not have to provide one.");
        }
      }
    }
    if (muiFormControl && !variant) {
      variant = muiFormControl.variant;
    }
    const ownerState = _extends({}, props, {
      hiddenLabel: muiFormControl.hiddenLabel,
      size: muiFormControl.size,
      disablePointerEvents,
      position: position2,
      variant
    });
    const classes = useUtilityClasses78(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime198.jsx)(FormControlContext_default.Provider, {
      value: null,
      children: /* @__PURE__ */ (0, import_jsx_runtime198.jsx)(InputAdornmentRoot, _extends({
        as: component,
        ownerState,
        className: clsx_default(classes.root, className),
        ref
      }, other, {
        children: typeof children === "string" && !disableTypography ? /* @__PURE__ */ (0, import_jsx_runtime198.jsx)(Typography_default, {
          color: "text.secondary",
          children
        }) : /* @__PURE__ */ (0, import_jsx_runtime199.jsxs)(React227.Fragment, {
          children: [position2 === "start" ? (
            /* notranslate needed while Google Translate will not fix zero-width space issue */
            _span4 || (_span4 = /* @__PURE__ */ (0, import_jsx_runtime198.jsx)("span", {
              className: "notranslate",
              children: "\u200B"
            }))
          ) : null, children]
        })
      }))
    });
  });
  true ? InputAdornment.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * The content of the component, normally an `IconButton` or string.
     */
    children: import_prop_types126.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types126.default.object,
    /**
     * @ignore
     */
    className: import_prop_types126.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types126.default.elementType,
    /**
     * Disable pointer events on the root.
     * This allows for the content of the adornment to focus the `input` on click.
     * @default false
     */
    disablePointerEvents: import_prop_types126.default.bool,
    /**
     * If children is a string then disable wrapping in a Typography component.
     * @default false
     */
    disableTypography: import_prop_types126.default.bool,
    /**
     * The position this adornment should appear relative to the `Input`.
     */
    position: import_prop_types126.default.oneOf(["end", "start"]).isRequired,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types126.default.oneOfType([import_prop_types126.default.arrayOf(import_prop_types126.default.oneOfType([import_prop_types126.default.func, import_prop_types126.default.object, import_prop_types126.default.bool])), import_prop_types126.default.func, import_prop_types126.default.object]),
    /**
     * The variant to use.
     * Note: If you are using the `TextField` component or the `FormControl` component
     * you do not have to set this manually.
     */
    variant: import_prop_types126.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  var InputAdornment_default = InputAdornment;

  // node_modules/@mui/material/Tooltip/Tooltip.js
  init_extends();
  var React228 = __toESM(require_react());
  var import_prop_types127 = __toESM(require_prop_types());
  var import_colorManipulator12 = __toESM(require_colorManipulator());

  // node_modules/@mui/material/Tooltip/tooltipClasses.js
  function getTooltipUtilityClass(slot) {
    return generateUtilityClass("MuiTooltip", slot);
  }
  var tooltipClasses = generateUtilityClasses("MuiTooltip", ["popper", "popperInteractive", "popperArrow", "popperClose", "tooltip", "tooltipArrow", "touch", "tooltipPlacementLeft", "tooltipPlacementRight", "tooltipPlacementTop", "tooltipPlacementBottom", "arrow"]);
  var tooltipClasses_default = tooltipClasses;

  // node_modules/@mui/material/Tooltip/Tooltip.js
  var import_jsx_runtime200 = __toESM(require_jsx_runtime());
  var import_jsx_runtime201 = __toESM(require_jsx_runtime());
  var _excluded123 = ["arrow", "children", "classes", "components", "componentsProps", "describeChild", "disableFocusListener", "disableHoverListener", "disableInteractive", "disableTouchListener", "enterDelay", "enterNextDelay", "enterTouchDelay", "followCursor", "id", "leaveDelay", "leaveTouchDelay", "onClose", "onOpen", "open", "placement", "PopperComponent", "PopperProps", "slotProps", "slots", "title", "TransitionComponent", "TransitionProps"];
  function round3(value) {
    return Math.round(value * 1e5) / 1e5;
  }
  var useUtilityClasses79 = (ownerState) => {
    const {
      classes,
      disableInteractive,
      arrow: arrow2,
      touch,
      placement
    } = ownerState;
    const slots = {
      popper: ["popper", !disableInteractive && "popperInteractive", arrow2 && "popperArrow"],
      tooltip: ["tooltip", arrow2 && "tooltipArrow", touch && "touch", `tooltipPlacement${capitalize_default(placement.split("-")[0])}`],
      arrow: ["arrow"]
    };
    return composeClasses(slots, getTooltipUtilityClass, classes);
  };
  var TooltipPopper = styled_default2(Popper_default, {
    name: "MuiTooltip",
    slot: "Popper",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.popper, !ownerState.disableInteractive && styles4.popperInteractive, ownerState.arrow && styles4.popperArrow, !ownerState.open && styles4.popperClose];
    }
  })(({
    theme,
    ownerState,
    open
  }) => _extends({
    zIndex: (theme.vars || theme).zIndex.tooltip,
    pointerEvents: "none"
  }, !ownerState.disableInteractive && {
    pointerEvents: "auto"
  }, !open && {
    pointerEvents: "none"
  }, ownerState.arrow && {
    [`&[data-popper-placement*="bottom"] .${tooltipClasses_default.arrow}`]: {
      top: 0,
      marginTop: "-0.71em",
      "&::before": {
        transformOrigin: "0 100%"
      }
    },
    [`&[data-popper-placement*="top"] .${tooltipClasses_default.arrow}`]: {
      bottom: 0,
      marginBottom: "-0.71em",
      "&::before": {
        transformOrigin: "100% 0"
      }
    },
    [`&[data-popper-placement*="right"] .${tooltipClasses_default.arrow}`]: _extends({}, !ownerState.isRtl ? {
      left: 0,
      marginLeft: "-0.71em"
    } : {
      right: 0,
      marginRight: "-0.71em"
    }, {
      height: "1em",
      width: "0.71em",
      "&::before": {
        transformOrigin: "100% 100%"
      }
    }),
    [`&[data-popper-placement*="left"] .${tooltipClasses_default.arrow}`]: _extends({}, !ownerState.isRtl ? {
      right: 0,
      marginRight: "-0.71em"
    } : {
      left: 0,
      marginLeft: "-0.71em"
    }, {
      height: "1em",
      width: "0.71em",
      "&::before": {
        transformOrigin: "0 0"
      }
    })
  }));
  var TooltipTooltip = styled_default2("div", {
    name: "MuiTooltip",
    slot: "Tooltip",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.tooltip, ownerState.touch && styles4.touch, ownerState.arrow && styles4.tooltipArrow, styles4[`tooltipPlacement${capitalize_default(ownerState.placement.split("-")[0])}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    backgroundColor: theme.vars ? theme.vars.palette.Tooltip.bg : (0, import_colorManipulator12.alpha)(theme.palette.grey[700], 0.92),
    borderRadius: (theme.vars || theme).shape.borderRadius,
    color: (theme.vars || theme).palette.common.white,
    fontFamily: theme.typography.fontFamily,
    padding: "4px 8px",
    fontSize: theme.typography.pxToRem(11),
    maxWidth: 300,
    margin: 2,
    wordWrap: "break-word",
    fontWeight: theme.typography.fontWeightMedium
  }, ownerState.arrow && {
    position: "relative",
    margin: 0
  }, ownerState.touch && {
    padding: "8px 16px",
    fontSize: theme.typography.pxToRem(14),
    lineHeight: `${round3(16 / 14)}em`,
    fontWeight: theme.typography.fontWeightRegular
  }, {
    [`.${tooltipClasses_default.popper}[data-popper-placement*="left"] &`]: _extends({
      transformOrigin: "right center"
    }, !ownerState.isRtl ? _extends({
      marginRight: "14px"
    }, ownerState.touch && {
      marginRight: "24px"
    }) : _extends({
      marginLeft: "14px"
    }, ownerState.touch && {
      marginLeft: "24px"
    })),
    [`.${tooltipClasses_default.popper}[data-popper-placement*="right"] &`]: _extends({
      transformOrigin: "left center"
    }, !ownerState.isRtl ? _extends({
      marginLeft: "14px"
    }, ownerState.touch && {
      marginLeft: "24px"
    }) : _extends({
      marginRight: "14px"
    }, ownerState.touch && {
      marginRight: "24px"
    })),
    [`.${tooltipClasses_default.popper}[data-popper-placement*="top"] &`]: _extends({
      transformOrigin: "center bottom",
      marginBottom: "14px"
    }, ownerState.touch && {
      marginBottom: "24px"
    }),
    [`.${tooltipClasses_default.popper}[data-popper-placement*="bottom"] &`]: _extends({
      transformOrigin: "center top",
      marginTop: "14px"
    }, ownerState.touch && {
      marginTop: "24px"
    })
  }));
  var TooltipArrow = styled_default2("span", {
    name: "MuiTooltip",
    slot: "Arrow",
    overridesResolver: (props, styles4) => styles4.arrow
  })(({
    theme
  }) => ({
    overflow: "hidden",
    position: "absolute",
    width: "1em",
    height: "0.71em",
    boxSizing: "border-box",
    color: theme.vars ? theme.vars.palette.Tooltip.bg : (0, import_colorManipulator12.alpha)(theme.palette.grey[700], 0.9),
    "&::before": {
      content: '""',
      margin: "auto",
      display: "block",
      width: "100%",
      height: "100%",
      backgroundColor: "currentColor",
      transform: "rotate(45deg)"
    }
  }));
  var hystersisOpen = false;
  var hystersisTimer = new Timeout();
  var cursorPosition = {
    x: 0,
    y: 0
  };
  function composeEventHandler(handler, eventHandler) {
    return (event, ...params) => {
      if (eventHandler) {
        eventHandler(event, ...params);
      }
      handler(event, ...params);
    };
  }
  var Tooltip = /* @__PURE__ */ React228.forwardRef(function Tooltip2(inProps, ref) {
    var _ref, _slots$popper, _ref2, _ref3, _slots$transition, _ref4, _slots$tooltip, _ref5, _slots$arrow, _slotProps$popper, _ref6, _slotProps$popper2, _slotProps$transition, _slotProps$tooltip, _ref7, _slotProps$tooltip2, _slotProps$arrow, _ref8, _slotProps$arrow2;
    const props = useDefaultProps2({
      props: inProps,
      name: "MuiTooltip"
    });
    const {
      arrow: arrow2 = false,
      children: childrenProp,
      components = {},
      componentsProps = {},
      describeChild = false,
      disableFocusListener = false,
      disableHoverListener = false,
      disableInteractive: disableInteractiveProp = false,
      disableTouchListener = false,
      enterDelay = 100,
      enterNextDelay = 0,
      enterTouchDelay = 700,
      followCursor = false,
      id: idProp,
      leaveDelay = 0,
      leaveTouchDelay = 1500,
      onClose,
      onOpen,
      open: openProp,
      placement = "bottom",
      PopperComponent: PopperComponentProp,
      PopperProps = {},
      slotProps = {},
      slots = {},
      title,
      TransitionComponent: TransitionComponentProp = Grow_default,
      TransitionProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded123);
    const children = /* @__PURE__ */ React228.isValidElement(childrenProp) ? childrenProp : /* @__PURE__ */ (0, import_jsx_runtime200.jsx)("span", {
      children: childrenProp
    });
    const theme = useTheme5();
    const isRtl = useRtl();
    const [childNode, setChildNode] = React228.useState();
    const [arrowRef, setArrowRef] = React228.useState(null);
    const ignoreNonTouchEvents = React228.useRef(false);
    const disableInteractive = disableInteractiveProp || followCursor;
    const closeTimer = useTimeout();
    const enterTimer = useTimeout();
    const leaveTimer = useTimeout();
    const touchTimer = useTimeout();
    const [openState, setOpenState] = useControlled_default({
      controlled: openProp,
      default: false,
      name: "Tooltip",
      state: "open"
    });
    let open = openState;
    if (true) {
      const {
        current: isControlled
      } = React228.useRef(openProp !== void 0);
      React228.useEffect(() => {
        if (childNode && childNode.disabled && !isControlled && title !== "" && childNode.tagName.toLowerCase() === "button") {
          console.error(["MUI: You are providing a disabled `button` child to the Tooltip component.", "A disabled element does not fire events.", "Tooltip needs to listen to the child element's events to display the title.", "", "Add a simple wrapper element, such as a `span`."].join("\n"));
        }
      }, [title, childNode, isControlled]);
    }
    const id = useId_default(idProp);
    const prevUserSelect = React228.useRef();
    const stopTouchInteraction = useEventCallback_default2(() => {
      if (prevUserSelect.current !== void 0) {
        document.body.style.WebkitUserSelect = prevUserSelect.current;
        prevUserSelect.current = void 0;
      }
      touchTimer.clear();
    });
    React228.useEffect(() => stopTouchInteraction, [stopTouchInteraction]);
    const handleOpen = (event) => {
      hystersisTimer.clear();
      hystersisOpen = true;
      setOpenState(true);
      if (onOpen && !open) {
        onOpen(event);
      }
    };
    const handleClose = useEventCallback_default2(
      /**
       * @param {React.SyntheticEvent | Event} event
       */
      (event) => {
        hystersisTimer.start(800 + leaveDelay, () => {
          hystersisOpen = false;
        });
        setOpenState(false);
        if (onClose && open) {
          onClose(event);
        }
        closeTimer.start(theme.transitions.duration.shortest, () => {
          ignoreNonTouchEvents.current = false;
        });
      }
    );
    const handleMouseOver = (event) => {
      if (ignoreNonTouchEvents.current && event.type !== "touchstart") {
        return;
      }
      if (childNode) {
        childNode.removeAttribute("title");
      }
      enterTimer.clear();
      leaveTimer.clear();
      if (enterDelay || hystersisOpen && enterNextDelay) {
        enterTimer.start(hystersisOpen ? enterNextDelay : enterDelay, () => {
          handleOpen(event);
        });
      } else {
        handleOpen(event);
      }
    };
    const handleMouseLeave = (event) => {
      enterTimer.clear();
      leaveTimer.start(leaveDelay, () => {
        handleClose(event);
      });
    };
    const {
      isFocusVisibleRef,
      onBlur: handleBlurVisible,
      onFocus: handleFocusVisible,
      ref: focusVisibleRef
    } = useIsFocusVisible_default();
    const [, setChildIsFocusVisible] = React228.useState(false);
    const handleBlur = (event) => {
      handleBlurVisible(event);
      if (isFocusVisibleRef.current === false) {
        setChildIsFocusVisible(false);
        handleMouseLeave(event);
      }
    };
    const handleFocus = (event) => {
      if (!childNode) {
        setChildNode(event.currentTarget);
      }
      handleFocusVisible(event);
      if (isFocusVisibleRef.current === true) {
        setChildIsFocusVisible(true);
        handleMouseOver(event);
      }
    };
    const detectTouchStart = (event) => {
      ignoreNonTouchEvents.current = true;
      const childrenProps2 = children.props;
      if (childrenProps2.onTouchStart) {
        childrenProps2.onTouchStart(event);
      }
    };
    const handleTouchStart = (event) => {
      detectTouchStart(event);
      leaveTimer.clear();
      closeTimer.clear();
      stopTouchInteraction();
      prevUserSelect.current = document.body.style.WebkitUserSelect;
      document.body.style.WebkitUserSelect = "none";
      touchTimer.start(enterTouchDelay, () => {
        document.body.style.WebkitUserSelect = prevUserSelect.current;
        handleMouseOver(event);
      });
    };
    const handleTouchEnd = (event) => {
      if (children.props.onTouchEnd) {
        children.props.onTouchEnd(event);
      }
      stopTouchInteraction();
      leaveTimer.start(leaveTouchDelay, () => {
        handleClose(event);
      });
    };
    React228.useEffect(() => {
      if (!open) {
        return void 0;
      }
      function handleKeyDown2(nativeEvent) {
        if (nativeEvent.key === "Escape" || nativeEvent.key === "Esc") {
          handleClose(nativeEvent);
        }
      }
      document.addEventListener("keydown", handleKeyDown2);
      return () => {
        document.removeEventListener("keydown", handleKeyDown2);
      };
    }, [handleClose, open]);
    const handleRef = useForkRef_default(getReactElementRef(children), focusVisibleRef, setChildNode, ref);
    if (!title && title !== 0) {
      open = false;
    }
    const popperRef = React228.useRef();
    const handleMouseMove = (event) => {
      const childrenProps2 = children.props;
      if (childrenProps2.onMouseMove) {
        childrenProps2.onMouseMove(event);
      }
      cursorPosition = {
        x: event.clientX,
        y: event.clientY
      };
      if (popperRef.current) {
        popperRef.current.update();
      }
    };
    const nameOrDescProps = {};
    const titleIsString = typeof title === "string";
    if (describeChild) {
      nameOrDescProps.title = !open && titleIsString && !disableHoverListener ? title : null;
      nameOrDescProps["aria-describedby"] = open ? id : null;
    } else {
      nameOrDescProps["aria-label"] = titleIsString ? title : null;
      nameOrDescProps["aria-labelledby"] = open && !titleIsString ? id : null;
    }
    const childrenProps = _extends({}, nameOrDescProps, other, children.props, {
      className: clsx_default(other.className, children.props.className),
      onTouchStart: detectTouchStart,
      ref: handleRef
    }, followCursor ? {
      onMouseMove: handleMouseMove
    } : {});
    if (true) {
      childrenProps["data-mui-internal-clone-element"] = true;
      React228.useEffect(() => {
        if (childNode && !childNode.getAttribute("data-mui-internal-clone-element")) {
          console.error(["MUI: The `children` component of the Tooltip is not forwarding its props correctly.", "Please make sure that props are spread on the same element that the ref is applied to."].join("\n"));
        }
      }, [childNode]);
    }
    const interactiveWrapperListeners = {};
    if (!disableTouchListener) {
      childrenProps.onTouchStart = handleTouchStart;
      childrenProps.onTouchEnd = handleTouchEnd;
    }
    if (!disableHoverListener) {
      childrenProps.onMouseOver = composeEventHandler(handleMouseOver, childrenProps.onMouseOver);
      childrenProps.onMouseLeave = composeEventHandler(handleMouseLeave, childrenProps.onMouseLeave);
      if (!disableInteractive) {
        interactiveWrapperListeners.onMouseOver = handleMouseOver;
        interactiveWrapperListeners.onMouseLeave = handleMouseLeave;
      }
    }
    if (!disableFocusListener) {
      childrenProps.onFocus = composeEventHandler(handleFocus, childrenProps.onFocus);
      childrenProps.onBlur = composeEventHandler(handleBlur, childrenProps.onBlur);
      if (!disableInteractive) {
        interactiveWrapperListeners.onFocus = handleFocus;
        interactiveWrapperListeners.onBlur = handleBlur;
      }
    }
    if (true) {
      if (children.props.title) {
        console.error(["MUI: You have provided a `title` prop to the child of <Tooltip />.", `Remove this title prop \`${children.props.title}\` or the Tooltip component.`].join("\n"));
      }
    }
    const popperOptions = React228.useMemo(() => {
      var _PopperProps$popperOp;
      let tooltipModifiers = [{
        name: "arrow",
        enabled: Boolean(arrowRef),
        options: {
          element: arrowRef,
          padding: 4
        }
      }];
      if ((_PopperProps$popperOp = PopperProps.popperOptions) != null && _PopperProps$popperOp.modifiers) {
        tooltipModifiers = tooltipModifiers.concat(PopperProps.popperOptions.modifiers);
      }
      return _extends({}, PopperProps.popperOptions, {
        modifiers: tooltipModifiers
      });
    }, [arrowRef, PopperProps]);
    const ownerState = _extends({}, props, {
      isRtl,
      arrow: arrow2,
      disableInteractive,
      placement,
      PopperComponentProp,
      touch: ignoreNonTouchEvents.current
    });
    const classes = useUtilityClasses79(ownerState);
    const PopperComponent = (_ref = (_slots$popper = slots.popper) != null ? _slots$popper : components.Popper) != null ? _ref : TooltipPopper;
    const TransitionComponent = (_ref2 = (_ref3 = (_slots$transition = slots.transition) != null ? _slots$transition : components.Transition) != null ? _ref3 : TransitionComponentProp) != null ? _ref2 : Grow_default;
    const TooltipComponent = (_ref4 = (_slots$tooltip = slots.tooltip) != null ? _slots$tooltip : components.Tooltip) != null ? _ref4 : TooltipTooltip;
    const ArrowComponent = (_ref5 = (_slots$arrow = slots.arrow) != null ? _slots$arrow : components.Arrow) != null ? _ref5 : TooltipArrow;
    const popperProps = appendOwnerState_default(PopperComponent, _extends({}, PopperProps, (_slotProps$popper = slotProps.popper) != null ? _slotProps$popper : componentsProps.popper, {
      className: clsx_default(classes.popper, PopperProps == null ? void 0 : PopperProps.className, (_ref6 = (_slotProps$popper2 = slotProps.popper) != null ? _slotProps$popper2 : componentsProps.popper) == null ? void 0 : _ref6.className)
    }), ownerState);
    const transitionProps = appendOwnerState_default(TransitionComponent, _extends({}, TransitionProps, (_slotProps$transition = slotProps.transition) != null ? _slotProps$transition : componentsProps.transition), ownerState);
    const tooltipProps = appendOwnerState_default(TooltipComponent, _extends({}, (_slotProps$tooltip = slotProps.tooltip) != null ? _slotProps$tooltip : componentsProps.tooltip, {
      className: clsx_default(classes.tooltip, (_ref7 = (_slotProps$tooltip2 = slotProps.tooltip) != null ? _slotProps$tooltip2 : componentsProps.tooltip) == null ? void 0 : _ref7.className)
    }), ownerState);
    const tooltipArrowProps = appendOwnerState_default(ArrowComponent, _extends({}, (_slotProps$arrow = slotProps.arrow) != null ? _slotProps$arrow : componentsProps.arrow, {
      className: clsx_default(classes.arrow, (_ref8 = (_slotProps$arrow2 = slotProps.arrow) != null ? _slotProps$arrow2 : componentsProps.arrow) == null ? void 0 : _ref8.className)
    }), ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime201.jsxs)(React228.Fragment, {
      children: [/* @__PURE__ */ React228.cloneElement(children, childrenProps), /* @__PURE__ */ (0, import_jsx_runtime200.jsx)(PopperComponent, _extends({
        as: PopperComponentProp != null ? PopperComponentProp : Popper_default,
        placement,
        anchorEl: followCursor ? {
          getBoundingClientRect: () => ({
            top: cursorPosition.y,
            left: cursorPosition.x,
            right: cursorPosition.x,
            bottom: cursorPosition.y,
            width: 0,
            height: 0
          })
        } : childNode,
        popperRef,
        open: childNode ? open : false,
        id,
        transition: true
      }, interactiveWrapperListeners, popperProps, {
        popperOptions,
        children: ({
          TransitionProps: TransitionPropsInner
        }) => /* @__PURE__ */ (0, import_jsx_runtime200.jsx)(TransitionComponent, _extends({
          timeout: theme.transitions.duration.shorter
        }, TransitionPropsInner, transitionProps, {
          children: /* @__PURE__ */ (0, import_jsx_runtime201.jsxs)(TooltipComponent, _extends({}, tooltipProps, {
            children: [title, arrow2 ? /* @__PURE__ */ (0, import_jsx_runtime200.jsx)(ArrowComponent, _extends({}, tooltipArrowProps, {
              ref: setArrowRef
            })) : null]
          }))
        }))
      }))]
    });
  });
  true ? Tooltip.propTypes = {
    // ┌────────────────────────────── Warning ──────────────────────────────┐
    // │ These PropTypes are generated from the TypeScript type definitions. │
    // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
    // └─────────────────────────────────────────────────────────────────────┘
    /**
     * If `true`, adds an arrow to the tooltip.
     * @default false
     */
    arrow: import_prop_types127.default.bool,
    /**
     * Tooltip reference element.
     */
    children: elementAcceptingRef_default.isRequired,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types127.default.object,
    /**
     * @ignore
     */
    className: import_prop_types127.default.string,
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: import_prop_types127.default.shape({
      Arrow: import_prop_types127.default.elementType,
      Popper: import_prop_types127.default.elementType,
      Tooltip: import_prop_types127.default.elementType,
      Transition: import_prop_types127.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: import_prop_types127.default.shape({
      arrow: import_prop_types127.default.object,
      popper: import_prop_types127.default.object,
      tooltip: import_prop_types127.default.object,
      transition: import_prop_types127.default.object
    }),
    /**
     * Set to `true` if the `title` acts as an accessible description.
     * By default the `title` acts as an accessible label for the child.
     * @default false
     */
    describeChild: import_prop_types127.default.bool,
    /**
     * Do not respond to focus-visible events.
     * @default false
     */
    disableFocusListener: import_prop_types127.default.bool,
    /**
     * Do not respond to hover events.
     * @default false
     */
    disableHoverListener: import_prop_types127.default.bool,
    /**
     * Makes a tooltip not interactive, i.e. it will close when the user
     * hovers over the tooltip before the `leaveDelay` is expired.
     * @default false
     */
    disableInteractive: import_prop_types127.default.bool,
    /**
     * Do not respond to long press touch events.
     * @default false
     */
    disableTouchListener: import_prop_types127.default.bool,
    /**
     * The number of milliseconds to wait before showing the tooltip.
     * This prop won't impact the enter touch delay (`enterTouchDelay`).
     * @default 100
     */
    enterDelay: import_prop_types127.default.number,
    /**
     * The number of milliseconds to wait before showing the tooltip when one was already recently opened.
     * @default 0
     */
    enterNextDelay: import_prop_types127.default.number,
    /**
     * The number of milliseconds a user must touch the element before showing the tooltip.
     * @default 700
     */
    enterTouchDelay: import_prop_types127.default.number,
    /**
     * If `true`, the tooltip follow the cursor over the wrapped element.
     * @default false
     */
    followCursor: import_prop_types127.default.bool,
    /**
     * This prop is used to help implement the accessibility logic.
     * If you don't provide this prop. It falls back to a randomly generated id.
     */
    id: import_prop_types127.default.string,
    /**
     * The number of milliseconds to wait before hiding the tooltip.
     * This prop won't impact the leave touch delay (`leaveTouchDelay`).
     * @default 0
     */
    leaveDelay: import_prop_types127.default.number,
    /**
     * The number of milliseconds after the user stops touching an element before hiding the tooltip.
     * @default 1500
     */
    leaveTouchDelay: import_prop_types127.default.number,
    /**
     * Callback fired when the component requests to be closed.
     *
     * @param {React.SyntheticEvent} event The event source of the callback.
     */
    onClose: import_prop_types127.default.func,
    /**
     * Callback fired when the component requests to be open.
     *
     * @param {React.SyntheticEvent} event The event source of the callback.
     */
    onOpen: import_prop_types127.default.func,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types127.default.bool,
    /**
     * Tooltip placement.
     * @default 'bottom'
     */
    placement: import_prop_types127.default.oneOf(["bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    /**
     * The component used for the popper.
     * @default Popper
     */
    PopperComponent: import_prop_types127.default.elementType,
    /**
     * Props applied to the [`Popper`](/material-ui/api/popper/) element.
     * @default {}
     */
    PopperProps: import_prop_types127.default.object,
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: import_prop_types127.default.shape({
      arrow: import_prop_types127.default.object,
      popper: import_prop_types127.default.object,
      tooltip: import_prop_types127.default.object,
      transition: import_prop_types127.default.object
    }),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: import_prop_types127.default.shape({
      arrow: import_prop_types127.default.elementType,
      popper: import_prop_types127.default.elementType,
      tooltip: import_prop_types127.default.elementType,
      transition: import_prop_types127.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types127.default.oneOfType([import_prop_types127.default.arrayOf(import_prop_types127.default.oneOfType([import_prop_types127.default.func, import_prop_types127.default.object, import_prop_types127.default.bool])), import_prop_types127.default.func, import_prop_types127.default.object]),
    /**
     * Tooltip title. Zero-length titles string, undefined, null and false are never displayed.
     */
    title: import_prop_types127.default.node,
    /**
     * The component used for the transition.
     * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
     * @default Grow
     */
    TransitionComponent: import_prop_types127.default.elementType,
    /**
     * Props applied to the transition element.
     * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
     */
    TransitionProps: import_prop_types127.default.object
  } : void 0;
  var Tooltip_default = Tooltip;

  // node_modules/@mui/x-data-grid/material/icons/GridColumnUnsortedIcon.js
  init_extends();
  var React229 = __toESM(require_react());
  var import_jsx_runtime202 = __toESM(require_jsx_runtime());
  var _excluded124 = ["sortingOrder"];
  var GridColumnUnsortedIcon = /* @__PURE__ */ React229.memo(function GridColumnHeaderSortIcon2(props) {
    const {
      sortingOrder
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded124);
    const rootProps = useGridRootProps();
    const [nextSortDirection] = sortingOrder;
    const Icon = nextSortDirection === "asc" ? rootProps.slots.columnSortedAscendingIcon : rootProps.slots.columnSortedDescendingIcon;
    return Icon ? /* @__PURE__ */ (0, import_jsx_runtime202.jsx)(Icon, _extends({}, other)) : null;
  });

  // node_modules/@mui/x-data-grid/material/components/MUISelectOption.js
  init_extends();
  var React230 = __toESM(require_react());
  var import_jsx_runtime203 = __toESM(require_jsx_runtime());
  var _excluded125 = ["native"];
  function MUISelectOption(_ref) {
    let {
      native
    } = _ref, props = _objectWithoutPropertiesLoose(_ref, _excluded125);
    if (native) {
      return /* @__PURE__ */ (0, import_jsx_runtime203.jsx)("option", _extends({}, props));
    }
    return /* @__PURE__ */ (0, import_jsx_runtime203.jsx)(MenuItem_default, _extends({}, props));
  }

  // node_modules/@mui/x-data-grid/material/index.js
  var iconSlots = {
    BooleanCellTrueIcon: GridCheckIcon,
    BooleanCellFalseIcon: GridCloseIcon,
    ColumnMenuIcon: GridTripleDotsVerticalIcon,
    OpenFilterButtonIcon: GridFilterListIcon,
    FilterPanelDeleteIcon: GridCloseIcon,
    ColumnFilteredIcon: GridFilterAltIcon,
    ColumnSelectorIcon: GridColumnIcon,
    ColumnUnsortedIcon: GridColumnUnsortedIcon,
    ColumnSortedAscendingIcon: GridArrowUpwardIcon,
    ColumnSortedDescendingIcon: GridArrowDownwardIcon,
    ColumnResizeIcon: GridSeparatorIcon,
    DensityCompactIcon: GridViewHeadlineIcon,
    DensityStandardIcon: GridTableRowsIcon,
    DensityComfortableIcon: GridViewStreamIcon,
    ExportIcon: GridSaveAltIcon,
    MoreActionsIcon: GridMoreVertIcon,
    TreeDataCollapseIcon: GridExpandMoreIcon,
    TreeDataExpandIcon: GridKeyboardArrowRight,
    GroupingCriteriaCollapseIcon: GridExpandMoreIcon,
    GroupingCriteriaExpandIcon: GridKeyboardArrowRight,
    DetailPanelExpandIcon: GridAddIcon,
    DetailPanelCollapseIcon: GridRemoveIcon,
    RowReorderIcon: GridDragIcon,
    QuickFilterIcon: GridSearchIcon,
    QuickFilterClearIcon: GridCloseIcon,
    ColumnMenuHideIcon: GridVisibilityOffIcon,
    ColumnMenuSortAscendingIcon: GridArrowUpwardIcon,
    ColumnMenuSortDescendingIcon: GridArrowDownwardIcon,
    ColumnMenuFilterIcon: GridFilterAltIcon,
    ColumnMenuManageColumnsIcon: GridViewColumnIcon,
    ColumnMenuClearIcon: GridClearIcon,
    LoadIcon: GridLoadIcon,
    FilterPanelAddIcon: GridAddIcon,
    FilterPanelRemoveAllIcon: GridDeleteForeverIcon,
    ColumnReorderIcon: GridDragIcon
  };
  var materialSlots = _extends({}, iconSlots, {
    BaseCheckbox: Checkbox_default,
    BaseTextField: TextField_default,
    BaseFormControl: FormControl_default,
    BaseSelect: Select_default,
    BaseSwitch: Switch_default,
    BaseButton: Button_default,
    BaseIconButton: IconButton_default,
    BaseInputAdornment: InputAdornment_default,
    BaseTooltip: Tooltip_default,
    BasePopper: Popper_default,
    BaseInputLabel: InputLabel_default,
    BaseSelectOption: MUISelectOption,
    BaseChip: Chip_default
  });
  var material_default = materialSlots;

  // node_modules/@mui/x-data-grid/constants/defaultGridSlotsComponents.js
  var DATA_GRID_DEFAULT_SLOTS_COMPONENTS = _extends({}, material_default, {
    Cell: MemoizedGridCellV7,
    SkeletonCell: GridSkeletonCell,
    ColumnHeaderFilterIconButton: GridColumnHeaderFilterIconButton,
    ColumnMenu: GridColumnMenu,
    ColumnHeaders: MemoizedGridColumnHeaders,
    Footer: GridFooter,
    FooterRowCount: GridRowCount,
    Toolbar: null,
    PreferencesPanel: GridPreferencesPanel,
    LoadingOverlay: GridLoadingOverlay,
    NoResultsOverlay: GridNoResultsOverlay,
    NoRowsOverlay: GridNoRowsOverlay,
    Pagination: GridPagination,
    FilterPanel: GridFilterPanel,
    ColumnsPanel: GridColumnsPanel,
    Panel: GridPanel,
    Row: MemoizedGridRow
  });

  // node_modules/@mui/x-data-grid/internals/utils/computeSlots.js
  init_extends();

  // node_modules/@mui/x-data-grid/internals/utils/slotsMigration.js
  init_extends();
  var uncapitalizeObjectKeys = (capitalizedObject) => {
    if (capitalizedObject === void 0) {
      return void 0;
    }
    return Object.keys(capitalizedObject).reduce((acc, key) => _extends({}, acc, {
      [`${key.charAt(0).toLowerCase()}${key.slice(1)}`]: capitalizedObject[key]
    }), {});
  };

  // node_modules/@mui/x-data-grid/internals/utils/computeSlots.js
  function computeSlots({
    defaultSlots: defaultSlots2,
    slots,
    components
  }) {
    const overrides = slots != null ? slots : components ? uncapitalizeObjectKeys(components) : null;
    if (!overrides || Object.keys(overrides).length === 0) {
      return defaultSlots2;
    }
    const result = _extends({}, defaultSlots2);
    Object.keys(overrides).forEach((key) => {
      const k = key;
      if (overrides[k] !== void 0) {
        result[k] = overrides[k];
      }
    });
    return result;
  }

  // node_modules/@mui/x-data-grid/internals/utils/useProps.js
  var React231 = __toESM(require_react());
  var _excluded126 = ["components", "componentsProps"];
  function groupForwardedProps(props) {
    var _props$forwardedProps;
    const keys = Object.keys(props);
    if (!keys.some((key) => key.startsWith("aria-") || key.startsWith("data-"))) {
      return props;
    }
    const newProps = {};
    const forwardedProps = (_props$forwardedProps = props.forwardedProps) != null ? _props$forwardedProps : {};
    for (let i = 0; i < keys.length; i += 1) {
      const key = keys[i];
      if (key.startsWith("aria-") || key.startsWith("data-")) {
        forwardedProps[key] = props[key];
      } else {
        newProps[key] = props[key];
      }
    }
    newProps.forwardedProps = forwardedProps;
    return newProps;
  }
  function useProps(allProps) {
    return React231.useMemo(() => {
      const {
        components,
        componentsProps
      } = allProps, themedProps = _objectWithoutPropertiesLoose(allProps, _excluded126);
      return [components, componentsProps, groupForwardedProps(themedProps)];
    }, [allProps]);
  }

  // node_modules/@mui/x-data-grid/DataGrid/useDataGridProps.js
  var DATA_GRID_FORCED_PROPS = {
    disableMultipleColumnsFiltering: true,
    disableMultipleColumnsSorting: true,
    disableMultipleRowSelection: true,
    throttleRowsMs: void 0,
    hideFooterRowCount: false,
    pagination: true,
    checkboxSelectionVisibleOnly: false,
    disableColumnReorder: true,
    disableColumnResize: true,
    keepColumnPositionIfDraggedOutside: false,
    signature: "DataGrid"
  };
  var DATA_GRID_PROPS_DEFAULT_VALUES = {
    autoHeight: false,
    autoPageSize: false,
    checkboxSelection: false,
    checkboxSelectionVisibleOnly: false,
    columnBuffer: 3,
    rowBuffer: 3,
    columnThreshold: 3,
    rowThreshold: 3,
    rowSelection: true,
    density: "standard",
    disableColumnFilter: false,
    disableColumnMenu: false,
    disableColumnSelector: false,
    disableDensitySelector: false,
    disableEval: false,
    disableMultipleColumnsFiltering: false,
    disableMultipleRowSelection: false,
    disableMultipleColumnsSorting: false,
    disableRowSelectionOnClick: false,
    disableVirtualization: false,
    editMode: GridEditModes.Cell,
    filterMode: "client",
    filterDebounceMs: 150,
    columnHeaderHeight: 56,
    hideFooter: false,
    hideFooterPagination: false,
    hideFooterRowCount: false,
    hideFooterSelectedRowCount: false,
    ignoreDiacritics: false,
    logger: console,
    logLevel: false ? "error" : "warn",
    pagination: false,
    paginationMode: "client",
    rowHeight: 52,
    pageSizeOptions: [25, 50, 100],
    rowSpacingType: "margin",
    showCellVerticalBorder: false,
    showColumnVerticalBorder: false,
    sortingOrder: ["asc", "desc", null],
    sortingMode: "client",
    throttleRowsMs: 0,
    disableColumnReorder: false,
    disableColumnResize: false,
    keepNonExistentRowsSelected: false,
    keepColumnPositionIfDraggedOutside: false,
    unstable_ignoreValueFormatterDuringExport: false,
    clipboardCopyCellDelimiter: "	",
    rowPositionsDebounceMs: 166
  };
  var defaultSlots = uncapitalizeObjectKeys(DATA_GRID_DEFAULT_SLOTS_COMPONENTS);
  var useDataGridProps = (inProps) => {
    const [components, componentsProps, themedProps] = useProps(useThemeProps2({
      props: inProps,
      name: "MuiDataGrid"
    }));
    const localeText = React232.useMemo(() => _extends({}, GRID_DEFAULT_LOCALE_TEXT, themedProps.localeText), [themedProps.localeText]);
    const slots = React232.useMemo(() => computeSlots({
      defaultSlots,
      slots: themedProps.slots,
      components
    }), [components, themedProps.slots]);
    return React232.useMemo(() => {
      var _themedProps$slotProp;
      return _extends({}, DATA_GRID_PROPS_DEFAULT_VALUES, themedProps, {
        localeText,
        slots,
        slotProps: (_themedProps$slotProp = themedProps.slotProps) != null ? _themedProps$slotProp : componentsProps
      }, DATA_GRID_FORCED_PROPS);
    }, [themedProps, localeText, slots, componentsProps]);
  };

  // node_modules/@mui/x-data-grid/hooks/features/rows/useGridRowsMeta.js
  var rowsMetaStateInitializer = (state) => _extends({}, state, {
    rowsMeta: {
      currentPageTotalHeight: 0,
      positions: []
    }
  });
  var warnedOnceInvalidRowHeight = false;
  var getValidRowHeight = (rowHeightProp, defaultRowHeight, warningMessage) => {
    if (typeof rowHeightProp === "number" && rowHeightProp > 0) {
      return rowHeightProp;
    }
    if (!warnedOnceInvalidRowHeight && typeof rowHeightProp !== "undefined" && rowHeightProp !== null) {
      console.warn(warningMessage);
      warnedOnceInvalidRowHeight = true;
    }
    return defaultRowHeight;
  };
  var rowHeightWarning = [`MUI: The \`rowHeight\` prop should be a number greater than 0.`, `The default value will be used instead.`].join("\n");
  var getRowHeightWarning = [`MUI: The \`getRowHeight\` prop should return a number greater than 0 or 'auto'.`, `The default value will be used instead.`].join("\n");
  var useGridRowsMeta = (apiRef, props) => {
    const {
      getRowHeight: getRowHeightProp,
      getRowSpacing,
      getEstimatedRowHeight
    } = props;
    const rowsHeightLookup = React233.useRef(/* @__PURE__ */ Object.create(null));
    const lastMeasuredRowIndex = React233.useRef(-1);
    const hasRowWithAutoHeight = React233.useRef(false);
    const densityFactor = useGridSelector(apiRef, gridDensityFactorSelector);
    const filterModel = useGridSelector(apiRef, gridFilterModelSelector);
    const paginationState = useGridSelector(apiRef, gridPaginationSelector);
    const sortModel = useGridSelector(apiRef, gridSortModelSelector);
    const currentPage = useGridVisibleRows(apiRef, props);
    const pinnedRows = useGridSelector(apiRef, gridPinnedRowsSelector);
    const validRowHeight = getValidRowHeight(props.rowHeight, DATA_GRID_PROPS_DEFAULT_VALUES.rowHeight, rowHeightWarning);
    const rowHeight = Math.floor(validRowHeight * densityFactor);
    const hydrateRowsMeta = React233.useCallback(() => {
      var _pinnedRows$top, _pinnedRows$bottom;
      hasRowWithAutoHeight.current = false;
      const calculateRowProcessedSizes = (row) => {
        if (!rowsHeightLookup.current[row.id]) {
          rowsHeightLookup.current[row.id] = {
            sizes: {
              baseCenter: rowHeight
            },
            isResized: false,
            autoHeight: false,
            needsFirstMeasurement: true
            // Assume all rows will need to be measured by default
          };
        }
        const {
          isResized,
          needsFirstMeasurement,
          sizes
        } = rowsHeightLookup.current[row.id];
        let baseRowHeight = typeof rowHeight === "number" && rowHeight > 0 ? rowHeight : 52;
        const existingBaseRowHeight = sizes.baseCenter;
        if (isResized) {
          baseRowHeight = existingBaseRowHeight;
        } else if (getRowHeightProp) {
          const rowHeightFromUser = getRowHeightProp(_extends({}, row, {
            densityFactor
          }));
          if (rowHeightFromUser === "auto") {
            if (needsFirstMeasurement) {
              const estimatedRowHeight = getEstimatedRowHeight ? getEstimatedRowHeight(_extends({}, row, {
                densityFactor
              })) : rowHeight;
              baseRowHeight = estimatedRowHeight != null ? estimatedRowHeight : rowHeight;
            } else {
              baseRowHeight = existingBaseRowHeight;
            }
            hasRowWithAutoHeight.current = true;
            rowsHeightLookup.current[row.id].autoHeight = true;
          } else {
            baseRowHeight = getValidRowHeight(rowHeightFromUser, rowHeight, getRowHeightWarning);
            rowsHeightLookup.current[row.id].needsFirstMeasurement = false;
            rowsHeightLookup.current[row.id].autoHeight = false;
          }
        } else {
          rowsHeightLookup.current[row.id].needsFirstMeasurement = false;
        }
        const initialHeights = {};
        for (const key in sizes) {
          if (/^base[A-Z]/.test(key)) {
            initialHeights[key] = sizes[key];
          }
        }
        initialHeights.baseCenter = baseRowHeight;
        if (getRowSpacing) {
          var _spacing$top, _spacing$bottom;
          const indexRelativeToCurrentPage = apiRef.current.getRowIndexRelativeToVisibleRows(row.id);
          const spacing2 = getRowSpacing(_extends({}, row, {
            isFirstVisible: indexRelativeToCurrentPage === 0,
            isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,
            indexRelativeToCurrentPage
          }));
          initialHeights.spacingTop = (_spacing$top = spacing2.top) != null ? _spacing$top : 0;
          initialHeights.spacingBottom = (_spacing$bottom = spacing2.bottom) != null ? _spacing$bottom : 0;
        }
        const processedSizes = apiRef.current.unstable_applyPipeProcessors("rowHeight", initialHeights, row);
        rowsHeightLookup.current[row.id].sizes = processedSizes;
        return processedSizes;
      };
      const positions = [];
      const currentPageTotalHeight = currentPage.rows.reduce((acc, row) => {
        positions.push(acc);
        let maximumBaseSize = 0;
        let otherSizes = 0;
        const processedSizes = calculateRowProcessedSizes(row);
        for (const key in processedSizes) {
          const value = processedSizes[key];
          if (/^base[A-Z]/.test(key)) {
            maximumBaseSize = value > maximumBaseSize ? value : maximumBaseSize;
          } else {
            otherSizes += value;
          }
        }
        return acc + maximumBaseSize + otherSizes;
      }, 0);
      pinnedRows == null || (_pinnedRows$top = pinnedRows.top) == null || _pinnedRows$top.forEach((row) => {
        calculateRowProcessedSizes(row);
      });
      pinnedRows == null || (_pinnedRows$bottom = pinnedRows.bottom) == null || _pinnedRows$bottom.forEach((row) => {
        calculateRowProcessedSizes(row);
      });
      apiRef.current.setState((state) => {
        return _extends({}, state, {
          rowsMeta: {
            currentPageTotalHeight,
            positions
          }
        });
      });
      if (!hasRowWithAutoHeight.current) {
        lastMeasuredRowIndex.current = Infinity;
      }
      apiRef.current.forceUpdate();
    }, [apiRef, currentPage.rows, rowHeight, getRowHeightProp, getRowSpacing, getEstimatedRowHeight, pinnedRows, densityFactor]);
    const getRowHeight = React233.useCallback((rowId) => {
      const height2 = rowsHeightLookup.current[rowId];
      return height2 ? height2.sizes.baseCenter : rowHeight;
    }, [rowHeight]);
    const getRowInternalSizes = (rowId) => {
      var _rowsHeightLookup$cur;
      return (_rowsHeightLookup$cur = rowsHeightLookup.current[rowId]) == null ? void 0 : _rowsHeightLookup$cur.sizes;
    };
    const setRowHeight = React233.useCallback((id, height2) => {
      rowsHeightLookup.current[id].sizes.baseCenter = height2;
      rowsHeightLookup.current[id].isResized = true;
      rowsHeightLookup.current[id].needsFirstMeasurement = false;
      hydrateRowsMeta();
    }, [hydrateRowsMeta]);
    const debouncedHydrateRowsMeta = React233.useMemo(() => debounce(hydrateRowsMeta, props.rowPositionsDebounceMs), [hydrateRowsMeta, props.rowPositionsDebounceMs]);
    const storeMeasuredRowHeight = React233.useCallback((id, height2, position2) => {
      if (!rowsHeightLookup.current[id] || !rowsHeightLookup.current[id].autoHeight) {
        return;
      }
      const needsHydration = rowsHeightLookup.current[id].sizes[`base${capitalize(position2)}`] !== height2;
      rowsHeightLookup.current[id].needsFirstMeasurement = false;
      rowsHeightLookup.current[id].sizes[`base${capitalize(position2)}`] = height2;
      if (needsHydration) {
        debouncedHydrateRowsMeta();
      }
    }, [debouncedHydrateRowsMeta]);
    const rowHasAutoHeight = React233.useCallback((id) => {
      var _rowsHeightLookup$cur2;
      return ((_rowsHeightLookup$cur2 = rowsHeightLookup.current[id]) == null ? void 0 : _rowsHeightLookup$cur2.autoHeight) || false;
    }, []);
    const getLastMeasuredRowIndex = React233.useCallback(() => {
      return lastMeasuredRowIndex.current;
    }, []);
    const setLastMeasuredRowIndex = React233.useCallback((index) => {
      if (hasRowWithAutoHeight.current && index > lastMeasuredRowIndex.current) {
        lastMeasuredRowIndex.current = index;
      }
    }, []);
    const resetRowHeights = React233.useCallback(() => {
      rowsHeightLookup.current = {};
      hydrateRowsMeta();
    }, [hydrateRowsMeta]);
    React233.useEffect(() => {
      hydrateRowsMeta();
    }, [rowHeight, filterModel, paginationState, sortModel, hydrateRowsMeta]);
    useGridRegisterPipeApplier(apiRef, "rowHeight", hydrateRowsMeta);
    const rowsMetaApi = {
      unstable_setLastMeasuredRowIndex: setLastMeasuredRowIndex,
      unstable_getRowHeight: getRowHeight,
      unstable_getRowInternalSizes: getRowInternalSizes,
      unstable_setRowHeight: setRowHeight,
      unstable_storeRowHeightMeasurement: storeMeasuredRowHeight,
      resetRowHeights
    };
    const rowsMetaPrivateApi = {
      getLastMeasuredRowIndex,
      rowHasAutoHeight
    };
    useGridApiMethod(apiRef, rowsMetaApi, "public");
    useGridApiMethod(apiRef, rowsMetaPrivateApi, "private");
  };

  // node_modules/@mui/x-data-grid/hooks/features/statePersistence/useGridStatePersistence.js
  var React234 = __toESM(require_react());
  var useGridStatePersistence = (apiRef) => {
    const exportState = React234.useCallback((params = {}) => {
      const stateToExport = apiRef.current.unstable_applyPipeProcessors("exportState", {}, params);
      return stateToExport;
    }, [apiRef]);
    const restoreState = React234.useCallback((stateToRestore) => {
      const response = apiRef.current.unstable_applyPipeProcessors("restoreState", {
        callbacks: []
      }, {
        stateToRestore
      });
      response.callbacks.forEach((callback) => {
        callback();
      });
      apiRef.current.forceUpdate();
    }, [apiRef]);
    const statePersistenceApi = {
      exportState,
      restoreState
    };
    useGridApiMethod(apiRef, statePersistenceApi, "public");
  };

  // node_modules/@mui/x-data-grid/hooks/features/columns/useGridColumnSpanning.js
  var React235 = __toESM(require_react());
  var useGridColumnSpanning = (apiRef) => {
    const lookup = React235.useRef({});
    const setCellColSpanInfo = React235.useCallback((rowId, columnIndex, cellColSpanInfo) => {
      const sizes = lookup.current;
      if (!sizes[rowId]) {
        sizes[rowId] = {};
      }
      sizes[rowId][columnIndex] = cellColSpanInfo;
    }, []);
    const getCellColSpanInfo = React235.useCallback((rowId, columnIndex) => {
      var _lookup$current$rowId;
      return (_lookup$current$rowId = lookup.current[rowId]) == null ? void 0 : _lookup$current$rowId[columnIndex];
    }, []);
    const calculateCellColSpan = React235.useCallback((params) => {
      const {
        columnIndex,
        rowId,
        minFirstColumnIndex,
        maxLastColumnIndex,
        columns
      } = params;
      const columnsLength = columns.length;
      const column2 = columns[columnIndex];
      const colSpan = typeof column2.colSpan === "function" ? column2.colSpan(apiRef.current.getCellParams(rowId, column2.field)) : column2.colSpan;
      if (!colSpan || colSpan === 1) {
        setCellColSpanInfo(rowId, columnIndex, {
          spannedByColSpan: false,
          cellProps: {
            colSpan: 1,
            width: column2.computedWidth
          }
        });
        return {
          colSpan: 1
        };
      }
      let width2 = column2.computedWidth;
      for (let j = 1; j < colSpan; j += 1) {
        const nextColumnIndex = columnIndex + j;
        if (nextColumnIndex >= minFirstColumnIndex && nextColumnIndex < maxLastColumnIndex) {
          const nextColumn = columns[nextColumnIndex];
          width2 += nextColumn.computedWidth;
          setCellColSpanInfo(rowId, columnIndex + j, {
            spannedByColSpan: true,
            rightVisibleCellIndex: Math.min(columnIndex + colSpan, columnsLength - 1),
            leftVisibleCellIndex: columnIndex
          });
        }
        setCellColSpanInfo(rowId, columnIndex, {
          spannedByColSpan: false,
          cellProps: {
            colSpan,
            width: width2
          }
        });
      }
      return {
        colSpan
      };
    }, [apiRef, setCellColSpanInfo]);
    const calculateColSpan = React235.useCallback(({
      rowId,
      minFirstColumn,
      maxLastColumn,
      columns
    }) => {
      for (let i = minFirstColumn; i < maxLastColumn; i += 1) {
        const cellProps = calculateCellColSpan({
          columnIndex: i,
          rowId,
          minFirstColumnIndex: minFirstColumn,
          maxLastColumnIndex: maxLastColumn,
          columns
        });
        if (cellProps.colSpan > 1) {
          i += cellProps.colSpan - 1;
        }
      }
    }, [calculateCellColSpan]);
    const columnSpanningPublicApi = {
      unstable_getCellColSpanInfo: getCellColSpanInfo
    };
    const columnSpanningPrivateApi = {
      calculateColSpan
    };
    useGridApiMethod(apiRef, columnSpanningPublicApi, "public");
    useGridApiMethod(apiRef, columnSpanningPrivateApi, "private");
    const handleColumnReorderChange = React235.useCallback(() => {
      lookup.current = {};
    }, []);
    useGridApiEventHandler(apiRef, "columnOrderChange", handleColumnReorderChange);
  };

  // node_modules/@mui/x-data-grid/hooks/features/columnGrouping/useGridColumnGrouping.js
  init_extends();
  var React236 = __toESM(require_react());

  // node_modules/@mui/x-data-grid/hooks/features/columnGrouping/gridColumnGroupsUtils.js
  var recurrentUnwrapGroupingColumnModel = (columnGroupNode, parents, unwrappedGroupingModelToComplete) => {
    if (isLeaf(columnGroupNode)) {
      if (unwrappedGroupingModelToComplete[columnGroupNode.field] !== void 0) {
        throw new Error([`MUI: columnGroupingModel contains duplicated field`, `column field ${columnGroupNode.field} occurs two times in the grouping model:`, `- ${unwrappedGroupingModelToComplete[columnGroupNode.field].join(" > ")}`, `- ${parents.join(" > ")}`].join("\n"));
      }
      unwrappedGroupingModelToComplete[columnGroupNode.field] = parents;
      return;
    }
    const {
      groupId,
      children
    } = columnGroupNode;
    children.forEach((child) => {
      recurrentUnwrapGroupingColumnModel(child, [...parents, groupId], unwrappedGroupingModelToComplete);
    });
  };
  var unwrapGroupingColumnModel = (columnGroupingModel) => {
    if (!columnGroupingModel) {
      return {};
    }
    const unwrappedSubTree = {};
    columnGroupingModel.forEach((columnGroupNode) => {
      recurrentUnwrapGroupingColumnModel(columnGroupNode, [], unwrappedSubTree);
    });
    return unwrappedSubTree;
  };
  var getColumnGroupsHeaderStructure = (orderedColumns, unwrappedGroupingModel, pinnedFields) => {
    const getParents = (field) => {
      var _unwrappedGroupingMod;
      return (_unwrappedGroupingMod = unwrappedGroupingModel[field]) != null ? _unwrappedGroupingMod : [];
    };
    const groupingHeaderStructure = [];
    const maxDepth = Math.max(...orderedColumns.map((field) => getParents(field).length));
    const haveSameParents = (field1, field2, depth) => isDeepEqual(getParents(field1).slice(0, depth + 1), getParents(field2).slice(0, depth + 1));
    const haveDifferentContainers = (field1, field2) => {
      if (pinnedFields != null && pinnedFields.left && pinnedFields.left.includes(field1) && !pinnedFields.left.includes(field2)) {
        return true;
      }
      if (pinnedFields != null && pinnedFields.right && !pinnedFields.right.includes(field1) && pinnedFields.right.includes(field2)) {
        return true;
      }
      return false;
    };
    for (let depth = 0; depth < maxDepth; depth += 1) {
      const depthStructure = orderedColumns.reduce((structure, newField) => {
        var _getParents$depth;
        const groupId = (_getParents$depth = getParents(newField)[depth]) != null ? _getParents$depth : null;
        if (structure.length === 0) {
          return [{
            columnFields: [newField],
            groupId
          }];
        }
        const lastGroup = structure[structure.length - 1];
        const prevField = lastGroup.columnFields[lastGroup.columnFields.length - 1];
        const prevGroupId = lastGroup.groupId;
        if (prevGroupId !== groupId || !haveSameParents(prevField, newField, depth) || // Fix for https://github.com/mui/mui-x/issues/7041
        haveDifferentContainers(prevField, newField)) {
          return [...structure, {
            columnFields: [newField],
            groupId
          }];
        }
        return [...structure.slice(0, structure.length - 1), {
          columnFields: [...lastGroup.columnFields, newField],
          groupId
        }];
      }, []);
      groupingHeaderStructure.push(depthStructure);
    }
    return groupingHeaderStructure;
  };

  // node_modules/@mui/x-data-grid/hooks/features/columnGrouping/useGridColumnGrouping.js
  var _excluded127 = ["groupId", "children"];
  var createGroupLookup = (columnGroupingModel) => {
    let groupLookup = {};
    columnGroupingModel.forEach((node2) => {
      if (isLeaf(node2)) {
        return;
      }
      const {
        groupId,
        children
      } = node2, other = _objectWithoutPropertiesLoose(node2, _excluded127);
      if (!groupId) {
        throw new Error("MUI: An element of the columnGroupingModel does not have either `field` or `groupId`.");
      }
      if (!children) {
        console.warn(`MUI: group groupId=${groupId} has no children.`);
      }
      const groupParam = _extends({}, other, {
        groupId
      });
      const subTreeLookup = createGroupLookup(children);
      if (subTreeLookup[groupId] !== void 0 || groupLookup[groupId] !== void 0) {
        throw new Error(`MUI: The groupId ${groupId} is used multiple times in the columnGroupingModel.`);
      }
      groupLookup = _extends({}, groupLookup, subTreeLookup, {
        [groupId]: groupParam
      });
    });
    return _extends({}, groupLookup);
  };
  var columnGroupsStateInitializer = (state, props, apiRef) => {
    var _props$experimentalFe, _props$columnGrouping, _props$columnGrouping2, _apiRef$current$state;
    if (!((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.columnGrouping)) {
      return state;
    }
    const columnFields = gridColumnFieldsSelector(apiRef);
    const visibleColumnFields = gridVisibleColumnFieldsSelector(apiRef);
    const groupLookup = createGroupLookup((_props$columnGrouping = props.columnGroupingModel) != null ? _props$columnGrouping : []);
    const unwrappedGroupingModel = unwrapGroupingColumnModel((_props$columnGrouping2 = props.columnGroupingModel) != null ? _props$columnGrouping2 : []);
    const columnGroupsHeaderStructure = getColumnGroupsHeaderStructure(
      columnFields,
      unwrappedGroupingModel,
      // @ts-expect-error Move this part to `Pro` package
      (_apiRef$current$state = apiRef.current.state.pinnedColumns) != null ? _apiRef$current$state : {}
    );
    const maxDepth = visibleColumnFields.length === 0 ? 0 : Math.max(...visibleColumnFields.map((field) => {
      var _unwrappedGroupingMod, _unwrappedGroupingMod2;
      return (_unwrappedGroupingMod = (_unwrappedGroupingMod2 = unwrappedGroupingModel[field]) == null ? void 0 : _unwrappedGroupingMod2.length) != null ? _unwrappedGroupingMod : 0;
    }));
    return _extends({}, state, {
      columnGrouping: {
        lookup: groupLookup,
        unwrappedGroupingModel,
        headerStructure: columnGroupsHeaderStructure,
        maxDepth
      }
    });
  };
  var useGridColumnGrouping = (apiRef, props) => {
    var _props$experimentalFe3;
    const getColumnGroupPath = React236.useCallback((field) => {
      var _unwrappedGroupingMod3;
      const unwrappedGroupingModel = gridColumnGroupsUnwrappedModelSelector(apiRef);
      return (_unwrappedGroupingMod3 = unwrappedGroupingModel[field]) != null ? _unwrappedGroupingMod3 : [];
    }, [apiRef]);
    const getAllGroupDetails = React236.useCallback(() => {
      const columnGroupLookup = gridColumnGroupsLookupSelector(apiRef);
      return columnGroupLookup;
    }, [apiRef]);
    const columnGroupingApi = {
      unstable_getColumnGroupPath: getColumnGroupPath,
      unstable_getAllGroupDetails: getAllGroupDetails
    };
    useGridApiMethod(apiRef, columnGroupingApi, "public");
    const handleColumnIndexChange = React236.useCallback(() => {
      var _props$columnGrouping3;
      const unwrappedGroupingModel = unwrapGroupingColumnModel((_props$columnGrouping3 = props.columnGroupingModel) != null ? _props$columnGrouping3 : []);
      apiRef.current.setState((state) => {
        var _state$columns$ordere, _state$columns, _state$pinnedColumns;
        const orderedFields = (_state$columns$ordere = (_state$columns = state.columns) == null ? void 0 : _state$columns.orderedFields) != null ? _state$columns$ordere : [];
        const pinnedColumns = (_state$pinnedColumns = state.pinnedColumns) != null ? _state$pinnedColumns : {};
        const columnGroupsHeaderStructure = getColumnGroupsHeaderStructure(orderedFields, unwrappedGroupingModel, pinnedColumns);
        return _extends({}, state, {
          columnGrouping: _extends({}, state.columnGrouping, {
            headerStructure: columnGroupsHeaderStructure
          })
        });
      });
    }, [apiRef, props.columnGroupingModel]);
    const updateColumnGroupingState = React236.useCallback((columnGroupingModel) => {
      var _props$experimentalFe2, _apiRef$current$getPi, _apiRef$current$getPi2, _apiRef$current;
      if (!((_props$experimentalFe2 = props.experimentalFeatures) != null && _props$experimentalFe2.columnGrouping)) {
        return;
      }
      const pinnedColumns = (_apiRef$current$getPi = (_apiRef$current$getPi2 = (_apiRef$current = apiRef.current).getPinnedColumns) == null ? void 0 : _apiRef$current$getPi2.call(_apiRef$current)) != null ? _apiRef$current$getPi : {};
      const columnFields = gridColumnFieldsSelector(apiRef);
      const visibleColumnFields = gridVisibleColumnFieldsSelector(apiRef);
      const groupLookup = createGroupLookup(columnGroupingModel != null ? columnGroupingModel : []);
      const unwrappedGroupingModel = unwrapGroupingColumnModel(columnGroupingModel != null ? columnGroupingModel : []);
      const columnGroupsHeaderStructure = getColumnGroupsHeaderStructure(columnFields, unwrappedGroupingModel, pinnedColumns);
      const maxDepth = visibleColumnFields.length === 0 ? 0 : Math.max(...visibleColumnFields.map((field) => {
        var _unwrappedGroupingMod4, _unwrappedGroupingMod5;
        return (_unwrappedGroupingMod4 = (_unwrappedGroupingMod5 = unwrappedGroupingModel[field]) == null ? void 0 : _unwrappedGroupingMod5.length) != null ? _unwrappedGroupingMod4 : 0;
      }));
      apiRef.current.setState((state) => {
        return _extends({}, state, {
          columnGrouping: {
            lookup: groupLookup,
            unwrappedGroupingModel,
            headerStructure: columnGroupsHeaderStructure,
            maxDepth
          }
        });
      });
    }, [apiRef, (_props$experimentalFe3 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe3.columnGrouping]);
    useGridApiEventHandler(apiRef, "columnIndexChange", handleColumnIndexChange);
    useGridApiEventHandler(apiRef, "columnsChange", () => {
      updateColumnGroupingState(props.columnGroupingModel);
    });
    useGridApiEventHandler(apiRef, "columnVisibilityModelChange", () => {
      updateColumnGroupingState(props.columnGroupingModel);
    });
    React236.useEffect(() => {
      updateColumnGroupingState(props.columnGroupingModel);
    }, [updateColumnGroupingState, props.columnGroupingModel]);
  };

  // node_modules/@mui/x-data-grid/DataGrid/useDataGridComponent.js
  var useDataGridComponent = (inputApiRef, props) => {
    const apiRef = useGridInitialization(inputApiRef, props);
    useGridRowSelectionPreProcessors(apiRef, props);
    useGridRowsPreProcessors(apiRef);
    useGridInitializeState(rowSelectionStateInitializer, apiRef, props);
    useGridInitializeState(columnsStateInitializer, apiRef, props);
    useGridInitializeState(rowsStateInitializer, apiRef, props);
    useGridInitializeState(editingStateInitializer, apiRef, props);
    useGridInitializeState(focusStateInitializer, apiRef, props);
    useGridInitializeState(sortingStateInitializer, apiRef, props);
    useGridInitializeState(preferencePanelStateInitializer, apiRef, props);
    useGridInitializeState(filterStateInitializer, apiRef, props);
    useGridInitializeState(densityStateInitializer, apiRef, props);
    useGridInitializeState(paginationStateInitializer, apiRef, props);
    useGridInitializeState(rowsMetaStateInitializer, apiRef, props);
    useGridInitializeState(columnMenuStateInitializer, apiRef, props);
    useGridInitializeState(columnGroupsStateInitializer, apiRef, props);
    useGridInitializeState(virtualizationStateInitializer, apiRef, props);
    useGridKeyboardNavigation(apiRef, props);
    useGridRowSelection(apiRef, props);
    useGridColumns(apiRef, props);
    useGridRows(apiRef, props);
    useGridParamsApi(apiRef, props);
    useGridColumnSpanning(apiRef);
    useGridColumnGrouping(apiRef, props);
    useGridEditing(apiRef, props);
    useGridFocus(apiRef, props);
    useGridPreferencesPanel(apiRef, props);
    useGridFilter(apiRef, props);
    useGridSorting(apiRef, props);
    useGridDensity(apiRef, props);
    useGridPagination(apiRef, props);
    useGridRowsMeta(apiRef, props);
    useGridScroll(apiRef, props);
    useGridColumnMenu(apiRef);
    useGridCsvExport(apiRef, props);
    useGridPrintExport(apiRef, props);
    useGridClipboard(apiRef, props);
    useGridDimensions(apiRef, props);
    useGridEvents(apiRef, props);
    useGridStatePersistence(apiRef);
    useGridVirtualization(apiRef, props);
    return apiRef;
  };

  // node_modules/@mui/x-data-grid/components/DataGridVirtualScroller.js
  init_extends();
  var React240 = __toESM(require_react());

  // node_modules/@mui/x-data-grid/components/virtualization/GridVirtualScroller.js
  init_extends();
  var React237 = __toESM(require_react());
  var import_jsx_runtime204 = __toESM(require_jsx_runtime());
  var useUtilityClasses80 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["virtualScroller"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var VirtualScrollerRoot = styled_default("div", {
    name: "MuiDataGrid",
    slot: "VirtualScroller",
    overridesResolver: (props, styles4) => styles4.virtualScroller
  })({
    overflow: "auto",
    height: "100%",
    // See https://github.com/mui/mui-x/issues/4360
    position: "relative",
    "@media print": {
      overflow: "hidden"
    },
    zIndex: 0
    // See https://github.com/mui/mui-x/issues/10547
  });
  var GridVirtualScroller = /* @__PURE__ */ React237.forwardRef(function GridVirtualScroller2(props, ref) {
    const rootProps = useGridRootProps();
    const classes = useUtilityClasses80(rootProps);
    return /* @__PURE__ */ (0, import_jsx_runtime204.jsx)(VirtualScrollerRoot, _extends({
      ref
    }, props, {
      className: clsx_default(classes.root, props.className),
      ownerState: rootProps
    }));
  });

  // node_modules/@mui/x-data-grid/components/virtualization/GridVirtualScrollerContent.js
  init_extends();
  var React238 = __toESM(require_react());
  var import_jsx_runtime205 = __toESM(require_jsx_runtime());
  var useUtilityClasses81 = (props, overflowedContent) => {
    const {
      classes
    } = props;
    const slots = {
      root: ["virtualScrollerContent", overflowedContent && "virtualScrollerContent--overflowed"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var VirtualScrollerContentRoot = styled_default("div", {
    name: "MuiDataGrid",
    slot: "VirtualScrollerContent",
    overridesResolver: (props, styles4) => styles4.virtualScrollerContent
  })({});
  var GridVirtualScrollerContent = /* @__PURE__ */ React238.forwardRef(function GridVirtualScrollerContent2(props, ref) {
    var _props$style;
    const rootProps = useGridRootProps();
    const overflowedContent = !rootProps.autoHeight && ((_props$style = props.style) == null ? void 0 : _props$style.minHeight) === "auto";
    const classes = useUtilityClasses81(rootProps, overflowedContent);
    return /* @__PURE__ */ (0, import_jsx_runtime205.jsx)(VirtualScrollerContentRoot, _extends({
      ref
    }, props, {
      ownerState: rootProps,
      className: clsx_default(classes.root, props.className)
    }));
  });

  // node_modules/@mui/x-data-grid/components/virtualization/GridVirtualScrollerRenderZone.js
  init_extends();
  var React239 = __toESM(require_react());
  var import_jsx_runtime206 = __toESM(require_jsx_runtime());
  var _excluded128 = ["className"];
  var useUtilityClasses82 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["virtualScrollerRenderZone"]
    };
    return composeClasses(slots, getDataGridUtilityClass, classes);
  };
  var VirtualScrollerRenderZoneRoot = styled_default("div", {
    name: "MuiDataGrid",
    slot: "VirtualScrollerRenderZone",
    overridesResolver: (props, styles4) => styles4.virtualScrollerRenderZone
  })({
    position: "absolute",
    display: "flex",
    // Prevents margin collapsing when using `getRowSpacing`
    flexDirection: "column"
  });
  var GridVirtualScrollerRenderZone = /* @__PURE__ */ React239.forwardRef(function GridVirtualScrollerRenderZone2(props, ref) {
    const {
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded128);
    const rootProps = useGridRootProps();
    const classes = useUtilityClasses82(rootProps);
    return /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(VirtualScrollerRenderZoneRoot, _extends({
      ref,
      className: clsx_default(classes.root, className),
      ownerState: rootProps
    }, other));
  });

  // node_modules/@mui/x-data-grid/components/DataGridVirtualScroller.js
  var import_jsx_runtime207 = __toESM(require_jsx_runtime());
  var import_jsx_runtime208 = __toESM(require_jsx_runtime());
  var _excluded129 = ["className"];
  var DataGridVirtualScroller = /* @__PURE__ */ React240.forwardRef(function DataGridVirtualScroller2(props, ref) {
    const {
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded129);
    const {
      getRootProps,
      getContentProps,
      getRenderZoneProps,
      getRows
    } = useGridVirtualScroller({
      ref
    });
    return /* @__PURE__ */ (0, import_jsx_runtime208.jsxs)(GridVirtualScroller, _extends({
      className
    }, getRootProps(other), {
      children: [/* @__PURE__ */ (0, import_jsx_runtime207.jsx)(GridOverlays, {}), /* @__PURE__ */ (0, import_jsx_runtime207.jsx)(GridVirtualScrollerContent, _extends({}, getContentProps(), {
        children: /* @__PURE__ */ (0, import_jsx_runtime207.jsx)(GridVirtualScrollerRenderZone, _extends({}, getRenderZoneProps(), {
          children: getRows()
        }))
      }))]
    }));
  });

  // node_modules/@mui/x-data-grid/DataGrid/DataGrid.js
  var import_jsx_runtime209 = __toESM(require_jsx_runtime());
  var import_jsx_runtime210 = __toESM(require_jsx_runtime());
  var DataGridRaw = /* @__PURE__ */ React241.forwardRef(function DataGrid(inProps, ref) {
    const props = useDataGridProps(inProps);
    const privateApiRef = useDataGridComponent(props.apiRef, props);
    return /* @__PURE__ */ (0, import_jsx_runtime209.jsx)(GridContextProvider, {
      privateApiRef,
      props,
      children: /* @__PURE__ */ (0, import_jsx_runtime210.jsxs)(GridRoot, _extends({
        className: props.className,
        style: props.style,
        sx: props.sx,
        ref
      }, props.forwardedProps, {
        children: [/* @__PURE__ */ (0, import_jsx_runtime209.jsx)(GridHeader, {}), /* @__PURE__ */ (0, import_jsx_runtime209.jsx)(GridBody, {
          VirtualScrollerComponent: DataGridVirtualScroller
        }), /* @__PURE__ */ (0, import_jsx_runtime209.jsx)(GridFooterPlaceholder, {})]
      }))
    });
  });
  var DataGrid2 = /* @__PURE__ */ React241.memo(DataGridRaw);
  var SUBMIT_FILTER_STROKE_TIME = DATA_GRID_PROPS_DEFAULT_VALUES.filterDebounceMs;
  var SUBMIT_FILTER_DATE_STROKE_TIME = DATA_GRID_PROPS_DEFAULT_VALUES.filterDebounceMs;
  DataGridRaw.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // | To update them edit the TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * The ref object that allows Data Grid manipulation. Can be instantiated with `useGridApiRef()`.
     */
    apiRef: import_prop_types128.default.shape({
      current: import_prop_types128.default.object.isRequired
    }),
    /**
     * The label of the Data Grid.
     */
    "aria-label": import_prop_types128.default.string,
    /**
     * The id of the element containing a label for the Data Grid.
     */
    "aria-labelledby": import_prop_types128.default.string,
    /**
     * If `true`, the Data Grid height is dynamic and follow the number of rows in the Data Grid.
     * @default false
     */
    autoHeight: import_prop_types128.default.bool,
    /**
     * If `true`, the pageSize is calculated according to the container size and the max number of rows to avoid rendering a vertical scroll bar.
     * @default false
     */
    autoPageSize: import_prop_types128.default.bool,
    /**
     * Controls the modes of the cells.
     */
    cellModesModel: import_prop_types128.default.object,
    /**
     * If `true`, the Data Grid will display an extra column with checkboxes for selecting rows.
     * @default false
     */
    checkboxSelection: import_prop_types128.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types128.default.object,
    /**
     * The character used to separate cell values when copying to the clipboard.
     * @default '\t'
     */
    clipboardCopyCellDelimiter: import_prop_types128.default.string,
    /**
     * Number of extra columns to be rendered before/after the visible slice.
     * @default 3
     */
    columnBuffer: import_prop_types128.default.number,
    columnGroupingModel: import_prop_types128.default.arrayOf(import_prop_types128.default.object),
    /**
     * Sets the height in pixel of the column headers in the Data Grid.
     * @default 56
     */
    columnHeaderHeight: import_prop_types128.default.number,
    /**
     * Set of columns of type [[GridColDef[]]].
     */
    columns: chainPropTypes(import_prop_types128.default.array.isRequired, (props) => {
      if (props.columns && props.columns.some((column2) => column2.resizable)) {
        return new Error([`MUI: \`column.resizable = true\` is not a valid prop.`, "Column resizing is not available in the MIT version.", "", "You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature."].join("\n"));
      }
      return null;
    }),
    /**
     * Number of rows from the `columnBuffer` that can be visible before a new slice is rendered.
     * @default 3
     */
    columnThreshold: import_prop_types128.default.number,
    /**
     * Set the column visibility model of the Data Grid.
     * If defined, the Data Grid will ignore the `hide` property in [[GridColDef]].
     */
    columnVisibilityModel: import_prop_types128.default.object,
    /**
     * Overridable components.
     * @deprecated Use `slots` instead.
     */
    components: import_prop_types128.default.object,
    /**
     * Overridable components props dynamically passed to the component at rendering.
     * @deprecated Use the `slotProps` prop instead.
     */
    componentsProps: import_prop_types128.default.object,
    /**
     * Set the density of the Data Grid.
     * @default "standard"
     */
    density: import_prop_types128.default.oneOf(["comfortable", "compact", "standard"]),
    /**
     * If `true`, column filters are disabled.
     * @default false
     */
    disableColumnFilter: import_prop_types128.default.bool,
    /**
     * If `true`, the column menu is disabled.
     * @default false
     */
    disableColumnMenu: import_prop_types128.default.bool,
    /**
     * If `true`, hiding/showing columns is disabled.
     * @default false
     */
    disableColumnSelector: import_prop_types128.default.bool,
    /**
     * If `true`, the density selector is disabled.
     * @default false
     */
    disableDensitySelector: import_prop_types128.default.bool,
    /**
     * If `true`, `eval()` is not used for performance optimization.
     * @default false
     */
    disableEval: import_prop_types128.default.bool,
    /**
     * If `true`, the selection on click on a row or cell is disabled.
     * @default false
     */
    disableRowSelectionOnClick: import_prop_types128.default.bool,
    /**
     * If `true`, the virtualization is disabled.
     * @default false
     */
    disableVirtualization: import_prop_types128.default.bool,
    /**
     * Controls whether to use the cell or row editing.
     * @default "cell"
     */
    editMode: import_prop_types128.default.oneOf(["cell", "row"]),
    /**
     * Unstable features, breaking changes might be introduced.
     * For each feature, if the flag is not explicitly set to `true`, the feature will be fully disabled and any property / method call will not have any effect.
     */
    experimentalFeatures: import_prop_types128.default.shape({
      ariaV7: import_prop_types128.default.bool,
      columnGrouping: import_prop_types128.default.bool,
      warnIfFocusStateIsNotSynced: import_prop_types128.default.bool
    }),
    /**
     * The milliseconds delay to wait after a keystroke before triggering filtering.
     * @default 150
     */
    filterDebounceMs: import_prop_types128.default.number,
    /**
     * Filtering can be processed on the server or client-side.
     * Set it to 'server' if you would like to handle filtering on the server-side.
     * @default "client"
     */
    filterMode: import_prop_types128.default.oneOf(["client", "server"]),
    /**
     * Set the filter model of the Data Grid.
     */
    filterModel: import_prop_types128.default.shape({
      items: import_prop_types128.default.arrayOf(import_prop_types128.default.shape({
        field: import_prop_types128.default.string.isRequired,
        id: import_prop_types128.default.oneOfType([import_prop_types128.default.number, import_prop_types128.default.string]),
        operator: import_prop_types128.default.string.isRequired,
        value: import_prop_types128.default.any
      })).isRequired,
      logicOperator: import_prop_types128.default.oneOf(["and", "or"]),
      quickFilterExcludeHiddenColumns: import_prop_types128.default.bool,
      quickFilterLogicOperator: import_prop_types128.default.oneOf(["and", "or"]),
      quickFilterValues: import_prop_types128.default.array
    }),
    /**
     * Forwarded props for the Data Grid root element.
     * @ignore - do not document.
     */
    forwardedProps: import_prop_types128.default.object,
    /**
     * Function that applies CSS classes dynamically on cells.
     * @param {GridCellParams} params With all properties from [[GridCellParams]].
     * @returns {string} The CSS class to apply to the cell.
     */
    getCellClassName: import_prop_types128.default.func,
    /**
     * Function that returns the element to render in row detail.
     * @param {GridRowParams} params With all properties from [[GridRowParams]].
     * @returns {React.JSX.Element} The row detail element.
     */
    getDetailPanelContent: import_prop_types128.default.func,
    /**
     * Function that returns the estimated height for a row.
     * Only works if dynamic row height is used.
     * Once the row height is measured this value is discarded.
     * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].
     * @returns {number | null} The estimated row height value. If `null` or `undefined` then the default row height, based on the density, is applied.
     */
    getEstimatedRowHeight: import_prop_types128.default.func,
    /**
     * Function that applies CSS classes dynamically on rows.
     * @param {GridRowClassNameParams} params With all properties from [[GridRowClassNameParams]].
     * @returns {string} The CSS class to apply to the row.
     */
    getRowClassName: import_prop_types128.default.func,
    /**
     * Function that sets the row height per row.
     * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].
     * @returns {GridRowHeightReturnValue} The row height value. If `null` or `undefined` then the default row height is applied. If "auto" then the row height is calculated based on the content.
     */
    getRowHeight: import_prop_types128.default.func,
    /**
     * Return the id of a given [[GridRowModel]].
     */
    getRowId: import_prop_types128.default.func,
    /**
     * Function that allows to specify the spacing between rows.
     * @param {GridRowSpacingParams} params With all properties from [[GridRowSpacingParams]].
     * @returns {GridRowSpacing} The row spacing values.
     */
    getRowSpacing: import_prop_types128.default.func,
    /**
     * If `true`, the footer component is hidden.
     * @default false
     */
    hideFooter: import_prop_types128.default.bool,
    /**
     * If `true`, the pagination component in the footer is hidden.
     * @default false
     */
    hideFooterPagination: import_prop_types128.default.bool,
    /**
     * If `true`, the selected row count in the footer is hidden.
     * @default false
     */
    hideFooterSelectedRowCount: import_prop_types128.default.bool,
    /**
     * If `true`, the diacritics (accents) are ignored when filtering or quick filtering.
     * E.g. when filter value is `cafe`, the rows with `café` will be visible.
     * @default false
     */
    ignoreDiacritics: import_prop_types128.default.bool,
    /**
     * The initial state of the DataGrid.
     * The data in it will be set in the state on initialization but will not be controlled.
     * If one of the data in `initialState` is also being controlled, then the control state wins.
     */
    initialState: import_prop_types128.default.object,
    /**
     * Callback fired when a cell is rendered, returns true if the cell is editable.
     * @param {GridCellParams} params With all properties from [[GridCellParams]].
     * @returns {boolean} A boolean indicating if the cell is editable.
     */
    isCellEditable: import_prop_types128.default.func,
    /**
     * Determines if a row can be selected.
     * @param {GridRowParams} params With all properties from [[GridRowParams]].
     * @returns {boolean} A boolean indicating if the cell is selectable.
     */
    isRowSelectable: import_prop_types128.default.func,
    /**
     * If `true`, the selection model will retain selected rows that do not exist.
     * Useful when using server side pagination and row selections need to be retained
     * when changing pages.
     * @default false
     */
    keepNonExistentRowsSelected: import_prop_types128.default.bool,
    /**
     * If `true`, a  loading overlay is displayed.
     */
    loading: import_prop_types128.default.bool,
    /**
     * Set the locale text of the Data Grid.
     * You can find all the translation keys supported in [the source](https://github.com/mui/mui-x/blob/v6.19.4/packages/grid/x-data-grid/src/constants/localeTextConstants.ts) in the GitHub repository.
     */
    localeText: import_prop_types128.default.object,
    /**
     * Pass a custom logger in the components that implements the [[Logger]] interface.
     * @default console
     */
    logger: import_prop_types128.default.shape({
      debug: import_prop_types128.default.func.isRequired,
      error: import_prop_types128.default.func.isRequired,
      info: import_prop_types128.default.func.isRequired,
      warn: import_prop_types128.default.func.isRequired
    }),
    /**
     * Allows to pass the logging level or false to turn off logging.
     * @default "error" ("warn" in dev mode)
     */
    logLevel: import_prop_types128.default.oneOf(["debug", "error", "info", "warn", false]),
    /**
     * Nonce of the inline styles for [Content Security Policy](https://www.w3.org/TR/2016/REC-CSP2-20161215/#script-src-the-nonce-attribute).
     */
    nonce: import_prop_types128.default.string,
    /**
     * Callback fired when any cell is clicked.
     * @param {GridCellParams} params With all properties from [[GridCellParams]].
     * @param {MuiEvent<React.MouseEvent>} event The event object.
     * @param {GridCallbackDetails} details Additional details for this callback.
     */
    onCellClick: import_prop_types128.default.func,
    /**
     * Callback fired when a double click event comes from a cell element.
     * @param {GridCellParams} params With all properties from [[GridCellParams]].
     * @param {MuiEvent<React.MouseEvent>} event The event object.
     * @param {GridCallbackDetails} details Additional details for this callback.
     */
    onCellDoubleClick: import_prop_types128.default.func,
    /**
     * Callback fired when the cell turns to edit mode.
     * @param {GridCellParams} params With all properties from [[GridCellParams]].
     * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.
     */
    onCellEditStart: import_prop_types128.default.func,
    /**
     * Callback fired when the cell turns to view mode.
     * @param {GridCellParams} params With all properties from [[GridCellParams]].
     * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.
     */
    onCellEditStop: import_prop_types128.default.func,
    /**
     * Callback fired when a keydown event comes from a cell element.
     * @param {GridCellParams} params With all properties from [[GridCellParams]].
     * @param {MuiEvent<React.KeyboardEvent>} event The event object.
     * @param {GridCallbackDetails} details Additional details for this callback.
     */
    onCellKeyDown: import_prop_types128.default.func,
    /**
     * Callback fired when the `cellModesModel` prop changes.
     * @param {GridCellModesModel} cellModesModel Object containing which cells are in "edit" mode.
     * @param {GridCallbackDetails} details Additional details for this callback.
     */
    onCellModesModelChange: import_prop_types128.default.func,
    /**
     * Callback called when the data is copied to the clipboard.
     * @param {string} data The data copied to the clipboard.
     */
    onClipboardCopy: import_prop_types128.default.func,
    /**
     * Callback fired when a click event comes from a column header element.
     * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
     * @param {MuiEvent<React.MouseEvent>} event The event object.
     * @param {GridCallbackDetails} details Additional details for this callback.
     */
    onColumnHeaderClick: import_prop_types128.default.func,
    /**
     * Callback fired when a double click event comes from a column header element.
     * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
     * @param {MuiEvent<React.MouseEvent>} event The event object.
     * @param {GridCallbackDetails} details Additional details for this callback.
     */
    onColumnHeaderDoubleClick: import_prop_types128.default.func,
    /**
     * Callback fired when a mouse enter event comes from a column header element.
     * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
     * @param {MuiEvent<React.MouseEvent>} event The event object.
     * @param {GridCallbackDetails} details Additional details for this callback.
     */
    onColumnHeaderEnter: import_prop_types128.default.func,
    /**
     * Callback fired when a mouse leave event comes from a column header element.
     * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
     * @param {MuiEvent<React.MouseEvent>} event The event object.
     * @param {GridCallbackDetails} details Additional details for this callback.
     */
    onColumnHeaderLeave: import_prop_types128.default.func,
    /**
     * Callback fired when a mouseout event comes from a column header element.
     * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
     * @param {MuiEvent<React.MouseEvent>} event The event object.
     * @param {GridCallbackDetails} details Additional details for this callback.
     */
    onColumnHeaderOut: import_prop_types128.default.func,
    /**
     * Callback fired when a mouseover event comes from a column header element.
     * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
     * @param {MuiEvent<React.MouseEvent>} event The event object.
     * @param {GridCallbackDetails} details Additional details for this callback.
     */
    onColumnHeaderOver: import_prop_types128.default.func,
    /**
     * Callback fired when a column is reordered.
     * @param {GridColumnOrderChangeParams} params With all properties from [[GridColumnOrderChangeParams]].
     * @param {MuiEvent<{}>} event The event object.
     * @param {GridCallbackDetails} details Additional details for this callback.
     */
    onColumnOrderChange: import_prop_types128.default.func,
    /**
     * Callback fired when the column visibility model changes.
     * @param {GridColumnVisibilityModel} model The new model.
     * @param {GridCallbackDetails} details Additional details for this callback.
     */
    onColumnVisibilityModelChange: import_prop_types128.default.func,
    /**
     * Callback fired when the Filter model changes before the filters are applied.
     * @param {GridFilterModel} model With all properties from [[GridFilterModel]].
     * @param {GridCallbackDetails} details Additional details for this callback.
     */
    onFilterModelChange: import_prop_types128.default.func,
    /**
     * Callback fired when the menu is closed.
     * @param {GridMenuParams} params With all properties from [[GridMenuParams]].
     * @param {MuiEvent<{}>} event The event object.
     * @param {GridCallbackDetails} details Additional details for this callback.
     */
    onMenuClose: import_prop_types128.default.func,
    /**
     * Callback fired when the menu is opened.
     * @param {GridMenuParams} params With all properties from [[GridMenuParams]].
     * @param {MuiEvent<{}>} event The event object.
     * @param {GridCallbackDetails} details Additional details for this callback.
     */
    onMenuOpen: import_prop_types128.default.func,
    /**
     * Callback fired when the pagination model has changed.
     * @param {GridPaginationModel} model Updated pagination model.
     * @param {GridCallbackDetails} details Additional details for this callback.
     */
    onPaginationModelChange: import_prop_types128.default.func,
    /**
     * Callback fired when the preferences panel is closed.
     * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].
     * @param {MuiEvent<{}>} event The event object.
     * @param {GridCallbackDetails} details Additional details for this callback.
     */
    onPreferencePanelClose: import_prop_types128.default.func,
    /**
     * Callback fired when the preferences panel is opened.
     * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].
     * @param {MuiEvent<{}>} event The event object.
     * @param {GridCallbackDetails} details Additional details for this callback.
     */
    onPreferencePanelOpen: import_prop_types128.default.func,
    /**
     * Callback called when `processRowUpdate` throws an error or rejects.
     * @param {any} error The error thrown.
     */
    onProcessRowUpdateError: import_prop_types128.default.func,
    /**
     * Callback fired when the Data Grid is resized.
     * @param {ElementSize} containerSize With all properties from [[ElementSize]].
     * @param {MuiEvent<{}>} event The event object.
     * @param {GridCallbackDetails} details Additional details for this callback.
     */
    onResize: import_prop_types128.default.func,
    /**
     * Callback fired when a row is clicked.
     * Not called if the target clicked is an interactive element added by the built-in columns.
     * @param {GridRowParams} params With all properties from [[GridRowParams]].
     * @param {MuiEvent<React.MouseEvent>} event The event object.
     * @param {GridCallbackDetails} details Additional details for this callback.
     */
    onRowClick: import_prop_types128.default.func,
    /**
     * Callback fired when the row count has changed.
     * @param {number} count Updated row count.
     */
    onRowCountChange: import_prop_types128.default.func,
    /**
     * Callback fired when a double click event comes from a row container element.
     * @param {GridRowParams} params With all properties from [[RowParams]].
     * @param {MuiEvent<React.MouseEvent>} event The event object.
     * @param {GridCallbackDetails} details Additional details for this callback.
     */
    onRowDoubleClick: import_prop_types128.default.func,
    /**
     * Callback fired when the row turns to edit mode.
     * @param {GridRowParams} params With all properties from [[GridRowParams]].
     * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.
     */
    onRowEditStart: import_prop_types128.default.func,
    /**
     * Callback fired when the row turns to view mode.
     * @param {GridRowParams} params With all properties from [[GridRowParams]].
     * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.
     */
    onRowEditStop: import_prop_types128.default.func,
    /**
     * Callback fired when the `rowModesModel` prop changes.
     * @param {GridRowModesModel} rowModesModel Object containing which rows are in "edit" mode.
     * @param {GridCallbackDetails} details Additional details for this callback.
     */
    onRowModesModelChange: import_prop_types128.default.func,
    /**
     * Callback fired when the selection state of one or multiple rows changes.
     * @param {GridRowSelectionModel} rowSelectionModel With all the row ids [[GridSelectionModel]].
     * @param {GridCallbackDetails} details Additional details for this callback.
     */
    onRowSelectionModelChange: import_prop_types128.default.func,
    /**
     * Callback fired when the sort model changes before a column is sorted.
     * @param {GridSortModel} model With all properties from [[GridSortModel]].
     * @param {GridCallbackDetails} details Additional details for this callback.
     */
    onSortModelChange: import_prop_types128.default.func,
    /**
     * Callback fired when the state of the Data Grid is updated.
     * @param {GridState} state The new state.
     * @param {MuiEvent<{}>} event The event object.
     * @param {GridCallbackDetails} details Additional details for this callback.
     * @ignore - do not document.
     */
    onStateChange: import_prop_types128.default.func,
    /**
     * Select the pageSize dynamically using the component UI.
     * @default [25, 50, 100]
     */
    pageSizeOptions: import_prop_types128.default.arrayOf(import_prop_types128.default.oneOfType([import_prop_types128.default.number, import_prop_types128.default.shape({
      label: import_prop_types128.default.string.isRequired,
      value: import_prop_types128.default.number.isRequired
    })]).isRequired),
    pagination: (props) => {
      if (props.pagination === false) {
        return new Error(["MUI: `<DataGrid pagination={false} />` is not a valid prop.", "Infinite scrolling is not available in the MIT version.", "", "You need to upgrade to DataGridPro or DataGridPremium component to disable the pagination."].join("\n"));
      }
      return null;
    },
    /**
     * Pagination can be processed on the server or client-side.
     * Set it to 'client' if you would like to handle the pagination on the client-side.
     * Set it to 'server' if you would like to handle the pagination on the server-side.
     * @default "client"
     */
    paginationMode: import_prop_types128.default.oneOf(["client", "server"]),
    /**
     * The pagination model of type [[GridPaginationModel]] which refers to current `page` and `pageSize`.
     */
    paginationModel: import_prop_types128.default.shape({
      page: import_prop_types128.default.number.isRequired,
      pageSize: import_prop_types128.default.number.isRequired
    }),
    /**
     * Callback called before updating a row with new values in the row and cell editing.
     * @template R
     * @param {R} newRow Row object with the new values.
     * @param {R} oldRow Row object with the old values.
     * @returns {Promise<R> | R} The final values to update the row.
     */
    processRowUpdate: import_prop_types128.default.func,
    /**
     * Number of extra rows to be rendered before/after the visible slice.
     * @default 3
     */
    rowBuffer: import_prop_types128.default.number,
    /**
     * Set the total number of rows, if it is different from the length of the value `rows` prop.
     * If some rows have children (for instance in the tree data), this number represents the amount of top level rows.
     */
    rowCount: import_prop_types128.default.number,
    /**
     * Sets the height in pixel of a row in the Data Grid.
     * @default 52
     */
    rowHeight: import_prop_types128.default.number,
    /**
     * Controls the modes of the rows.
     */
    rowModesModel: import_prop_types128.default.object,
    /**
     * The milliseconds delay to wait after measuring the row height before recalculating row positions.
     * Setting it to a lower value could be useful when using dynamic row height,
     * but might reduce performance when displaying a large number of rows.
     * @default 166
     */
    rowPositionsDebounceMs: import_prop_types128.default.number,
    /**
     * Set of rows of type [[GridRowsProp]].
     */
    rows: import_prop_types128.default.arrayOf(import_prop_types128.default.object).isRequired,
    /**
     * If `false`, the row selection mode is disabled.
     * @default true
     */
    rowSelection: import_prop_types128.default.bool,
    /**
     * Sets the row selection model of the Data Grid.
     */
    rowSelectionModel: import_prop_types128.default.oneOfType([import_prop_types128.default.arrayOf(import_prop_types128.default.oneOfType([import_prop_types128.default.number, import_prop_types128.default.string]).isRequired), import_prop_types128.default.number, import_prop_types128.default.string]),
    /**
     * Sets the type of space between rows added by `getRowSpacing`.
     * @default "margin"
     */
    rowSpacingType: import_prop_types128.default.oneOf(["border", "margin"]),
    /**
     * Number of rows from the `rowBuffer` that can be visible before a new slice is rendered.
     * @default 3
     */
    rowThreshold: import_prop_types128.default.number,
    /**
     * Override the height/width of the Data Grid inner scrollbar.
     */
    scrollbarSize: import_prop_types128.default.number,
    /**
     * If `true`, the vertical borders of the cells are displayed.
     * @default false
     */
    showCellVerticalBorder: import_prop_types128.default.bool,
    /**
     * If `true`, the right border of the column headers are displayed.
     * @default false
     */
    showColumnVerticalBorder: import_prop_types128.default.bool,
    /**
     * Overridable components props dynamically passed to the component at rendering.
     */
    slotProps: import_prop_types128.default.object,
    /**
     * Overridable components.
     */
    slots: import_prop_types128.default.object,
    /**
     * Sorting can be processed on the server or client-side.
     * Set it to 'client' if you would like to handle sorting on the client-side.
     * Set it to 'server' if you would like to handle sorting on the server-side.
     * @default "client"
     */
    sortingMode: import_prop_types128.default.oneOf(["client", "server"]),
    /**
     * The order of the sorting sequence.
     * @default ['asc', 'desc', null]
     */
    sortingOrder: import_prop_types128.default.arrayOf(import_prop_types128.default.oneOf(["asc", "desc"])),
    /**
     * Set the sort model of the Data Grid.
     */
    sortModel: import_prop_types128.default.arrayOf(import_prop_types128.default.shape({
      field: import_prop_types128.default.string.isRequired,
      sort: import_prop_types128.default.oneOf(["asc", "desc"])
    })),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types128.default.oneOfType([import_prop_types128.default.arrayOf(import_prop_types128.default.oneOfType([import_prop_types128.default.func, import_prop_types128.default.object, import_prop_types128.default.bool])), import_prop_types128.default.func, import_prop_types128.default.object]),
    /**
     * If `true`, the Data Grid will not use `valueFormatter` when exporting to CSV or copying to clipboard.
     * If an object is provided, you can choose to ignore the `valueFormatter` for CSV export or clipboard export.
     * @default false
     */
    unstable_ignoreValueFormatterDuringExport: import_prop_types128.default.oneOfType([import_prop_types128.default.shape({
      clipboardExport: import_prop_types128.default.bool,
      csvExport: import_prop_types128.default.bool
    }), import_prop_types128.default.bool])
  };

  // node_modules/@mui/material/locale/index.js
  var arSD = {
    components: {
      MuiBreadcrumbs: {
        defaultProps: {
          expandText: "\u0625\u0638\u0647\u0627\u0631 \u0627\u0644\u0645\u0633\u0627\u0631"
        }
      },
      MuiTablePagination: {
        defaultProps: {
          getItemAriaLabel: (type) => {
            if (type === "first") {
              return "\u0627\u0646\u062A\u0642\u0644 \u0625\u0644\u0649 \u0627\u0644\u0635\u0641\u062D\u0629 \u0627\u0644\u0623\u0648\u0644\u0649";
            }
            if (type === "last") {
              return "\u0627\u0646\u062A\u0642\u0644 \u0625\u0644\u0649 \u0627\u0644\u0635\u0641\u062D\u0629 \u0627\u0644\u0623\u062E\u064A\u0631\u0629";
            }
            if (type === "next") {
              return "\u0627\u0646\u062A\u0642\u0644 \u0625\u0644\u0649 \u0627\u0644\u0635\u0641\u062D\u0629 \u0627\u0644\u062A\u0627\u0644\u064A\u0629";
            }
            return "\u0627\u0646\u062A\u0642\u0644 \u0625\u0644\u0649 \u0627\u0644\u0635\u0641\u062D\u0629 \u0627\u0644\u0633\u0627\u0628\u0642\u0629";
          },
          labelRowsPerPage: "\u0639\u062F\u062F \u0627\u0644\u0635\u0641\u0648\u0641 \u0641\u064A \u0627\u0644\u0635\u0641\u062D\u0629:",
          labelDisplayedRows: ({
            from: from2,
            to,
            count
          }) => `${from2}\u2013${to} \u0645\u0646 ${count !== -1 ? count : ` \u0623\u0643\u062B\u0631 \u0645\u0646${to}`}`
        }
      },
      MuiRating: {
        defaultProps: {
          getLabelText: (value) => `${value} ${value !== 1 ? "\u0646\u062C\u0648\u0645" : "\u0646\u062C\u0645\u0629"}`,
          emptyLabelText: "\u0641\u0627\u0631\u063A"
        }
      },
      MuiAutocomplete: {
        defaultProps: {
          clearText: "\u0645\u0633\u062D",
          closeText: "\u0625\u063A\u0644\u0627\u0642",
          loadingText: "\u062C\u0627\u0631 \u0627\u0644\u062A\u062D\u0645\u064A\u0644...",
          noOptionsText: "\u0644\u0627 \u064A\u0648\u062C\u062F \u062E\u064A\u0627\u0631\u0627\u062A",
          openText: "\u0641\u062A\u062D"
        }
      },
      MuiAlert: {
        defaultProps: {
          closeText: "\u0625\u063A\u0644\u0627\u0642"
        }
      },
      MuiPagination: {
        defaultProps: {
          "aria-label": "\u0627\u0644\u062A\u0646\u0642\u0644 \u0639\u0628\u0631 \u0627\u0644\u0635\u0641\u062D\u0627\u062A",
          getItemAriaLabel: (type, page, selected) => {
            if (type === "page") {
              return `${selected ? "" : "\u0627\u0646\u062A\u0642\u0644 \u0625\u0644\u0649 "} \u0635\u0641\u062D\u0629 ${page}`;
            }
            if (type === "first") {
              return "\u0627\u0646\u062A\u0642\u0644 \u0625\u0644\u0649 \u0627\u0644\u0635\u0641\u062D\u0629 \u0627\u0644\u0623\u0648\u0644\u0649";
            }
            if (type === "last") {
              return "\u0627\u0646\u062A\u0642\u0644 \u0627\u0644\u064A \u0627\u0644\u0635\u0641\u062D\u0629 \u0627\u0644\u0623\u062E\u064A\u0631\u0629";
            }
            if (type === "next") {
              return "\u0627\u0646\u062A\u0642\u0644 \u0625\u0644\u0649 \u0627\u0644\u0635\u0641\u062D\u0629 \u0627\u0644\u062A\u0627\u0644\u064A\u0629";
            }
            return "\u0627\u0646\u062A\u0642\u0644 \u0625\u0644\u0649 \u0627\u0644\u0635\u0641\u062D\u0629 \u0627\u0644\u0633\u0627\u0628\u0642\u0629";
          }
        }
      }
    }
  };
  var bgBG = {
    components: {
      MuiBreadcrumbs: {
        defaultProps: {
          expandText: "\u041F\u043E\u043A\u0430\u0437\u0432\u0430\u043D\u0435 \u043D\u0430 \u043F\u044A\u0442\u044F"
        }
      },
      MuiTablePagination: {
        defaultProps: {
          getItemAriaLabel: (type) => {
            if (type === "first") {
              return "\u041E\u0442\u0438\u0434\u0438 \u043D\u0430 \u043F\u044A\u0440\u0432\u0430\u0442\u0430 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430";
            }
            if (type === "last") {
              return "\u041E\u0442\u0438\u0434\u0438 \u043D\u0430 \u043F\u043E\u0441\u043B\u0435\u0434\u043D\u0430\u0442\u0430 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430";
            }
            if (type === "next") {
              return "\u041E\u0442\u0438\u0434\u0438 \u043D\u0430 \u0441\u043B\u0435\u0434\u0432\u0430\u0449\u0430\u0442\u0430 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430";
            }
            return "\u041E\u0442\u0438\u0434\u0438 \u043D\u0430 \u043F\u0440\u0435\u0434\u0438\u0448\u043D\u0430\u0442\u0430 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430";
          },
          labelRowsPerPage: "\u0420\u0435\u0434\u043E\u0432\u0435 \u043D\u0430 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430:"
          // labelDisplayedRows: ({ from, to, count }) =>
          //   `${from}–${to} от ${count !== -1 ? count : `more than ${to}`}`,
        }
      },
      MuiRating: {
        defaultProps: {
          getLabelText: (value) => `${value} \u0417\u0432\u0435\u0437\u0434${value !== 1 ? "\u0438" : "\u0430"}`,
          emptyLabelText: "\u0418\u0437\u0447\u0438\u0441\u0442\u0438"
        }
      },
      MuiAutocomplete: {
        defaultProps: {
          clearText: "\u0418\u0437\u0447\u0438\u0441\u0442\u0438",
          closeText: "\u0417\u0430\u0442\u0432\u043E\u0440\u0438",
          loadingText: "\u0417\u0430\u0440\u0435\u0436\u0434\u0430\u043D\u0435\u2026",
          noOptionsText: "\u041D\u044F\u043C\u0430 \u043D\u0430\u043B\u0438\u0447\u043D\u0438 \u043E\u043F\u0446\u0438\u0438",
          openText: "\u041E\u0442\u0432\u043E\u0440\u0438"
        }
      },
      MuiAlert: {
        defaultProps: {
          closeText: "\u0417\u0430\u0442\u0432\u043E\u0440\u0438"
        }
      },
      MuiPagination: {
        defaultProps: {
          "aria-label": "\u041F\u0430\u0433\u0438\u043D\u0430\u0446\u0438\u044F",
          getItemAriaLabel: (type, page, selected) => {
            if (type === "page") {
              return `${selected ? "" : "\u041A\u044A\u043C "}\u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430 ${page}`;
            }
            if (type === "first") {
              return "\u041E\u0442\u0438\u0434\u0438 \u043D\u0430 \u043F\u044A\u0440\u0432\u0430\u0442\u0430 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430";
            }
            if (type === "last") {
              return "\u041E\u0442\u0438\u0434\u0438 \u043D\u0430 \u043F\u043E\u0441\u043B\u0435\u0434\u043D\u0430\u0442\u0430 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430";
            }
            if (type === "next") {
              return "\u041E\u0442\u0438\u0434\u0438 \u043D\u0430 \u0441\u043B\u0435\u0434\u0432\u0430\u0449\u0430\u0442\u0430 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430";
            }
            return "\u041E\u0442\u0438\u0434\u0438 \u043D\u0430 \u043F\u0440\u0435\u0434\u0438\u0448\u043D\u0430\u0442\u0430 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430";
          }
        }
      }
    }
  };
  var csCZ = {
    components: {
      MuiBreadcrumbs: {
        defaultProps: {
          expandText: "Uk\xE1zat cestu"
        }
      },
      MuiTablePagination: {
        defaultProps: {
          getItemAriaLabel: (type) => {
            if (type === "first") {
              return "J\xEDt na prvn\xED str\xE1nku";
            }
            if (type === "last") {
              return "J\xEDt na posledn\xED str\xE1nku";
            }
            if (type === "next") {
              return "J\xEDt na dal\u0161\xED str\xE1nku";
            }
            return "J\xEDt na p\u0159edchoz\xED str\xE1nku";
          },
          labelRowsPerPage: "\u0158\xE1dk\u016F na str\xE1nce:",
          labelDisplayedRows: ({
            from: from2,
            to,
            count
          }) => `${from2}\u2013${to} z ${count !== -1 ? count : `v\xEDce ne\u017E ${to}`}`
        }
      },
      MuiRating: {
        defaultProps: {
          getLabelText: (value) => {
            if (value === 1) {
              return `${value} hv\u011Bzdi\u010Dka`;
            }
            if (value >= 2 && value <= 4) {
              return `${value} hv\u011Bzdi\u010Dky`;
            }
            return `${value} hv\u011Bzdi\u010Dek`;
          },
          emptyLabelText: "Pr\xE1zdn\xE9"
        }
      },
      MuiAutocomplete: {
        defaultProps: {
          clearText: "Vymazat",
          closeText: "Zav\u0159\xEDt",
          loadingText: "Na\u010D\xEDt\xE1n\xED\u2026",
          noOptionsText: "\u017D\xE1dn\xE9 mo\u017Enosti",
          openText: "Otev\u0159\xEDt"
        }
      },
      MuiAlert: {
        defaultProps: {
          closeText: "Zav\u0159\xEDt"
        }
      },
      MuiPagination: {
        defaultProps: {
          "aria-label": "Navigace str\xE1nkov\xE1n\xEDm",
          getItemAriaLabel: (type, page, selected) => {
            if (type === "page") {
              return `${selected ? "" : "J\xEDt na "}${page}. str\xE1nku`;
            }
            if (type === "first") {
              return "J\xEDt na prvn\xED str\xE1nku";
            }
            if (type === "last") {
              return "J\xEDt na posledn\xED str\xE1nku";
            }
            if (type === "next") {
              return "J\xEDt na dal\u0161\xED str\xE1nku";
            }
            return "J\xEDt na p\u0159edchoz\xED str\xE1nku";
          }
        }
      }
    }
  };
  var daDK = {
    components: {
      MuiBreadcrumbs: {
        defaultProps: {
          expandText: "Vis sti"
        }
      },
      MuiTablePagination: {
        defaultProps: {
          getItemAriaLabel: (type) => {
            if (type === "first") {
              return "G\xE5 til den f\xF8rste side";
            }
            if (type === "last") {
              return "G\xE5 til den sidste side";
            }
            if (type === "next") {
              return "G\xE5 til den n\xE6ste side";
            }
            return "G\xE5 til den forrige side";
          },
          labelRowsPerPage: "R\xE6kker pr side:",
          labelDisplayedRows: ({
            from: from2,
            to,
            count
          }) => `${from2}-${to} af ${count !== -1 ? count : `mere end ${to}`}`
        }
      },
      MuiRating: {
        defaultProps: {
          getLabelText: (value) => `${value} Stjern${value !== 1 ? "er" : ""}`,
          emptyLabelText: "Tom"
        }
      },
      MuiAutocomplete: {
        defaultProps: {
          clearText: "Slet",
          closeText: "Luk",
          loadingText: "Indl\xE6ser\u2026",
          noOptionsText: "Ingen muligheder",
          openText: "\xC5ben"
        }
      },
      MuiAlert: {
        defaultProps: {
          closeText: "Luk"
        }
      },
      MuiPagination: {
        defaultProps: {
          "aria-label": "Sideinddelings navigation",
          getItemAriaLabel: (type, page, selected) => {
            if (type === "page") {
              return `${selected ? "" : "Go to "}page ${page}`;
            }
            if (type === "first") {
              return "G\xE5 til den f\xF8rste side";
            }
            if (type === "last") {
              return "G\xE5 til den sidste side";
            }
            if (type === "next") {
              return "G\xE5 til den n\xE6ste side";
            }
            return "G\xE5 til den forrige side";
          }
        }
      }
    }
  };
  var deDE = {
    components: {
      MuiBreadcrumbs: {
        defaultProps: {
          expandText: "Pfad anzeigen"
        }
      },
      MuiTablePagination: {
        defaultProps: {
          getItemAriaLabel: (type) => {
            if (type === "first") {
              return "Zur ersten Seite";
            }
            if (type === "last") {
              return "Zur letzten Seite";
            }
            if (type === "next") {
              return "Zur n\xE4chsten Seite";
            }
            return "Zur vorherigen Seite";
          },
          labelRowsPerPage: "Zeilen pro Seite:",
          labelDisplayedRows: ({
            from: from2,
            to,
            count
          }) => `${from2}\u2013${to} von ${count !== -1 ? count : `mehr als ${to}`}`
        }
      },
      MuiRating: {
        defaultProps: {
          getLabelText: (value) => `${value} ${value !== 1 ? "Sterne" : "Stern"}`,
          emptyLabelText: "Keine Wertung"
        }
      },
      MuiAutocomplete: {
        defaultProps: {
          clearText: "Leeren",
          closeText: "Schlie\xDFen",
          loadingText: "Wird geladen\u2026",
          noOptionsText: "Keine Optionen",
          openText: "\xD6ffnen"
        }
      },
      MuiAlert: {
        defaultProps: {
          closeText: "Schlie\xDFen"
        }
      },
      MuiPagination: {
        defaultProps: {
          "aria-label": "Navigation via Seitennummerierung",
          getItemAriaLabel: (type, page, selected) => {
            if (type === "page") {
              return `${selected ? "" : "Gehe zu "}Seite ${page}`;
            }
            if (type === "first") {
              return "Zur ersten Seite";
            }
            if (type === "last") {
              return "Zur letzten Seite";
            }
            if (type === "next") {
              return "Zur n\xE4chsten Seite";
            }
            return "Zur vorherigen Seite";
          }
        }
      }
    }
  };
  var elGR = {
    components: {
      MuiBreadcrumbs: {
        defaultProps: {
          expandText: "\u0395\u03BC\u03C6\u03AC\u03BD\u03B9\u03C3\u03B7 \u03B4\u03B9\u03B1\u03B4\u03C1\u03BF\u03BC\u03AE\u03C2"
        }
      },
      MuiTablePagination: {
        defaultProps: {
          getItemAriaLabel: (type) => {
            if (type === "first") {
              return "\u03A0\u03C1\u03CE\u03C4\u03B7 \u03C3\u03B5\u03BB\u03AF\u03B4\u03B1";
            }
            if (type === "last") {
              return "\u03A4\u03B5\u03BB\u03B5\u03C5\u03C4\u03B1\u03AF\u03B1 \u03C3\u03B5\u03BB\u03AF\u03B4\u03B1";
            }
            if (type === "next") {
              return "\u0395\u03C0\u03CC\u03BC\u03B5\u03BD\u03B7 \u03C3\u03B5\u03BB\u03AF\u03B4\u03B1";
            }
            return "\u03A0\u03C1\u03BF\u03B7\u03B3\u03BF\u03CD\u03BC\u03B5\u03BD\u03B7 \u03C3\u03B5\u03BB\u03AF\u03B4\u03B1";
          },
          labelRowsPerPage: "\u0393\u03C1\u03B1\u03BC\u03BC\u03AD\u03C2 \u03B1\u03BD\u03B1 \u03C3\u03B5\u03BB\u03AF\u03B4\u03B1:",
          labelDisplayedRows: ({
            from: from2,
            to,
            count
          }) => `${from2}\u2013${to} \u03B1\u03C0\u03CC ${count !== -1 ? count : `\u03C0\u03AC\u03BD\u03C9 \u03B1\u03C0\u03CC ${to}`}`
        }
      },
      MuiRating: {
        defaultProps: {
          getLabelText: (value) => `${value} \u0391\u03C3\u03C4\u03AD\u03C1\u03B9${value !== 1 ? "\u03B1" : ""}`,
          emptyLabelText: "\u03A7\u03C9\u03C1\u03AF\u03C2 \u03B2\u03B1\u03B8\u03BC\u03BF\u03BB\u03CC\u03B3\u03B7\u03C3\u03B7"
        }
      },
      MuiAutocomplete: {
        defaultProps: {
          clearText: "\u039A\u03B1\u03B8\u03B1\u03C1\u03B9\u03C3\u03BC\u03CC\u03C2",
          closeText: "\u039A\u03BB\u03B5\u03AF\u03C3\u03B9\u03BC\u03BF",
          loadingText: "\u03A6\u03CC\u03C1\u03C4\u03C9\u03C3\u03B7\u2026",
          noOptionsText: "\u0394\u03B5\u03BD \u03C5\u03C0\u03AC\u03C1\u03C7\u03BF\u03C5\u03BD \u03B5\u03C0\u03B9\u03BB\u03BF\u03B3\u03AD\u03C2",
          openText: "\u0386\u03BD\u03BF\u03B9\u03B3\u03BC\u03B1"
        }
      },
      MuiAlert: {
        defaultProps: {
          closeText: "\u039A\u03BB\u03B5\u03AF\u03C3\u03B9\u03BC\u03BF"
        }
      },
      MuiPagination: {
        defaultProps: {
          "aria-label": "\u03A0\u03BB\u03BF\u03AE\u03B3\u03B7\u03C3\u03B7 \u03C3\u03B5 \u03C3\u03B5\u03BB\u03AF\u03B4\u03B5\u03C2",
          getItemAriaLabel: (type, page, selected) => {
            if (type === "page") {
              return `${selected ? "" : "\u039C\u03B5\u03C4\u03AC\u03B2\u03B1\u03C3\u03B7 "}\u03C3\u03B5\u03BB\u03AF\u03B4\u03B1 ${page}`;
            }
            if (type === "first") {
              return "\u03A0\u03C1\u03CE\u03C4\u03B7 \u03C3\u03B5\u03BB\u03AF\u03B4\u03B1";
            }
            if (type === "last") {
              return "\u03A4\u03B5\u03BB\u03B5\u03C5\u03C4\u03B1\u03AF\u03B1 \u03C3\u03B5\u03BB\u03AF\u03B4\u03B1";
            }
            if (type === "next") {
              return "\u0395\u03C0\u03CC\u03BC\u03B5\u03BD\u03B7 \u03C3\u03B5\u03BB\u03AF\u03B4\u03B1";
            }
            return "\u03A0\u03C1\u03BF\u03B7\u03B3\u03BF\u03CD\u03BC\u03B5\u03BD\u03B7 \u03C3\u03B5\u03BB\u03AF\u03B4\u03B1";
          }
        }
      }
    }
  };
  var enUS = {
    /*
    components: {
      MuiBreadcrumbs: { defaultProps: {
        expandText: 'Show path',
      }},
      MuiTablePagination: { defaultProps: {
        getItemAriaLabel: (type) => {
          if (type === 'first') {
            return 'Go to first page';
          }
          if (type === 'last') {
            return 'Go to last page';
          }
          if (type === 'next') {
            return 'Go to next page';
          }
          // if (type === 'previous') {
          return 'Go to previous page';
        },
        labelRowsPerPage: 'Rows per page:',
        labelDisplayedRows: ({ from, to, count }) =>
    `${from}–${to} of ${count !== -1 ? count : `more than ${to}`}`,
      }},
      MuiRating: { defaultProps: {
        getLabelText: value => `${value} Star${value !== 1 ? 's' : ''}`,
        emptyLabelText: 'Empty',
      }},
      MuiAutocomplete: { defaultProps: {
        clearText: 'Clear',
        closeText: 'Close',
        loadingText: 'Loading…',
        noOptionsText: 'No options',
        openText: 'Open',
      }},
      MuiAlert: { defaultProps: {
        closeText: 'Close',
      }},
      MuiPagination: {  defaultProps: {
        'aria-label': 'Pagination navigation',
        getItemAriaLabel: (type, page, selected) => {
          if (type === 'page') {
            return `${selected ? '' : 'Go to '}page ${page}`;
          }
          if (type === 'first') {
            return 'Go to first page';
          }
          if (type === 'last') {
            return 'Go to last page';
          }
          if (type === 'next') {
            return 'Go to next page';
          }
          // if (type === 'previous') {
          return 'Go to previous page';
        },
      }},
    },
    */
  };
  var esES = {
    components: {
      MuiBreadcrumbs: {
        defaultProps: {
          expandText: "Mostrar ruta"
        }
      },
      MuiTablePagination: {
        defaultProps: {
          getItemAriaLabel: (type) => {
            if (type === "first") {
              return "Ir a la primera p\xE1gina";
            }
            if (type === "last") {
              return "Ir a la \xFAltima p\xE1gina";
            }
            if (type === "next") {
              return "Ir a la p\xE1gina siguiente";
            }
            return "Ir a la p\xE1gina anterior";
          },
          labelRowsPerPage: "Filas por p\xE1gina:",
          labelDisplayedRows: ({
            from: from2,
            to,
            count
          }) => `${from2}\u2013${to} de ${count !== -1 ? count : `m\xE1s de ${to}`}`
        }
      },
      MuiRating: {
        defaultProps: {
          getLabelText: (value) => `${value} Estrella${value !== 1 ? "s" : ""}`,
          emptyLabelText: "Vac\xEDo"
        }
      },
      MuiAutocomplete: {
        defaultProps: {
          clearText: "Limpiar",
          closeText: "Cerrar",
          loadingText: "Cargando\u2026",
          noOptionsText: "Sin opciones",
          openText: "Abierto"
        }
      },
      MuiAlert: {
        defaultProps: {
          closeText: "Cerrar"
        }
      },
      MuiPagination: {
        defaultProps: {
          "aria-label": "Paginador",
          getItemAriaLabel: (type, page, selected) => {
            if (type === "page") {
              return `${selected ? "" : "Ir a la "}p\xE1gina ${page}`;
            }
            if (type === "first") {
              return "Ir a la primera p\xE1gina";
            }
            if (type === "last") {
              return "Ir a la \xFAltima p\xE1gina";
            }
            if (type === "next") {
              return "Ir a la p\xE1gina siguiente";
            }
            return "Ir a la p\xE1gina anterior";
          }
        }
      }
    }
  };
  var faIR = {
    components: {
      // MuiBreadcrumbs: {
      //   defaultProps: {
      //     expandText: 'Show path',
      //   },
      // },
      MuiBreadcrumbs: {
        defaultProps: {
          expandText: "\u0646\u0645\u0627\u06CC\u0634 \u0645\u0633\u06CC\u0631"
        }
      },
      MuiTablePagination: {
        defaultProps: {
          getItemAriaLabel: (type) => {
            if (type === "first") {
              return "\u0631\u0641\u062A\u0646 \u0628\u0647 \u0627\u0648\u0644\u06CC\u0646 \u0635\u0641\u062D\u0647";
            }
            if (type === "last") {
              return "\u0631\u0641\u062A\u0646 \u0628\u0647 \u0622\u062E\u0631\u06CC\u0646 \u0635\u0641\u062D\u0647";
            }
            if (type === "next") {
              return "\u0631\u0641\u062A\u0646 \u0628\u0647 \u0635\u0641\u062D\u0647\u200C\u06CC \u0628\u0639\u062F\u06CC";
            }
            return "\u0631\u0641\u062A\u0646 \u0628\u0647 \u0635\u0641\u062D\u0647\u200C\u06CC \u0642\u0628\u0644\u06CC";
          },
          labelRowsPerPage: "\u062A\u0639\u062F\u0627\u062F \u0633\u0637\u0631\u0647\u0627\u06CC \u0647\u0631 \u0635\u0641\u062D\u0647:",
          labelDisplayedRows: ({
            from: from2,
            to,
            count
          }) => `${from2}\u2013${to} \u0627\u0632 ${count !== -1 ? count : `\u0628\u06CC\u0634\u062A\u0631 \u0627\u0632 ${to}`}`
        }
      },
      MuiRating: {
        defaultProps: {
          getLabelText: (value) => `${value} \u0633\u062A\u0627\u0631\u0647`,
          emptyLabelText: "\u062E\u0627\u0644\u06CC"
        }
      },
      MuiAutocomplete: {
        defaultProps: {
          clearText: "\u067E\u0627\u06A9\u200C\u06A9\u0631\u062F\u0646",
          closeText: "\u0628\u0633\u062A\u0646",
          loadingText: "\u062F\u0631 \u062D\u0627\u0644 \u0628\u0627\u0631\u06AF\u0630\u0627\u0631\u06CC\u2026",
          noOptionsText: "\u0628\u06CC\u200C\u0646\u062A\u06CC\u062C\u0647",
          openText: "\u0628\u0627\u0632\u06A9\u0631\u062F\u0646"
        }
      },
      MuiAlert: {
        defaultProps: {
          closeText: "\u0628\u0633\u062A\u0646"
        }
      },
      MuiPagination: {
        defaultProps: {
          "aria-label": "\u0646\u0627\u0648\u0628\u0631\u06CC \u0635\u0641\u062D\u0647",
          getItemAriaLabel: (type, page, selected) => {
            if (type === "page") {
              return `${selected ? "" : "\u0631\u0641\u062A\u0646 \u0628\u0647 "}\u0635\u0641\u062D\u0647\u0654 ${page}`;
            }
            if (type === "first") {
              return "\u0631\u0641\u062A\u0646 \u0628\u0647 \u0627\u0648\u0644\u06CC\u0646 \u0635\u0641\u062D\u0647";
            }
            if (type === "last") {
              return "\u0631\u0641\u062A\u0646 \u0628\u0647 \u0622\u062E\u0631\u06CC\u0646 \u0635\u0641\u062D\u0647";
            }
            if (type === "next") {
              return "\u0631\u0641\u062A\u0646 \u0628\u0647 \u0635\u0641\u062D\u0647\u200C\u06CC \u0628\u0639\u062F\u06CC";
            }
            return "\u0631\u0641\u062A\u0646 \u0628\u0647 \u0635\u0641\u062D\u0647\u200C\u06CC \u0642\u0628\u0644\u06CC";
          }
        }
      }
    }
  };
  var fiFI = {
    components: {
      MuiBreadcrumbs: {
        defaultProps: {
          expandText: "N\xE4yt\xE4 reitti"
        }
      },
      MuiTablePagination: {
        defaultProps: {
          getItemAriaLabel: (type) => {
            if (type === "first") {
              return "Mene ensimm\xE4iselle sivulle";
            }
            if (type === "last") {
              return "Mene viimeiselle sivulle";
            }
            if (type === "next") {
              return "Mene seuraavalle sivulle";
            }
            return "Mene edelliselle sivulle";
          },
          labelRowsPerPage: "Rivej\xE4 per sivu:",
          labelDisplayedRows: ({
            from: from2,
            to,
            count
          }) => `${from2}\u2013${to} / ${count !== -1 ? count : `enemm\xE4n kuin ${to}`}`
        }
      },
      MuiRating: {
        defaultProps: {
          getLabelText: (value) => `${value} T\xE4ht${value !== 1 ? "e\xE4" : "i"}`,
          emptyLabelText: "Tyhj\xE4"
        }
      },
      MuiAutocomplete: {
        defaultProps: {
          clearText: "Tyhjenn\xE4",
          closeText: "Sulje",
          loadingText: "Ladataan\u2026",
          noOptionsText: "Ei valintoja",
          openText: "Avaa"
        }
      },
      MuiAlert: {
        defaultProps: {
          closeText: "Sulje"
        }
      },
      MuiPagination: {
        defaultProps: {
          "aria-label": "Sivutus navigaatio",
          getItemAriaLabel: (type, page, selected) => {
            if (type === "page") {
              return `${selected ? "sivu" : "Mene sivulle"} ${page}`;
            }
            if (type === "first") {
              return "Mene ensimm\xE4iselle sivulle";
            }
            if (type === "last") {
              return "Mene viimeiselle sivulle";
            }
            if (type === "next") {
              return "Mene seuraavalle sivulle";
            }
            return "Mene edelliselle sivulle";
          }
        }
      }
    }
  };
  var frFR = {
    components: {
      MuiBreadcrumbs: {
        defaultProps: {
          expandText: "Montrer le chemin"
        }
      },
      MuiTablePagination: {
        defaultProps: {
          getItemAriaLabel: (type) => {
            if (type === "first") {
              return "Aller \xE0 la premi\xE8re page";
            }
            if (type === "last") {
              return "Aller \xE0 la derni\xE8re page";
            }
            if (type === "next") {
              return "Aller \xE0 la page suivante";
            }
            return "Aller \xE0 la page pr\xE9c\xE9dente";
          },
          labelRowsPerPage: "Lignes par page :",
          labelDisplayedRows: ({
            from: from2,
            to,
            count
          }) => `${from2}\u2013${to} sur ${count !== -1 ? count : `plus que ${to}`}`
        }
      },
      MuiRating: {
        defaultProps: {
          getLabelText: (value) => `${value} Etoile${value !== 1 ? "s" : ""}`,
          emptyLabelText: "Vide"
        }
      },
      MuiAutocomplete: {
        defaultProps: {
          clearText: "Vider",
          closeText: "Fermer",
          loadingText: "Chargement\u2026",
          noOptionsText: "Pas de r\xE9sultats",
          openText: "Ouvrir"
        }
      },
      MuiAlert: {
        defaultProps: {
          closeText: "Fermer"
        }
      },
      MuiPagination: {
        defaultProps: {
          "aria-label": "navigation de pagination",
          getItemAriaLabel: (type, page, selected) => {
            if (type === "page") {
              return `${selected ? "" : "Aller \xE0 la "}page ${page}`;
            }
            if (type === "first") {
              return "Aller \xE0 la premi\xE8re page";
            }
            if (type === "last") {
              return "Aller \xE0 la derni\xE8re page";
            }
            if (type === "next") {
              return "Aller \xE0 la page suivante";
            }
            return "Aller \xE0 la page pr\xE9c\xE9dente";
          }
        }
      }
    }
  };
  var heIL = {
    components: {
      MuiBreadcrumbs: {
        defaultProps: {
          expandText: "\u05D4\u05E6\u05D2 \u05E0\u05EA\u05D9\u05D1"
        }
      },
      MuiTablePagination: {
        defaultProps: {
          getItemAriaLabel: (type) => {
            if (type === "first") {
              return "\u05DC\u05E2\u05DE\u05D5\u05D3 \u05D4\u05E8\u05D0\u05E9\u05D5\u05DF";
            }
            if (type === "last") {
              return "\u05DC\u05E2\u05DE\u05D5\u05D3 \u05D4\u05D0\u05D7\u05E8\u05D5\u05DF";
            }
            if (type === "next") {
              return "\u05DC\u05E2\u05DE\u05D5\u05D3 \u05D4\u05D1\u05D0";
            }
            return "\u05DC\u05E2\u05DE\u05D5\u05D3 \u05D4\u05E7\u05D5\u05D3\u05DD";
          },
          labelRowsPerPage: "\u05E9\u05D5\u05E8\u05D5\u05EA \u05D1\u05E2\u05DE\u05D5\u05D3:",
          labelDisplayedRows: ({
            from: from2,
            to,
            count
          }) => `${from2}\u2013${to} \u05DE\u05EA\u05D5\u05DA ${count !== -1 ? count : `\u05D9\u05D5\u05EA\u05E8 \u05DE ${to}`}`
        }
      },
      MuiRating: {
        defaultProps: {
          getLabelText: (value) => `${value} \u05DB\u05D5\u05DB\u05D1${value !== 1 ? "\u05D9\u05DD" : ""}`,
          emptyLabelText: "\u05E8\u05D9\u05E7"
        }
      },
      MuiAutocomplete: {
        defaultProps: {
          clearText: "\u05E0\u05E7\u05D4",
          closeText: "\u05E1\u05D2\u05D5\u05E8",
          loadingText: "\u05D8\u05D5\u05E2\u05DF\u2026",
          noOptionsText: "\u05D0\u05D9\u05DF \u05D0\u05D5\u05E4\u05E6\u05D9\u05D5\u05EA",
          openText: "\u05E4\u05EA\u05D7"
        }
      },
      MuiAlert: {
        defaultProps: {
          closeText: "\u05E1\u05D2\u05D5\u05E8"
        }
      },
      MuiPagination: {
        defaultProps: {
          "aria-label": "\u05E0\u05D9\u05D5\u05D5\u05D8 \u05D1\u05E2\u05DE\u05D5\u05D3\u05D9\u05DD",
          getItemAriaLabel: (type, page, selected) => {
            if (type === "page") {
              return `${selected ? "" : "\u05DC "}\u05E2\u05DE\u05D5\u05D3 ${page}`;
            }
            if (type === "first") {
              return "\u05DC\u05E2\u05DE\u05D5\u05D3 \u05D4\u05E8\u05D0\u05E9\u05D5\u05DF";
            }
            if (type === "last") {
              return "\u05DC\u05E2\u05DE\u05D5\u05D3 \u05D4\u05D0\u05D7\u05E8\u05D5\u05DF";
            }
            if (type === "next") {
              return "\u05DC\u05E2\u05DE\u05D5\u05D3 \u05D4\u05D1\u05D0";
            }
            return "\u05DC\u05E2\u05DE\u05D5\u05D3 \u05D4\u05E7\u05D5\u05D3\u05DD";
          }
        }
      }
    }
  };
  var hrHR = {
    components: {
      MuiBreadcrumbs: {
        defaultProps: {
          expandText: "Poka\u017Ei putanju"
        }
      },
      MuiTablePagination: {
        defaultProps: {
          getItemAriaLabel: (type) => {
            if (type === "first") {
              return "Idi na prvu stranicu";
            }
            if (type === "last") {
              return "Idi na posljednju stranicu";
            }
            if (type === "next") {
              return "Idi na sljede\u0107u stranicu";
            }
            return "Idi na prethodnu stranicu";
          },
          labelRowsPerPage: "Redova po stranici:",
          labelDisplayedRows: ({
            from: from2,
            to,
            count
          }) => `${from2}\u2013${to} od ${count !== -1 ? count : `vi\u0161e nego ${to}`}`
        }
      },
      MuiRating: {
        defaultProps: {
          getLabelText: (value) => {
            const lastDigit = value % 10;
            const lastTwoDigits = value % 100;
            if ([2, 3, 4].includes(lastDigit) && ![12, 13, 14].includes(lastTwoDigits)) {
              return "Zvijezde";
            }
            return "Zvijezda";
          },
          emptyLabelText: "Prazno"
        }
      },
      MuiAutocomplete: {
        defaultProps: {
          clearText: "Bri\u0161i",
          closeText: "Zatvori",
          loadingText: "U\u010Ditavanje\u2026",
          noOptionsText: "Nema opcija",
          openText: "Otvori"
        }
      },
      MuiAlert: {
        defaultProps: {
          closeText: "Zatvori"
        }
      },
      MuiPagination: {
        defaultProps: {
          "aria-label": "Navigacija po stranicama",
          getItemAriaLabel: (type, page, selected) => {
            if (type === "page") {
              return `${selected ? "" : "Idi na "}stranicu ${page}`;
            }
            if (type === "first") {
              return "Idi na prvu stranicu";
            }
            if (type === "last") {
              return "Idi na zadnju stranicu";
            }
            if (type === "next") {
              return "Idi na sljede\u0107u stranicu";
            }
            return "Idi na prethodnu stranicu";
          }
        }
      }
    }
  };
  var huHU = {
    components: {
      MuiBreadcrumbs: {
        defaultProps: {
          expandText: "\xDAtvonal"
        }
      },
      MuiTablePagination: {
        defaultProps: {
          getItemAriaLabel: (type) => {
            if (type === "first") {
              return "Els\u0151 oldalra";
            }
            if (type === "last") {
              return "Utols\xF3 oldalra";
            }
            if (type === "next") {
              return "K\xF6vetkez\u0151 oldalra";
            }
            return "El\u0151z\u0151 oldalra";
          },
          labelRowsPerPage: "Sorok sz\xE1ma:"
          // labelDisplayedRows: ({ from, to, count }) =>
          //   `${from}–${to} / ${count !== -1 ? count : `more than ${to}`}`,
        }
      },
      MuiRating: {
        defaultProps: {
          getLabelText: (value) => `${value} Csillag`,
          emptyLabelText: "\xDCres"
        }
      },
      MuiAutocomplete: {
        defaultProps: {
          clearText: "T\xF6rl\xE9s",
          closeText: "Bez\xE1r\xE1s",
          loadingText: "T\xF6lt\xE9s\u2026",
          noOptionsText: "Nincs tal\xE1lat",
          openText: "Megnyit\xE1s"
        }
      },
      MuiAlert: {
        defaultProps: {
          closeText: "Bez\xE1r\xE1s"
        }
      },
      MuiPagination: {
        defaultProps: {
          "aria-label": "Lapoz\xE1s",
          getItemAriaLabel: (type, page, selected) => {
            if (type === "page") {
              return `${page}. oldal${selected ? "" : "ra"}`;
            }
            if (type === "first") {
              return "Els\u0151 oldalra";
            }
            if (type === "last") {
              return "Utols\xF3 oldalra";
            }
            if (type === "next") {
              return "K\xF6vetkez\u0151 oldalra";
            }
            return "El\u0151z\u0151 oldalra";
          }
        }
      }
    }
  };
  var itIT = {
    components: {
      MuiBreadcrumbs: {
        defaultProps: {
          expandText: "Visualizza percorso"
        }
      },
      MuiTablePagination: {
        defaultProps: {
          getItemAriaLabel: (type) => {
            if (type === "first") {
              return "Vai alla prima pagina";
            }
            if (type === "last") {
              return "Vai all'ultima pagina";
            }
            if (type === "next") {
              return "Vai alla pagina successiva";
            }
            return "Vai alla pagina precedente";
          },
          labelRowsPerPage: "Righe per pagina:",
          labelDisplayedRows: ({
            from: from2,
            to,
            count
          }) => `${from2}\u2013${to} di ${count !== -1 ? count : `pi\xF9 di ${to}`}`
        }
      },
      MuiRating: {
        defaultProps: {
          getLabelText: (value) => `${value} Stell${value !== 1 ? "e" : "a"}`,
          emptyLabelText: "Vuoto"
        }
      },
      MuiAutocomplete: {
        defaultProps: {
          clearText: "Svuota",
          closeText: "Chiudi",
          loadingText: "Caricamento in corso\u2026",
          noOptionsText: "Nessuna opzione",
          openText: "Apri"
        }
      },
      MuiAlert: {
        defaultProps: {
          closeText: "Chiudi"
        }
      },
      MuiPagination: {
        defaultProps: {
          "aria-label": "Navigazione impaginata",
          getItemAriaLabel: (type, page, selected) => {
            if (type === "page") {
              return `${selected ? "" : "Vai alla "}pagina ${page}`;
            }
            if (type === "first") {
              return "Vai alla prima pagina";
            }
            if (type === "last") {
              return "Vai all'ultima pagina";
            }
            if (type === "next") {
              return "Vai alla pagina successiva";
            }
            return "Vai alla pagina precedente";
          }
        }
      }
    }
  };
  var jaJP = {
    components: {
      MuiBreadcrumbs: {
        defaultProps: {
          expandText: "\u3059\u3079\u3066\u8868\u793A"
        }
      },
      MuiTablePagination: {
        defaultProps: {
          getItemAriaLabel: (type) => {
            if (type === "first") {
              return "\u6700\u521D\u306E\u30DA\u30FC\u30B8\u3078";
            }
            if (type === "last") {
              return "\u6700\u5F8C\u306E\u30DA\u30FC\u30B8\u3078";
            }
            if (type === "next") {
              return "\u6B21\u306E\u30DA\u30FC\u30B8\u3078";
            }
            return "\u524D\u306E\u30DA\u30FC\u30B8\u3078";
          },
          labelRowsPerPage: "\u30DA\u30FC\u30B8\u3042\u305F\u308A\u306E\u884C\u6570:",
          labelDisplayedRows: ({
            from: from2,
            to,
            count
          }) => `${from2}\uFF5E${to} / ${count !== -1 ? count : `${to}\u4EE5\u4E0A`}`
        }
      },
      MuiRating: {
        defaultProps: {
          getLabelText: (value) => `\u661F${value}`,
          emptyLabelText: "\u661F\u306A\u3057"
        }
      },
      MuiAutocomplete: {
        defaultProps: {
          clearText: "\u30AF\u30EA\u30A2",
          closeText: "\u9589\u3058\u308B",
          loadingText: "\u8AAD\u307F\u8FBC\u307F\u4E2D\u2026",
          noOptionsText: "\u30C7\u30FC\u30BF\u304C\u3042\u308A\u307E\u305B\u3093",
          openText: "\u958B\u304F"
        }
      },
      MuiAlert: {
        defaultProps: {
          closeText: "\u9589\u3058\u308B"
        }
      },
      MuiPagination: {
        defaultProps: {
          "aria-label": "\u30DA\u30FC\u30B8\u9078\u629E",
          getItemAriaLabel: (type, page, selected) => {
            if (type === "page") {
              return `\u30DA\u30FC\u30B8${page}${selected ? "" : "\u3078"}`;
            }
            if (type === "first") {
              return "\u6700\u521D\u306E\u30DA\u30FC\u30B8\u3078";
            }
            if (type === "last") {
              return "\u6700\u5F8C\u306E\u30DA\u30FC\u30B8\u3078";
            }
            if (type === "next") {
              return "\u6B21\u306E\u30DA\u30FC\u30B8\u3078";
            }
            return "\u524D\u306E\u30DA\u30FC\u30B8\u3078";
          }
        }
      }
    }
  };
  var koKR = {
    components: {
      MuiBreadcrumbs: {
        defaultProps: {
          expandText: "\uACBD\uB85C \uBCF4\uAE30"
        }
      },
      MuiTablePagination: {
        defaultProps: {
          getItemAriaLabel: (type) => {
            if (type === "first") {
              return "\uCCAB \uBC88\uC9F8 \uD398\uC774\uC9C0\uB85C \uC774\uB3D9";
            }
            if (type === "last") {
              return "\uB9C8\uC9C0\uB9C9 \uD398\uC774\uC9C0\uB85C \uC774\uB3D9";
            }
            if (type === "next") {
              return "\uB2E4\uC74C \uD398\uC774\uC9C0\uB85C \uC774\uB3D9";
            }
            return "\uC774\uC804 \uD398\uC774\uC9C0\uB85C \uC774\uB3D9";
          },
          labelRowsPerPage: "\uD398\uC774\uC9C0 \uB2F9 \uD589:",
          labelDisplayedRows: ({
            from: from2,
            to,
            count
          }) => `${from2}\u2013${to} / ${count !== -1 ? count : `${to}\uAC1C \uC774\uC0C1`}`
        }
      },
      MuiRating: {
        defaultProps: {
          getLabelText: (value) => `${value} \uC810`,
          emptyLabelText: "\uBE48 \uD14D\uC2A4\uD2B8"
        }
      },
      MuiAutocomplete: {
        defaultProps: {
          clearText: "\uC9C0\uC6B0\uAE30",
          closeText: "\uB2EB\uAE30",
          loadingText: "\uBD88\uB7EC\uC624\uB294 \uC911\u2026",
          noOptionsText: "\uC635\uC158 \uC5C6\uC74C",
          openText: "\uC5F4\uAE30"
        }
      },
      MuiAlert: {
        defaultProps: {
          closeText: "\uB2EB\uAE30"
        }
      },
      MuiPagination: {
        defaultProps: {
          "aria-label": "\uD398\uC774\uC9C0\uB124\uC774\uC158 \uB124\uBE44\uAC8C\uC774\uC158",
          getItemAriaLabel: (type, page, selected) => {
            if (type === "page") {
              return `${page} \uBC88\uC9F8 \uD398\uC774\uC9C0${selected ? "" : "\uB85C \uC774\uB3D9"}`;
            }
            if (type === "first") {
              return "\uCCAB \uBC88\uC9F8 \uD398\uC774\uC9C0\uB85C \uC774\uB3D9";
            }
            if (type === "last") {
              return "\uB9C8\uC9C0\uB9C9 \uD398\uC774\uC9C0\uB85C \uC774\uB3D9";
            }
            if (type === "next") {
              return "\uB2E4\uC74C \uD398\uC774\uC9C0\uB85C \uC774\uB3D9";
            }
            return "\uC774\uC804 \uD398\uC774\uC9C0\uB85C \uC774\uB3D9";
          }
        }
      }
    }
  };
  var nbNO = {
    components: {
      MuiBreadcrumbs: {
        defaultProps: {
          expandText: "Vis sti"
        }
      },
      MuiTablePagination: {
        defaultProps: {
          getItemAriaLabel: (type) => {
            if (type === "first") {
              return "G\xE5 til f\xF8rste side";
            }
            if (type === "last") {
              return "G\xE5 til siste side";
            }
            if (type === "next") {
              return "G\xE5 til neste side";
            }
            return "G\xE5 til forrige side";
          },
          labelRowsPerPage: "Rader per side:",
          labelDisplayedRows: ({
            from: from2,
            to,
            count
          }) => `${from2}\u2013${to} av ${count !== -1 ? count : `mer enn ${to}`}`
        }
      },
      MuiRating: {
        defaultProps: {
          getLabelText: (value) => `${value} Stjerne${value !== 1 ? "r" : ""}`,
          emptyLabelText: "Tom"
        }
      },
      MuiAutocomplete: {
        defaultProps: {
          clearText: "T\xF8m",
          closeText: "Lukk",
          loadingText: "Laster inn\u2026",
          noOptionsText: "Ingen alternativer",
          openText: "\xC5pne"
        }
      },
      MuiAlert: {
        defaultProps: {
          closeText: "Lukk"
        }
      },
      MuiPagination: {
        defaultProps: {
          "aria-label": "Paginering navigasjon",
          getItemAriaLabel: (type, page, selected) => {
            if (type === "page") {
              return `${selected ? "" : "G\xE5 til "}side ${page}`;
            }
            if (type === "first") {
              return "G\xE5 til f\xF8rste side";
            }
            if (type === "last") {
              return "G\xE5 til siste side";
            }
            if (type === "next") {
              return "G\xE5 til neste side";
            }
            return "G\xE5 til forrige side";
          }
        }
      }
    }
  };
  var nlNL = {
    components: {
      MuiBreadcrumbs: {
        defaultProps: {
          expandText: "Pad tonen"
        }
      },
      MuiTablePagination: {
        defaultProps: {
          getItemAriaLabel: (type) => {
            if (type === "first") {
              return "Ga naar eerste pagina";
            }
            if (type === "last") {
              return "Ga naar laatste pagina";
            }
            if (type === "next") {
              return "Ga naar volgende pagina";
            }
            return "Ga naar vorige pagina";
          },
          labelRowsPerPage: "Regels per pagina:",
          labelDisplayedRows: ({
            from: from2,
            to,
            count
          }) => `${from2}\u2013${to} van ${count !== -1 ? count : `meer dan ${to}`}`
        }
      },
      MuiRating: {
        defaultProps: {
          getLabelText: (value) => `${value} Ster${value !== 1 ? "ren" : ""}`,
          emptyLabelText: "Leeg"
        }
      },
      MuiAutocomplete: {
        defaultProps: {
          clearText: "Wissen",
          closeText: "Sluiten",
          loadingText: "Laden\u2026",
          noOptionsText: "Geen opties",
          openText: "Openen"
        }
      },
      MuiAlert: {
        defaultProps: {
          closeText: "Sluiten"
        }
      },
      MuiPagination: {
        defaultProps: {
          "aria-label": "Navigatie via paginering",
          getItemAriaLabel: (type, page, selected) => {
            if (type === "page") {
              return `${selected ? "" : "Ga naar "}pagina ${page}`;
            }
            if (type === "first") {
              return "Ga naar eerste pagina";
            }
            if (type === "last") {
              return "Ga naar laatste pagina";
            }
            if (type === "next") {
              return "Ga naar volgende pagina";
            }
            return "Ga naar vorige pagina";
          }
        }
      }
    }
  };
  var plPL = {
    components: {
      MuiBreadcrumbs: {
        defaultProps: {
          expandText: "Poka\u017C \u015Bcie\u017Ck\u0119"
        }
      },
      MuiTablePagination: {
        defaultProps: {
          getItemAriaLabel: (type) => {
            if (type === "first") {
              return "Przejd\u017A do pierwszej strony";
            }
            if (type === "last") {
              return "Przejd\u017A do ostatniej strony";
            }
            if (type === "next") {
              return "Przejd\u017A do nast\u0119pnej strony";
            }
            return "Przejd\u017A do poprzedniej strony";
          },
          labelRowsPerPage: "Wierszy na stron\u0119:",
          labelDisplayedRows: ({
            from: from2,
            to,
            count
          }) => `${from2}\u2013${to} z ${count !== -1 ? count : `ponad ${to}`}`
        }
      },
      MuiRating: {
        defaultProps: {
          getLabelText: (value) => {
            let pluralForm = "gwiazdek";
            const lastDigit = value % 10;
            if ((value < 10 || value > 20) && lastDigit > 1 && lastDigit < 5) {
              pluralForm = "gwiazdki";
            } else if (value === 1) {
              pluralForm = "gwiazdka";
            }
            return `${value} ${pluralForm}`;
          },
          emptyLabelText: "Brak gwiazdek"
        }
      },
      MuiAutocomplete: {
        defaultProps: {
          clearText: "Wyczy\u015B\u0107",
          closeText: "Zamknij",
          loadingText: "\u0141adowanie\u2026",
          noOptionsText: "Brak opcji",
          openText: "Otw\xF3rz"
        }
      },
      MuiAlert: {
        defaultProps: {
          closeText: "Zamknij"
        }
      },
      MuiPagination: {
        defaultProps: {
          "aria-label": "Nawigacja podzia\u0142u na strony",
          getItemAriaLabel: (type, page, selected) => {
            if (type === "page") {
              return selected ? `${page}. strona` : `Przejd\u017A do ${page}. strony`;
            }
            if (type === "first") {
              return "Przejd\u017A do pierwszej strony";
            }
            if (type === "last") {
              return "Przejd\u017A do ostatniej strony";
            }
            if (type === "next") {
              return "Przejd\u017A do nast\u0119pnej strony";
            }
            return "Przejd\u017A do poprzedniej strony";
          }
        }
      }
    }
  };
  var ptBR = {
    components: {
      MuiBreadcrumbs: {
        defaultProps: {
          expandText: "Mostrar caminho"
        }
      },
      MuiTablePagination: {
        defaultProps: {
          getItemAriaLabel: (type) => {
            if (type === "first") {
              return "Ir para a primeira p\xE1gina";
            }
            if (type === "last") {
              return "Ir para a \xFAltima p\xE1gina";
            }
            if (type === "next") {
              return "Ir para a pr\xF3xima p\xE1gina";
            }
            return "Ir para a p\xE1gina anterior";
          },
          labelRowsPerPage: "Linhas por p\xE1gina:",
          labelDisplayedRows: ({
            from: from2,
            to,
            count
          }) => `${from2}\u2013${to} de ${count !== -1 ? count : `mais de ${to}`}`
        }
      },
      MuiRating: {
        defaultProps: {
          getLabelText: (value) => `${value} Estrela${value !== 1 ? "s" : ""}`,
          emptyLabelText: "Vazio"
        }
      },
      MuiAutocomplete: {
        defaultProps: {
          clearText: "Limpar",
          closeText: "Fechar",
          loadingText: "Carregando\u2026",
          noOptionsText: "Sem op\xE7\xF5es",
          openText: "Abrir"
        }
      },
      MuiAlert: {
        defaultProps: {
          closeText: "Fechar"
        }
      },
      MuiPagination: {
        defaultProps: {
          "aria-label": "Navegar pela pagina\xE7\xE3o",
          getItemAriaLabel: (type, page, selected) => {
            if (type === "page") {
              return `${selected ? "" : "Ir para a "}p\xE1gina ${page}`;
            }
            if (type === "first") {
              return "Ir para a primeira p\xE1gina";
            }
            if (type === "last") {
              return "Ir para a \xFAltima p\xE1gina";
            }
            if (type === "next") {
              return "Ir para a pr\xF3xima p\xE1gina";
            }
            return "Ir para a p\xE1gina anterior";
          }
        }
      }
    }
  };
  var ptPT = {
    components: {
      MuiBreadcrumbs: {
        defaultProps: {
          expandText: "Mostrar caminho"
        }
      },
      MuiTablePagination: {
        defaultProps: {
          getItemAriaLabel: (type) => {
            if (type === "first") {
              return "Primeira p\xE1gina";
            }
            if (type === "last") {
              return "\xDAltima p\xE1gina";
            }
            if (type === "next") {
              return "Pr\xF3xima p\xE1gina";
            }
            return "P\xE1gina anterior";
          },
          labelRowsPerPage: "Linhas por p\xE1gina:",
          labelDisplayedRows: ({
            from: from2,
            to,
            count
          }) => `${from2}\u2013${to} de ${count !== -1 ? count : `mais de ${to}`}`
        }
      },
      MuiRating: {
        defaultProps: {
          getLabelText: (value) => `${value} Estrela${value !== 1 ? "s" : ""}`,
          emptyLabelText: "Vazio"
        }
      },
      MuiAutocomplete: {
        defaultProps: {
          clearText: "Limpar",
          closeText: "Fechar",
          loadingText: "A carregar\u2026",
          noOptionsText: "Sem op\xE7\xF5es",
          openText: "Abrir"
        }
      },
      MuiAlert: {
        defaultProps: {
          closeText: "Fechar"
        }
      },
      MuiPagination: {
        defaultProps: {
          "aria-label": "Navegar por p\xE1ginas",
          getItemAriaLabel: (type, page, selected) => {
            if (type === "page") {
              return `${selected ? "" : "Ir para a "}p\xE1gina ${page}`;
            }
            if (type === "first") {
              return "Primeira p\xE1gina";
            }
            if (type === "last") {
              return "\xDAltima p\xE1gina";
            }
            if (type === "next") {
              return "Pr\xF3xima p\xE1gina";
            }
            return "P\xE1gina anterior";
          }
        }
      }
    }
  };
  var roRO = {
    components: {
      MuiBreadcrumbs: {
        defaultProps: {
          expandText: "Arat\u0103 calea"
        }
      },
      MuiTablePagination: {
        defaultProps: {
          getItemAriaLabel: (type) => {
            if (type === "first") {
              return "Mergi la prima pagin\u0103";
            }
            if (type === "last") {
              return "Mergi la ultima pagin\u0103";
            }
            if (type === "next") {
              return "Mergi la pagina urm\u0103toare";
            }
            return "Mergi la pagina precedent\u0103";
          },
          labelRowsPerPage: "R\xE2nduri pe pagin\u0103:"
          // labelDisplayedRows: ({ from, to, count }) =>
          //   `${from}–${to} din ${count !== -1 ? count : `more than ${to}`}`,
        }
      },
      MuiRating: {
        defaultProps: {
          getLabelText: (value) => `${value} St${value !== 1 ? "ele" : "ea"}`,
          emptyLabelText: "Gol"
        }
      },
      MuiAutocomplete: {
        defaultProps: {
          clearText: "\u0218terge",
          closeText: "\xCEnchide",
          loadingText: "Se \xEEncarc\u0103\u2026",
          noOptionsText: "Nicio op\u021Biune",
          openText: "Deschide"
        }
      },
      MuiAlert: {
        defaultProps: {
          closeText: "\xCEnchide"
        }
      },
      MuiPagination: {
        defaultProps: {
          "aria-label": "Navigare prin paginare",
          getItemAriaLabel: (type, page, selected) => {
            if (type === "page") {
              return `${selected ? "" : "Mergi la "}pagina ${page}`;
            }
            if (type === "first") {
              return "Mergi la prima pagin\u0103";
            }
            if (type === "last") {
              return "Mergi la ultima pagin\u0103";
            }
            if (type === "next") {
              return "Mergi la pagina urm\u0103toare";
            }
            return "Mergi la pagina precedent\u0103";
          }
        }
      }
    }
  };
  var ruRU = {
    components: {
      MuiBreadcrumbs: {
        defaultProps: {
          expandText: "\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u044C \u043F\u043E\u043B\u043D\u044B\u0439 \u043F\u0443\u0442\u044C"
        }
      },
      MuiTablePagination: {
        defaultProps: {
          getItemAriaLabel: (type) => {
            if (type === "first") {
              return "\u041F\u0435\u0440\u0435\u0439\u0442\u0438 \u043D\u0430 \u043F\u0435\u0440\u0432\u0443\u044E \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0443";
            }
            if (type === "last") {
              return "\u041F\u0435\u0440\u0435\u0439\u0442\u0438 \u043D\u0430 \u043F\u043E\u0441\u043B\u0435\u0434\u043D\u044E\u044E \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0443";
            }
            if (type === "next") {
              return "\u041F\u0435\u0440\u0435\u0439\u0442\u0438 \u043D\u0430 \u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0443\u044E \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0443";
            }
            return "\u041F\u0435\u0440\u0435\u0439\u0442\u0438 \u043D\u0430 \u043F\u0440\u0435\u0434\u044B\u0434\u0443\u0449\u0443\u044E \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0443";
          },
          labelRowsPerPage: "\u0421\u0442\u0440\u043E\u043A \u043D\u0430 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0435:",
          labelDisplayedRows: ({
            from: from2,
            to,
            count
          }) => `${from2}\u2013${to} \u0438\u0437 ${count !== -1 ? count : `\u0431\u043E\u043B\u0435\u0435 \u0447\u0435\u043C ${to}`}`
        }
      },
      MuiRating: {
        defaultProps: {
          getLabelText: (value) => {
            let pluralForm = "\u0417\u0432\u0451\u0437\u0434";
            const lastDigit = value % 10;
            if (lastDigit > 1 && lastDigit < 5) {
              pluralForm = "\u0417\u0432\u0435\u0437\u0434\u044B";
            } else if (lastDigit === 1) {
              pluralForm = "\u0417\u0432\u0435\u0437\u0434\u0430";
            }
            return `${value} ${pluralForm}`;
          },
          emptyLabelText: "\u0420\u0435\u0439\u0442\u0438\u043D\u0433 \u043E\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442"
        }
      },
      MuiAutocomplete: {
        defaultProps: {
          clearText: "\u041E\u0447\u0438\u0441\u0442\u0438\u0442\u044C",
          closeText: "\u0417\u0430\u043A\u0440\u044B\u0442\u044C",
          loadingText: "\u0417\u0430\u0433\u0440\u0443\u0437\u043A\u0430\u2026",
          noOptionsText: "\u041D\u0435\u0442 \u0434\u043E\u0441\u0442\u0443\u043F\u043D\u044B\u0445 \u0432\u0430\u0440\u0438\u0430\u043D\u0442\u043E\u0432",
          openText: "\u041E\u0442\u043A\u0440\u044B\u0442\u044C"
        }
      },
      MuiAlert: {
        defaultProps: {
          closeText: "\u0417\u0430\u043A\u0440\u044B\u0442\u044C"
        }
      },
      MuiPagination: {
        defaultProps: {
          "aria-label": "\u041D\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u044F \u043F\u043E \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430\u043C",
          getItemAriaLabel: (type, page, selected) => {
            if (type === "page") {
              if (selected) {
                return `${page} \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430`;
              }
              return `\u041F\u0435\u0440\u0435\u0439\u0442\u0438 \u043D\u0430 ${page} \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0443`;
            }
            if (type === "first") {
              return "\u041F\u0435\u0440\u0435\u0439\u0442\u0438 \u043D\u0430 \u043F\u0435\u0440\u0432\u0443\u044E \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0443";
            }
            if (type === "last") {
              return "\u041F\u0435\u0440\u0435\u0439\u0442\u0438 \u043D\u0430 \u043F\u043E\u0441\u043B\u0435\u0434\u043D\u044E\u044E \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0443";
            }
            if (type === "next") {
              return "\u041F\u0435\u0440\u0435\u0439\u0442\u0438 \u043D\u0430 \u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0443\u044E \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0443";
            }
            return "\u041F\u0435\u0440\u0435\u0439\u0442\u0438 \u043D\u0430 \u043F\u0440\u0435\u0434\u044B\u0434\u0443\u0449\u0443\u044E \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0443";
          }
        }
      }
    }
  };
  var skSK = {
    components: {
      MuiBreadcrumbs: {
        defaultProps: {
          expandText: "Uk\xE1za\u0165 cestu "
        }
      },
      MuiTablePagination: {
        defaultProps: {
          getItemAriaLabel: (type) => {
            if (type === "first") {
              return "\xCDs\u0165 na prv\xFA str\xE1nku";
            }
            if (type === "last") {
              return "\xCDs\u0165 na posledn\xFA str\xE1nku";
            }
            if (type === "next") {
              return "\xCDs\u0165 na \u010Fa\u013E\u0161iu str\xE1nku";
            }
            return "\xCDs\u0165 na predch\xE1dzaj\xFAcu str\xE1nku";
          },
          labelRowsPerPage: "Riadkov na str\xE1nke:",
          labelDisplayedRows: ({
            from: from2,
            to,
            count
          }) => `${from2}\u2013${to} z ${count !== -1 ? count : `viac ako ${to}`}`
        }
      },
      MuiRating: {
        defaultProps: {
          getLabelText: (value) => {
            if (value === 1) {
              return `${value} hviezdi\u010Dka`;
            }
            if (value >= 2 && value <= 4) {
              return `${value} hviezdi\u010Dky`;
            }
            return `${value} hviezdi\u010Diek`;
          },
          emptyLabelText: "Pr\xE1zdne"
        }
      },
      MuiAutocomplete: {
        defaultProps: {
          clearText: "Vymaza\u0165",
          closeText: "Zavrie\u0165",
          loadingText: "Na\u010D\xEDtanie\u2026",
          noOptionsText: "\u017Diadne mo\u017Enosti",
          openText: "Otvori\u0165"
        }
      },
      MuiAlert: {
        defaultProps: {
          closeText: "Zavrie\u0165"
        }
      },
      MuiPagination: {
        defaultProps: {
          "aria-label": "Navig\xE1cia str\xE1nkovanim",
          getItemAriaLabel: (type, page, selected) => {
            if (type === "page") {
              return `${selected ? "" : "\xCDs\u0165 na "}str\xE1nku ${page}`;
            }
            if (type === "first") {
              return "\xCDs\u0165 na prv\xFA str\xE1nku";
            }
            if (type === "last") {
              return "\xCDs\u0165 na posledn\xFA str\xE1nku";
            }
            if (type === "next") {
              return "\xCDs\u0165 na \u010Fa\u013E\u0161iu str\xE1nku";
            }
            return "\xCDs\u0165 na predch\xE1dzaj\xFAcu str\xE1nku";
          }
        }
      }
    }
  };
  var svSE = {
    components: {
      MuiBreadcrumbs: {
        defaultProps: {
          expandText: "Visa s\xF6kv\xE4g"
        }
      },
      MuiTablePagination: {
        defaultProps: {
          getItemAriaLabel: (type) => {
            if (type === "first") {
              return "G\xE5 till f\xF6rsta sidan";
            }
            if (type === "last") {
              return "G\xE5 till sista sidan";
            }
            if (type === "next") {
              return "G\xE5 till n\xE4sta sida";
            }
            return "G\xE5 till f\xF6reg\xE5ende sida";
          },
          labelRowsPerPage: "Rader per sida:",
          labelDisplayedRows: ({
            from: from2,
            to,
            count
          }) => `${from2}\u2013${to} av ${count !== -1 ? count : `fler \xE4n ${to}`}`
        }
      },
      MuiRating: {
        defaultProps: {
          getLabelText: (value) => `${value} ${value !== 1 ? "Stj\xE4rnor" : "Stj\xE4rna"}`,
          emptyLabelText: "Tom"
        }
      },
      MuiAutocomplete: {
        defaultProps: {
          clearText: "Rensa",
          closeText: "St\xE4ng",
          loadingText: "Laddar\u2026",
          noOptionsText: "Inga alternativ",
          openText: "\xD6ppna"
        }
      },
      MuiAlert: {
        defaultProps: {
          closeText: "St\xE4ng"
        }
      },
      MuiPagination: {
        defaultProps: {
          "aria-label": "Sidnavigering",
          getItemAriaLabel: (type, page, selected) => {
            if (type === "page") {
              return `${selected ? "" : "G\xE5 till "}sida ${page}`;
            }
            if (type === "first") {
              return "G\xE5 till f\xF6rsta sidan";
            }
            if (type === "last") {
              return "G\xE5 till sista sidan";
            }
            if (type === "next") {
              return "G\xE5 till n\xE4sta sida";
            }
            return "G\xE5 till f\xF6reg\xE5ende sida";
          }
        }
      }
    }
  };
  var trTR = {
    components: {
      MuiBreadcrumbs: {
        defaultProps: {
          expandText: "Yolu g\xF6ster"
        }
      },
      MuiTablePagination: {
        defaultProps: {
          getItemAriaLabel: (type) => {
            if (type === "first") {
              return "\u0130lk sayfaya git";
            }
            if (type === "last") {
              return "Son sayfaya git";
            }
            if (type === "next") {
              return "Sonraki sayfaya git";
            }
            return "\xD6nceki sayfaya git";
          },
          labelRowsPerPage: "Sayfa ba\u015F\u0131na sat\u0131r:",
          labelDisplayedRows: ({
            from: from2,
            to,
            count
          }) => `${from2}-${to} / ${count !== -1 ? count : `${to}'den fazla`}`
        }
      },
      MuiRating: {
        defaultProps: {
          getLabelText: (value) => `${value} Y\u0131ld\u0131z`,
          emptyLabelText: "Bo\u015F"
        }
      },
      MuiAutocomplete: {
        defaultProps: {
          clearText: "Temizle",
          closeText: "Kapat",
          loadingText: "Y\xFCkleniyor\u2026",
          noOptionsText: "Se\xE7enek yok",
          openText: "A\xE7"
        }
      },
      MuiAlert: {
        defaultProps: {
          closeText: "Kapat"
        }
      },
      MuiPagination: {
        defaultProps: {
          "aria-label": "Sayfa navigasyonu",
          getItemAriaLabel: (type, page, selected) => {
            if (type === "page") {
              return `${page}. ${selected ? "sayfa" : "sayfaya git"}`;
            }
            if (type === "first") {
              return "\u0130lk sayfaya git";
            }
            if (type === "last") {
              return "Son sayfaya git";
            }
            if (type === "next") {
              return "Sonraki sayfaya git";
            }
            return "\xD6nceki sayfaya git";
          }
        }
      }
    }
  };
  var ukUA = {
    components: {
      MuiBreadcrumbs: {
        defaultProps: {
          expandText: "\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u0438 \u0448\u043B\u044F\u0445 \u0441\u0442\u043E\u0440\u0456\u043D\u043E\u043A"
        }
      },
      MuiTablePagination: {
        defaultProps: {
          getItemAriaLabel: (type) => {
            if (type === "first") {
              return "\u041F\u0435\u0440\u0435\u0439\u0442\u0438 \u043D\u0430 \u043F\u0435\u0440\u0448\u0443 \u0441\u0442\u043E\u0440\u0456\u043D\u043A\u0443";
            }
            if (type === "last") {
              return "\u041F\u0435\u0440\u0435\u0439\u0442\u0438 \u043D\u0430 \u043E\u0441\u0442\u0430\u043D\u043D\u044E \u0441\u0442\u043E\u0440\u0456\u043D\u043A\u0443";
            }
            if (type === "next") {
              return "\u041F\u0435\u0440\u0435\u0439\u0442\u0438 \u043D\u0430 \u043D\u0430\u0441\u0442\u0443\u043F\u043D\u0443 \u0441\u0442\u043E\u0440\u0456\u043D\u043A\u0443";
            }
            return "\u041F\u0435\u0440\u0435\u0439\u0442\u0438 \u043D\u0430 \u043F\u043E\u043F\u0435\u0440\u0435\u0434\u043D\u044E \u0441\u0442\u043E\u0440\u0456\u043D\u043A\u0443";
          },
          labelRowsPerPage: "\u0420\u044F\u0434\u043A\u0456\u0432 \u043D\u0430 \u0441\u0442\u043E\u0440\u0456\u043D\u0446\u0456:",
          labelDisplayedRows: ({
            from: from2,
            to,
            count
          }) => `${from2}\u2013${to} \u0437 ${count !== -1 ? count : `\u043F\u043E\u043D\u0430\u0434 ${to}`}`
        }
      },
      MuiRating: {
        defaultProps: {
          getLabelText: (value) => {
            let pluralForm = "\u0417\u0456\u0440\u043E\u043A";
            const lastDigit = value % 10;
            if (lastDigit > 1 && lastDigit < 5) {
              pluralForm = "\u0417\u0456\u0440\u043A\u0438";
            } else if (lastDigit === 1) {
              pluralForm = "\u0417\u0456\u0440\u043A\u0430";
            }
            return `${value} ${pluralForm}`;
          },
          emptyLabelText: "\u0420\u0435\u0439\u0442\u0438\u043D\u0433 \u0432\u0456\u0434\u0441\u0443\u0442\u043D\u0456\u0439"
        }
      },
      MuiAutocomplete: {
        defaultProps: {
          clearText: "\u041E\u0447\u0438\u0441\u0442\u0438\u0442\u0438",
          closeText: "\u0417\u0433\u043E\u0440\u043D\u0443\u0442\u0438",
          loadingText: "\u0417\u0430\u0432\u0430\u043D\u0442\u0430\u0436\u0435\u043D\u043D\u044F\u2026",
          noOptionsText: "\u041D\u0435\u043C\u0430\u0454 \u0432\u0430\u0440\u0456\u0430\u043D\u0442\u0456\u0432",
          openText: "\u0420\u043E\u0437\u0433\u043E\u0440\u043D\u0443\u0442\u0438"
        }
      },
      MuiAlert: {
        defaultProps: {
          closeText: "\u0417\u0433\u043E\u0440\u043D\u0443\u0442\u0438"
        }
      },
      MuiPagination: {
        defaultProps: {
          "aria-label": "\u041D\u0430\u0432\u0456\u0433\u0430\u0446\u0456\u044F \u0441\u0442\u043E\u0440\u0456\u043D\u043A\u0430\u043C\u0438",
          getItemAriaLabel: (type, page, selected) => {
            if (type === "page") {
              return `${selected ? "" : "\u041F\u0435\u0440\u0435\u0439\u0442\u0438 \u043D\u0430 "}\u0441\u0442\u043E\u0440\u0456\u043D\u043A\u0443 ${page}`;
            }
            if (type === "first") {
              return "\u041F\u0435\u0440\u0435\u0439\u0442\u0438 \u043D\u0430 \u043F\u0435\u0440\u0448\u0443 \u0441\u0442\u043E\u0440\u0456\u043D\u043A\u0443";
            }
            if (type === "last") {
              return "\u041F\u0435\u0440\u0435\u0439\u0442\u0438 \u043D\u0430 \u043E\u0441\u0442\u0430\u043D\u043D\u044E \u0441\u0442\u043E\u0440\u0456\u043D\u043A\u0443";
            }
            if (type === "next") {
              return "\u041F\u0435\u0440\u0435\u0439\u0442\u0438 \u043D\u0430 \u043D\u0430\u0441\u0442\u0443\u043F\u043D\u0443 \u0441\u0442\u043E\u0440\u0456\u043D\u043A\u0443";
            }
            return "\u041F\u0435\u0440\u0435\u0439\u0442\u0438 \u043D\u0430 \u043F\u043E\u043F\u0435\u0440\u0435\u0434\u043D\u044E \u0441\u0442\u043E\u0440\u0456\u043D\u043A\u0443";
          }
        }
      }
    }
  };
  var viVN = {
    components: {
      MuiBreadcrumbs: {
        defaultProps: {
          expandText: "M\u1EDF ra"
        }
      },
      MuiTablePagination: {
        defaultProps: {
          getItemAriaLabel: (type) => {
            if (type === "first") {
              return "T\u1EDBi trang \u0111\u1EA7u ti\xEAn";
            }
            if (type === "last") {
              return "T\u1EDBi trang cu\u1ED1i c\xF9ng";
            }
            if (type === "next") {
              return "T\u1EDBi trang ti\u1EBFp theo";
            }
            return "V\u1EC1 trang tr\u01B0\u1EDBc \u0111\xF3";
          },
          labelRowsPerPage: "S\u1ED1 h\xE0ng m\u1ED7i trang:",
          labelDisplayedRows: ({
            from: from2,
            to,
            count
          }) => `${from2}\u2013${to} trong ${count !== -1 ? count : `nhi\u1EC1u h\u01A1n ${to}`}`
        }
      },
      MuiRating: {
        defaultProps: {
          getLabelText: (value) => `${value} sao`,
          emptyLabelText: "Kh\xF4ng c\xF3 d\u1EEF li\u1EC7u"
        }
      },
      MuiAutocomplete: {
        defaultProps: {
          clearText: "X\xF3a",
          closeText: "\u0110\xF3ng",
          loadingText: "\u0110ang t\u1EA3i\u2026",
          noOptionsText: "Kh\xF4ng c\xF3 l\u1EF1a ch\u1ECDn n\xE0o",
          openText: "M\u1EDF"
        }
      },
      MuiAlert: {
        defaultProps: {
          closeText: "\u0110\xF3ng"
        }
      },
      MuiPagination: {
        defaultProps: {
          "aria-label": "Thanh \u0111i\u1EC1u khi\u1EC3n trang",
          getItemAriaLabel: (type, page, selected) => {
            if (type === "page") {
              return `${selected ? "" : "T\u1EDBi "}trang ${page}`;
            }
            if (type === "first") {
              return "T\u1EDBi trang \u0111\u1EA7u ti\xEAn";
            }
            if (type === "last") {
              return "T\u1EDBi trang cu\u1ED1i c\xF9ng";
            }
            if (type === "next") {
              return "T\u1EDBi trang ti\u1EBFp theo";
            }
            return "V\u1EC1 trang tr\u01B0\u1EDBc \u0111\xF3";
          }
        }
      }
    }
  };
  var zhCN = {
    components: {
      MuiBreadcrumbs: {
        defaultProps: {
          expandText: "\u5C55\u5F00"
        }
      },
      MuiTablePagination: {
        defaultProps: {
          getItemAriaLabel: (type) => {
            if (type === "first") {
              return "\u7B2C\u4E00\u9875";
            }
            if (type === "last") {
              return "\u6700\u540E\u4E00\u9875";
            }
            if (type === "next") {
              return "\u4E0B\u4E00\u9875";
            }
            return "\u4E0A\u4E00\u9875";
          },
          labelRowsPerPage: "\u6BCF\u9875\u884C\u6570:",
          labelDisplayedRows: ({
            from: from2,
            to,
            count
          }) => `\u7B2C ${from2} \u6761\u5230\u7B2C ${to} \u6761\uFF0C${count !== -1 ? `\u5171 ${count} \u6761` : `\u81F3\u5C11 ${to} \u6761`}`
        }
      },
      MuiRating: {
        defaultProps: {
          getLabelText: (value) => `${value} \u9897\u661F`,
          emptyLabelText: "\u65E0\u6807\u7B7E"
        }
      },
      MuiAutocomplete: {
        defaultProps: {
          clearText: "\u6E05\u7A7A",
          closeText: "\u5173\u95ED",
          loadingText: "\u52A0\u8F7D\u4E2D\u2026\u2026",
          noOptionsText: "\u6CA1\u6709\u53EF\u7528\u9009\u9879",
          openText: "\u6253\u5F00"
        }
      },
      MuiAlert: {
        defaultProps: {
          closeText: "\u5173\u95ED"
        }
      }
    }
  };
  var zhHK = {
    components: {
      MuiBreadcrumbs: {
        defaultProps: {
          expandText: "\u5C55\u958B"
        }
      },
      MuiTablePagination: {
        defaultProps: {
          getItemAriaLabel: (type) => {
            if (type === "first") {
              return "\u7B2C\u4E00\u9801";
            }
            if (type === "last") {
              return "\u6700\u5F8C\u4E00\u9801";
            }
            if (type === "next") {
              return "\u4E0B\u4E00\u9801";
            }
            return "\u4E0A\u4E00\u9801";
          },
          labelRowsPerPage: "\u6BCF\u9801\u884C\u6578:",
          labelDisplayedRows: ({
            from: from2,
            to,
            count
          }) => `\u7B2C ${from2} \u9805\u81F3\u7B2C ${to} \u9805\uFF0C${count !== -1 ? `\u5171 ${count} \u9805` : `\u8D85\u904E ${to} \u9805`}`
        }
      },
      MuiRating: {
        defaultProps: {
          getLabelText: (value) => `${value} \u7C92\u661F`,
          emptyLabelText: "\u7121\u6A19\u7C64"
        }
      },
      MuiAutocomplete: {
        defaultProps: {
          clearText: "\u6E05\u9664",
          closeText: "\u95DC\u9589",
          loadingText: "\u8F09\u5165\u4E2D\u2026\u2026",
          noOptionsText: "\u6C92\u6709\u53EF\u7528\u9078\u9805",
          openText: "\u958B\u555F"
        }
      },
      MuiAlert: {
        defaultProps: {
          closeText: "\u95DC\u9589"
        }
      }
    }
  };
  var zhTW = {
    components: {
      MuiBreadcrumbs: {
        defaultProps: {
          expandText: "\u5C55\u958B"
        }
      },
      MuiTablePagination: {
        defaultProps: {
          getItemAriaLabel: (type) => {
            if (type === "first") {
              return "\u7B2C\u4E00\u9801";
            }
            if (type === "last") {
              return "\u6700\u5F8C\u4E00\u9801";
            }
            if (type === "next") {
              return "\u4E0B\u4E00\u9801";
            }
            return "\u4E0A\u4E00\u9801";
          },
          labelRowsPerPage: "\u6BCF\u9801\u6578\u91CF:",
          labelDisplayedRows: ({
            from: from2,
            to,
            count
          }) => `${from2} ~ ${to} / ${count !== -1 ? count : `${to} \u4EE5\u4E0A`}`
        }
      },
      MuiRating: {
        defaultProps: {
          getLabelText: (value) => `${value} \u9846\u661F`,
          emptyLabelText: "\u7121\u6A19\u7C64"
        }
      },
      MuiAutocomplete: {
        defaultProps: {
          clearText: "\u6E05\u7A7A",
          closeText: "\u95DC\u9589",
          loadingText: "\u8F09\u5165\u4E2D\u2026",
          noOptionsText: "\u6C92\u6709\u53EF\u7528\u9078\u9805",
          openText: "\u6253\u958B"
        }
      },
      MuiAlert: {
        defaultProps: {
          closeText: "\u95DC\u9589"
        }
      }
    }
  };

  // node_modules/@mui/x-data-grid/utils/getGridLocalization.js
  init_extends();
  var getGridLocalization = (gridTranslations, coreTranslations) => {
    var _coreTranslations$com;
    return {
      components: {
        MuiDataGrid: {
          defaultProps: {
            localeText: _extends({}, gridTranslations, {
              MuiTablePagination: (coreTranslations == null || (_coreTranslations$com = coreTranslations.components) == null || (_coreTranslations$com = _coreTranslations$com.MuiTablePagination) == null ? void 0 : _coreTranslations$com.defaultProps) || {}
            })
          }
        }
      }
    };
  };

  // node_modules/@mui/x-data-grid/locales/arSD.js
  var arSDGrid = {
    // Root
    noRowsLabel: "\u0644\u0627 \u062A\u0648\u062C\u062F \u0635\u0641\u0648\u0641",
    noResultsOverlayLabel: "\u0644\u0645 \u064A\u062A\u0645 \u0627\u0644\u0639\u062B\u0648\u0631 \u0639\u0644\u0649 \u0646\u062A\u0627\u0626\u062C.",
    // Density selector toolbar button text
    toolbarDensity: "\u0627\u0644\u0643\u062B\u0627\u0641\u0629",
    toolbarDensityLabel: "\u0627\u0644\u0643\u062B\u0627\u0641\u0629",
    toolbarDensityCompact: "\u0645\u0636\u063A\u0648\u0637",
    toolbarDensityStandard: "\u0642\u064A\u0627\u0633\u064A",
    toolbarDensityComfortable: "\u0645\u0631\u064A\u062D",
    // Columns selector toolbar button text
    toolbarColumns: "\u0627\u0644\u0623\u0639\u0645\u062F\u0629",
    toolbarColumnsLabel: "\u062D\u062F\u062F \u0623\u0639\u0645\u062F\u0629",
    // Filters toolbar button text
    toolbarFilters: "\u0627\u0644\u0645\u064F\u0631\u0634\u0650\u062D\u0627\u062A",
    toolbarFiltersLabel: "\u0625\u0638\u0647\u0627\u0631 \u0627\u0644\u0645\u0631\u0634\u0650\u062D\u0627\u062A",
    toolbarFiltersTooltipHide: "\u0625\u062E\u0641\u0627\u0621 \u0627\u0644\u0645\u0631\u0634\u0650\u062D\u0627\u062A",
    toolbarFiltersTooltipShow: "\u0627\u0638\u0647\u0631 \u0627\u0644\u0645\u0631\u0634\u0650\u062D\u0627\u062A",
    toolbarFiltersTooltipActive: (count) => count !== 1 ? `${count} \u0645\u0646 \u0627\u0644\u0645\u0631\u0634\u0650\u062D\u0627\u062A \u0627\u0644\u0646\u0634\u0637\u0629` : `\u0645\u0631\u0634\u0650\u062D \u0646\u0634\u0637`,
    // Quick filter toolbar field
    toolbarQuickFilterPlaceholder: "\u0628\u062D\u062B...",
    toolbarQuickFilterLabel: "\u0628\u062D\u062B",
    toolbarQuickFilterDeleteIconLabel: "\u0623\u0632\u0627\u0644",
    // Export selector toolbar button text
    toolbarExport: "\u062A\u0635\u062F\u064A\u0631",
    toolbarExportLabel: "\u062A\u0635\u062F\u064A\u0631",
    toolbarExportCSV: "\u062A\u0646\u0632\u064A\u0644 \u0643\u0645\u0644\u0641 CSV",
    toolbarExportPrint: "\u0637\u0628\u0627\u0639\u0629",
    toolbarExportExcel: "\u062A\u062D\u0645\u064A\u0644 \u0643\u0645\u0644\u0641 \u0627\u0644\u0625\u0643\u0633\u0644",
    // Columns panel text
    columnsPanelTextFieldLabel: "\u0627\u0644\u0628\u062D\u062B \u0639\u0646 \u0627\u0644\u0639\u0645\u0648\u062F",
    columnsPanelTextFieldPlaceholder: "\u0639\u0646\u0648\u0627\u0646 \u0627\u0644\u0639\u0645\u0648\u062F",
    columnsPanelDragIconLabel: "\u0625\u0639\u0627\u062F\u0629 \u062A\u0631\u062A\u064A\u0628 \u0627\u0644\u0639\u0645\u0648\u062F",
    columnsPanelShowAllButton: "\u0625\u0638\u0647\u0627\u0631 \u0627\u0644\u0643\u0644",
    columnsPanelHideAllButton: "\u0625\u062E\u0641\u0627\u0621 \u0627\u0644\u0643\u0644",
    // Filter panel text
    filterPanelAddFilter: "\u0625\u0636\u0627\u0641\u0629 \u0645\u0631\u0634\u0650\u062D",
    filterPanelRemoveAll: "\u062D\u0630\u0641 \u0627\u0644\u0643\u0644",
    filterPanelDeleteIconLabel: "\u062D\u0630\u0641",
    filterPanelLogicOperator: "\u0639\u0627\u0645\u0644 \u0645\u0646\u0637\u0642\u064A",
    filterPanelOperator: "\u0639\u0627\u0645\u0644",
    filterPanelOperatorAnd: "\u0648",
    filterPanelOperatorOr: "\u0623\u0648",
    filterPanelColumns: "\u0627\u0644\u0623\u0639\u0645\u062F\u0629",
    filterPanelInputLabel: "\u0627\u0644\u0642\u064A\u0645\u0629",
    filterPanelInputPlaceholder: "\u062A\u0631\u0634\u0650\u064A\u062D \u0642\u064A\u0645\u0629",
    // Filter operators text
    filterOperatorContains: "\u064A\u062D\u062A\u0648\u064A",
    filterOperatorEquals: "\u064A\u0633\u0627\u0648\u064A",
    filterOperatorStartsWith: "\u064A\u0628\u062F\u0623 \u0628\u0640",
    filterOperatorEndsWith: "\u064A\u0646\u062A\u0647\u064A \u0628\u0640",
    filterOperatorIs: "\u064A\u0643\u0648\u0646",
    filterOperatorNot: "\u0644\u064A\u0633",
    filterOperatorAfter: "\u0628\u0639\u062F",
    filterOperatorOnOrAfter: "\u0639\u0646\u062F \u0623\u0648 \u0628\u0639\u062F",
    filterOperatorBefore: "\u0642\u0628\u0644",
    filterOperatorOnOrBefore: "\u0639\u0646\u062F \u0623\u0648 \u0642\u0628\u0644",
    filterOperatorIsEmpty: "\u062E\u0627\u0644\u064A",
    filterOperatorIsNotEmpty: "\u063A\u064A\u0631 \u062E\u0627\u0644\u064A",
    filterOperatorIsAnyOf: "\u0623\u064A \u0645\u0646",
    "filterOperator=": "=",
    "filterOperator!=": "!=",
    "filterOperator>": ">",
    "filterOperator>=": ">=",
    "filterOperator<": "<",
    "filterOperator<=": "<=",
    // Header filter operators text
    headerFilterOperatorContains: "\u064A\u062D\u062A\u0648\u064A \u0639\u0644\u0649",
    headerFilterOperatorEquals: "\u064A\u0633\u0627\u0648\u064A",
    headerFilterOperatorStartsWith: "\u064A\u0628\u062F\u0623 \u0628",
    headerFilterOperatorEndsWith: "\u064A\u0646\u062A\u0647\u064A \u0628",
    headerFilterOperatorIs: "\u0647\u0648",
    headerFilterOperatorNot: "\u0647\u0648 \u0644\u064A\u0633",
    headerFilterOperatorAfter: "\u064A\u0642\u0639 \u0628\u0639\u062F",
    headerFilterOperatorOnOrAfter: "\u0647\u0648 \u0639\u0644\u0649 \u0627\u0648 \u0628\u0639\u062F",
    headerFilterOperatorBefore: "\u064A\u0642\u0639 \u0642\u0628\u0644",
    headerFilterOperatorOnOrBefore: "\u0647\u0648 \u0639\u0644\u0649 \u0627\u0648 \u0628\u0639\u062F",
    headerFilterOperatorIsEmpty: "\u0647\u0648 \u0641\u0627\u0631\u063A",
    headerFilterOperatorIsNotEmpty: "\u0647\u0648 \u0644\u064A\u0633 \u0641\u0627\u0631\u063A",
    headerFilterOperatorIsAnyOf: "\u0647\u0648 \u0623\u064A \u0645\u0646",
    "headerFilterOperator=": "\u064A\u0633\u0627\u0648\u064A",
    "headerFilterOperator!=": "\u0644\u0627 \u064A\u0633\u0627\u0648\u064A",
    "headerFilterOperator>": "\u0623\u0643\u0628\u0631 \u0645\u0646",
    "headerFilterOperator>=": "\u0623\u0643\u0628\u0631 \u0645\u0646 \u0627\u0648 \u064A\u0633\u0627\u0648\u064A",
    "headerFilterOperator<": "\u0627\u0635\u063A\u0631 \u0645\u0646",
    "headerFilterOperator<=": "\u0627\u0635\u063A\u0631 \u0645\u0646 \u0627\u0648 \u064A\u0633\u0627\u0648\u064A",
    // Filter values text
    filterValueAny: "\u0623\u064A",
    filterValueTrue: "\u0635\u0627\u0626\u0628",
    filterValueFalse: "\u062E\u0627\u0637\u0626",
    // Column menu text
    columnMenuLabel: "\u0627\u0644\u0642\u0627\u0626\u0645\u0629",
    columnMenuShowColumns: "\u0625\u0638\u0647\u0627\u0631 \u0627\u0644\u0623\u0639\u0645\u062F\u0629",
    columnMenuManageColumns: "\u0625\u062F\u0627\u0631\u0629 \u0627\u0644\u0623\u0639\u0645\u062F\u0629",
    columnMenuFilter: "\u0627\u0644\u0645\u0631\u0634\u0650\u062D",
    columnMenuHideColumn: "\u0625\u062E\u0641\u0627\u0621",
    columnMenuUnsort: "\u0627\u0644\u063A\u0627\u0621 \u0627\u0644\u0641\u0631\u0632",
    columnMenuSortAsc: "\u0627\u0644\u0641\u0631\u0632 \u062A\u0635\u0627\u0639\u062F\u064A\u0627\u064B",
    columnMenuSortDesc: "\u0627\u0644\u0641\u0631\u0632 \u062A\u0646\u0627\u0632\u0644\u064A\u0627\u064B",
    // Column header text
    columnHeaderFiltersTooltipActive: (count) => count !== 1 ? `${count} \u0645\u0646 \u0627\u0644\u0645\u0631\u0634\u0650\u062D\u0627\u062A \u0627\u0644\u0646\u0634\u0637\u0629` : `\u0645\u0631\u0634\u0650\u062D \u0646\u0634\u0637`,
    columnHeaderFiltersLabel: "\u0625\u0638\u0647\u0627\u0631 \u0627\u0644\u0645\u0631\u0634\u062D\u0627\u062A",
    columnHeaderSortIconLabel: "\u0641\u0631\u0632",
    // Rows selected footer text
    footerRowSelected: (count) => count !== 1 ? `\u062A\u0645 \u062A\u062D\u062F\u064A\u062F ${count.toLocaleString()} \u0645\u0646 \u0627\u0644\u0635\u0641\u0648\u0641` : `\u062A\u0645 \u062A\u062D\u062F\u064A\u062F \u0635\u0641 \u0648\u0627\u062D\u062F`,
    // Total row amount footer text
    footerTotalRows: "\u0625\u062C\u0645\u0627\u0644\u064A \u0627\u0644\u0635\u0641\u0648\u0641:",
    // Total visible row amount footer text
    footerTotalVisibleRows: (visibleCount, totalCount) => `${visibleCount.toLocaleString()} \u0645\u0646 ${totalCount.toLocaleString()}`,
    // Checkbox selection text
    checkboxSelectionHeaderName: "\u062A\u062D\u062F\u064A\u062F \u062E\u0627\u0646\u0629 \u0627\u0644\u0627\u062E\u062A\u064A\u0627\u0631",
    checkboxSelectionSelectAllRows: "\u062A\u062D\u062F\u064A\u062F \u0643\u0644 \u0627\u0644\u0635\u0641\u0648\u0641",
    checkboxSelectionUnselectAllRows: "\u0627\u0644\u063A\u0627\u0621 \u062A\u062D\u062F\u064A\u062F \u0643\u0644 \u0627\u0644\u0635\u0641\u0648\u0641",
    checkboxSelectionSelectRow: "\u062A\u062D\u062F\u064A\u062F \u0635\u0641",
    checkboxSelectionUnselectRow: "\u0627\u0644\u063A\u0627\u0621 \u062A\u062D\u062F\u064A\u062F \u0627\u0644\u0635\u0641",
    // Boolean cell text
    booleanCellTrueLabel: "\u0646\u0639\u0645",
    booleanCellFalseLabel: "\u0644\u0627",
    // Actions cell more text
    actionsCellMore: "\u0627\u0644\u0645\u0632\u064A\u062F",
    // Column pinning text
    pinToLeft: "\u0627\u0644\u062A\u062F\u0628\u064A\u0633 \u064A\u0645\u064A\u0646\u0627\u064B",
    pinToRight: "\u0627\u0644\u062A\u062F\u0628\u064A\u0633 \u064A\u0633\u0627\u0631\u0627\u064B",
    unpin: "\u0627\u0644\u063A\u0627\u0621 \u0627\u0644\u062A\u062F\u0628\u064A\u0633",
    // Tree Data
    treeDataGroupingHeaderName: "\u062A\u062C\u0645\u064A\u0639",
    treeDataExpand: "\u0631\u0624\u064A\u0629 \u0627\u0644\u0623\u0628\u0646\u0627\u0621",
    treeDataCollapse: "\u0625\u062E\u0641\u0627\u0621 \u0627\u0644\u0623\u0628\u0646\u0627\u0621",
    // Grouping columns
    groupingColumnHeaderName: "\u062A\u062C\u0645\u064A\u0639",
    groupColumn: (name) => `\u062A\u062C\u0645\u064A\u0639 \u062D\u0633\u0628 ${name}`,
    unGroupColumn: (name) => `\u0625\u064A\u0642\u0627\u0641 \u0627\u0644\u062A\u062C\u0645\u064A\u0639 \u062D\u0633\u0628 ${name}`,
    // Master/detail
    detailPanelToggle: "\u0627\u0638\u0647\u0627\u0631/\u0627\u062E\u0641\u0627\u0621 \u0644\u0648\u062D\u0629 \u0627\u0644\u062A\u0641\u0627\u0635\u064A\u0644",
    expandDetailPanel: "\u062A\u0648\u0633\u064A\u0639",
    collapseDetailPanel: "\u0637\u0648\u064A",
    // Row reordering text
    rowReorderingHeaderName: "\u0623\u0639\u0627\u062F\u0629 \u062A\u0631\u062A\u064A\u0628 \u0627\u0644\u0635\u0641\u0648\u0641",
    // Aggregation
    aggregationMenuItemHeader: "\u0627\u0644\u062F\u0644\u0627\u0644\u0627\u062A \u0627\u0644\u062D\u0633\u0627\u0628\u064A\u0629",
    aggregationFunctionLabelSum: "\u0645\u062C\u0645\u0648\u0639",
    aggregationFunctionLabelAvg: "\u0645\u0639\u062F\u0644",
    aggregationFunctionLabelMin: "\u0627\u0644\u062D\u062F \u0627\u0644\u0627\u062F\u0646\u0649",
    aggregationFunctionLabelMax: "\u0627\u0644\u062D\u062F \u0627\u0644\u0627\u0642\u0635\u0649",
    aggregationFunctionLabelSize: "\u0627\u0644\u062D\u062C\u0645"
  };
  var arSD2 = getGridLocalization(arSDGrid, arSD);

  // node_modules/@mui/x-data-grid/locales/coreLocales.js
  var beBYCore = {
    components: {
      MuiTablePagination: {
        defaultProps: {
          getItemAriaLabel: (type) => {
            if (type === "first") {
              return "\u041F\u0435\u0440\u0430\u0439\u0441\u0446\u0456 \u043D\u0430 \u043F\u0435\u0440\u0448\u0443\u044E \u0441\u0442\u0430\u0440\u043E\u043D\u043A\u0443";
            }
            if (type === "last") {
              return "\u041F\u0435\u0440\u0430\u0439\u0441\u0446\u0456 \u043D\u0430 \u0430\u043F\u043E\u0448\u043D\u044E\u044E \u0441\u0442\u0430\u0440\u043E\u043D\u043A\u0443";
            }
            if (type === "next") {
              return "\u041F\u0435\u0440\u0430\u0439\u0441\u0446\u0456 \u043D\u0430 \u043D\u0430\u0441\u0442\u0443\u043F\u043D\u0443\u044E \u0441\u0442\u0430\u0440\u043E\u043D\u043A\u0443";
            }
            return "\u041F\u0435\u0440\u0430\u0439\u0441\u0446\u0456 \u043D\u0430 \u043F\u0430\u043F\u044F\u0440\u044D\u0434\u043D\u044E\u044E \u0441\u0442\u0430\u0440\u043E\u043D\u043A\u0443";
          },
          labelRowsPerPage: "\u0420\u0430\u0434\u043A\u043E\u045E \u043D\u0430 \u0441\u0442\u0430\u0440\u043E\u043D\u0446\u044B:",
          labelDisplayedRows: ({
            from: from2,
            to,
            count
          }) => `${from2}\u2013${to} \u0437 ${count !== -1 ? count : `\u0431\u043E\u043B\u044C\u0448 \u0447\u044B\u043C ${to}`}`
        }
      }
    }
  };
  var urPKCore = {
    components: {
      MuiTablePagination: {
        defaultProps: {
          getItemAriaLabel: (type) => {
            if (type === "first") {
              return "\u067E\u06C1\u0644\u06D2 \u0635\u0641\u062D\u06D2 \u067E\u0631 \u062C\u0627\u0626\u06CC\u06BA";
            }
            if (type === "last") {
              return "\u0627\u0653\u062E\u0631\u06CC \u0635\u0641\u062D\u06D2 \u067E\u0631 \u062C\u0627\u0626\u06CC\u06BA";
            }
            if (type === "next") {
              return "\u0627\u06AF\u0644\u06D2 \u0635\u0641\u062D\u06D2 \u067E\u0631 \u062C\u0627\u0626\u06CC\u06BA";
            }
            return "\u067E\u0686\u06BE\u0644\u06D2 \u0635\u0641\u062D\u06D2 \u067E\u0631 \u062C\u0627\u0626\u06CC\u06BA";
          },
          labelRowsPerPage: "\u0627\u06CC\u06A9 \u0635\u0641\u062D\u06D2 \u067E\u0631 \u0642\u0637\u0627\u0631\u06CC\u06BA:",
          labelDisplayedRows: ({
            from: from2,
            to,
            count
          }) => `${count !== -1 ? `${count} \u0645\u06CC\u06BA \u0633\u06D2` : `${to} \u0633\u06D2 \u0630\u06CC\u0627\u062F\u06C1 \u0645\u06CC\u06BA \u0633\u06D2`} ${from2} \u0633\u06D2 ${to} \u0642\u0637\u0627\u0631\u06CC\u06BA`
        }
      }
    }
  };

  // node_modules/@mui/x-data-grid/locales/beBY.js
  var getPluralForm = (count, options) => {
    let pluralForm = options.other;
    const lastDigit = count % 10;
    if (lastDigit > 1 && lastDigit < 5 && (count < 10 || count > 20)) {
      pluralForm = options.twoToFour;
    } else if (lastDigit === 1 && count % 100 !== 11) {
      pluralForm = options.one;
    }
    return `${count} ${pluralForm}`;
  };
  var beBYGrid = {
    // Root
    noRowsLabel: "\u041D\u044F\u043C\u0430 \u0440\u0430\u0434\u043A\u043E\u045E",
    noResultsOverlayLabel: "\u0414\u0430\u0434\u0437\u0435\u043D\u044B\u044F \u043D\u0435 \u0437\u043D\u043E\u0439\u0434\u0437\u0435\u043D\u044B.",
    // Density selector toolbar button text
    toolbarDensity: "\u0412\u044B\u0448\u044B\u043D\u044F \u0440\u0430\u0434\u043A\u0430",
    toolbarDensityLabel: "\u0412\u044B\u0448\u044B\u043D\u044F \u0440\u0430\u0434\u043A\u0430",
    toolbarDensityCompact: "\u041A\u0430\u043C\u043F\u0430\u043A\u0442\u043D\u044B",
    toolbarDensityStandard: "\u0421\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u044B",
    toolbarDensityComfortable: "\u041A\u0430\u043C\u0444\u043E\u0440\u0442\u043D\u044B",
    // Columns selector toolbar button text
    toolbarColumns: "\u0421\u043B\u0443\u043F\u043A\u0456",
    toolbarColumnsLabel: "\u0412\u044B\u0431\u0435\u0440\u044B\u0446\u0435 \u0441\u043B\u0443\u043F\u043A\u0456",
    // Filters toolbar button text
    toolbarFilters: "\u0424\u0456\u043B\u044C\u0442\u0440\u044B",
    toolbarFiltersLabel: "\u041F\u0430\u043A\u0430\u0437\u0430\u0446\u044C \u0444\u0456\u043B\u044C\u0442\u0440\u044B",
    toolbarFiltersTooltipHide: "\u0421\u0445\u0430\u0432\u0430\u0446\u044C \u0444\u0456\u043B\u044C\u0442\u0440\u044B",
    toolbarFiltersTooltipShow: "\u041F\u0430\u043A\u0430\u0437\u0430\u0446\u044C \u0444\u0456\u043B\u044C\u0442\u0440\u044B",
    toolbarFiltersTooltipActive: (count) => getPluralForm(count, {
      one: "\u0430\u043A\u0442\u044B\u045E\u043D\u044B \u0444\u0456\u043B\u044C\u0442\u0440",
      twoToFour: "\u0430\u043A\u0442\u044B\u045E\u043D\u044B\u0445 \u0444\u0456\u043B\u044C\u0442\u0440\u0430",
      other: "\u0430\u043A\u0442\u044B\u045E\u043D\u044B\u0445 \u0444\u0456\u043B\u044C\u0442\u0440\u0430\u045E"
    }),
    // Quick filter toolbar field
    toolbarQuickFilterPlaceholder: "\u041F\u043E\u0448\u0443\u043A\u2026",
    toolbarQuickFilterLabel: "\u041F\u043E\u0448\u0443\u043A",
    toolbarQuickFilterDeleteIconLabel: "\u0410\u0447\u044B\u0441\u0446\u0456\u0446\u044C",
    // Export selector toolbar button text
    toolbarExport: "\u042D\u043A\u0441\u043F\u0430\u0440\u0442",
    toolbarExportLabel: "\u042D\u043A\u0441\u043F\u0430\u0440\u0442",
    toolbarExportCSV: "\u0421\u043F\u0430\u043C\u043F\u0430\u0432\u0430\u0446\u044C \u0443 \u0444\u0430\u0440\u043C\u0430\u0446\u0435 CSV",
    toolbarExportPrint: "\u0414\u0440\u0443\u043A",
    toolbarExportExcel: "\u0421\u043F\u0430\u043C\u043F\u0430\u0432\u0430\u0446\u044C \u0443 \u0444\u0430\u0440\u043C\u0430\u0446\u0435 Excel",
    // Columns panel text
    columnsPanelTextFieldLabel: "\u0417\u043D\u0430\u0439\u0441\u0446\u0456 \u0441\u043B\u0443\u043F\u043E\u043A",
    columnsPanelTextFieldPlaceholder: "\u0417\u0430\u0433\u0430\u043B\u043E\u0432\u0430\u043A \u0441\u043B\u0443\u043F\u043A\u0430",
    columnsPanelDragIconLabel: "\u0417\u043C\u044F\u043D\u0456\u0446\u044C \u0447\u0430\u0440\u0433\u043E\u0432\u0430\u0441\u0446\u044C \u0441\u043B\u0443\u043F\u043A\u043E\u045E",
    columnsPanelShowAllButton: "\u041F\u0430\u043A\u0430\u0437\u0430\u0446\u044C \u0443\u0441\u0435",
    columnsPanelHideAllButton: "\u0421\u0445\u0430\u0432\u0430\u0446\u044C \u0443\u0441\u0435",
    // Filter panel text
    filterPanelAddFilter: "\u0414\u0430\u0434\u0430\u0446\u044C \u0444\u0456\u043B\u044C\u0442\u0440",
    // filterPanelRemoveAll: 'Remove all',
    filterPanelDeleteIconLabel: "\u0412\u044B\u0434\u0430\u043B\u0456\u0446\u044C",
    filterPanelLogicOperator: "\u041B\u0430\u0433\u0456\u0447\u043D\u044B\u044F \u0430\u043F\u0435\u0440\u0430\u0442\u0430\u0440\u044B",
    filterPanelOperator: "\u0410\u043F\u0435\u0440\u0430\u0442\u0430\u0440\u044B",
    filterPanelOperatorAnd: "\u0406",
    filterPanelOperatorOr: "\u0410\u0431\u043E",
    filterPanelColumns: "\u0421\u043B\u0443\u043F\u043A\u0456",
    filterPanelInputLabel: "\u0417\u043D\u0430\u0447\u044D\u043D\u043D\u0435",
    filterPanelInputPlaceholder: "\u0417\u043D\u0430\u0447\u044D\u043D\u043D\u0435 \u0444\u0456\u043B\u044C\u0442\u0440\u0430",
    // Filter operators text
    filterOperatorContains: "\u0437\u043C\u044F\u0448\u0447\u0430\u0435",
    filterOperatorEquals: "\u0440\u043E\u045E\u043D\u044B",
    filterOperatorStartsWith: "\u043F\u0430\u0447\u044B\u043D\u0430\u0435\u0446\u0446\u0430 \u0437",
    filterOperatorEndsWith: "\u0441\u043A\u043E\u043D\u0447\u0432\u0430\u0435\u0446\u0446\u0430 \u043D\u0430",
    filterOperatorIs: "\u0440\u043E\u045E\u043D\u044B",
    filterOperatorNot: "\u043D\u0435 \u0440\u043E\u045E\u043D\u044B",
    filterOperatorAfter: "\u0431\u043E\u043B\u044C\u0448 \u0447\u044B\u043C",
    filterOperatorOnOrAfter: "\u0431\u043E\u043B\u044C\u0448 \u0446\u0456 \u0440\u043E\u045E\u043D\u044B",
    filterOperatorBefore: "\u043C\u0435\u043D\u044C\u0448 \u0447\u044B\u043C",
    filterOperatorOnOrBefore: "\u043C\u0435\u043D\u044C\u0448 \u0446\u0456 \u0440\u043E\u045E\u043D\u044B",
    filterOperatorIsEmpty: "\u043F\u0443\u0441\u0442\u044B",
    filterOperatorIsNotEmpty: "\u043D\u0435 \u043F\u0443\u0441\u0442\u044B",
    filterOperatorIsAnyOf: "\u0443\u0441\u044F\u043A\u0456 \u0437",
    // 'filterOperator=': '=',
    // 'filterOperator!=': '!=',
    // 'filterOperator>': '>',
    // 'filterOperator>=': '>=',
    // 'filterOperator<': '<',
    // 'filterOperator<=': '<=',
    // Header filter operators text
    // headerFilterOperatorContains: 'Contains',
    // headerFilterOperatorEquals: 'Equals',
    // headerFilterOperatorStartsWith: 'Starts with',
    // headerFilterOperatorEndsWith: 'Ends with',
    // headerFilterOperatorIs: 'Is',
    // headerFilterOperatorNot: 'Is not',
    // headerFilterOperatorAfter: 'Is after',
    // headerFilterOperatorOnOrAfter: 'Is on or after',
    // headerFilterOperatorBefore: 'Is before',
    // headerFilterOperatorOnOrBefore: 'Is on or before',
    // headerFilterOperatorIsEmpty: 'Is empty',
    // headerFilterOperatorIsNotEmpty: 'Is not empty',
    // headerFilterOperatorIsAnyOf: 'Is any of',
    // 'headerFilterOperator=': 'Equals',
    // 'headerFilterOperator!=': 'Not equals',
    // 'headerFilterOperator>': 'Greater than',
    // 'headerFilterOperator>=': 'Greater than or equal to',
    // 'headerFilterOperator<': 'Less than',
    // 'headerFilterOperator<=': 'Less than or equal to',
    // Filter values text
    filterValueAny: "\u0443\u0441\u044F\u043A\u0456",
    filterValueTrue: "\u043F\u0440\u0430\u045E\u0434\u0430",
    filterValueFalse: "\u043D\u044F\u043F\u0440\u0430\u045E\u0434\u0430",
    // Column menu text
    columnMenuLabel: "\u041C\u0435\u043D\u044E",
    columnMenuShowColumns: "\u041F\u0430\u043A\u0430\u0437\u0430\u0446\u044C \u0441\u043B\u0443\u043F\u043A\u0456",
    columnMenuManageColumns: "\u041A\u0456\u0440\u0430\u0432\u0430\u0446\u044C \u0441\u043B\u0443\u043F\u043A\u0430\u043C\u0456",
    columnMenuFilter: "\u0424\u0456\u043B\u044C\u0442\u0440",
    columnMenuHideColumn: "\u0421\u0445\u0430\u0432\u0430\u0446\u044C",
    columnMenuUnsort: "\u0421\u043A\u0430\u0441\u0430\u0432\u0430\u0446\u044C \u0441\u0430\u0440\u0442\u044B\u0440\u043E\u045E\u043A\u0443",
    columnMenuSortAsc: "\u0421\u0430\u0440\u0442\u044B\u0440\u0430\u0432\u0430\u0446\u044C \u043F\u0430 \u043D\u0430\u0440\u0430\u0441\u0442\u0430\u043D\u043D\u044E",
    columnMenuSortDesc: "\u0421\u0430\u0440\u0442\u044B\u0440\u0430\u0432\u0430\u0446\u044C \u043F\u0430 \u0441\u043F\u0430\u0434\u0430\u043D\u043D\u044E",
    // Column header text
    columnHeaderFiltersTooltipActive: (count) => getPluralForm(count, {
      one: "\u0430\u043A\u0442\u044B\u045E\u043D\u044B \u0444\u0456\u043B\u044C\u0442\u0440",
      twoToFour: "\u0430\u043A\u0442\u044B\u045E\u043D\u044B\u0445 \u0444\u0456\u043B\u044C\u0442\u0440\u0430",
      other: "\u0430\u043A\u0442\u044B\u045E\u043D\u044B\u0445 \u0444\u0456\u043B\u044C\u0442\u0440\u0430\u045E"
    }),
    columnHeaderFiltersLabel: "\u041F\u0430\u043A\u0430\u0437\u0430\u0446\u044C \u0444\u0456\u043B\u044C\u0442\u0440\u044B",
    columnHeaderSortIconLabel: "\u0421\u0430\u0440\u0442\u044B\u0440\u0430\u0432\u0430\u0446\u044C",
    // Rows selected footer text
    footerRowSelected: (count) => getPluralForm(count, {
      one: "\u0430\u0431\u0440\u0430\u043D\u044B \u0440\u0430\u0434\u043E\u043A",
      twoToFour: "\u0430\u0431\u0440\u0430\u043D\u044B\u0445 \u0440\u0430\u0434\u043A\u0430",
      other: "\u0430\u0431\u0440\u0430\u043D\u044B\u0445 \u0440\u0430\u0434\u043A\u043E\u045E"
    }),
    // Total row amount footer text
    footerTotalRows: "\u0423\u0441\u044F\u0433\u043E \u0440\u0430\u0434\u043A\u043E\u045E:",
    // Total visible row amount footer text
    footerTotalVisibleRows: (visibleCount, totalCount) => `${visibleCount.toLocaleString()} \u0437 ${totalCount.toLocaleString()}`,
    // Checkbox selection text
    checkboxSelectionHeaderName: "\u0412\u044B\u0431\u0430\u0440 \u0441\u0446\u044F\u0436\u043A\u0430",
    checkboxSelectionSelectAllRows: "\u0410\u0431\u0440\u0430\u0446\u044C \u0443\u0441\u0435 \u0440\u0430\u0434\u043A\u0456",
    checkboxSelectionUnselectAllRows: "\u0421\u043A\u0430\u0441\u0430\u0432\u0430\u0446\u044C \u0432\u044B\u0431\u0430\u0440 \u0443\u0441\u0456\u0445 \u0440\u0430\u0434\u043A\u043E\u045E",
    checkboxSelectionSelectRow: "\u0410\u0431\u0440\u0430\u0446\u044C \u0440\u0430\u0434\u043E\u043A",
    checkboxSelectionUnselectRow: "\u0421\u043A\u0430\u0441\u0430\u0432\u0430\u0446\u044C \u0432\u044B\u0431\u0430\u0440 \u0440\u0430\u0434\u043A\u0430",
    // Boolean cell text
    booleanCellTrueLabel: "\u043F\u0440\u0430\u045E\u0434\u0430",
    booleanCellFalseLabel: "\u043D\u044F\u043F\u0440\u0430\u045E\u0434\u0430",
    // Actions cell more text
    actionsCellMore: "\u0431\u043E\u043B\u044C\u0448",
    // Column pinning text
    pinToLeft: "\u0417\u0430\u043C\u0430\u0446\u0430\u0432\u0430\u0446\u044C \u0437\u043B\u0435\u0432\u0430",
    pinToRight: "\u0417\u0430\u043C\u0430\u0446\u0430\u0432\u0430\u0446\u044C \u0441\u043F\u0440\u0430\u0432\u0430",
    unpin: "\u0410\u0434\u043C\u0430\u0446\u0430\u0432\u0430\u0446\u044C",
    // Tree Data
    treeDataGroupingHeaderName: "\u0413\u0440\u0443\u043F\u0430",
    treeDataExpand: "\u043F\u0430\u043A\u0430\u0437\u0430\u0446\u044C \u0434\u0430\u0447\u0447\u044B\u043D\u044B\u044F \u044D\u043B\u0435\u043C\u0435\u043D\u0442\u044B",
    treeDataCollapse: "\u0441\u0445\u0430\u0432\u0430\u0446\u044C \u0434\u0430\u0447\u0447\u044B\u043D\u044B\u044F \u044D\u043B\u0435\u043C\u0435\u043D\u0442\u044B",
    // Grouping columns
    groupingColumnHeaderName: "\u0413\u0440\u0443\u043F\u0430",
    groupColumn: (name) => `\u0413\u0440\u0443\u043F\u0430\u0432\u0430\u0446\u044C \u043F\u0430 ${name}`,
    unGroupColumn: (name) => `\u0420\u0430\u0437\u0433\u0440\u0443\u043F\u0430\u0432\u0430\u0446\u044C \u043F\u0430 ${name}`,
    // Master/detail
    detailPanelToggle: "\u0414\u044D\u0442\u0430\u043B\u0456",
    expandDetailPanel: "\u0420\u0430\u0437\u0433\u0430\u0440\u043D\u0443\u0446\u044C",
    collapseDetailPanel: "\u0417\u0433\u0430\u0440\u043D\u0443\u0446\u044C",
    // Row reordering text
    rowReorderingHeaderName: "\u0417\u043C\u044F\u043D\u0435\u043D\u043D\u0435 \u0447\u0430\u0440\u0433\u043E\u0432\u0430\u0441\u0446\u0456 \u0440\u0430\u0434\u043A\u043E\u045E",
    // Aggregation
    aggregationMenuItemHeader: "\u0410\u0431'\u044F\u0434\u043D\u0430\u043D\u043D\u0435 \u0434\u0430\u0434\u0437\u0435\u043D\u044B\u0445",
    aggregationFunctionLabelSum: "\u0441\u0443\u043C\u0430",
    aggregationFunctionLabelAvg: "\u0441\u044F\u0440\u044D\u0434\u043D\u044F\u0435",
    aggregationFunctionLabelMin: "\u043C\u0456\u043D\u0456\u043C\u0443\u043C",
    aggregationFunctionLabelMax: "\u043C\u0430\u043A\u0441\u0456\u043C\u0443\u043C",
    aggregationFunctionLabelSize: "\u043F\u0430\u043C\u0435\u0440"
  };
  var beBY = getGridLocalization(beBYGrid, beBYCore);

  // node_modules/@mui/x-data-grid/locales/bgBG.js
  var bgBGGrid = {
    // Root
    noRowsLabel: "\u041D\u044F\u043C\u0430 \u0440\u0435\u0434\u043E\u0432\u0435",
    noResultsOverlayLabel: "\u041D\u044F\u043C\u0430 \u043D\u0430\u043C\u0435\u0440\u0435\u043D\u0438 \u0440\u0435\u0437\u0443\u043B\u0442\u0430\u0442\u0438.",
    // Density selector toolbar button text
    toolbarDensity: "\u0413\u044A\u0441\u0442\u043E\u0442\u0430",
    toolbarDensityLabel: "\u0413\u044A\u0441\u0442\u043E\u0442\u0430",
    toolbarDensityCompact: "\u041A\u043E\u043C\u043F\u0430\u043A\u0442\u043D\u0430",
    toolbarDensityStandard: "\u0421\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u0430",
    toolbarDensityComfortable: "\u041A\u043E\u043C\u0444\u043E\u0440\u0442\u043D\u0430",
    // Columns selector toolbar button text
    toolbarColumns: "\u041A\u043E\u043B\u043E\u043D\u0438",
    toolbarColumnsLabel: "\u041F\u043E\u043A\u0430\u0436\u0438 \u0441\u0435\u043B\u0435\u043A\u0442\u043E\u0440\u0430 \u043D\u0430 \u043A\u043E\u043B\u043E\u043D\u0438",
    // Filters toolbar button text
    toolbarFilters: "\u0424\u0438\u043B\u0442\u0440\u0438",
    toolbarFiltersLabel: "\u041F\u043E\u043A\u0430\u0436\u0438 \u0424\u0438\u043B\u0442\u0440\u0438\u0442\u0435",
    toolbarFiltersTooltipHide: "\u0421\u043A\u0440\u0438\u0439 \u0424\u0438\u043B\u0442\u0440\u0438\u0442\u0435",
    toolbarFiltersTooltipShow: "\u041F\u043E\u043A\u0430\u0436\u0438 \u0424\u0438\u043B\u0442\u0440\u0438\u0442\u0435",
    toolbarFiltersTooltipActive: (count) => `${count} \u0430\u043A\u0442\u0438\u0432\u043D\u0438 \u0444\u0438\u043B\u0442\u0440\u0438`,
    // Quick filter toolbar field
    toolbarQuickFilterPlaceholder: "\u0422\u044A\u0440\u0441\u0438\u2026",
    toolbarQuickFilterLabel: "\u0422\u044A\u0440\u0441\u0435\u043D\u0435",
    toolbarQuickFilterDeleteIconLabel: "\u0418\u0437\u0447\u0438\u0441\u0442\u0438",
    // Export selector toolbar button text
    toolbarExport: "\u0418\u0437\u0442\u0435\u0433\u043B\u0438",
    toolbarExportLabel: "\u0418\u0437\u0442\u0435\u0433\u043B\u0438",
    toolbarExportCSV: "\u0418\u0437\u0442\u0435\u0433\u043B\u0438 \u043A\u0430\u0442\u043E CSV",
    toolbarExportPrint: "\u041F\u0440\u0438\u043D\u0442\u0438\u0440\u0430\u043D\u0435",
    toolbarExportExcel: "\u0418\u0437\u0442\u0435\u0433\u043B\u0438 \u043A\u0430\u0442\u043E Excel",
    // Columns panel text
    columnsPanelTextFieldLabel: "\u041D\u0430\u043C\u0435\u0440\u0438 \u043A\u043E\u043B\u043E\u043D\u0430",
    columnsPanelTextFieldPlaceholder: "\u0417\u0430\u0433\u043B\u0430\u0432\u0438\u0435 \u043D\u0430 \u043A\u043E\u043B\u043E\u043D\u0430",
    columnsPanelDragIconLabel: "\u041F\u0440\u0435\u043D\u0430\u0440\u0435\u0434\u0438 \u043D\u0430 \u043A\u043E\u043B\u043E\u043D\u0430",
    columnsPanelShowAllButton: "\u041F\u043E\u043A\u0430\u0436\u0438 \u0412\u0441\u0438\u0447\u043A\u0438",
    columnsPanelHideAllButton: "\u0421\u043A\u0440\u0438\u0439 \u0412\u0441\u0438\u0447\u043A\u0438",
    // Filter panel text
    filterPanelAddFilter: "\u0414\u043E\u0431\u0430\u0432\u0438 \u0424\u0438\u043B\u0442\u044A\u0440",
    filterPanelRemoveAll: "\u041F\u0440\u0435\u043C\u0430\u0445\u043D\u0438 \u0432\u0441\u0438\u0447\u043A\u0438",
    filterPanelDeleteIconLabel: "\u0418\u0437\u0442\u0440\u0438\u0439",
    filterPanelLogicOperator: "\u041B\u043E\u0433\u0438\u0447\u0435\u0441\u043A\u0438 \u043E\u043F\u0435\u0440\u0430\u0442\u043E\u0440",
    filterPanelOperator: "\u041E\u043F\u0435\u0440\u0430\u0442\u043E\u0440\u0438",
    filterPanelOperatorAnd: "\u0418",
    filterPanelOperatorOr: "\u0418\u043B\u0438",
    filterPanelColumns: "\u041A\u043E\u043B\u043E\u043D\u0438",
    filterPanelInputLabel: "\u0421\u0442\u043E\u0439\u043D\u043E\u0441\u0442",
    filterPanelInputPlaceholder: "\u0421\u0442\u043E\u0439\u043D\u043E\u0441\u0442 \u043D\u0430 \u0444\u0438\u043B\u0442\u044A\u0440\u0430",
    // Filter operators text
    filterOperatorContains: "\u0441\u044A\u0434\u044A\u0440\u0436\u0430",
    filterOperatorEquals: "\u0440\u0430\u0432\u043D\u043E",
    filterOperatorStartsWith: "\u0437\u0430\u043F\u043E\u0447\u0432\u0430 \u0441",
    filterOperatorEndsWith: "\u0437\u0430\u0432\u044A\u0440\u0448\u0432\u0430 \u0441",
    filterOperatorIs: "\u0435",
    filterOperatorNot: "\u043D\u0435 \u0435",
    filterOperatorAfter: "\u0435 \u0441\u043B\u0435\u0434",
    filterOperatorOnOrAfter: "\u0435 \u043D\u0430 \u0438\u043B\u0438 \u0441\u043B\u0435\u0434",
    filterOperatorBefore: "\u0435 \u043F\u0440\u0435\u0434\u0438",
    filterOperatorOnOrBefore: "\u0435 \u043D\u0430 \u0438\u043B\u0438 \u043F\u0440\u0435\u0434\u0438",
    filterOperatorIsEmpty: "\u0435 \u043F\u0440\u0430\u0437\u0435\u043D",
    filterOperatorIsNotEmpty: "\u043D\u0435 \u0435 \u043F\u0440\u0430\u0437\u0435\u043D",
    filterOperatorIsAnyOf: "\u0435 \u043D\u044F\u043A\u043E\u0439 \u043E\u0442",
    "filterOperator=": "=",
    "filterOperator!=": "!=",
    "filterOperator>": ">",
    "filterOperator>=": ">=",
    "filterOperator<": "<",
    "filterOperator<=": "<=",
    // Header filter operators text
    headerFilterOperatorContains: "\u0421\u044A\u0434\u044A\u0440\u0436\u0430",
    headerFilterOperatorEquals: "\u0420\u0430\u0432\u043Do",
    headerFilterOperatorStartsWith: "\u0417\u0430\u043F\u043E\u0447\u0432\u0430 \u0441",
    headerFilterOperatorEndsWith: "\u0417\u0430\u0432\u044A\u0440\u0448\u0432\u0430 \u0441",
    headerFilterOperatorIs: "\u0420\u0430\u0432\u043D\u043E \u0435 \u043D\u0430",
    headerFilterOperatorNot: "\u041D\u0435 \u0441\u0435 \u0440\u0430\u0432\u043D\u044F\u0432\u0430 \u043D\u0430",
    headerFilterOperatorAfter: "\u0421\u043B\u0435\u0434",
    headerFilterOperatorOnOrAfter: "\u0421\u043B\u0435\u0434 (\u0432\u043A\u043B\u044E\u0447\u0438\u0442\u0435\u043B\u043D\u043E)",
    headerFilterOperatorBefore: "\u041F\u0440\u0435\u0434\u0438",
    headerFilterOperatorOnOrBefore: "\u041F\u0440\u0435\u0434\u0438 (\u0432\u043A\u043B\u044E\u0447\u0438\u0442\u0435\u043B\u043D\u043E)",
    headerFilterOperatorIsEmpty: "\u041F\u0440\u0430\u0437\u0435\u043D",
    headerFilterOperatorIsNotEmpty: "\u041D\u0435 \u0435 \u043F\u0440\u0430\u0437\u0435\u043D",
    headerFilterOperatorIsAnyOf: "\u0412\u0441\u0438\u0447\u043A\u043E \u043E\u0442",
    "headerFilterOperator=": "\u0420\u0430\u0432\u043D\u043E",
    "headerFilterOperator!=": "\u0420\u0430\u0437\u043B\u0438\u0447\u043D\u043E",
    "headerFilterOperator>": "\u041F\u043E-\u0433\u043E\u043B\u044F\u043C\u043E \u043E\u0442",
    "headerFilterOperator>=": "\u041F\u043E-\u0433\u043E\u043B\u044F\u043C\u043E \u0438\u043B\u0438 \u0440\u0430\u0432\u043D\u043E \u043D\u0430",
    "headerFilterOperator<": "\u041F\u043E-\u043C\u0430\u043B\u043A\u043E \u043E\u0442",
    "headerFilterOperator<=": "\u041F\u043E-\u043C\u0430\u043B\u043A\u043E \u0438\u043B\u0438 \u0440\u0430\u0432\u043D\u043E \u043D\u0430",
    // Filter values text
    filterValueAny: "\u0432\u0441\u044F\u043A\u0430\u043A\u0432\u0438",
    filterValueTrue: "\u0432\u044F\u0440\u043D\u043E",
    filterValueFalse: "\u043D\u0435\u0432\u044F\u0440\u043D\u043E",
    // Column menu text
    columnMenuLabel: "\u041C\u0435\u043D\u044E",
    columnMenuShowColumns: "\u041F\u043E\u043A\u0430\u0436\u0438 \u043A\u043E\u043B\u043E\u043D\u0438\u0442\u0435",
    columnMenuManageColumns: "\u0423\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0438\u0435 \u043D\u0430 \u043A\u043E\u043B\u043E\u043D\u0438",
    columnMenuFilter: "\u0424\u0438\u043B\u0442\u0440\u0438",
    columnMenuHideColumn: "\u0421\u043A\u0440\u0438\u0439",
    columnMenuUnsort: "\u041E\u0442\u043C\u0435\u043D\u0438 \u0441\u043E\u0440\u0442\u0438\u0440\u0430\u043D\u0435\u0442\u043E",
    columnMenuSortAsc: "\u0421\u043E\u0440\u0442\u0438\u0440\u0430\u0439 \u043F\u043E \u0432\u044A\u0437\u0445\u043E\u0434\u044F\u0449 \u0440\u0435\u0434",
    columnMenuSortDesc: "\u0421\u043E\u0440\u0442\u0438\u0440\u0430\u0439 \u043F\u043E \u043D\u0438\u0437\u0445\u043E\u0434\u044F\u0449 \u0440\u0435\u0434",
    // Column header text
    columnHeaderFiltersTooltipActive: (count) => `${count} \u0430\u043A\u0442\u0438\u0432\u043D\u0438 \u0444\u0438\u043B\u0442\u0440\u0438`,
    columnHeaderFiltersLabel: "\u041F\u043E\u043A\u0430\u0436\u0438 \u0424\u0438\u043B\u0442\u0440\u0438\u0442\u0435",
    columnHeaderSortIconLabel: "\u0421\u043E\u0440\u0442\u0438\u0440\u0430\u0439",
    // Rows selected footer text
    footerRowSelected: (count) => count !== 1 ? `${count.toLocaleString()} \u0438\u0437\u0431\u0440\u0430\u043D\u0438 \u0440\u0435\u0434\u043E\u0432\u0435` : `${count.toLocaleString()} \u0438\u0437\u0431\u0440\u0430\u043D \u0440\u0435\u0434`,
    // Total row amount footer text
    footerTotalRows: "\u041E\u0431\u0449\u043E \u0420\u0435\u0434\u043E\u0432\u0435:",
    // Total visible row amount footer text
    footerTotalVisibleRows: (visibleCount, totalCount) => `${visibleCount.toLocaleString()} \u043E\u0442 ${totalCount.toLocaleString()}`,
    // Checkbox selection text
    checkboxSelectionHeaderName: "\u0418\u0437\u0431\u043E\u0440 \u043D\u0430 \u043A\u0432\u0430\u0434\u0440\u0430\u0442\u0447\u0435",
    checkboxSelectionSelectAllRows: "\u0418\u0437\u0431\u0435\u0440\u0438 \u0432\u0441\u0438\u0447\u043A\u0438 \u0440\u0435\u0434\u043E\u0432\u0435",
    checkboxSelectionUnselectAllRows: "\u041E\u0442\u043C\u0435\u043D\u0438 \u0438\u0437\u0431\u043E\u0440\u0430 \u043D\u0430 \u0432\u0441\u0438\u0447\u043A\u0438 \u0440\u0435\u0434\u043E\u0432\u0435",
    checkboxSelectionSelectRow: "\u0418\u0437\u0431\u0435\u0440\u0438 \u0440\u0435\u0434",
    checkboxSelectionUnselectRow: "\u041E\u0442\u043C\u0435\u043D\u0438 \u0438\u0437\u0431\u043E\u0440\u0430 \u043D\u0430 \u0440\u0435\u0434",
    // Boolean cell text
    booleanCellTrueLabel: "\u0434\u0430",
    booleanCellFalseLabel: "\u043D\u0435",
    // Actions cell more text
    actionsCellMore: "\u043E\u0449\u0435",
    // Column pinning text
    pinToLeft: "\u0417\u0430\u043A\u0430\u0447\u0438 \u0432 \u043B\u044F\u0432\u043E",
    pinToRight: "\u0417\u0430\u043A\u0430\u0447\u0438 \u0432 \u0434\u044F\u0441\u043D\u043E",
    unpin: "\u041E\u0442\u043A\u0430\u0447\u0438",
    // Tree Data
    treeDataGroupingHeaderName: "\u0413\u0440\u0443\u043F\u0430",
    treeDataExpand: "\u0432\u0438\u0436 \u0434\u0435\u0446\u0430",
    treeDataCollapse: "\u0441\u043A\u0440\u0438\u0439 \u0434\u0435\u0446\u0430\u0442\u0430",
    // Grouping columns
    groupingColumnHeaderName: "\u0413\u0440\u0443\u043F\u0430",
    groupColumn: (name) => `\u0413\u0440\u0443\u043F\u0438\u0440\u0430\u0439 \u043F\u043E ${name}`,
    unGroupColumn: (name) => `\u0421\u043F\u0440\u0438 \u0433\u0440\u0443\u043F\u0438\u0440\u0430\u043D\u0435 \u043F\u043E ${name}`,
    // Master/detail
    detailPanelToggle: "\u041F\u0440\u0435\u0432\u043A\u043B\u044E\u0447\u0432\u0430\u043D\u0435 \u043D\u0430 \u043F\u0430\u043D\u0435\u043B\u0430 \u0441 \u0434\u0435\u0442\u0430\u0439\u043B\u0438",
    expandDetailPanel: "\u0420\u0430\u0437\u0433\u044A\u0432\u0430\u043D\u0435",
    collapseDetailPanel: "\u0421\u0432\u0438\u0432\u0430\u043D\u0435",
    // Row reordering text
    rowReorderingHeaderName: "\u041F\u043E\u0434\u0440\u0435\u0434\u0431\u0430 \u043D\u0430 \u0440\u0435\u0434\u043E\u0432\u0435",
    // Aggregation
    aggregationMenuItemHeader: "\u0410\u0433\u0440\u0435\u0433\u0438\u0440\u0430\u043D\u0435",
    aggregationFunctionLabelSum: "\u0441\u0443\u043C\u0430",
    aggregationFunctionLabelAvg: "\u0441\u0440\u0441\u0442",
    aggregationFunctionLabelMin: "\u043C\u0438\u043D",
    aggregationFunctionLabelMax: "\u043C\u0430\u043A\u0441",
    aggregationFunctionLabelSize: "\u0440\u0430\u0437\u043C\u0435\u0440"
  };
  var bgBG2 = getGridLocalization(bgBGGrid, bgBG);

  // node_modules/@mui/x-data-grid/locales/csCZ.js
  var csCZGrid = {
    // Root
    noRowsLabel: "\u017D\xE1dn\xE9 z\xE1znamy",
    noResultsOverlayLabel: "Nena\u0161ly se \u017Eadn\xE9 v\xFDsledky.",
    // Density selector toolbar button text
    toolbarDensity: "Zobrazen\xED",
    toolbarDensityLabel: "Zobrazen\xED",
    toolbarDensityCompact: "Kompaktn\xED",
    toolbarDensityStandard: "Standartn\xED",
    toolbarDensityComfortable: "Komfortn\xED",
    // Columns selector toolbar button text
    toolbarColumns: "Sloupce",
    toolbarColumnsLabel: "Vybrat sloupec",
    // Filters toolbar button text
    toolbarFilters: "Filtry",
    toolbarFiltersLabel: "Zobrazit filtry",
    toolbarFiltersTooltipHide: "Skr\xFDt filtry",
    toolbarFiltersTooltipShow: "Zobrazit filtry",
    toolbarFiltersTooltipActive: (count) => {
      let pluralForm = "aktivn\xEDch filtr\u016F";
      if (count > 1 && count < 5) {
        pluralForm = "aktivn\xED filtry";
      } else if (count === 1) {
        pluralForm = "aktivn\xED filtr";
      }
      return `${count} ${pluralForm}`;
    },
    // Quick filter toolbar field
    toolbarQuickFilterPlaceholder: "Hledat\u2026",
    toolbarQuickFilterLabel: "Hledat",
    toolbarQuickFilterDeleteIconLabel: "Vymazat",
    // Export selector toolbar button text
    toolbarExport: "Export",
    toolbarExportLabel: "Export",
    toolbarExportCSV: "St\xE1hnout jako CSV",
    toolbarExportPrint: "Vytisknout",
    toolbarExportExcel: "St\xE1hnout jako Excel",
    // Columns panel text
    columnsPanelTextFieldLabel: "Naj\xEDt sloupec",
    columnsPanelTextFieldPlaceholder: "N\xE1zev sloupce",
    columnsPanelDragIconLabel: "Uspo\u0159\xE1dat sloupce",
    columnsPanelShowAllButton: "Zobrazit v\u0161e",
    columnsPanelHideAllButton: "Skr\xFDt v\u0161e",
    // Filter panel text
    filterPanelAddFilter: "P\u0159idat filtr",
    filterPanelRemoveAll: "Odstranit v\u0161e",
    filterPanelDeleteIconLabel: "Odstranit",
    filterPanelLogicOperator: "Logick\xFD oper\xE1tor",
    filterPanelOperator: "Oper\xE1tory",
    filterPanelOperatorAnd: "A",
    filterPanelOperatorOr: "Nebo",
    filterPanelColumns: "Sloupce",
    filterPanelInputLabel: "Hodnota",
    filterPanelInputPlaceholder: "Hodnota filtru",
    // Filter operators text
    filterOperatorContains: "obsahuje",
    filterOperatorEquals: "rovn\xE1 se",
    filterOperatorStartsWith: "za\u010D\xEDn\xE1 na",
    filterOperatorEndsWith: "kon\u010D\xED na",
    filterOperatorIs: "je",
    filterOperatorNot: "nen\xED",
    filterOperatorAfter: "je po",
    filterOperatorOnOrAfter: "je po v\u010Detn\u011B",
    filterOperatorBefore: "je p\u0159ed",
    filterOperatorOnOrBefore: "je p\u0159ed v\u010Detn\u011B",
    filterOperatorIsEmpty: "je pr\xE1zdn\xFD",
    filterOperatorIsNotEmpty: "nen\xED pr\xE1zdn\xFD",
    filterOperatorIsAnyOf: "je jeden z",
    "filterOperator=": "=",
    "filterOperator!=": "!=",
    "filterOperator>": ">",
    "filterOperator>=": ">=",
    "filterOperator<": "<",
    "filterOperator<=": "<=",
    // Header filter operators text
    headerFilterOperatorContains: "Obsahuje",
    headerFilterOperatorEquals: "Rovn\xE1 se",
    headerFilterOperatorStartsWith: "Za\u010D\xEDn\xE1 na",
    headerFilterOperatorEndsWith: "Kon\u010D\xED na",
    headerFilterOperatorIs: "Je",
    headerFilterOperatorNot: "Nen\xED",
    headerFilterOperatorAfter: "Je po",
    headerFilterOperatorOnOrAfter: "Je po v\u010Detn\u011B",
    headerFilterOperatorBefore: "Je p\u0159ed",
    headerFilterOperatorOnOrBefore: "Je p\u0159ed v\u010Detn\u011B",
    headerFilterOperatorIsEmpty: "Je pr\xE1zdn\xFD",
    headerFilterOperatorIsNotEmpty: "Nen\xED pr\xE1zdn\xFD",
    headerFilterOperatorIsAnyOf: "Je jeden z",
    "headerFilterOperator=": "Rovn\xE1 se",
    "headerFilterOperator!=": "Nerovn\xE1 se",
    "headerFilterOperator>": "V\u011Bt\u0161\xED ne\u017E",
    "headerFilterOperator>=": "V\u011Bt\u0161\xED ne\u017E nebo rovno",
    "headerFilterOperator<": "Men\u0161\xED ne\u017E",
    "headerFilterOperator<=": "Men\u0161\xED ne\u017E nebo rovno",
    // Filter values text
    filterValueAny: "jak\xFDkoliv",
    filterValueTrue: "ano",
    filterValueFalse: "ne",
    // Column menu text
    columnMenuLabel: "Menu",
    columnMenuShowColumns: "Zobrazit sloupce",
    columnMenuManageColumns: "Spravovat sloupce",
    columnMenuFilter: "Filtr",
    columnMenuHideColumn: "Skr\xFDt",
    columnMenuUnsort: "Zru\u0161it filtry",
    columnMenuSortAsc: "Se\u0159adit vzestupn\u011B",
    columnMenuSortDesc: "Se\u0159adit sestupn\u011B",
    // Column header text
    columnHeaderFiltersTooltipActive: (count) => {
      let pluralForm = "aktivn\xEDch filtr\u016F";
      if (count > 1 && count < 5) {
        pluralForm = "aktivn\xED filtry";
      } else if (count === 1) {
        pluralForm = "aktivn\xED filtr";
      }
      return `${count} ${pluralForm}`;
    },
    columnHeaderFiltersLabel: "Zobrazit filtry",
    columnHeaderSortIconLabel: "Filtrovat",
    // Rows selected footer text
    footerRowSelected: (count) => {
      let pluralForm = "vybran\xFDch z\xE1znam\u016F";
      if (count > 1 && count < 5) {
        pluralForm = "vybran\xE9 z\xE1znamy";
      } else if (count === 1) {
        pluralForm = "vybran\xFD z\xE1znam";
      }
      return `${count} ${pluralForm}`;
    },
    // Total row amount footer text
    footerTotalRows: "Celkem \u0159\xE1dk\u016F:",
    // Total visible row amount footer text
    footerTotalVisibleRows: (visibleCount, totalCount) => {
      const str = totalCount.toString();
      const firstDigit = str[0];
      const op = ["4", "6", "7"].includes(firstDigit) || firstDigit === "1" && str.length % 3 === 0 ? "ze" : "z";
      return `${visibleCount.toLocaleString()} ${op} ${totalCount.toLocaleString()}`;
    },
    // Checkbox selection text
    checkboxSelectionHeaderName: "V\xFDb\u011Br \u0159\xE1dku",
    checkboxSelectionSelectAllRows: "Ozna\u010Dit v\u0161echny \u0159\xE1dky",
    checkboxSelectionUnselectAllRows: "Odzna\u010Dit v\u0161echny \u0159\xE1dky",
    checkboxSelectionSelectRow: "Ozna\u010Dit \u0159\xE1dek",
    checkboxSelectionUnselectRow: "Odzna\u010Dit \u0159\xE1dek",
    // Boolean cell text
    booleanCellTrueLabel: "ano",
    booleanCellFalseLabel: "ne",
    // Actions cell more text
    actionsCellMore: "v\xEDce",
    // Column pinning text
    pinToLeft: "P\u0159ipnout vlevo",
    pinToRight: "P\u0159ipnout vpravo",
    unpin: "Odepnout",
    // Tree Data
    treeDataGroupingHeaderName: "Skupina",
    treeDataExpand: "zobrazit potomky",
    treeDataCollapse: "skr\xFDt potomky",
    // Grouping columns
    groupingColumnHeaderName: "Skupina",
    groupColumn: (name) => `Seskupit podle ${name}`,
    unGroupColumn: (name) => `P\u0159estat seskupovat podle ${name}`,
    // Master/detail
    detailPanelToggle: "P\u0159epnout detail panelu",
    expandDetailPanel: "Rozbalit",
    collapseDetailPanel: "Sbalit",
    // Row reordering text
    rowReorderingHeaderName: "P\u0159euspo\u0159\xE1d\xE1v\xE1n\xED \u0159\xE1dk\u016F",
    // Aggregation
    aggregationMenuItemHeader: "Seskupov\xE1n\xED",
    aggregationFunctionLabelSum: "sou\u010Det",
    aggregationFunctionLabelAvg: "pr\u016Fm\u011Br",
    aggregationFunctionLabelMin: "min",
    aggregationFunctionLabelMax: "max",
    aggregationFunctionLabelSize: "po\u010Det"
  };
  var csCZ2 = getGridLocalization(csCZGrid, csCZ);

  // node_modules/@mui/x-data-grid/locales/daDK.js
  var daDKGrid = {
    // Root
    noRowsLabel: "Ingen r\xE6kker",
    noResultsOverlayLabel: "Ingen resultater",
    // Density selector toolbar button text
    toolbarDensity: "T\xE6thed",
    toolbarDensityLabel: "T\xE6thed",
    toolbarDensityCompact: "Kompakt",
    toolbarDensityStandard: "Standard",
    toolbarDensityComfortable: "Luftig",
    // Columns selector toolbar button text
    toolbarColumns: "Kolonner",
    toolbarColumnsLabel: "V\xE6lg kolonner",
    // Filters toolbar button text
    toolbarFilters: "Filtre",
    toolbarFiltersLabel: "Vis filtre",
    toolbarFiltersTooltipHide: "Skjul filtre",
    toolbarFiltersTooltipShow: "Vis filtre",
    toolbarFiltersTooltipActive: (count) => count !== 1 ? `${count} aktive filtre` : `${count} aktivt filter`,
    // Quick filter toolbar field
    toolbarQuickFilterPlaceholder: "S\xF8g\u2026",
    toolbarQuickFilterLabel: "S\xF8g",
    toolbarQuickFilterDeleteIconLabel: "Ryd",
    // Export selector toolbar button text
    toolbarExport: "Eksport",
    toolbarExportLabel: "Eksporter",
    toolbarExportCSV: "Download som CSV",
    toolbarExportPrint: "Print",
    toolbarExportExcel: "Download som Excel",
    // Columns panel text
    columnsPanelTextFieldLabel: "Find kolonne",
    columnsPanelTextFieldPlaceholder: "Kolonne titel",
    columnsPanelDragIconLabel: "Reorder kolonne",
    columnsPanelShowAllButton: "Vis alle",
    columnsPanelHideAllButton: "Skjul alle",
    // Filter panel text
    filterPanelAddFilter: "Tilf\xF8j filter",
    filterPanelRemoveAll: "Fjern alle",
    filterPanelDeleteIconLabel: "Slet",
    filterPanelLogicOperator: "Logisk operator",
    filterPanelOperator: "Operator",
    filterPanelOperatorAnd: "Og",
    filterPanelOperatorOr: "Eller",
    filterPanelColumns: "Kolonner",
    filterPanelInputLabel: "V\xE6rdi",
    filterPanelInputPlaceholder: "Filterv\xE6rdi",
    // Filter operators text
    filterOperatorContains: "indeholder",
    filterOperatorEquals: "lig med",
    filterOperatorStartsWith: "begynder med",
    filterOperatorEndsWith: "ender med",
    filterOperatorIs: "er lig med",
    filterOperatorNot: "er ikke lig med",
    filterOperatorAfter: "efter",
    filterOperatorOnOrAfter: "p\xE5 eller efter",
    filterOperatorBefore: "f\xF8r",
    filterOperatorOnOrBefore: "p\xE5 eller f\xF8r",
    filterOperatorIsEmpty: "indeholder ikke data",
    filterOperatorIsNotEmpty: "indeholder data",
    filterOperatorIsAnyOf: "indeholder en af",
    "filterOperator=": "=",
    "filterOperator!=": "!=",
    "filterOperator>": ">",
    "filterOperator>=": ">=",
    "filterOperator<": "<",
    "filterOperator<=": "<=",
    // Header filter operators text
    headerFilterOperatorContains: "Indeholder",
    headerFilterOperatorEquals: "Lig med",
    headerFilterOperatorStartsWith: "Begynder med",
    headerFilterOperatorEndsWith: "Ender med",
    headerFilterOperatorIs: "Er lig med",
    headerFilterOperatorNot: "Er ikke lig med",
    headerFilterOperatorAfter: "Efter",
    headerFilterOperatorOnOrAfter: "P\xE5 eller efter",
    headerFilterOperatorBefore: "F\xF8r",
    headerFilterOperatorOnOrBefore: "P\xE5 eller f\xF8r",
    headerFilterOperatorIsEmpty: "Indeholder ikke data",
    headerFilterOperatorIsNotEmpty: "Indeholder data",
    headerFilterOperatorIsAnyOf: "Indeholder en af",
    "headerFilterOperator=": "Lig med",
    "headerFilterOperator!=": "Ikke lig med",
    "headerFilterOperator>": "St\xF8rre end",
    "headerFilterOperator>=": "St\xF8rre end eller lig med",
    "headerFilterOperator<": "Mindre end",
    "headerFilterOperator<=": "Mindre end eller lig med",
    // Filter values text
    filterValueAny: "hvilken som helst",
    filterValueTrue: "positiv",
    filterValueFalse: "negativ",
    // Column menu text
    columnMenuLabel: "Menu",
    columnMenuShowColumns: "Vis kolonner",
    columnMenuManageColumns: "Administrer kolonner",
    columnMenuFilter: "Filtrer",
    columnMenuHideColumn: "Skjul kolonne",
    columnMenuUnsort: "Fjern sortering",
    columnMenuSortAsc: "Sorter stigende",
    columnMenuSortDesc: "Sorter faldende",
    // Column header text
    columnHeaderFiltersTooltipActive: (count) => count !== 1 ? `${count} aktive filtre` : `\xC9t aktivt filter`,
    columnHeaderFiltersLabel: "Vis filtre",
    columnHeaderSortIconLabel: "Sorter",
    // Rows selected footer text
    footerRowSelected: (count) => count !== 1 ? `${count.toLocaleString()} r\xE6kker valgt` : `\xC9n r\xE6kke valgt`,
    // Total row amount footer text
    footerTotalRows: "Antal r\xE6kker i alt:",
    // Total visible row amount footer text
    footerTotalVisibleRows: (visibleCount, totalCount) => `${visibleCount.toLocaleString()} af ${totalCount.toLocaleString()}`,
    // Checkbox selection text
    checkboxSelectionHeaderName: "Afkrydsningsvalg",
    checkboxSelectionSelectAllRows: "V\xE6lg alle r\xE6kker",
    checkboxSelectionUnselectAllRows: "Frav\xE6lg alle r\xE6kker",
    checkboxSelectionSelectRow: "V\xE6lg r\xE6kke",
    checkboxSelectionUnselectRow: "Frav\xE6lg r\xE6kke",
    // Boolean cell text
    booleanCellTrueLabel: "ja",
    booleanCellFalseLabel: "nej",
    // Actions cell more text
    actionsCellMore: "mere",
    // Column pinning text
    pinToLeft: "Fastg\xF8r til venstre",
    pinToRight: "Fastg\xF8r til h\xF8jre",
    unpin: "Frigiv",
    // Tree Data
    treeDataGroupingHeaderName: "Gruppe",
    treeDataExpand: "Vis underelementer",
    treeDataCollapse: "Skjul underelementer",
    // Grouping columns
    groupingColumnHeaderName: "Gruppe",
    groupColumn: (name) => `Grupp\xE9r efter ${name}`,
    unGroupColumn: (name) => `Fjern gruppering efter ${name}`,
    // Master/detail
    detailPanelToggle: "Udvid/kollaps detaljepanel",
    expandDetailPanel: "Udvid",
    collapseDetailPanel: "Kollaps",
    // Row reordering text
    rowReorderingHeaderName: "Omarrangering af r\xE6kker",
    // Aggregation
    aggregationMenuItemHeader: "Aggregering",
    aggregationFunctionLabelSum: "sum",
    aggregationFunctionLabelAvg: "gns",
    aggregationFunctionLabelMin: "min",
    aggregationFunctionLabelMax: "max",
    aggregationFunctionLabelSize: "st\xF8rrelse"
  };
  var daDK2 = getGridLocalization(daDKGrid, daDK);

  // node_modules/@mui/x-data-grid/locales/deDE.js
  var deDEGrid = {
    // Root
    noRowsLabel: "Keine Eintr\xE4ge",
    noResultsOverlayLabel: "Keine Ergebnisse gefunden.",
    // Density selector toolbar button text
    toolbarDensity: "Zeilenh\xF6he",
    toolbarDensityLabel: "Zeilenh\xF6he",
    toolbarDensityCompact: "Kompakt",
    toolbarDensityStandard: "Standard",
    toolbarDensityComfortable: "Breit",
    // Columns selector toolbar button text
    toolbarColumns: "Spalten",
    toolbarColumnsLabel: "Zeige Spaltenauswahl",
    // Filters toolbar button text
    toolbarFilters: "Filter",
    toolbarFiltersLabel: "Zeige Filter",
    toolbarFiltersTooltipHide: "Verberge Filter",
    toolbarFiltersTooltipShow: "Zeige Filter",
    toolbarFiltersTooltipActive: (count) => count !== 1 ? `${count} aktive Filter` : `${count} aktiver Filter`,
    // Quick filter toolbar field
    toolbarQuickFilterPlaceholder: "Suchen\u2026",
    toolbarQuickFilterLabel: "Suchen",
    toolbarQuickFilterDeleteIconLabel: "L\xF6schen",
    // Export selector toolbar button text
    toolbarExport: "Exportieren",
    toolbarExportLabel: "Exportieren",
    toolbarExportCSV: "Download als CSV",
    toolbarExportPrint: "Drucken",
    toolbarExportExcel: "Download als Excel",
    // Columns panel text
    columnsPanelTextFieldLabel: "Finde Spalte",
    columnsPanelTextFieldPlaceholder: "Spalten\xFCberschrift",
    columnsPanelDragIconLabel: "Spalte umsortieren",
    columnsPanelShowAllButton: "Zeige alle",
    columnsPanelHideAllButton: "Verberge alle",
    // Filter panel text
    filterPanelAddFilter: "Filter hinzuf\xFCgen",
    filterPanelRemoveAll: "Alle entfernen",
    filterPanelDeleteIconLabel: "L\xF6schen",
    filterPanelLogicOperator: "Logische Operatoren",
    filterPanelOperator: "Operatoren",
    filterPanelOperatorAnd: "Und",
    filterPanelOperatorOr: "Oder",
    filterPanelColumns: "Spalten",
    filterPanelInputLabel: "Wert",
    filterPanelInputPlaceholder: "Wert filtern",
    // Filter operators text
    filterOperatorContains: "enth\xE4lt",
    filterOperatorEquals: "ist gleich",
    filterOperatorStartsWith: "beginnt mit",
    filterOperatorEndsWith: "endet mit",
    filterOperatorIs: "ist",
    filterOperatorNot: "ist nicht",
    filterOperatorAfter: "ist nach",
    filterOperatorOnOrAfter: "ist am oder nach",
    filterOperatorBefore: "ist vor",
    filterOperatorOnOrBefore: "ist am oder vor",
    filterOperatorIsEmpty: "ist leer",
    filterOperatorIsNotEmpty: "ist nicht leer",
    filterOperatorIsAnyOf: "ist einer der Werte",
    "filterOperator=": "=",
    "filterOperator!=": "!=",
    "filterOperator>": ">",
    "filterOperator>=": ">=",
    "filterOperator<": "<",
    "filterOperator<=": "<=",
    // Header filter operators text
    headerFilterOperatorContains: "Enth\xE4lt",
    headerFilterOperatorEquals: "Gleich",
    headerFilterOperatorStartsWith: "Beginnt mit",
    headerFilterOperatorEndsWith: "Endet mit",
    headerFilterOperatorIs: "Ist",
    headerFilterOperatorNot: "Ist nicht",
    headerFilterOperatorAfter: "Ist nach",
    headerFilterOperatorOnOrAfter: "Ist am oder nach",
    headerFilterOperatorBefore: "Ist vor",
    headerFilterOperatorOnOrBefore: "Ist am oder vor",
    headerFilterOperatorIsEmpty: "Ist leer",
    headerFilterOperatorIsNotEmpty: "Ist nicht leer",
    headerFilterOperatorIsAnyOf: "Ist eines von",
    "headerFilterOperator=": "Gleich",
    "headerFilterOperator!=": "Ungleich",
    "headerFilterOperator>": "Gr\xF6\xDFer als",
    "headerFilterOperator>=": "Gr\xF6\xDFer als oder gleich",
    "headerFilterOperator<": "Kleiner als",
    "headerFilterOperator<=": "Kleiner als oder gleich",
    // Filter values text
    filterValueAny: "Beliebig",
    filterValueTrue: "Ja",
    filterValueFalse: "Nein",
    // Column menu text
    columnMenuLabel: "Men\xFC",
    columnMenuShowColumns: "Zeige alle Spalten",
    columnMenuManageColumns: "Spalten verwalten",
    columnMenuFilter: "Filter",
    columnMenuHideColumn: "Verbergen",
    columnMenuUnsort: "Sortierung deaktivieren",
    columnMenuSortAsc: "Sortiere aufsteigend",
    columnMenuSortDesc: "Sortiere absteigend",
    // Column header text
    columnHeaderFiltersTooltipActive: (count) => count !== 1 ? `${count} aktive Filter` : `${count} aktiver Filter`,
    columnHeaderFiltersLabel: "Zeige Filter",
    columnHeaderSortIconLabel: "Sortieren",
    // Rows selected footer text
    footerRowSelected: (count) => count !== 1 ? `${count.toLocaleString()} Eintr\xE4ge ausgew\xE4hlt` : `${count.toLocaleString()} Eintrag ausgew\xE4hlt`,
    // Total row amount footer text
    footerTotalRows: "Gesamt:",
    // Total visible row amount footer text
    footerTotalVisibleRows: (visibleCount, totalCount) => `${visibleCount.toLocaleString()} von ${totalCount.toLocaleString()}`,
    // Checkbox selection text
    checkboxSelectionHeaderName: "Checkbox Auswahl",
    checkboxSelectionSelectAllRows: "Alle Zeilen ausw\xE4hlen",
    checkboxSelectionUnselectAllRows: "Alle Zeilen abw\xE4hlen",
    checkboxSelectionSelectRow: "Zeile ausw\xE4hlen",
    checkboxSelectionUnselectRow: "Zeile abw\xE4hlen",
    // Boolean cell text
    booleanCellTrueLabel: "Ja",
    booleanCellFalseLabel: "Nein",
    // Actions cell more text
    actionsCellMore: "Mehr",
    // Column pinning text
    pinToLeft: "Links anheften",
    pinToRight: "Rechts anheften",
    unpin: "Losl\xF6sen",
    // Tree Data
    treeDataGroupingHeaderName: "Gruppe",
    treeDataExpand: "Kinder einblenden",
    treeDataCollapse: "Kinder ausblenden",
    // Grouping columns
    groupingColumnHeaderName: "Gruppierung",
    groupColumn: (name) => `Gruppieren nach ${name}`,
    unGroupColumn: (name) => `Gruppierung nach ${name} aufheben`,
    // Master/detail
    detailPanelToggle: "Detailansicht Kippschalter",
    expandDetailPanel: "Aufklappen",
    collapseDetailPanel: "Zuklappen",
    // Row reordering text
    rowReorderingHeaderName: "Reihen neu ordnen",
    // Aggregation
    aggregationMenuItemHeader: "Aggregation",
    aggregationFunctionLabelSum: "Summe",
    aggregationFunctionLabelAvg: "Mittelwert",
    aggregationFunctionLabelMin: "Minimum",
    aggregationFunctionLabelMax: "Maximum",
    aggregationFunctionLabelSize: "Anzahl"
  };
  var deDE2 = getGridLocalization(deDEGrid, deDE);

  // node_modules/@mui/x-data-grid/locales/elGR.js
  var elGRGrid = {
    // Root
    noRowsLabel: "\u0394\u03B5\u03BD \u03C5\u03C0\u03AC\u03C1\u03C7\u03BF\u03C5\u03BD \u03BA\u03B1\u03C4\u03B1\u03C7\u03C9\u03C1\u03AE\u03C3\u03B5\u03B9\u03C2",
    noResultsOverlayLabel: "\u0394\u03B5\u03BD \u03B2\u03C1\u03AD\u03B8\u03B7\u03BA\u03B1\u03BD \u03B1\u03C0\u03BF\u03C4\u03B5\u03BB\u03AD\u03C3\u03BC\u03B1\u03C4\u03B1.",
    // Density selector toolbar button text
    toolbarDensity: "\u038E\u03C8\u03BF\u03C2 \u03C3\u03B5\u03B9\u03C1\u03AC\u03C2",
    toolbarDensityLabel: "\u038E\u03C8\u03BF\u03C2 \u03C3\u03B5\u03B9\u03C1\u03AC\u03C2",
    toolbarDensityCompact: "\u03A3\u03C5\u03BC\u03C0\u03B1\u03B3\u03AE\u03C2",
    toolbarDensityStandard: "\u03A0\u03C1\u03BF\u03BA\u03B1\u03B8\u03BF\u03C1\u03B9\u03C3\u03BC\u03AD\u03BD\u03BF",
    toolbarDensityComfortable: "\u03A0\u03BB\u03B1\u03C4\u03CD",
    // Columns selector toolbar button text
    toolbarColumns: "\u03A3\u03C4\u03AE\u03BB\u03B5\u03C2",
    toolbarColumnsLabel: "\u0395\u03C0\u03B9\u03BB\u03AD\u03BE\u03C4\u03B5 \u03C3\u03C4\u03AE\u03BB\u03B5\u03C2",
    // Filters toolbar button text
    toolbarFilters: "\u03A6\u03AF\u03BB\u03C4\u03C1\u03B1",
    toolbarFiltersLabel: "\u0395\u03BC\u03C6\u03AC\u03BD\u03B9\u03C3\u03B7 \u03C6\u03AF\u03BB\u03C4\u03C1\u03C9\u03BD",
    toolbarFiltersTooltipHide: "\u0391\u03C0\u03CC\u03BA\u03C1\u03C5\u03C8\u03B7 \u03C6\u03AF\u03BB\u03C4\u03C1\u03C9\u03BD",
    toolbarFiltersTooltipShow: "\u0395\u03BC\u03C6\u03AC\u03BD\u03B9\u03C3\u03B7 \u03C6\u03AF\u03BB\u03C4\u03C1\u03C9\u03BD",
    toolbarFiltersTooltipActive: (count) => count !== 1 ? `${count} \u03B5\u03BD\u03B5\u03C1\u03B3\u03AC \u03C6\u03AF\u03BB\u03C4\u03C1\u03B1` : `${count} \u03B5\u03BD\u03B5\u03C1\u03B3\u03CC \u03C6\u03AF\u03BB\u03C4\u03C1\u03BF`,
    // Quick filter toolbar field
    toolbarQuickFilterPlaceholder: "\u0391\u03BD\u03B1\u03B6\u03AE\u03C4\u03B7\u03C3\u03B7\u2026",
    toolbarQuickFilterLabel: "\u0391\u03BD\u03B1\u03B6\u03AE\u03C4\u03B7\u03C3\u03B7",
    toolbarQuickFilterDeleteIconLabel: "\u039A\u03B1\u03B8\u03B1\u03C1\u03B9\u03C3\u03BC\u03CC\u03C2",
    // Export selector toolbar button text
    toolbarExport: "\u0395\u03BE\u03B1\u03B3\u03C9\u03B3\u03AE",
    toolbarExportLabel: "\u0395\u03BE\u03B1\u03B3\u03C9\u03B3\u03AE",
    toolbarExportCSV: "\u039B\u03AE\u03C8\u03B7 \u03C9\u03C2 CSV",
    toolbarExportPrint: "\u0395\u03BA\u03C4\u03CD\u03C0\u03C9\u03C3\u03B7",
    toolbarExportExcel: "\u039B\u03AE\u03C8\u03B7 \u03C9\u03C2 Excel",
    // Columns panel text
    columnsPanelTextFieldLabel: "\u0395\u03CD\u03C1\u03B5\u03C3\u03B7 \u03C3\u03C4\u03AE\u03BB\u03B7\u03C2",
    columnsPanelTextFieldPlaceholder: "\u0395\u03C0\u03B9\u03BA\u03B5\u03C6\u03B1\u03BB\u03AF\u03B4\u03B1 \u03C3\u03C4\u03AE\u03BB\u03B7\u03C2",
    columnsPanelDragIconLabel: "\u0391\u03BD\u03B1\u03B4\u03B9\u03AC\u03C4\u03B1\u03BE\u03B7 \u03C3\u03C4\u03AE\u03BB\u03B7\u03C2",
    columnsPanelShowAllButton: "\u03A0\u03C1\u03BF\u03B2\u03BF\u03BB\u03AE \u03CC\u03BB\u03C9\u03BD",
    columnsPanelHideAllButton: "\u0391\u03C0\u03CC\u03BA\u03C1\u03C5\u03C8\u03B7 \u03CC\u03BB\u03C9\u03BD",
    // Filter panel text
    filterPanelAddFilter: "\u03A0\u03C1\u03BF\u03C3\u03B8\u03AE\u03BA\u03B7 \u03C6\u03AF\u03BB\u03C4\u03C1\u03BF\u03C5",
    filterPanelRemoveAll: "\u0391\u03C6\u03B1\u03AF\u03C1\u03B5\u03C3\u03B7 \u03CC\u03BB\u03C9\u03BD",
    filterPanelDeleteIconLabel: "\u0394\u03B9\u03B1\u03B3\u03C1\u03B1\u03C6\u03AE",
    filterPanelLogicOperator: "\u039B\u03BF\u03B3\u03B9\u03BA\u03CC\u03C2 \u03C4\u03B5\u03BB\u03B5\u03C3\u03C4\u03AE\u03C2",
    filterPanelOperator: "\u03A4\u03B5\u03BB\u03B5\u03C3\u03C4\u03AD\u03C2",
    filterPanelOperatorAnd: "\u039A\u03B1\u03AF",
    filterPanelOperatorOr: "\u0389",
    filterPanelColumns: "\u03A3\u03C4\u03AE\u03BB\u03B5\u03C2",
    filterPanelInputLabel: "\u03A4\u03B9\u03BC\u03AE",
    filterPanelInputPlaceholder: "\u03A4\u03B9\u03BC\u03AE \u03C6\u03AF\u03BB\u03C4\u03C1\u03BF\u03C5",
    // Filter operators text
    filterOperatorContains: "\u03C0\u03B5\u03C1\u03B9\u03AD\u03C7\u03B5\u03B9",
    filterOperatorEquals: "\u03B9\u03C3\u03BF\u03CD\u03C4\u03B1\u03B9",
    filterOperatorStartsWith: "\u03BE\u03B5\u03BA\u03B9\u03BD\u03AC\u03B5\u03B9 \u03BC\u03B5",
    filterOperatorEndsWith: "\u03C4\u03B5\u03BB\u03B5\u03B9\u03CE\u03BD\u03B5\u03B9 \u03BC\u03B5",
    filterOperatorIs: "\u03B5\u03AF\u03BD\u03B1\u03B9",
    filterOperatorNot: "\u03B4\u03B5\u03BD \u03B5\u03AF\u03BD\u03B1\u03B9",
    filterOperatorAfter: "\u03B5\u03AF\u03BD\u03B1\u03B9 \u03BC\u03B5\u03C4\u03AC",
    filterOperatorOnOrAfter: "\u03B5\u03AF\u03BD\u03B1\u03B9 \u03AF\u03C3\u03BF \u03AE \u03BC\u03B5\u03C4\u03AC",
    filterOperatorBefore: "\u03B5\u03AF\u03BD\u03B1\u03B9 \u03C0\u03C1\u03B9\u03BD",
    filterOperatorOnOrBefore: "\u03B5\u03AF\u03BD\u03B1\u03B9 \u03AF\u03C3\u03BF \u03AE \u03C0\u03C1\u03B9\u03BD",
    filterOperatorIsEmpty: "\u03B5\u03AF\u03BD\u03B1\u03B9 \u03BA\u03B5\u03BD\u03CC",
    filterOperatorIsNotEmpty: "\u03B4\u03B5\u03BD \u03B5\u03AF\u03BD\u03B1\u03B9 \u03BA\u03B5\u03BD\u03CC",
    filterOperatorIsAnyOf: "\u03B5\u03AF\u03BD\u03B1\u03B9 \u03BF\u03C0\u03BF\u03B9\u03BF\u03B4\u03AE\u03C0\u03BF\u03C4\u03B5 \u03B1\u03C0\u03CC",
    "filterOperator=": "=",
    "filterOperator!=": "!=",
    "filterOperator>": ">",
    "filterOperator>=": ">=",
    "filterOperator<": "<",
    "filterOperator<=": "<=",
    // Header filter operators text
    headerFilterOperatorContains: "\u03A0\u03B5\u03C1\u03B9\u03AD\u03C7\u03B5\u03B9",
    headerFilterOperatorEquals: "\u0399\u03C3\u03BF\u03CD\u03C4\u03B1\u03B9",
    headerFilterOperatorStartsWith: "\u039E\u03B5\u03BA\u03B9\u03BD\u03AC\u03B5\u03B9 \u03BC\u03B5",
    headerFilterOperatorEndsWith: "\u03A4\u03B5\u03BB\u03B5\u03B9\u03CE\u03BD\u03B5\u03B9 \u03BC\u03B5",
    headerFilterOperatorIs: "\u0395\u03AF\u03BD\u03B1\u03B9",
    headerFilterOperatorNot: "\u0394\u03B5\u03BD \u03B5\u03AF\u03BD\u03B1\u03B9",
    headerFilterOperatorAfter: "\u0395\u03AF\u03BD\u03B1\u03B9 \u03BC\u03B5\u03C4\u03AC",
    headerFilterOperatorOnOrAfter: "\u0395\u03AF\u03BD\u03B1\u03B9 \u03AF\u03C3\u03BF \u03AE \u03BC\u03B5\u03C4\u03AC",
    headerFilterOperatorBefore: "\u0395\u03AF\u03BD\u03B1\u03B9 \u03C0\u03C1\u03B9\u03BD",
    headerFilterOperatorOnOrBefore: "\u0395\u03AF\u03BD\u03B1\u03B9 \u03AF\u03C3\u03BF \u03AE \u03C0\u03C1\u03B9\u03BD",
    headerFilterOperatorIsEmpty: "\u0395\u03AF\u03BD\u03B1\u03B9 \u03BA\u03B5\u03BD\u03CC",
    headerFilterOperatorIsNotEmpty: "\u0394\u03B5\u03BD \u03B5\u03AF\u03BD\u03B1\u03B9 \u03BA\u03B5\u03BD\u03CC",
    headerFilterOperatorIsAnyOf: "\u0395\u03AF\u03BD\u03B1\u03B9 \u03BF\u03C0\u03BF\u03B9\u03BF\u03B4\u03AE\u03C0\u03BF\u03C4\u03B5 \u03B1\u03C0\u03CC",
    "headerFilterOperator=": "\u0399\u03C3\u03BF\u03CD\u03C4\u03B1\u03B9",
    "headerFilterOperator!=": "\u0394\u03B5\u03BD \u03B9\u03C3\u03BF\u03CD\u03C4\u03B1\u03B9",
    "headerFilterOperator>": "\u039C\u03B5\u03B3\u03B1\u03BB\u03CD\u03C4\u03B5\u03C1\u03BF \u03B1\u03C0\u03CC",
    "headerFilterOperator>=": "\u039C\u03B5\u03B3\u03B1\u03BB\u03CD\u03C4\u03B5\u03C1\u03BF \u03AE \u03AF\u03C3\u03BF \u03BC\u03B5",
    "headerFilterOperator<": "\u039C\u03B9\u03BA\u03C1\u03CC\u03C4\u03B5\u03C1\u03BF \u03B1\u03C0\u03CC",
    "headerFilterOperator<=": "\u039C\u03B9\u03BA\u03C1\u03CC\u03C4\u03B5\u03C1\u03BF \u03AE \u03AF\u03C3\u03BF \u03BC\u03B5",
    // Filter values text
    filterValueAny: "\u03BF\u03C0\u03BF\u03B9\u03BF\u03B4\u03AE\u03C0\u03BF\u03C4\u03B5",
    filterValueTrue: "\u03B1\u03BB\u03B7\u03B8\u03AD\u03C2",
    filterValueFalse: "\u03C8\u03B5\u03C5\u03B4\u03AD\u03C2",
    // Column menu text
    columnMenuLabel: "\u039C\u03B5\u03BD\u03BF\u03CD",
    columnMenuShowColumns: "\u0395\u03BC\u03C6\u03AC\u03BD\u03B9\u03C3\u03B7 \u03C3\u03C4\u03B7\u03BB\u03CE\u03BD",
    columnMenuManageColumns: "\u0394\u03B9\u03B1\u03C7\u03B5\u03AF\u03C1\u03B9\u03C3\u03B7 \u03C3\u03C4\u03B7\u03BB\u03CE\u03BD",
    columnMenuFilter: "\u03A6\u03AF\u03BB\u03C4\u03C1\u03BF",
    columnMenuHideColumn: "\u0391\u03C0\u03CC\u03BA\u03C1\u03C5\u03C8\u03B7",
    columnMenuUnsort: "\u0391\u03C0\u03B5\u03BD\u03B5\u03C1\u03B3\u03BF\u03C0\u03BF\u03AF\u03B7\u03C3\u03B7 \u03C4\u03B1\u03BE\u03B9\u03BD\u03CC\u03BC\u03B7\u03C3\u03B7\u03C2",
    columnMenuSortAsc: "\u03A4\u03B1\u03BE\u03B9\u03BD\u03CC\u03BC\u03B7\u03C3\u03B7 \u03C3\u03B5 \u03B1\u03CD\u03BE\u03BF\u03C5\u03C3\u03B1 \u03C3\u03B5\u03B9\u03C1\u03AC",
    columnMenuSortDesc: "\u03A4\u03B1\u03BE\u03B9\u03BD\u03CC\u03BC\u03B7\u03C3\u03B7 \u03C3\u03B5 \u03C6\u03B8\u03AF\u03BD\u03BF\u03C5\u03C3\u03B1 \u03C3\u03B5\u03B9\u03C1\u03AC",
    // Column header text
    columnHeaderFiltersTooltipActive: (count) => count !== 1 ? `${count} \u03B5\u03BD\u03B5\u03C1\u03B3\u03AC \u03C6\u03AF\u03BB\u03C4\u03C1\u03B1` : `${count} \u03B5\u03BD\u03B5\u03C1\u03B3\u03CC \u03C6\u03AF\u03BB\u03C4\u03C1\u03BF`,
    columnHeaderFiltersLabel: "\u0395\u03BC\u03C6\u03AC\u03BD\u03B9\u03C3\u03B7 \u03C6\u03AF\u03BB\u03C4\u03C1\u03C9\u03BD",
    columnHeaderSortIconLabel: "\u03A4\u03B1\u03BE\u03B9\u03BD\u03CC\u03BC\u03B7\u03C3\u03B7",
    // Rows selected footer text
    footerRowSelected: (count) => count !== 1 ? `${count.toLocaleString()} \u03B5\u03C0\u03B9\u03BB\u03B5\u03B3\u03BC\u03AD\u03BD\u03B5\u03C2 \u03B3\u03C1\u03B1\u03BC\u03BC\u03AD\u03C2` : `${count.toLocaleString()} \u03B5\u03C0\u03B9\u03BB\u03B5\u03B3\u03BC\u03AD\u03BD\u03B7 \u03B3\u03C1\u03B1\u03BC\u03BC\u03AE`,
    // Total row amount footer text
    footerTotalRows: "\u03A3\u03CD\u03BD\u03BF\u03BB\u03BF \u0393\u03C1\u03B1\u03BC\u03BC\u03CE\u03BD:",
    // Total visible row amount footer text
    footerTotalVisibleRows: (visibleCount, totalCount) => `${visibleCount.toLocaleString()} \u03B1\u03C0\u03CC ${totalCount.toLocaleString()}`,
    // Checkbox selection text
    checkboxSelectionHeaderName: "\u0395\u03C0\u03B9\u03BB\u03BF\u03B3\u03AE \u03C0\u03BB\u03B1\u03B9\u03C3\u03AF\u03BF\u03C5 \u03B5\u03BB\u03AD\u03B3\u03C7\u03BF\u03C5",
    checkboxSelectionSelectAllRows: "\u0395\u03C0\u03B9\u03BB\u03AD\u03BE\u03C4\u03B5 \u03CC\u03BB\u03B5\u03C2 \u03C4\u03B9\u03C2 \u03C3\u03B5\u03B9\u03C1\u03AD\u03C2",
    checkboxSelectionUnselectAllRows: "\u039A\u03B1\u03C4\u03B1\u03C1\u03B3\u03AE\u03C3\u03B7 \u03B5\u03C0\u03B9\u03BB\u03BF\u03B3\u03AE\u03C2 \u03CC\u03BB\u03C9\u03BD \u03C4\u03C9\u03BD \u03C3\u03B5\u03B9\u03C1\u03CE\u03BD",
    checkboxSelectionSelectRow: "\u0395\u03C0\u03B9\u03BB\u03BF\u03B3\u03AE \u03B3\u03C1\u03B1\u03BC\u03BC\u03AE\u03C2",
    checkboxSelectionUnselectRow: "\u039A\u03B1\u03C4\u03B1\u03C1\u03B3\u03AE\u03C3\u03B7 \u03B5\u03C0\u03B9\u03BB\u03BF\u03B3\u03AE\u03C2 \u03B3\u03C1\u03B1\u03BC\u03BC\u03AE\u03C2",
    // Boolean cell text
    booleanCellTrueLabel: "\u03BD\u03B1\u03AF",
    booleanCellFalseLabel: "\u03CC\u03C7\u03B9",
    // Actions cell more text
    actionsCellMore: "\u03C0\u03B5\u03C1\u03B9\u03C3\u03C3\u03CC\u03C4\u03B5\u03C1\u03B1",
    // Column pinning text
    pinToLeft: "\u039A\u03B1\u03C1\u03C6\u03B9\u03C4\u03C3\u03CE\u03BC\u03B1 \u03C3\u03C4\u03B1 \u03B1\u03C1\u03B9\u03C3\u03C4\u03B5\u03C1\u03AC",
    pinToRight: "\u039A\u03B1\u03C1\u03C6\u03B9\u03C4\u03C3\u03CE\u03BC\u03B1 \u03C3\u03C4\u03B1 \u03B4\u03B5\u03BE\u03B9\u03AC",
    unpin: "\u039E\u03B5\u03BA\u03B1\u03C1\u03C6\u03AF\u03C4\u03C3\u03C9\u03BC\u03B1",
    // Tree Data
    treeDataGroupingHeaderName: "\u039F\u03BC\u03B1\u03B4\u03BF\u03C0\u03BF\u03AF\u03B7\u03C3\u03B7",
    treeDataExpand: "\u03B5\u03BC\u03C6\u03AC\u03BD\u03B9\u03C3\u03B7 \u03C0\u03B5\u03C1\u03B9\u03B5\u03C7\u03BF\u03BC\u03AD\u03BD\u03C9\u03BD",
    treeDataCollapse: "\u03B1\u03C0\u03CC\u03BA\u03C1\u03C5\u03C8\u03B7 \u03C0\u03B5\u03C1\u03B9\u03B5\u03C7\u03BF\u03BC\u03AD\u03BD\u03C9\u03BD",
    // Grouping columns
    groupingColumnHeaderName: "\u039F\u03BC\u03B1\u03B4\u03BF\u03C0\u03BF\u03AF\u03B7\u03C3\u03B7",
    groupColumn: (name) => `\u039F\u03BC\u03B1\u03B4\u03BF\u03C0\u03BF\u03AF\u03B7\u03C3\u03B7 \u03BA\u03B1\u03C4\u03AC ${name}`,
    unGroupColumn: (name) => `\u0394\u03B9\u03B1\u03BA\u03BF\u03C0\u03AE \u03BF\u03BC\u03B1\u03B4\u03BF\u03C0\u03BF\u03AF\u03B7\u03C3\u03B7\u03C2 \u03BA\u03B1\u03C4\u03AC ${name}`,
    // Master/detail
    detailPanelToggle: "\u0395\u03BD\u03B1\u03BB\u03BB\u03B1\u03B3\u03AE \u03C0\u03AF\u03BD\u03B1\u03BA\u03B1 \u03BB\u03B5\u03C0\u03C4\u03BF\u03BC\u03B5\u03C1\u03B5\u03B9\u03CE\u03BD",
    expandDetailPanel: "\u0391\u03BD\u03AC\u03C0\u03C4\u03C5\u03BE\u03B7",
    collapseDetailPanel: "\u03A3\u03CD\u03BC\u03C0\u03C4\u03C5\u03BE\u03B7",
    // Row reordering text
    rowReorderingHeaderName: "\u0391\u03BD\u03B1\u03B4\u03B9\u03AC\u03C4\u03B1\u03BE\u03B7 \u03B3\u03C1\u03B1\u03BC\u03BC\u03CE\u03BD",
    // Aggregation
    aggregationMenuItemHeader: "\u03A3\u03C5\u03C3\u03C3\u03C9\u03BC\u03AC\u03C4\u03C9\u03C3\u03B7",
    aggregationFunctionLabelSum: "\u03AC\u03B8\u03C1\u03BF\u03B9\u03C3\u03BC\u03B1",
    aggregationFunctionLabelAvg: "\u03BC\u03AD\u03C3\u03B7 \u03C4\u03B9\u03BC\u03AE",
    aggregationFunctionLabelMin: "\u03B5\u03BB\u03AC\u03C7\u03B9\u03C3\u03C4\u03BF",
    aggregationFunctionLabelMax: "\u03BC\u03AD\u03B3\u03B9\u03C3\u03C4\u03BF",
    aggregationFunctionLabelSize: "\u03BC\u03AD\u03B3\u03B5\u03B8\u03BF\u03C2"
  };
  var elGR2 = getGridLocalization(elGRGrid, elGR);

  // node_modules/@mui/x-data-grid/locales/enUS.js
  var enUS2 = getGridLocalization(GRID_DEFAULT_LOCALE_TEXT, enUS);

  // node_modules/@mui/x-data-grid/locales/esES.js
  var esESGrid = {
    // Root
    noRowsLabel: "Sin filas",
    noResultsOverlayLabel: "Resultados no encontrados",
    // Density selector toolbar button text
    toolbarDensity: "Densidad",
    toolbarDensityLabel: "Densidad",
    toolbarDensityCompact: "Compacta",
    toolbarDensityStandard: "Est\xE1ndar",
    toolbarDensityComfortable: "C\xF3moda",
    // Columns selector toolbar button text
    toolbarColumns: "Columnas",
    toolbarColumnsLabel: "Seleccionar columnas",
    // Filters toolbar button text
    toolbarFilters: "Filtros",
    toolbarFiltersLabel: "Mostrar filtros",
    toolbarFiltersTooltipHide: "Ocultar filtros",
    toolbarFiltersTooltipShow: "Mostrar filtros",
    toolbarFiltersTooltipActive: (count) => count > 1 ? `${count} filtros activos` : `${count} filtro activo`,
    // Quick filter toolbar field
    toolbarQuickFilterPlaceholder: "Buscar\u2026",
    toolbarQuickFilterLabel: "Buscar",
    toolbarQuickFilterDeleteIconLabel: "Limpiar",
    // Export selector toolbar button text
    toolbarExport: "Exportar",
    toolbarExportLabel: "Exportar",
    toolbarExportCSV: "Descargar como CSV",
    toolbarExportPrint: "Imprimir",
    toolbarExportExcel: "Descargar como Excel",
    // Columns panel text
    columnsPanelTextFieldLabel: "Columna de b\xFAsqueda",
    columnsPanelTextFieldPlaceholder: "T\xEDtulo de columna",
    columnsPanelDragIconLabel: "Reordenar columna",
    columnsPanelShowAllButton: "Mostrar todo",
    columnsPanelHideAllButton: "Ocultar todo",
    // Filter panel text
    filterPanelAddFilter: "Agregar filtro",
    filterPanelRemoveAll: "Remover todos",
    filterPanelDeleteIconLabel: "Borrar",
    filterPanelLogicOperator: "Operador l\xF3gico",
    filterPanelOperator: "Operadores",
    filterPanelOperatorAnd: "Y",
    filterPanelOperatorOr: "O",
    filterPanelColumns: "Columnas",
    filterPanelInputLabel: "Valor",
    filterPanelInputPlaceholder: "Valor de filtro",
    // Filter operators text
    filterOperatorContains: "contiene",
    filterOperatorEquals: "es igual",
    filterOperatorStartsWith: "comienza con",
    filterOperatorEndsWith: "termina con",
    filterOperatorIs: "es",
    filterOperatorNot: "no es",
    filterOperatorAfter: "es posterior",
    filterOperatorOnOrAfter: "es en o posterior",
    filterOperatorBefore: "es anterior",
    filterOperatorOnOrBefore: "es en o anterior",
    filterOperatorIsEmpty: "esta vac\xEDo",
    filterOperatorIsNotEmpty: "no esta vac\xEDo",
    filterOperatorIsAnyOf: "es cualquiera de",
    "filterOperator=": "=",
    "filterOperator!=": "!=",
    "filterOperator>": ">",
    "filterOperator>=": ">=",
    "filterOperator<": "<",
    "filterOperator<=": "<=",
    // Header filter operators text
    headerFilterOperatorContains: "Contiene",
    headerFilterOperatorEquals: "Es igual a",
    headerFilterOperatorStartsWith: "Comienza con",
    headerFilterOperatorEndsWith: "Termina con",
    headerFilterOperatorIs: "Es",
    headerFilterOperatorNot: "No es",
    headerFilterOperatorAfter: "Esta despu\xE9s de",
    headerFilterOperatorOnOrAfter: "Esta en o despu\xE9s de",
    headerFilterOperatorBefore: "Esta antes de",
    headerFilterOperatorOnOrBefore: "Esta en o antes de",
    headerFilterOperatorIsEmpty: "Esta vac\xEDo",
    headerFilterOperatorIsNotEmpty: "No esta vac\xEDo",
    headerFilterOperatorIsAnyOf: "Es cualquiera de",
    "headerFilterOperator=": "Es igual a",
    "headerFilterOperator!=": "Es diferente a",
    "headerFilterOperator>": "Es mayor que",
    "headerFilterOperator>=": "Es mayor o igual que",
    "headerFilterOperator<": "Es menor que",
    "headerFilterOperator<=": "Es menor o igual que",
    // Filter values text
    filterValueAny: "cualquiera",
    filterValueTrue: "verdadero",
    filterValueFalse: "falso",
    // Column menu text
    columnMenuLabel: "Men\xFA",
    columnMenuShowColumns: "Mostrar columnas",
    columnMenuManageColumns: "Administrar columnas",
    columnMenuFilter: "Filtro",
    columnMenuHideColumn: "Ocultar",
    columnMenuUnsort: "Desordenar",
    columnMenuSortAsc: "Ordenar ASC",
    columnMenuSortDesc: "Ordenar DESC",
    // Column header text
    columnHeaderFiltersTooltipActive: (count) => count > 1 ? `${count} filtros activos` : `${count} filtro activo`,
    columnHeaderFiltersLabel: "Mostrar filtros",
    columnHeaderSortIconLabel: "Ordenar",
    // Rows selected footer text
    footerRowSelected: (count) => count > 1 ? `${count.toLocaleString()} filas seleccionadas` : `${count.toLocaleString()} fila seleccionada`,
    // Total row amount footer text
    footerTotalRows: "Filas Totales:",
    // Total visible row amount footer text
    footerTotalVisibleRows: (visibleCount, totalCount) => `${visibleCount.toLocaleString()} de ${totalCount.toLocaleString()}`,
    // Checkbox selection text
    checkboxSelectionHeaderName: "Seleccionar casilla",
    checkboxSelectionSelectAllRows: "Seleccionar todas las filas",
    checkboxSelectionUnselectAllRows: "Deseleccionar todas las filas",
    checkboxSelectionSelectRow: "Seleccionar fila",
    checkboxSelectionUnselectRow: "Deseleccionar fila",
    // Boolean cell text
    booleanCellTrueLabel: "si",
    booleanCellFalseLabel: "no",
    // Actions cell more text
    actionsCellMore: "m\xE1s",
    // Column pinning text
    pinToLeft: "Anclar a la izquierda",
    pinToRight: "Anclar a la derecha",
    unpin: "Desanclar",
    // Tree Data
    treeDataGroupingHeaderName: "Grupo",
    treeDataExpand: "mostrar hijos",
    treeDataCollapse: "ocultar hijos",
    // Grouping columns
    groupingColumnHeaderName: "Grupo",
    groupColumn: (name) => `Agrupar por ${name}`,
    unGroupColumn: (name) => `No agrupar por ${name}`,
    // Master/detail
    detailPanelToggle: "Alternar detalle",
    expandDetailPanel: "Expandir",
    collapseDetailPanel: "Contraer",
    // Row reordering text
    rowReorderingHeaderName: "Reordenar filas",
    // Aggregation
    aggregationMenuItemHeader: "Agregaci\xF3n",
    aggregationFunctionLabelSum: "sum",
    aggregationFunctionLabelAvg: "avg",
    aggregationFunctionLabelMin: "min",
    aggregationFunctionLabelMax: "max",
    aggregationFunctionLabelSize: "tama\xF1o"
  };
  var esES2 = getGridLocalization(esESGrid, esES);

  // node_modules/@mui/x-data-grid/locales/faIR.js
  var faIRGrid = {
    // Root
    noRowsLabel: "\u0628\u062F\u0648\u0646 \u0633\u0637\u0631",
    noResultsOverlayLabel: "\u0646\u062A\u06CC\u062C\u0647 \u0627\u06CC \u067E\u06CC\u062F\u0627 \u0646\u0634\u062F.",
    // Density selector toolbar button text
    toolbarDensity: "\u062A\u0631\u0627\u06A9\u0645",
    toolbarDensityLabel: "\u062A\u0631\u0627\u06A9\u0645",
    toolbarDensityCompact: "\u0641\u0634\u0631\u062F\u0647",
    toolbarDensityStandard: "\u0627\u0633\u062A\u0627\u0646\u062F\u0627\u0631\u062F",
    toolbarDensityComfortable: "\u0631\u0627\u062D\u062A",
    // Columns selector toolbar button text
    toolbarColumns: "\u0633\u062A\u0648\u0646\u200C\u0647\u0627",
    toolbarColumnsLabel: "\u0633\u062A\u0648\u0646\u200C\u0647\u0627 \u0631\u0627 \u0627\u0646\u062A\u062E\u0627\u0628 \u06A9\u0646\u06CC\u062F",
    // Filters toolbar button text
    toolbarFilters: "\u0641\u06CC\u0644\u062A\u0631\u0647\u0627",
    toolbarFiltersLabel: "\u0646\u0645\u0627\u06CC\u0634 \u0641\u06CC\u0644\u062A\u0631\u0647\u0627",
    toolbarFiltersTooltipHide: "\u0645\u062E\u0641\u06CC \u06A9\u0631\u062F\u0646 \u0641\u06CC\u0644\u062A\u0631\u0647\u0627",
    toolbarFiltersTooltipShow: "\u0646\u0645\u0627\u06CC\u0634 \u0641\u06CC\u0644\u062A\u0631\u0647\u0627",
    toolbarFiltersTooltipActive: (count) => count !== 1 ? `${count} \u0641\u06CC\u0644\u062A\u0631\u0647\u0627\u06CC \u0641\u0639\u0627\u0644` : `${count} \u0641\u06CC\u0644\u062A\u0631 \u0641\u0639\u0627\u0644`,
    // Quick filter toolbar field
    toolbarQuickFilterPlaceholder: "\u062C\u0633\u062A\u062C\u0648...",
    toolbarQuickFilterLabel: "\u062C\u0633\u062A\u062C\u0648",
    toolbarQuickFilterDeleteIconLabel: "\u062D\u0630\u0641",
    // Export selector toolbar button text
    toolbarExport: "\u062E\u0631\u0648\u062C\u06CC",
    toolbarExportLabel: "\u062E\u0631\u0648\u062C\u06CC",
    toolbarExportCSV: "\u062F\u0627\u0646\u0644\u0648\u062F \u0628\u0647 \u0635\u0648\u0631\u062A CSV",
    toolbarExportPrint: "\u0686\u0627\u067E",
    toolbarExportExcel: "\u062F\u0627\u0646\u0644\u0648\u062F \u0628\u0647 \u0635\u0648\u0631\u062A \u0627\u06A9\u0633\u0644",
    // Columns panel text
    columnsPanelTextFieldLabel: "\u067E\u06CC\u062F\u0627\u06A9\u0631\u062F\u0646 \u0633\u062A\u0648\u0646",
    columnsPanelTextFieldPlaceholder: "\u0639\u0646\u0648\u0627\u0646 \u0633\u062A\u0648\u0646",
    columnsPanelDragIconLabel: "\u062C\u0627\u200C\u0628\u0647\u200C\u062C\u0627\u06CC\u06CC \u0633\u062A\u0648\u0646",
    columnsPanelShowAllButton: "\u0646\u0645\u0627\u06CC\u0634 \u0647\u0645\u0647",
    columnsPanelHideAllButton: "\u0645\u062E\u0641\u06CC \u0647\u0645\u0647",
    // Filter panel text
    filterPanelAddFilter: "\u0627\u0641\u0632\u0648\u062F\u0646 \u0641\u06CC\u0644\u062A\u0631",
    filterPanelRemoveAll: "\u062D\u0630\u0641 \u0647\u0645\u0647",
    filterPanelDeleteIconLabel: "\u062D\u0630\u0641",
    filterPanelLogicOperator: "\u0639\u0645\u0644\u06AF\u0631 \u0645\u0646\u0637\u0642\u06CC",
    filterPanelOperator: "\u0639\u0645\u0644\u06AF\u0631\u0647\u0627",
    filterPanelOperatorAnd: "\u0648",
    filterPanelOperatorOr: "\u06CC\u0627",
    filterPanelColumns: "\u0633\u062A\u0648\u0646\u200C\u0647\u0627",
    filterPanelInputLabel: "\u0645\u0642\u062F\u0627\u0631",
    filterPanelInputPlaceholder: "\u0641\u06CC\u0644\u062A\u0631 \u0645\u0642\u062F\u0627\u0631",
    // Filter operators text
    filterOperatorContains: "\u0634\u0627\u0645\u0644",
    filterOperatorEquals: "\u0645\u0633\u0627\u0648\u06CC",
    filterOperatorStartsWith: "\u0634\u0631\u0648\u0639 \u0628\u0627",
    filterOperatorEndsWith: "\u067E\u0627\u06CC\u0627\u0646 \u0628\u0627",
    filterOperatorIs: "\u0647\u0633\u062A",
    filterOperatorNot: "\u0646\u06CC\u0633\u062A",
    filterOperatorAfter: "\u0628\u0639\u062F \u0627\u0632",
    filterOperatorOnOrAfter: "\u0645\u0639\u0627\u062F\u0644 \u06CC\u0627 \u0628\u0639\u062F\u0634",
    filterOperatorBefore: "\u0642\u0628\u0644\u0634",
    filterOperatorOnOrBefore: "\u0645\u0639\u0627\u062F\u0644 \u06CC\u0627 \u0642\u0628\u0644\u0634",
    filterOperatorIsEmpty: "\u062E\u0627\u0644\u06CC \u0627\u0633\u062A",
    filterOperatorIsNotEmpty: "\u062E\u0627\u0644\u06CC \u0646\u06CC\u0633\u062A",
    filterOperatorIsAnyOf: "\u0647\u0631 \u06CC\u06A9 \u0627\u0632",
    "filterOperator=": "=",
    "filterOperator!=": "!=",
    "filterOperator>": ">",
    "filterOperator>=": ">=",
    "filterOperator<": "<",
    "filterOperator<=": "<=",
    // Header filter operators text
    headerFilterOperatorContains: "\u0634\u0627\u0645\u0644",
    headerFilterOperatorEquals: "\u0645\u0633\u0627\u0648\u06CC",
    headerFilterOperatorStartsWith: "\u0634\u0631\u0648\u0639 \u0628\u0627",
    headerFilterOperatorEndsWith: "\u067E\u0627\u06CC\u0627\u0646 \u0628\u0627",
    headerFilterOperatorIs: "\u0647\u0633\u062A",
    headerFilterOperatorNot: "\u0646\u06CC\u0633\u062A",
    headerFilterOperatorAfter: "\u0628\u0639\u062F \u0627\u0632",
    headerFilterOperatorOnOrAfter: "\u0645\u0639\u0627\u062F\u0644 \u06CC\u0627 \u0628\u0639\u062F \u0627\u0632",
    headerFilterOperatorBefore: "\u0642\u0628\u0644 \u0627\u0632",
    headerFilterOperatorOnOrBefore: "\u0645\u0639\u0627\u062F\u0644 \u06CC\u0627 \u0642\u0628\u0644 \u0627\u0632",
    headerFilterOperatorIsEmpty: "\u062E\u0627\u0644\u06CC \u0627\u0633\u062A",
    headerFilterOperatorIsNotEmpty: "\u062E\u0627\u0644\u06CC \u0646\u06CC\u0633\u062A",
    headerFilterOperatorIsAnyOf: "\u0647\u0631 \u06CC\u06A9 \u0627\u0632",
    "headerFilterOperator=": "\u0645\u0633\u0627\u0648\u06CC",
    "headerFilterOperator!=": "\u0646\u0627\u0645\u0633\u0627\u0648\u06CC",
    "headerFilterOperator>": "\u0628\u0632\u0631\u06AF\u062A\u0631",
    "headerFilterOperator>=": "\u0628\u0632\u0631\u06AF\u062A\u0631 \u06CC\u0627 \u0645\u0633\u0627\u0648\u06CC",
    "headerFilterOperator<": "\u06A9\u0648\u0686\u06A9\u062A\u0631",
    "headerFilterOperator<=": "\u06A9\u0648\u0686\u06A9\u062A\u0631 \u06CC\u0627 \u0645\u0633\u0627\u0648\u06CC",
    // Filter values text
    filterValueAny: "\u0647\u0631\u0686\u06CC\u0632\u06CC",
    filterValueTrue: "\u0635\u062D\u06CC\u062D",
    filterValueFalse: "\u063A\u0644\u0637",
    // Column menu text
    columnMenuLabel: "\u0641\u0647\u0631\u0633\u062A",
    columnMenuShowColumns: "\u0646\u0645\u0627\u06CC\u0634 \u0633\u062A\u0648\u0646\u200C\u0647\u0627",
    columnMenuManageColumns: "\u0645\u062F\u06CC\u0631\u06CC\u062A \u0633\u062A\u0648\u0646\u200C\u0647\u0627",
    columnMenuFilter: "\u0641\u06CC\u0644\u062A\u0631",
    columnMenuHideColumn: "\u0645\u062E\u0641\u06CC",
    columnMenuUnsort: "\u0646\u0627\u0645\u0631\u062A\u0628\u200C\u06A9\u0631\u062F\u0646",
    columnMenuSortAsc: "\u0645\u0631\u062A\u0628\u200C\u06A9\u0631\u062F\u0646 \u0635\u0639\u0648\u062F\u06CC",
    columnMenuSortDesc: "\u0645\u0631\u062A\u0628\u200C\u06A9\u0631\u062F\u0646 \u0646\u0632\u0648\u0644\u06CC",
    // Column header text
    columnHeaderFiltersTooltipActive: (count) => count !== 1 ? `${count} \u0641\u06CC\u0644\u062A\u0631\u200C\u0647\u0627\u06CC \u0641\u0639\u0627\u0644` : `${count} \u0641\u06CC\u0644\u062A\u0631 \u0641\u0639\u0627\u0644`,
    columnHeaderFiltersLabel: "\u0646\u0645\u0627\u06CC\u0634 \u0641\u06CC\u0644\u062A\u0631\u0647\u0627",
    columnHeaderSortIconLabel: "\u0645\u0631\u062A\u0628\u200C\u06A9\u0631\u062F\u0646",
    // Rows selected footer text
    footerRowSelected: (count) => count !== 1 ? `${count.toLocaleString()} \u0633\u0637\u0631\u0647\u0627\u06CC \u0627\u0646\u062A\u062E\u0627\u0628 \u0634\u062F\u0647` : `${count.toLocaleString()} \u0633\u0637\u0631 \u0627\u0646\u062A\u062E\u0627\u0628 \u0634\u062F\u0647`,
    // Total row amount footer text
    footerTotalRows: "\u0645\u062C\u0645\u0648\u0639 \u0633\u0637\u0631\u0647\u0627:",
    // Total visible row amount footer text
    footerTotalVisibleRows: (visibleCount, totalCount) => `${visibleCount.toLocaleString()} \u0627\u0632 ${totalCount.toLocaleString()}`,
    // Checkbox selection text
    checkboxSelectionHeaderName: "\u0686\u06A9\u200C\u0628\u0627\u06A9\u0633 \u0627\u0646\u062A\u062E\u0627\u0628",
    checkboxSelectionSelectAllRows: "\u0627\u0646\u062A\u062E\u0627\u0628 \u0647\u0645\u0647\u200C\u06CC \u0631\u062F\u06CC\u0641\u200C\u0647\u0627",
    checkboxSelectionUnselectAllRows: "\u0644\u063A\u0648 \u0627\u0646\u062A\u062E\u0627\u0628 \u0647\u0645\u0647\u200C\u06CC \u0631\u062F\u06CC\u0641\u200C\u0647\u0627",
    checkboxSelectionSelectRow: "\u0627\u0646\u062A\u062E\u0627\u0628 \u0631\u062F\u06CC\u0641",
    checkboxSelectionUnselectRow: "\u0644\u063A\u0648 \u0627\u0646\u062A\u062E\u0627\u0628 \u0631\u062F\u06CC\u0641",
    // Boolean cell text
    booleanCellTrueLabel: "\u0635\u062D\u06CC\u062D",
    booleanCellFalseLabel: "\u063A\u0644\u0637",
    // Actions cell more text
    actionsCellMore: "\u0628\u06CC\u0634\u062A\u0631",
    // Column pinning text
    pinToLeft: "\u0633\u0646\u062C\u0627\u0642 \u06A9\u0631\u062F\u0646 \u0628\u0647 \u0686\u067E",
    pinToRight: "\u0633\u0646\u062C\u0627\u0642 \u06A9\u0631\u062F\u0646 \u0628\u0647 \u0631\u0627\u0633\u062A",
    unpin: "\u0628\u0631\u062F\u0627\u0634\u062A\u0646 \u0633\u0646\u062C\u0627\u0642",
    // Tree Data
    treeDataGroupingHeaderName: "\u06AF\u0631\u0648\u0647\u200C\u0628\u0646\u062F\u06CC",
    treeDataExpand: "\u0646\u0645\u0627\u06CC\u0634 \u0641\u0631\u0632\u0646\u062F\u0627\u0646",
    treeDataCollapse: "\u067E\u0646\u0647\u0627\u0646\u200C\u0633\u0627\u0632\u06CC \u0641\u0631\u0632\u0646\u062F\u0627\u0646",
    // Grouping columns
    groupingColumnHeaderName: "\u06AF\u0631\u0648\u0647\u200C\u0628\u0646\u062F\u06CC",
    groupColumn: (name) => `\u06AF\u0631\u0648\u0647\u200C\u0628\u0646\u062F\u06CC \u0628\u0631\u0627\u0633\u0627\u0633 ${name}`,
    unGroupColumn: (name) => `\u0644\u063A\u0648 \u06AF\u0631\u0648\u0647\u200C\u0628\u0646\u062F\u06CC \u0628\u0631\u0627\u0633\u0627\u0633 ${name}`,
    // Master/detail
    detailPanelToggle: "\u067E\u0646\u0644 \u062C\u0632\u0626\u06CC\u0627\u062A",
    expandDetailPanel: "\u0628\u0627\u0632\u06A9\u0631\u062F\u0646 \u067E\u0646\u0644 \u062C\u0632\u0626\u06CC\u0627\u062A",
    collapseDetailPanel: "\u0628\u0633\u062A\u0646 \u067E\u0646\u0644 \u062C\u0632\u0626\u06CC\u0627\u062A",
    // Row reordering text
    rowReorderingHeaderName: "\u062A\u0631\u062A\u06CC\u0628 \u0645\u062C\u062F\u062F \u0633\u0637\u0631",
    // Aggregation
    aggregationMenuItemHeader: "\u062A\u062C\u0645\u06CC\u0639",
    aggregationFunctionLabelSum: "\u062C\u0645\u0639",
    aggregationFunctionLabelAvg: "\u0645\u06CC\u0627\u0646\u06AF\u06CC\u0646",
    aggregationFunctionLabelMin: "\u062D\u062F\u0627\u0642\u0644",
    aggregationFunctionLabelMax: "\u062D\u062F\u0627\u06A9\u062B\u0631",
    aggregationFunctionLabelSize: "\u0627\u0646\u062F\u0627\u0632\u0647"
  };
  var faIR2 = getGridLocalization(faIRGrid, faIR);

  // node_modules/@mui/x-data-grid/locales/fiFI.js
  var fiFIGrid = {
    // Root
    noRowsLabel: "Ei rivej\xE4",
    noResultsOverlayLabel: "Ei tuloksia.",
    // Density selector toolbar button text
    toolbarDensity: "Tiiveys",
    toolbarDensityLabel: "Tiiveys",
    toolbarDensityCompact: "Kompakti",
    toolbarDensityStandard: "Vakio",
    toolbarDensityComfortable: "Mukava",
    // Columns selector toolbar button text
    toolbarColumns: "Sarakkeet",
    toolbarColumnsLabel: "Valitse sarakkeet",
    // Filters toolbar button text
    toolbarFilters: "Suodattimet",
    toolbarFiltersLabel: "N\xE4yt\xE4 suodattimet",
    toolbarFiltersTooltipHide: "Piilota suodattimet",
    toolbarFiltersTooltipShow: "N\xE4yt\xE4 suodattimet",
    toolbarFiltersTooltipActive: (count) => count !== 1 ? `${count} aktiivista suodatinta` : `${count} aktiivinen suodatin`,
    // Quick filter toolbar field
    toolbarQuickFilterPlaceholder: "Hae\u2026",
    toolbarQuickFilterLabel: "Hae",
    toolbarQuickFilterDeleteIconLabel: "Tyhjenn\xE4",
    // Export selector toolbar button text
    toolbarExport: "Vie",
    toolbarExportLabel: "Vie",
    toolbarExportCSV: "Lataa CSV-muodossa",
    toolbarExportPrint: "Tulosta",
    toolbarExportExcel: "Lataa Excel-muodossa",
    // Columns panel text
    columnsPanelTextFieldLabel: "Etsi sarake",
    columnsPanelTextFieldPlaceholder: "Sarakkeen otsikko",
    columnsPanelDragIconLabel: "J\xE4rjest\xE4 sarake uudelleen",
    columnsPanelShowAllButton: "N\xE4yt\xE4 kaikki",
    columnsPanelHideAllButton: "Piilota kaikki",
    // Filter panel text
    filterPanelAddFilter: "Lis\xE4\xE4 suodatin",
    filterPanelRemoveAll: "Poista kaikki",
    filterPanelDeleteIconLabel: "Poista",
    filterPanelLogicOperator: "Logiikkaoperaattori",
    filterPanelOperator: "Operaattorit",
    filterPanelOperatorAnd: "Ja",
    filterPanelOperatorOr: "Tai",
    filterPanelColumns: "Sarakkeet",
    filterPanelInputLabel: "Arvo",
    filterPanelInputPlaceholder: "Suodattimen arvo",
    // Filter operators text
    filterOperatorContains: "sis\xE4lt\xE4\xE4",
    filterOperatorEquals: "on yht\xE4 suuri kuin",
    filterOperatorStartsWith: "alkaa",
    filterOperatorEndsWith: "p\xE4\xE4ttyy",
    filterOperatorIs: "on",
    filterOperatorNot: "ei ole",
    filterOperatorAfter: "on j\xE4lkeen",
    filterOperatorOnOrAfter: "on sama tai j\xE4lkeen",
    filterOperatorBefore: "on ennen",
    filterOperatorOnOrBefore: "on sama tai ennen",
    filterOperatorIsEmpty: "on tyhj\xE4",
    filterOperatorIsNotEmpty: "ei ole tyhj\xE4",
    filterOperatorIsAnyOf: "on mik\xE4 tahansa seuraavista",
    "filterOperator=": "=",
    "filterOperator!=": "!=",
    "filterOperator>": ">",
    "filterOperator>=": ">=",
    "filterOperator<": "<",
    "filterOperator<=": "<=",
    // Header filter operators text
    headerFilterOperatorContains: "Sis\xE4lt\xE4\xE4",
    headerFilterOperatorEquals: "On yht\xE4 suuri kuin",
    headerFilterOperatorStartsWith: "Alkaa",
    headerFilterOperatorEndsWith: "P\xE4\xE4ttyy",
    headerFilterOperatorIs: "On",
    headerFilterOperatorNot: "Ei ole",
    headerFilterOperatorAfter: "On j\xE4lkeen",
    headerFilterOperatorOnOrAfter: "On sama tai j\xE4lkeen",
    headerFilterOperatorBefore: "On ennen",
    headerFilterOperatorOnOrBefore: "On sama tai ennen",
    headerFilterOperatorIsEmpty: "On tyhj\xE4",
    headerFilterOperatorIsNotEmpty: "Ei ole tyhj\xE4",
    headerFilterOperatorIsAnyOf: "On mik\xE4 tahansa seuraavista",
    "headerFilterOperator=": "On yht\xE4 suuri kuin",
    "headerFilterOperator!=": "Ei ole yht\xE4 suuri kuin",
    "headerFilterOperator>": "Enemm\xE4n kuin",
    "headerFilterOperator>=": "Enemm\xE4n tai yht\xE4 paljon kuin",
    "headerFilterOperator<": "V\xE4hemm\xE4n kuin",
    "headerFilterOperator<=": "V\xE4hemm\xE4n tai yht\xE4 paljon kuin",
    // Filter values text
    filterValueAny: "mik\xE4 tahansa",
    filterValueTrue: "tosi",
    filterValueFalse: "ep\xE4tosi",
    // Column menu text
    columnMenuLabel: "Valikko",
    columnMenuShowColumns: "N\xE4yt\xE4 sarakkeet",
    columnMenuManageColumns: "Hallitse sarakkeita",
    columnMenuFilter: "Suodata",
    columnMenuHideColumn: "Piilota",
    columnMenuUnsort: "Poista j\xE4rjestys",
    columnMenuSortAsc: "J\xE4rjest\xE4 nousevasti",
    columnMenuSortDesc: "J\xE4rjest\xE4 laskevasti",
    // Column header text
    columnHeaderFiltersTooltipActive: (count) => count !== 1 ? `${count} aktiivista suodatinta` : `${count} aktiivinen suodatin`,
    columnHeaderFiltersLabel: "N\xE4yt\xE4 suodattimet",
    columnHeaderSortIconLabel: "J\xE4rjest\xE4",
    // Rows selected footer text
    footerRowSelected: (count) => count !== 1 ? `${count.toLocaleString()} rivi\xE4 valittu` : `${count.toLocaleString()} rivi valittu`,
    // Total row amount footer text
    footerTotalRows: "Rivej\xE4 yhteens\xE4:",
    // Total visible row amount footer text
    footerTotalVisibleRows: (visibleCount, totalCount) => `${visibleCount.toLocaleString()} / ${totalCount.toLocaleString()}`,
    // Checkbox selection text
    checkboxSelectionHeaderName: "Valintaruutu",
    checkboxSelectionSelectAllRows: "Valitse kaikki rivit",
    checkboxSelectionUnselectAllRows: "Poista kaikkien rivien valinta",
    checkboxSelectionSelectRow: "Valitse rivi",
    checkboxSelectionUnselectRow: "Poista rivin valinta",
    // Boolean cell text
    booleanCellTrueLabel: "tosi",
    booleanCellFalseLabel: "ep\xE4tosi",
    // Actions cell more text
    actionsCellMore: "lis\xE4\xE4",
    // Column pinning text
    pinToLeft: "Kiinnit\xE4 vasemmalle",
    pinToRight: "Kiinnit\xE4 oikealle",
    unpin: "Irrota kiinnitys",
    // Tree Data
    treeDataGroupingHeaderName: "Ryhm\xE4",
    treeDataExpand: "Laajenna",
    treeDataCollapse: "Supista",
    // Grouping columns
    groupingColumnHeaderName: "Ryhm\xE4",
    groupColumn: (name) => `Ryhmittelyperuste ${name}`,
    unGroupColumn: (name) => `Poista ryhmittelyperuste ${name}`,
    // Master/detail
    detailPanelToggle: "Yksityiskohtapaneelin vaihto",
    expandDetailPanel: "Laajenna",
    collapseDetailPanel: "Tiivist\xE4",
    // Row reordering text
    rowReorderingHeaderName: "Rivien uudelleenj\xE4rjestely",
    // Aggregation
    aggregationMenuItemHeader: "Koostaminen",
    aggregationFunctionLabelSum: "summa",
    aggregationFunctionLabelAvg: "ka.",
    aggregationFunctionLabelMin: "min.",
    aggregationFunctionLabelMax: "maks.",
    aggregationFunctionLabelSize: "koko"
  };
  var fiFI2 = getGridLocalization(fiFIGrid, fiFI);

  // node_modules/@mui/x-data-grid/locales/frFR.js
  var frFRGrid = {
    // Root
    noRowsLabel: "Pas de r\xE9sultats",
    noResultsOverlayLabel: "Aucun r\xE9sultat.",
    // Density selector toolbar button text
    toolbarDensity: "Densit\xE9",
    toolbarDensityLabel: "Densit\xE9",
    toolbarDensityCompact: "Compacte",
    toolbarDensityStandard: "Standard",
    toolbarDensityComfortable: "Confortable",
    // Columns selector toolbar button text
    toolbarColumns: "Colonnes",
    toolbarColumnsLabel: "Choisir les colonnes",
    // Filters toolbar button text
    toolbarFilters: "Filtres",
    toolbarFiltersLabel: "Afficher les filtres",
    toolbarFiltersTooltipHide: "Cacher les filtres",
    toolbarFiltersTooltipShow: "Afficher les filtres",
    toolbarFiltersTooltipActive: (count) => count > 1 ? `${count} filtres actifs` : `${count} filtre actif`,
    // Quick filter toolbar field
    toolbarQuickFilterPlaceholder: "Rechercher\u2026",
    toolbarQuickFilterLabel: "Recherche",
    toolbarQuickFilterDeleteIconLabel: "Supprimer",
    // Export selector toolbar button text
    toolbarExport: "Exporter",
    toolbarExportLabel: "Exporter",
    toolbarExportCSV: "T\xE9l\xE9charger en CSV",
    toolbarExportPrint: "Imprimer",
    toolbarExportExcel: "T\xE9l\xE9charger pour Excel",
    // Columns panel text
    columnsPanelTextFieldLabel: "Chercher une colonne",
    columnsPanelTextFieldPlaceholder: "Titre de la colonne",
    columnsPanelDragIconLabel: "R\xE9organiser la colonne",
    columnsPanelShowAllButton: "Tout afficher",
    columnsPanelHideAllButton: "Tout cacher",
    // Filter panel text
    filterPanelAddFilter: "Ajouter un filtre",
    filterPanelRemoveAll: "Tout supprimer",
    filterPanelDeleteIconLabel: "Supprimer",
    filterPanelLogicOperator: "Op\xE9rateur logique",
    filterPanelOperator: "Op\xE9rateur",
    filterPanelOperatorAnd: "Et",
    filterPanelOperatorOr: "Ou",
    filterPanelColumns: "Colonne",
    filterPanelInputLabel: "Valeur",
    filterPanelInputPlaceholder: "Filtrer la valeur",
    // Filter operators text
    filterOperatorContains: "contient",
    filterOperatorEquals: "est \xE9gal \xE0",
    filterOperatorStartsWith: "commence par",
    filterOperatorEndsWith: "se termine par",
    filterOperatorIs: "est",
    filterOperatorNot: "n'est pas",
    filterOperatorAfter: "post\xE9rieur",
    filterOperatorOnOrAfter: "\xE9gal ou post\xE9rieur",
    filterOperatorBefore: "ant\xE9rieur",
    filterOperatorOnOrBefore: "\xE9gal ou ant\xE9rieur",
    filterOperatorIsEmpty: "est vide",
    filterOperatorIsNotEmpty: "n'est pas vide",
    filterOperatorIsAnyOf: "fait partie de",
    "filterOperator=": "=",
    "filterOperator!=": "!=",
    "filterOperator>": ">",
    "filterOperator>=": ">=",
    "filterOperator<": "<",
    "filterOperator<=": "<=",
    // Header filter operators text
    headerFilterOperatorContains: "Contient",
    headerFilterOperatorEquals: "Est \xE9gal \xE0",
    headerFilterOperatorStartsWith: "Commence par",
    headerFilterOperatorEndsWith: "Se termine par",
    headerFilterOperatorIs: "Est",
    headerFilterOperatorNot: "N'est pas",
    headerFilterOperatorAfter: "Post\xE9rieur",
    headerFilterOperatorOnOrAfter: "\xC9gal ou post\xE9rieur",
    headerFilterOperatorBefore: "Ant\xE9rieur",
    headerFilterOperatorOnOrBefore: "\xC9gal ou ant\xE9rieur",
    headerFilterOperatorIsEmpty: "Est vide",
    headerFilterOperatorIsNotEmpty: "N'est pas vide",
    headerFilterOperatorIsAnyOf: "Fait partie de",
    "headerFilterOperator=": "Est \xE9gal \xE0",
    "headerFilterOperator!=": "N'est pas \xE9gal \xE0",
    "headerFilterOperator>": "Est sup\xE9rieur \xE0",
    "headerFilterOperator>=": "Est sup\xE9rieur ou \xE9gal \xE0",
    "headerFilterOperator<": "Est inf\xE9rieur \xE0",
    "headerFilterOperator<=": "Est inf\xE9rieur ou \xE9gal \xE0",
    // Filter values text
    filterValueAny: "tous",
    filterValueTrue: "vrai",
    filterValueFalse: "faux",
    // Column menu text
    columnMenuLabel: "Menu",
    columnMenuShowColumns: "Afficher les colonnes",
    columnMenuManageColumns: "G\xE9rer les colonnes",
    columnMenuFilter: "Filtrer",
    columnMenuHideColumn: "Cacher",
    columnMenuUnsort: "Annuler le tri",
    columnMenuSortAsc: "Tri ascendant",
    columnMenuSortDesc: "Tri descendant",
    // Column header text
    columnHeaderFiltersTooltipActive: (count) => count > 1 ? `${count} filtres actifs` : `${count} filtre actif`,
    columnHeaderFiltersLabel: "Afficher les filtres",
    columnHeaderSortIconLabel: "Trier",
    // Rows selected footer text
    footerRowSelected: (count) => count > 1 ? `${count.toLocaleString()} lignes s\xE9lectionn\xE9es` : `${count.toLocaleString()} ligne s\xE9lectionn\xE9e`,
    // Total row amount footer text
    footerTotalRows: "Total de lignes :",
    // Total visible row amount footer text
    footerTotalVisibleRows: (visibleCount, totalCount) => `${visibleCount.toLocaleString()} sur ${totalCount.toLocaleString()}`,
    // Checkbox selection text
    checkboxSelectionHeaderName: "S\xE9lection",
    checkboxSelectionSelectAllRows: "S\xE9lectionner toutes les lignes",
    checkboxSelectionUnselectAllRows: "D\xE9s\xE9lectionner toutes les lignes",
    checkboxSelectionSelectRow: "S\xE9lectionner la ligne",
    checkboxSelectionUnselectRow: "D\xE9s\xE9lectionner la ligne",
    // Boolean cell text
    booleanCellTrueLabel: "vrai",
    booleanCellFalseLabel: "faux",
    // Actions cell more text
    actionsCellMore: "Plus",
    // Column pinning text
    pinToLeft: "\xC9pingler \xE0 gauche",
    pinToRight: "\xC9pingler \xE0 droite",
    unpin: "D\xE9s\xE9pingler",
    // Tree Data
    treeDataGroupingHeaderName: "Groupe",
    treeDataExpand: "afficher les enfants",
    treeDataCollapse: "masquer les enfants",
    // Grouping columns
    groupingColumnHeaderName: "Groupe",
    groupColumn: (name) => `Grouper par ${name}`,
    unGroupColumn: (name) => `Arr\xEAter de grouper par ${name}`,
    // Master/detail
    detailPanelToggle: "Afficher/masquer les d\xE9tails",
    expandDetailPanel: "Afficher",
    collapseDetailPanel: "Masquer",
    // Row reordering text
    rowReorderingHeaderName: "Positionnement des lignes",
    // Aggregation
    aggregationMenuItemHeader: "Agr\xE9gation",
    aggregationFunctionLabelSum: "Somme",
    aggregationFunctionLabelAvg: "Moyenne",
    aggregationFunctionLabelMin: "Minimum",
    aggregationFunctionLabelMax: "Maximum",
    aggregationFunctionLabelSize: "Nombre d'\xE9l\xE9ments"
  };
  var frFR2 = getGridLocalization(frFRGrid, frFR);

  // node_modules/@mui/x-data-grid/locales/heIL.js
  var heILGrid = {
    // Root
    noRowsLabel: "\u05D0\u05D9\u05DF \u05E9\u05D5\u05E8\u05D5\u05EA",
    noResultsOverlayLabel: "\u05DC\u05D0 \u05E0\u05DE\u05E6\u05D0\u05D5 \u05EA\u05D5\u05E6\u05D0\u05D5\u05EA.",
    // Density selector toolbar button text
    toolbarDensity: "\u05E6\u05E4\u05D9\u05E4\u05D5\u05EA",
    toolbarDensityLabel: "\u05E6\u05E4\u05D9\u05E4\u05D5\u05EA",
    toolbarDensityCompact: "\u05D3\u05D7\u05D5\u05E1\u05D4",
    toolbarDensityStandard: "\u05E8\u05D2\u05D9\u05DC\u05D4",
    toolbarDensityComfortable: "\u05D0\u05D5\u05D5\u05E8\u05D9\u05E8\u05D9\u05EA",
    // Columns selector toolbar button text
    toolbarColumns: "\u05E2\u05DE\u05D5\u05D3\u05D5\u05EA",
    toolbarColumnsLabel: "\u05D1\u05D7\u05E8 \u05E2\u05DE\u05D5\u05D3\u05D5\u05EA",
    // Filters toolbar button text
    toolbarFilters: "\u05E1\u05D9\u05E0\u05D5\u05DF",
    toolbarFiltersLabel: "\u05D4\u05E6\u05D2 \u05DE\u05E1\u05E0\u05E0\u05D9\u05DD",
    toolbarFiltersTooltipHide: "\u05D4\u05E1\u05EA\u05E8 \u05DE\u05E1\u05E0\u05E0\u05D9\u05DD",
    toolbarFiltersTooltipShow: "\u05D4\u05E6\u05D2 \u05DE\u05E1\u05E0\u05E0\u05D9\u05DD",
    toolbarFiltersTooltipActive: (count) => count !== 1 ? `${count} \u05DE\u05E1\u05E0\u05E0\u05D9\u05DD \u05E4\u05E2\u05D9\u05DC\u05D9\u05DD` : `\u05DE\u05E1\u05E0\u05DF \u05D0\u05D7\u05D3 \u05E4\u05E2\u05D9\u05DC`,
    // Quick filter toolbar field
    toolbarQuickFilterPlaceholder: "\u05D7\u05D9\u05E4\u05D5\u05E9\u2026",
    toolbarQuickFilterLabel: "\u05D7\u05D9\u05E4\u05D5\u05E9",
    toolbarQuickFilterDeleteIconLabel: "\u05E0\u05D9\u05E7\u05D5\u05D9",
    // Export selector toolbar button text
    toolbarExport: "\u05D9\u05D9\u05E6\u05D5\u05D0",
    toolbarExportLabel: "\u05D9\u05D9\u05E6\u05D5\u05D0",
    toolbarExportCSV: "\u05D9\u05D9\u05E6\u05D5\u05D0 \u05DC- CSV",
    toolbarExportPrint: "\u05D4\u05D3\u05E4\u05E1\u05D4",
    toolbarExportExcel: "\u05D9\u05D9\u05E6\u05D5\u05D0 \u05DC- Excel",
    // Columns panel text
    columnsPanelTextFieldLabel: "\u05D7\u05E4\u05E9 \u05E2\u05DE\u05D5\u05D3\u05D4",
    columnsPanelTextFieldPlaceholder: "\u05DB\u05D5\u05EA\u05E8\u05EA \u05E2\u05DE\u05D5\u05D3\u05D4",
    columnsPanelDragIconLabel: "\u05E1\u05D3\u05E8 \u05E2\u05DE\u05D5\u05D3\u05D5\u05EA \u05DE\u05D7\u05D3\u05E9",
    columnsPanelShowAllButton: "\u05D4\u05E6\u05D2 \u05D4\u05DB\u05DC",
    columnsPanelHideAllButton: "\u05D4\u05E1\u05EA\u05E8 \u05D4\u05DB\u05DC",
    // Filter panel text
    filterPanelAddFilter: "\u05D4\u05D5\u05E1\u05E3 \u05DE\u05E1\u05E0\u05DF",
    filterPanelRemoveAll: "\u05DE\u05D7\u05E7 \u05D4\u05DB\u05DC",
    filterPanelDeleteIconLabel: "\u05DE\u05D7\u05E7",
    filterPanelLogicOperator: "\u05D0\u05D5\u05E4\u05E8\u05D8\u05D5\u05E8 \u05DC\u05D5\u05D2\u05D9",
    filterPanelOperator: "\u05D0\u05D5\u05E4\u05E8\u05D8\u05D5\u05E8",
    filterPanelOperatorAnd: "\u05D5\u05D2\u05DD",
    filterPanelOperatorOr: "\u05D0\u05D5",
    filterPanelColumns: "\u05E2\u05DE\u05D5\u05D3\u05D5\u05EA",
    filterPanelInputLabel: "\u05E2\u05E8\u05DA",
    filterPanelInputPlaceholder: "\u05E2\u05E8\u05DA \u05DE\u05E1\u05E0\u05DF",
    // Filter operators text
    filterOperatorContains: "\u05DE\u05DB\u05D9\u05DC",
    filterOperatorEquals: "\u05E9\u05D5\u05D5\u05D4",
    filterOperatorStartsWith: "\u05DE\u05EA\u05D7\u05D9\u05DC \u05D1-",
    filterOperatorEndsWith: "\u05E0\u05D2\u05DE\u05E8 \u05D1-",
    filterOperatorIs: "\u05D4\u05D9\u05E0\u05D5",
    filterOperatorNot: "\u05D0\u05D9\u05E0\u05D5",
    filterOperatorAfter: "\u05D0\u05D7\u05E8\u05D9",
    filterOperatorOnOrAfter: "\u05D1- \u05D0\u05D5 \u05D0\u05D7\u05E8\u05D9",
    filterOperatorBefore: "\u05DC\u05E4\u05E0\u05D9",
    filterOperatorOnOrBefore: "\u05D1- \u05D0\u05D5 \u05DC\u05E4\u05E0\u05D9",
    filterOperatorIsEmpty: "\u05E8\u05D9\u05E7",
    filterOperatorIsNotEmpty: "\u05D0\u05D9\u05E0\u05D5 \u05E8\u05D9\u05E7",
    filterOperatorIsAnyOf: "\u05D4\u05D5\u05D0 \u05D0\u05D7\u05D3 \u05DE-",
    "filterOperator=": "=",
    "filterOperator!=": "!=",
    "filterOperator>": ">",
    "filterOperator>=": ">=",
    "filterOperator<": "<",
    "filterOperator<=": "<=",
    // Header filter operators text
    headerFilterOperatorContains: "\u05DE\u05DB\u05D9\u05DC",
    headerFilterOperatorEquals: "\u05E9\u05D5\u05D5\u05D4",
    headerFilterOperatorStartsWith: "\u05DE\u05EA\u05D7\u05D9\u05DC \u05D1-",
    headerFilterOperatorEndsWith: "\u05E0\u05D2\u05DE\u05E8 \u05D1-",
    headerFilterOperatorIs: "\u05D4\u05D9\u05E0\u05D5",
    headerFilterOperatorNot: "\u05D0\u05D9\u05E0\u05D5",
    headerFilterOperatorAfter: "\u05D0\u05D7\u05E8\u05D9",
    headerFilterOperatorOnOrAfter: "\u05D1- \u05D0\u05D5 \u05D0\u05D7\u05E8\u05D9",
    headerFilterOperatorBefore: "\u05DC\u05E4\u05E0\u05D9",
    headerFilterOperatorOnOrBefore: "\u05D1- \u05D0\u05D5 \u05DC\u05E4\u05E0\u05D9",
    headerFilterOperatorIsEmpty: "\u05E8\u05D9\u05E7",
    headerFilterOperatorIsNotEmpty: "\u05D0\u05D9\u05E0\u05D5 \u05E8\u05D9\u05E7",
    headerFilterOperatorIsAnyOf: "\u05D4\u05D5\u05D0 \u05D0\u05D7\u05D3 \u05DE-",
    "headerFilterOperator=": "\u05E9\u05D5\u05D5\u05D4",
    "headerFilterOperator!=": "\u05D0\u05D9\u05E0\u05D5 \u05E9\u05D5\u05D5\u05D4",
    "headerFilterOperator>": "\u05D2\u05D3\u05D5\u05DC \u05DE-",
    "headerFilterOperator>=": "\u05D2\u05D3\u05D5\u05DC \u05E9\u05D5\u05D5\u05D4 \u05DC-",
    "headerFilterOperator<": "\u05E7\u05D8\u05DF \u05DE-",
    "headerFilterOperator<=": "\u05E7\u05D8\u05DF \u05E9\u05D5\u05D5\u05D4 \u05DC-",
    // Filter values text
    filterValueAny: "\u05DB\u05DC \u05E2\u05E8\u05DA",
    filterValueTrue: "\u05DB\u05DF",
    filterValueFalse: "\u05DC\u05D0",
    // Column menu text
    columnMenuLabel: "\u05EA\u05E4\u05E8\u05D9\u05D8",
    columnMenuShowColumns: "\u05D4\u05E6\u05D2 \u05E2\u05DE\u05D5\u05D3\u05D5\u05EA",
    columnMenuManageColumns: "\u05E0\u05D4\u05DC \u05E2\u05DE\u05D5\u05D3\u05D5\u05EA",
    columnMenuFilter: "\u05E1\u05E0\u05DF",
    columnMenuHideColumn: "\u05D4\u05E1\u05EA\u05E8",
    columnMenuUnsort: "\u05D1\u05D8\u05DC \u05DE\u05D9\u05D5\u05DF",
    columnMenuSortAsc: "\u05DE\u05D9\u05D9\u05DF \u05D1\u05E1\u05D3\u05E8 \u05E2\u05D5\u05DC\u05D4",
    columnMenuSortDesc: "\u05DE\u05D9\u05D9\u05DF \u05D1\u05E1\u05D3\u05E8 \u05D9\u05D5\u05E8\u05D3",
    // Column header text
    columnHeaderFiltersTooltipActive: (count) => count !== 1 ? `${count} \u05DE\u05E1\u05E0\u05E0\u05D9\u05DD \u05E4\u05E2\u05D9\u05DC\u05D9\u05DD` : `\u05DE\u05E1\u05E0\u05DF \u05D0\u05D7\u05D3 \u05E4\u05E2\u05D9\u05DC`,
    columnHeaderFiltersLabel: "\u05D4\u05E6\u05D2 \u05DE\u05E1\u05E0\u05E0\u05D9\u05DD",
    columnHeaderSortIconLabel: "\u05DE\u05D9\u05D9\u05DF",
    // Rows selected footer text
    footerRowSelected: (count) => count !== 1 ? `${count.toLocaleString()} \u05E9\u05D5\u05E8\u05D5\u05EA \u05E0\u05D1\u05D7\u05E8\u05D5` : `\u05E9\u05D5\u05E8\u05D4 \u05D0\u05D7\u05EA \u05E0\u05D1\u05D7\u05E8\u05D4`,
    // Total row amount footer text
    footerTotalRows: "\u05E1\u05DA \u05D4\u05DB\u05DC:",
    // Total visible row amount footer text
    footerTotalVisibleRows: (visibleCount, totalCount) => `${visibleCount.toLocaleString()} \u05DE\u05EA\u05D5\u05DA ${totalCount.toLocaleString()}`,
    // Checkbox selection text
    checkboxSelectionHeaderName: "\u05D1\u05D7\u05D9\u05E8\u05D4",
    checkboxSelectionSelectAllRows: "\u05D1\u05D7\u05E8 \u05D4\u05DB\u05DC",
    checkboxSelectionUnselectAllRows: "\u05D1\u05D8\u05DC \u05D4\u05DB\u05DC",
    checkboxSelectionSelectRow: "\u05D1\u05D7\u05E8 \u05E9\u05D5\u05E8\u05D4",
    checkboxSelectionUnselectRow: "\u05D1\u05D8\u05DC \u05D1\u05D7\u05D9\u05E8\u05EA \u05E9\u05D5\u05E8\u05D4",
    // Boolean cell text
    booleanCellTrueLabel: "\u05DB\u05DF",
    booleanCellFalseLabel: "\u05DC\u05D0",
    // Actions cell more text
    actionsCellMore: "\u05E2\u05D5\u05D3",
    // Column pinning text
    pinToLeft: "\u05E0\u05E2\u05E5 \u05DE\u05E9\u05DE\u05D0\u05DC",
    pinToRight: "\u05E0\u05E2\u05E5 \u05DE\u05D9\u05DE\u05D9\u05DF",
    unpin: "\u05D4\u05E1\u05E8 \u05E0\u05E2\u05D9\u05E6\u05D4",
    // Tree Data
    treeDataGroupingHeaderName: "\u05E7\u05D1\u05D5\u05E6\u05D4",
    treeDataExpand: "\u05D4\u05E8\u05D7\u05D1",
    treeDataCollapse: "\u05DB\u05D5\u05D5\u05E5",
    // Grouping columns
    groupingColumnHeaderName: "\u05E7\u05D1\u05D5\u05E6\u05D4",
    groupColumn: (name) => `\u05E7\u05D1\u05E5 \u05DC\u05E4\u05D9 ${name}`,
    unGroupColumn: (name) => `\u05D4\u05E4\u05E1\u05E7 \u05DC\u05E7\u05D1\u05E5 \u05DC\u05E4\u05D9 ${name}`,
    // Master/detail
    detailPanelToggle: "\u05D4\u05E6\u05D2/\u05D4\u05E1\u05EA\u05E8 \u05E4\u05E8\u05D8\u05D9\u05DD",
    expandDetailPanel: "\u05D4\u05E8\u05D7\u05D1",
    collapseDetailPanel: "\u05DB\u05D5\u05D5\u05E5",
    // Row reordering text
    rowReorderingHeaderName: "\u05E1\u05D9\u05D3\u05D5\u05E8 \u05E9\u05D5\u05E8\u05D5\u05EA",
    // Aggregation
    aggregationMenuItemHeader: "\u05E6\u05D1\u05D9\u05E8\u05D4",
    aggregationFunctionLabelSum: "\u05E1\u05DB\u05D5\u05DD",
    aggregationFunctionLabelAvg: "\u05DE\u05DE\u05D5\u05E6\u05E2",
    aggregationFunctionLabelMin: "\u05DE\u05D9\u05E0\u05D9\u05DE\u05D5\u05DD",
    aggregationFunctionLabelMax: "\u05DE\u05E7\u05E1\u05D9\u05DE\u05D5\u05DD",
    aggregationFunctionLabelSize: "\u05D2\u05D5\u05D3\u05DC"
  };
  var heIL2 = getGridLocalization(heILGrid, heIL);

  // node_modules/@mui/x-data-grid/locales/huHU.js
  var huHUGrid = {
    // Root
    noRowsLabel: "Nincsenek sorok",
    noResultsOverlayLabel: "Nincs tal\xE1lat.",
    // Density selector toolbar button text
    toolbarDensity: "Sormagass\xE1g",
    toolbarDensityLabel: "Sormagass\xE1g",
    toolbarDensityCompact: "Kompakt",
    toolbarDensityStandard: "Norm\xE1l",
    toolbarDensityComfortable: "K\xE9nyelmes",
    // Columns selector toolbar button text
    toolbarColumns: "Oszlopok",
    toolbarColumnsLabel: "Oszlopok kiv\xE1laszt\xE1sa",
    // Filters toolbar button text
    toolbarFilters: "Sz\u0171r\u0151k",
    toolbarFiltersLabel: "Sz\u0171r\u0151k megjelen\xEDt\xE9se",
    toolbarFiltersTooltipHide: "Sz\u0171r\u0151k elrejt\xE9se",
    toolbarFiltersTooltipShow: "Sz\u0171r\u0151k megjelen\xEDt\xE9se",
    toolbarFiltersTooltipActive: (count) => `${count} akt\xEDv sz\u0171r\u0151`,
    // Quick filter toolbar field
    toolbarQuickFilterPlaceholder: "Keres\xE9s\u2026",
    toolbarQuickFilterLabel: "Keres\xE9s",
    toolbarQuickFilterDeleteIconLabel: "T\xF6rl\xE9s",
    // Export selector toolbar button text
    toolbarExport: "Export\xE1l\xE1s",
    toolbarExportLabel: "Export\xE1l\xE1s",
    toolbarExportCSV: "Ment\xE9s CSV f\xE1jlk\xE9nt",
    toolbarExportPrint: "Nyomtat\xE1s",
    toolbarExportExcel: "Ment\xE9s Excel f\xE1jlk\xE9nt",
    // Columns panel text
    columnsPanelTextFieldLabel: "Oszlop keres\xE9se",
    columnsPanelTextFieldPlaceholder: "Oszlop neve",
    columnsPanelDragIconLabel: "Oszlop \xE1trendez\xE9se",
    columnsPanelShowAllButton: "\xD6sszes megjelen\xEDt\xE9se",
    columnsPanelHideAllButton: "\xD6sszes elrejt\xE9se",
    // Filter panel text
    filterPanelAddFilter: "Sz\u0171r\u0151 hozz\xE1ad\xE1sa",
    filterPanelRemoveAll: "\xD6sszes t\xF6rl\xE9se",
    filterPanelDeleteIconLabel: "T\xF6rl\xE9s",
    filterPanelLogicOperator: "Logikai oper\xE1tor",
    filterPanelOperator: "Oper\xE1torok",
    filterPanelOperatorAnd: "\xC9s",
    filterPanelOperatorOr: "Vagy",
    filterPanelColumns: "Oszlopok",
    filterPanelInputLabel: "\xC9rt\xE9k",
    filterPanelInputPlaceholder: "\xC9rt\xE9k sz\u0171r\xE9se",
    // Filter operators text
    filterOperatorContains: "tartalmazza:",
    filterOperatorEquals: "egyenl\u0151 ezzel:",
    filterOperatorStartsWith: "ezzel kezd\u0151dik:",
    filterOperatorEndsWith: "ezzel v\xE9gz\u0151dik:",
    filterOperatorIs: "a k\xF6vetkez\u0151:",
    filterOperatorNot: "nem a k\xF6vetkez\u0151:",
    filterOperatorAfter: "ezut\xE1ni:",
    filterOperatorOnOrAfter: "ekkori vagy ezut\xE1ni:",
    filterOperatorBefore: "ezel\u0151tti:",
    filterOperatorOnOrBefore: "ekkori vagy ezel\u0151tti:",
    filterOperatorIsEmpty: "\xFCres",
    filterOperatorIsNotEmpty: "nem \xFCres",
    filterOperatorIsAnyOf: "a k\xF6vetkez\u0151k egyike:",
    "filterOperator=": "=",
    "filterOperator!=": "!=",
    "filterOperator>": ">",
    "filterOperator>=": ">=",
    "filterOperator<": "<",
    "filterOperator<=": "<=",
    // Header filter operators text
    headerFilterOperatorContains: "Tartalmazza:",
    headerFilterOperatorEquals: "Egyenl\u0151 ezzel:",
    headerFilterOperatorStartsWith: "Ezzel kezd\u0151dik:",
    headerFilterOperatorEndsWith: "Ezzel v\xE9gz\u0151dik:",
    // headerFilterOperatorIs: 'Is',
    // headerFilterOperatorNot: 'Is not',
    headerFilterOperatorAfter: "Ezut\xE1ni:",
    headerFilterOperatorOnOrAfter: "Ekkozori vagy ezut\xE1ni:",
    headerFilterOperatorBefore: "Ezel\u0151tti:",
    headerFilterOperatorOnOrBefore: "Ekkori vagy ezel\u0151tti:",
    headerFilterOperatorIsEmpty: "\xDCres",
    headerFilterOperatorIsNotEmpty: "Nem \xFCres",
    headerFilterOperatorIsAnyOf: "A k\xF6vetkez\u0151k egyike:",
    "headerFilterOperator=": "Egyenl\u0151",
    "headerFilterOperator!=": "Nem egyenl\u0151",
    "headerFilterOperator>": "Nagyobb mint",
    "headerFilterOperator>=": "Nagyobb vagy egyenl\u0151",
    "headerFilterOperator<": "Kissebb mint",
    "headerFilterOperator<=": "Kissebb vagy enygenl\u0151",
    // Filter values text
    filterValueAny: "b\xE1rmilyen",
    filterValueTrue: "igaz",
    filterValueFalse: "hamis",
    // Column menu text
    columnMenuLabel: "Men\xFC",
    columnMenuShowColumns: "Oszlopok megjelen\xEDt\xE9se",
    columnMenuManageColumns: "Oszlopok kezel\xE9se",
    columnMenuFilter: "Sz\u0171r\u0151k",
    columnMenuHideColumn: "Elrejt\xE9s",
    columnMenuUnsort: "Sorrend vissza\xE1ll\xEDt\xE1sa",
    columnMenuSortAsc: "N\xF6vekv\u0151 sorrendbe",
    columnMenuSortDesc: "Cs\xF6kken\u0151 sorrendbe",
    // Column header text
    columnHeaderFiltersTooltipActive: (count) => `${count} akt\xEDv sz\u0171r\u0151`,
    columnHeaderFiltersLabel: "Sz\u0171r\u0151k megjelen\xEDt\xE9se",
    columnHeaderSortIconLabel: "\xC1trendez\xE9s",
    // Rows selected footer text
    footerRowSelected: (count) => `${count.toLocaleString()} sor kiv\xE1lasztva`,
    // Total row amount footer text
    footerTotalRows: "\xD6sszesen:",
    // Total visible row amount footer text
    footerTotalVisibleRows: (visibleCount, totalCount) => `${visibleCount.toLocaleString()} (\xF6sszesen: ${totalCount.toLocaleString()})`,
    // Checkbox selection text
    checkboxSelectionHeaderName: "Jel\xF6l\u0151n\xE9gyzetes kijel\xF6l\xE9s",
    checkboxSelectionSelectAllRows: "Minden sor kijel\xF6l\xE9se",
    checkboxSelectionUnselectAllRows: "Minden sor kijel\xF6l\xE9s\xE9nek t\xF6rl\xE9se",
    checkboxSelectionSelectRow: "Sor kijel\xF6l\xE9se",
    checkboxSelectionUnselectRow: "Sor kijel\xF6l\xE9s\xE9nek t\xF6rl\xE9se",
    // Boolean cell text
    booleanCellTrueLabel: "igen",
    booleanCellFalseLabel: "nem",
    // Actions cell more text
    actionsCellMore: "tov\xE1bbi",
    // Column pinning text
    pinToLeft: "R\xF6gz\xEDt\xE9s balra",
    pinToRight: "R\xF6gz\xEDt\xE9s jobbra",
    unpin: "R\xF6gz\xEDt\xE9s t\xF6rl\xE9se",
    // Tree Data
    treeDataGroupingHeaderName: "Csoport",
    treeDataExpand: "gyermekek megjelen\xEDt\xE9se",
    treeDataCollapse: "gyermekek elrejt\xE9se",
    // Grouping columns
    groupingColumnHeaderName: "Csoportos\xEDt\xE1s",
    groupColumn: (name) => `Csoportos\xEDt\xE1s ${name} szerint`,
    unGroupColumn: (name) => `${name} szerinti csoportos\xEDt\xE1s t\xF6rl\xE9se`,
    // Master/detail
    detailPanelToggle: "R\xE9szletek panel v\xE1lt\xE1sa",
    expandDetailPanel: "Kibont\xE1s",
    collapseDetailPanel: "\xD6sszecsuk\xE1s",
    // Row reordering text
    rowReorderingHeaderName: "Sorok \xFAjrarendez\xE9se",
    // Aggregation
    aggregationMenuItemHeader: "\xD6sszes\xEDt\xE9s",
    aggregationFunctionLabelSum: "\xD6sszeg",
    aggregationFunctionLabelAvg: "\xC1tlag",
    aggregationFunctionLabelMin: "Minimum",
    aggregationFunctionLabelMax: "Maximum",
    aggregationFunctionLabelSize: "Darabsz\xE1m"
  };
  var huHU2 = getGridLocalization(huHUGrid, huHU);

  // node_modules/@mui/x-data-grid/locales/itIT.js
  var itITGrid = {
    // Root
    noRowsLabel: "Nessun record",
    noResultsOverlayLabel: "Nessun record trovato.",
    // Density selector toolbar button text
    toolbarDensity: "Densit\xE0",
    toolbarDensityLabel: "Densit\xE0",
    toolbarDensityCompact: "Compatta",
    toolbarDensityStandard: "Standard",
    toolbarDensityComfortable: "Comoda",
    // Columns selector toolbar button text
    toolbarColumns: "Colonne",
    toolbarColumnsLabel: "Seleziona le colonne",
    // Filters toolbar button text
    toolbarFilters: "Filtri",
    toolbarFiltersLabel: "Mostra i filtri",
    toolbarFiltersTooltipHide: "Nascondi i filtri",
    toolbarFiltersTooltipShow: "Mostra i filtri",
    toolbarFiltersTooltipActive: (count) => count > 1 ? `${count} filtri attivi` : `${count} filtro attivo`,
    // Quick filter toolbar field
    toolbarQuickFilterPlaceholder: "Cerca\u2026",
    toolbarQuickFilterLabel: "Cerca",
    toolbarQuickFilterDeleteIconLabel: "Resetta",
    // Export selector toolbar button text
    toolbarExport: "Esporta",
    toolbarExportLabel: "Esporta",
    toolbarExportCSV: "Esporta in CSV",
    toolbarExportPrint: "Stampa",
    toolbarExportExcel: "Scarica come Excel",
    // Columns panel text
    columnsPanelTextFieldLabel: "Cerca colonna",
    columnsPanelTextFieldPlaceholder: "Titolo della colonna",
    columnsPanelDragIconLabel: "Riordina la colonna",
    columnsPanelShowAllButton: "Mostra tutto",
    columnsPanelHideAllButton: "Nascondi tutto",
    // Filter panel text
    filterPanelAddFilter: "Aggiungi un filtro",
    filterPanelRemoveAll: "Rimuovi filtri",
    filterPanelDeleteIconLabel: "Rimuovi",
    filterPanelLogicOperator: "Operatore logico",
    filterPanelOperator: "Operatori",
    filterPanelOperatorAnd: "E (and)",
    filterPanelOperatorOr: "O (or)",
    filterPanelColumns: "Colonne",
    filterPanelInputLabel: "Valore",
    filterPanelInputPlaceholder: "Filtra il valore",
    // Filter operators text
    filterOperatorContains: "contiene",
    filterOperatorEquals: "uguale a",
    filterOperatorStartsWith: "comincia per",
    filterOperatorEndsWith: "termina per",
    filterOperatorIs: "uguale a",
    filterOperatorNot: "diversa da",
    filterOperatorAfter: "dopo il",
    filterOperatorOnOrAfter: "a partire dal",
    filterOperatorBefore: "prima del",
    filterOperatorOnOrBefore: "fino al",
    filterOperatorIsEmpty: "\xE8 vuoto",
    filterOperatorIsNotEmpty: "non \xE8 vuoto",
    filterOperatorIsAnyOf: "\xE8 uno tra",
    "filterOperator=": "=",
    "filterOperator!=": "!=",
    "filterOperator>": ">",
    "filterOperator>=": ">=",
    "filterOperator<": "<",
    "filterOperator<=": "<=",
    // Header filter operators text
    headerFilterOperatorContains: "Contiene",
    headerFilterOperatorEquals: "uguale a",
    headerFilterOperatorStartsWith: "comincia per",
    headerFilterOperatorEndsWith: "termina per",
    headerFilterOperatorIs: "uguale a",
    headerFilterOperatorNot: "diversa da",
    headerFilterOperatorAfter: "dopo il",
    headerFilterOperatorOnOrAfter: "a partire dal",
    headerFilterOperatorBefore: "prima del",
    headerFilterOperatorOnOrBefore: "fino al",
    headerFilterOperatorIsEmpty: "\xE8 vuoto",
    headerFilterOperatorIsNotEmpty: "non \xE8 vuoto",
    headerFilterOperatorIsAnyOf: "\xE8 uno tra",
    "headerFilterOperator=": "uguale a",
    "headerFilterOperator!=": "diverso da",
    "headerFilterOperator>": "maggiore di",
    "headerFilterOperator>=": "maggiore o uguale a",
    "headerFilterOperator<": "minore di",
    "headerFilterOperator<=": "minore o uguale a",
    // Filter values text
    filterValueAny: "qualunque",
    filterValueTrue: "vero",
    filterValueFalse: "falso",
    // Column menu text
    columnMenuLabel: "Menu",
    columnMenuShowColumns: "Mostra le colonne",
    columnMenuManageColumns: "Gestisci colonne",
    columnMenuFilter: "Filtra",
    columnMenuHideColumn: "Nascondi",
    columnMenuUnsort: "Annulla l'ordinamento",
    columnMenuSortAsc: "Ordinamento crescente",
    columnMenuSortDesc: "Ordinamento decrescente",
    // Column header text
    columnHeaderFiltersTooltipActive: (count) => count > 1 ? `${count} filtri attivi` : `${count} filtro attivo`,
    columnHeaderFiltersLabel: "Mostra i filtri",
    columnHeaderSortIconLabel: "Ordina",
    // Rows selected footer text
    footerRowSelected: (count) => count > 1 ? `${count.toLocaleString()} record selezionati` : `${count.toLocaleString()} record selezionato`,
    // Total row amount footer text
    footerTotalRows: "Record totali:",
    // Total visible row amount footer text
    footerTotalVisibleRows: (visibleCount, totalCount) => `${visibleCount.toLocaleString()} di ${totalCount.toLocaleString()}`,
    // Checkbox selection text
    checkboxSelectionHeaderName: "Seleziona",
    checkboxSelectionSelectAllRows: "Seleziona tutte le righe",
    checkboxSelectionUnselectAllRows: "Deseleziona tutte le righe",
    checkboxSelectionSelectRow: "Seleziona riga",
    checkboxSelectionUnselectRow: "Deseleziona riga",
    // Boolean cell text
    booleanCellTrueLabel: "vero",
    booleanCellFalseLabel: "falso",
    // Actions cell more text
    actionsCellMore: "pi\xF9",
    // Column pinning text
    pinToLeft: "Blocca a sinistra",
    pinToRight: "Blocca a destra",
    unpin: "Sblocca",
    // Tree Data
    treeDataGroupingHeaderName: "Gruppo",
    treeDataExpand: "mostra figli",
    treeDataCollapse: "nascondi figli",
    // Grouping columns
    groupingColumnHeaderName: "Gruppo",
    groupColumn: (name) => `Raggruppa per ${name}`,
    unGroupColumn: (name) => `Annulla raggruppamento per ${name}`,
    // Master/detail
    detailPanelToggle: "Abilita pannello dettagli",
    expandDetailPanel: "Espandi",
    collapseDetailPanel: "Comprimi",
    // Row reordering text
    rowReorderingHeaderName: "Riordinamento righe",
    // Aggregation
    aggregationMenuItemHeader: "aggregazione",
    aggregationFunctionLabelSum: "somma",
    aggregationFunctionLabelAvg: "media",
    aggregationFunctionLabelMin: "minimo",
    aggregationFunctionLabelMax: "massimo",
    aggregationFunctionLabelSize: "numero di elementi"
  };
  var itIT2 = getGridLocalization(itITGrid, itIT);

  // node_modules/@mui/x-data-grid/locales/jaJP.js
  var jaJPGrid = {
    // Root
    noRowsLabel: "\u884C\u304C\u3042\u308A\u307E\u305B\u3093\u3002",
    noResultsOverlayLabel: "\u7D50\u679C\u304C\u3042\u308A\u307E\u305B\u3093\u3002",
    // Density selector toolbar button text
    toolbarDensity: "\u884C\u9593\u9694",
    toolbarDensityLabel: "\u884C\u9593\u9694",
    toolbarDensityCompact: "\u30B3\u30F3\u30D1\u30AF\u30C8",
    toolbarDensityStandard: "\u6A19\u6E96",
    toolbarDensityComfortable: "\u5E83\u3081",
    // Columns selector toolbar button text
    toolbarColumns: "\u5217\u4E00\u89A7",
    toolbarColumnsLabel: "\u5217\u9078\u629E",
    // Filters toolbar button text
    toolbarFilters: "\u30D5\u30A3\u30EB\u30BF\u30FC",
    toolbarFiltersLabel: "\u30D5\u30A3\u30EB\u30BF\u30FC\u8868\u793A",
    toolbarFiltersTooltipHide: "\u30D5\u30A3\u30EB\u30BF\u30FC\u975E\u8868\u793A",
    toolbarFiltersTooltipShow: "\u30D5\u30A3\u30EB\u30BF\u30FC\u8868\u793A",
    toolbarFiltersTooltipActive: (count) => `${count}\u4EF6\u306E\u30D5\u30A3\u30EB\u30BF\u30FC\u3092\u9069\u7528\u4E2D`,
    // Quick filter toolbar field
    toolbarQuickFilterPlaceholder: "\u691C\u7D22\u2026",
    toolbarQuickFilterLabel: "\u691C\u7D22",
    toolbarQuickFilterDeleteIconLabel: "\u30AF\u30EA\u30A2",
    // Export selector toolbar button text
    toolbarExport: "\u30A8\u30AF\u30B9\u30DD\u30FC\u30C8",
    toolbarExportLabel: "\u30A8\u30AF\u30B9\u30DD\u30FC\u30C8",
    toolbarExportCSV: "CSV\u30C0\u30A6\u30F3\u30ED\u30FC\u30C9",
    toolbarExportPrint: "\u5370\u5237",
    toolbarExportExcel: "Excel\u30C0\u30A6\u30F3\u30ED\u30FC\u30C9",
    // Columns panel text
    columnsPanelTextFieldLabel: "\u5217\u691C\u7D22",
    columnsPanelTextFieldPlaceholder: "\u691C\u7D22\u30AF\u30A8\u30EA\u3092\u5165\u529B\u2026",
    columnsPanelDragIconLabel: "\u5217\u4E26\u3079\u66FF\u3048",
    columnsPanelShowAllButton: "\u3059\u3079\u3066\u8868\u793A",
    columnsPanelHideAllButton: "\u3059\u3079\u3066\u975E\u8868\u793A",
    // Filter panel text
    filterPanelAddFilter: "\u30D5\u30A3\u30EB\u30BF\u30FC\u8FFD\u52A0",
    filterPanelRemoveAll: "\u3059\u3079\u3066\u524A\u9664",
    filterPanelDeleteIconLabel: "\u524A\u9664",
    filterPanelLogicOperator: "\u8AD6\u7406\u6F14\u7B97\u5B50",
    filterPanelOperator: "\u6F14\u7B97\u5B50",
    filterPanelOperatorAnd: "And",
    filterPanelOperatorOr: "Or",
    filterPanelColumns: "\u5217",
    filterPanelInputLabel: "\u5024",
    filterPanelInputPlaceholder: "\u5024\u3092\u5165\u529B\u2026",
    // Filter operators text
    filterOperatorContains: "...\u3092\u542B\u3080",
    filterOperatorEquals: "...\u306B\u7B49\u3057\u3044",
    filterOperatorStartsWith: "...\u3067\u59CB\u307E\u308B",
    filterOperatorEndsWith: "...\u3067\u7D42\u308F\u308B",
    filterOperatorIs: "...\u3067\u3042\u308B",
    filterOperatorNot: "...\u3067\u306A\u3044",
    filterOperatorAfter: "...\u3088\u308A\u5F8C\u308D",
    filterOperatorOnOrAfter: "...\u4EE5\u964D",
    filterOperatorBefore: "...\u3088\u308A\u524D",
    filterOperatorOnOrBefore: "...\u4EE5\u524D",
    filterOperatorIsEmpty: "...\u7A7A\u3067\u3042\u308B",
    filterOperatorIsNotEmpty: "...\u7A7A\u3067\u306A\u3044",
    filterOperatorIsAnyOf: "...\u306E\u3044\u305A\u308C\u304B",
    "filterOperator=": "=",
    "filterOperator!=": "!=",
    "filterOperator>": ">",
    "filterOperator>=": ">=",
    "filterOperator<": "<",
    "filterOperator<=": "<=",
    // Header filter operators text
    headerFilterOperatorContains: "\u542B\u3080",
    headerFilterOperatorEquals: "\u7B49\u3057\u3044",
    headerFilterOperatorStartsWith: "\u3067\u59CB\u307E\u308B",
    headerFilterOperatorEndsWith: "\u3067\u7D42\u308F\u308B",
    headerFilterOperatorIs: "\u3067\u3042\u308B",
    headerFilterOperatorNot: "\u3067\u306F\u306A\u3044",
    headerFilterOperatorAfter: "...\u3088\u308A\u5F8C\u308D",
    headerFilterOperatorOnOrAfter: "...\u4EE5\u964D",
    headerFilterOperatorBefore: "...\u3088\u308A\u524D",
    headerFilterOperatorOnOrBefore: "...\u4EE5\u524D",
    headerFilterOperatorIsEmpty: "\u7A7A\u767D",
    headerFilterOperatorIsNotEmpty: "\u7A7A\u767D\u3067\u306F\u306A\u3044",
    headerFilterOperatorIsAnyOf: "\u3044\u305A\u308C\u304B",
    "headerFilterOperator=": "\u7B49\u3057\u3044",
    "headerFilterOperator!=": "\u7B49\u3057\u304F\u306A\u3044",
    "headerFilterOperator>": "\u3088\u308A\u5927\u304D\u3044",
    "headerFilterOperator>=": "\u4EE5\u4E0A",
    "headerFilterOperator<": "\u672A\u6E80",
    "headerFilterOperator<=": "\u4EE5\u4E0B",
    // Filter values text
    filterValueAny: "\u3044\u305A\u308C\u304B",
    filterValueTrue: "\u771F",
    filterValueFalse: "\u507D",
    // Column menu text
    columnMenuLabel: "\u30E1\u30CB\u30E5\u30FC",
    columnMenuShowColumns: "\u5217\u8868\u793A",
    columnMenuManageColumns: "\u5217\u7BA1\u7406",
    columnMenuFilter: "\u30D5\u30A3\u30EB\u30BF\u30FC",
    columnMenuHideColumn: "\u5217\u975E\u8868\u793A",
    columnMenuUnsort: "\u30BD\u30FC\u30C8\u89E3\u9664",
    columnMenuSortAsc: "\u6607\u9806\u30BD\u30FC\u30C8",
    columnMenuSortDesc: "\u964D\u9806\u30BD\u30FC\u30C8",
    // Column header text
    columnHeaderFiltersTooltipActive: (count) => `${count}\u4EF6\u306E\u30D5\u30A3\u30EB\u30BF\u30FC\u3092\u9069\u7528\u4E2D`,
    columnHeaderFiltersLabel: "\u30D5\u30A3\u30EB\u30BF\u30FC\u8868\u793A",
    columnHeaderSortIconLabel: "\u30BD\u30FC\u30C8",
    // Rows selected footer text
    footerRowSelected: (count) => `${count}\u884C\u3092\u9078\u629E\u4E2D`,
    // Total row amount footer text
    footerTotalRows: "\u7DCF\u884C\u6570:",
    // Total visible row amount footer text
    footerTotalVisibleRows: (visibleCount, totalCount) => `${visibleCount.toLocaleString()} / ${totalCount.toLocaleString()}`,
    // Checkbox selection text
    checkboxSelectionHeaderName: "\u30C1\u30A7\u30C3\u30AF\u30DC\u30C3\u30AF\u30B9",
    checkboxSelectionSelectAllRows: "\u3059\u3079\u3066\u306E\u884C\u3092\u9078\u629E",
    checkboxSelectionUnselectAllRows: "\u3059\u3079\u3066\u306E\u884C\u9078\u629E\u3092\u89E3\u9664",
    checkboxSelectionSelectRow: "\u884C\u3092\u9078\u629E",
    checkboxSelectionUnselectRow: "\u884C\u9078\u629E\u3092\u89E3\u9664",
    // Boolean cell text
    booleanCellTrueLabel: "\u771F",
    booleanCellFalseLabel: "\u507D",
    // Actions cell more text
    actionsCellMore: "\u3082\u3063\u3068\u898B\u308B",
    // Column pinning text
    pinToLeft: "\u5DE6\u5074\u306B\u56FA\u5B9A",
    pinToRight: "\u53F3\u5074\u306B\u56FA\u5B9A",
    unpin: "\u56FA\u5B9A\u89E3\u9664",
    // Tree Data
    treeDataGroupingHeaderName: "\u30B0\u30EB\u30FC\u30D7",
    treeDataExpand: "\u5C55\u958B",
    treeDataCollapse: "\u6298\u308A\u305F\u305F\u307F",
    // Grouping columns
    groupingColumnHeaderName: "\u30B0\u30EB\u30FC\u30D7",
    groupColumn: (name) => `${name}\u3067\u30B0\u30EB\u30FC\u30D7\u5316`,
    unGroupColumn: (name) => `${name}\u306E\u30B0\u30EB\u30FC\u30D7\u3092\u89E3\u9664`,
    // Master/detail
    detailPanelToggle: "\u8A73\u7D30\u30D1\u30CD\u30EB\u306E\u5207\u308A\u66FF\u3048",
    expandDetailPanel: "\u5C55\u958B",
    collapseDetailPanel: "\u6298\u308A\u305F\u305F\u307F",
    // Row reordering text
    rowReorderingHeaderName: "\u884C\u4E26\u3073\u66FF\u3048",
    // Aggregation
    aggregationMenuItemHeader: "\u5408\u8A08",
    aggregationFunctionLabelSum: "\u548C",
    aggregationFunctionLabelAvg: "\u5E73\u5747",
    aggregationFunctionLabelMin: "\u6700\u5C0F\u5024",
    aggregationFunctionLabelMax: "\u6700\u5927\u5024",
    aggregationFunctionLabelSize: "\u30B5\u30A4\u30BA"
  };
  var jaJP2 = getGridLocalization(jaJPGrid, jaJP);

  // node_modules/@mui/x-data-grid/locales/koKR.js
  var koKRGrid = {
    // Root
    noRowsLabel: "\uD589\uC774 \uC5C6\uC2B5\uB2C8\uB2E4.",
    noResultsOverlayLabel: "\uACB0\uACFC\uAC12\uC774 \uC5C6\uC2B5\uB2C8\uB2E4.",
    // Density selector toolbar button text
    toolbarDensity: "\uD589 \uAC04\uACA9",
    toolbarDensityLabel: "\uD589 \uAC04\uACA9",
    toolbarDensityCompact: "\uC881\uAC8C",
    toolbarDensityStandard: "\uAE30\uBCF8",
    toolbarDensityComfortable: "\uB113\uAC8C",
    // Columns selector toolbar button text
    toolbarColumns: "\uC5F4 \uBAA9\uB85D",
    toolbarColumnsLabel: "\uC5F4 \uC120\uD0DD",
    // Filters toolbar button text
    toolbarFilters: "\uD544\uD130",
    toolbarFiltersLabel: "\uD544\uD130 \uD45C\uC2DC",
    toolbarFiltersTooltipHide: "\uD544\uD130 \uC228\uAE30\uAE30",
    toolbarFiltersTooltipShow: "\uD544\uD130 \uD45C\uC2DC",
    toolbarFiltersTooltipActive: (count) => `${count}\uAC74\uC758 \uD544\uD130\uB97C \uC801\uC6A9\uC911`,
    // Quick filter toolbar field
    toolbarQuickFilterPlaceholder: "\uAC80\uC0C9\u2026",
    toolbarQuickFilterLabel: "\uAC80\uC0C9",
    toolbarQuickFilterDeleteIconLabel: "\uCD08\uAE30\uD654",
    // Export selector toolbar button text
    toolbarExport: "\uB0B4\uBCF4\uB0B4\uAE30",
    toolbarExportLabel: "\uB0B4\uBCF4\uB0B4\uAE30",
    toolbarExportCSV: "CSV\uB85C \uB0B4\uBCF4\uB0B4\uAE30",
    toolbarExportPrint: "\uD504\uB9B0\uD2B8",
    toolbarExportExcel: "Excel\uB85C \uB0B4\uBCF4\uB0B4\uAE30",
    // Columns panel text
    columnsPanelTextFieldLabel: "\uC5F4 \uAC80\uC0C9",
    columnsPanelTextFieldPlaceholder: "\uC5F4 \uC774\uB984",
    columnsPanelDragIconLabel: "\uC5F4 \uC815\uB82C",
    columnsPanelShowAllButton: "\uBAA8\uB450 \uBCF4\uAE30",
    columnsPanelHideAllButton: "\uBAA8\uB450 \uC228\uAE30\uAE30",
    // Filter panel text
    filterPanelAddFilter: "\uD544\uD130 \uCD94\uAC00",
    // filterPanelRemoveAll: 'Remove all',
    filterPanelDeleteIconLabel: "\uC0AD\uC81C",
    filterPanelLogicOperator: "\uB17C\uB9AC \uC5F0\uC0B0\uC790",
    filterPanelOperator: "\uC5F0\uC0B0\uC790",
    filterPanelOperatorAnd: "\uADF8\uB9AC\uACE0",
    filterPanelOperatorOr: "\uB610\uB294",
    filterPanelColumns: "\uBAA9\uB85D",
    filterPanelInputLabel: "\uAC12",
    filterPanelInputPlaceholder: "\uAC12 \uC785\uB825",
    // Filter operators text
    filterOperatorContains: "\uD3EC\uD568\uD558\uB294",
    filterOperatorEquals: "\uAC12\uC774 \uAC19\uC740",
    filterOperatorStartsWith: "\uC2DC\uC791\uD558\uB294",
    filterOperatorEndsWith: "\uB05D\uB098\uB294",
    filterOperatorIs: "~\uC778",
    filterOperatorNot: "~\uC544\uB2CC",
    filterOperatorAfter: "\uB354 \uC774\uD6C4",
    filterOperatorOnOrAfter: "\uC774\uD6C4",
    filterOperatorBefore: "\uB354 \uC774\uC804",
    filterOperatorOnOrBefore: "\uC774\uC804",
    filterOperatorIsEmpty: "\uAC12\uC774 \uC5C6\uB294",
    filterOperatorIsNotEmpty: "\uAC12\uC774 \uC788\uB294",
    filterOperatorIsAnyOf: "\uAC12 \uC911 \uD558\uB098\uC778",
    // 'filterOperator=': '=',
    // 'filterOperator!=': '!=',
    // 'filterOperator>': '>',
    // 'filterOperator>=': '>=',
    // 'filterOperator<': '<',
    // 'filterOperator<=': '<=',
    // Header filter operators text
    // headerFilterOperatorContains: 'Contains',
    // headerFilterOperatorEquals: 'Equals',
    // headerFilterOperatorStartsWith: 'Starts with',
    // headerFilterOperatorEndsWith: 'Ends with',
    // headerFilterOperatorIs: 'Is',
    // headerFilterOperatorNot: 'Is not',
    // headerFilterOperatorAfter: 'Is after',
    // headerFilterOperatorOnOrAfter: 'Is on or after',
    // headerFilterOperatorBefore: 'Is before',
    // headerFilterOperatorOnOrBefore: 'Is on or before',
    // headerFilterOperatorIsEmpty: 'Is empty',
    // headerFilterOperatorIsNotEmpty: 'Is not empty',
    // headerFilterOperatorIsAnyOf: 'Is any of',
    // 'headerFilterOperator=': 'Equals',
    // 'headerFilterOperator!=': 'Not equals',
    // 'headerFilterOperator>': 'Greater than',
    // 'headerFilterOperator>=': 'Greater than or equal to',
    // 'headerFilterOperator<': 'Less than',
    // 'headerFilterOperator<=': 'Less than or equal to',
    // Filter values text
    filterValueAny: "\uC544\uBB34\uAC12",
    filterValueTrue: "\uCC38",
    filterValueFalse: "\uAC70\uC9D3",
    // Column menu text
    columnMenuLabel: "\uBA54\uB274",
    columnMenuShowColumns: "\uC5F4 \uD45C\uC2DC",
    // columnMenuManageColumns: 'Manage columns',
    columnMenuFilter: "\uD544\uD130",
    columnMenuHideColumn: "\uC5F4 \uC228\uAE30\uAE30",
    columnMenuUnsort: "\uC815\uB82C \uD574\uC81C",
    columnMenuSortAsc: "\uC624\uB984\uCC28\uC21C \uC815\uB82C",
    columnMenuSortDesc: "\uB0B4\uB9BC\uCC28\uC21C \uC815\uB82C",
    // Column header text
    columnHeaderFiltersTooltipActive: (count) => `${count}\uAC74\uC758 \uD544\uD130\uB97C \uC801\uC6A9\uC911`,
    columnHeaderFiltersLabel: "\uD544\uD130 \uD45C\uC2DC",
    columnHeaderSortIconLabel: "\uC815\uB82C",
    // Rows selected footer text
    footerRowSelected: (count) => `${count}\uD589 \uC120\uD0DD\uC911`,
    // Total row amount footer text
    footerTotalRows: "\uCD1D \uD589\uC218:",
    // Total visible row amount footer text
    footerTotalVisibleRows: (visibleCount, totalCount) => `${visibleCount.toLocaleString()} / ${totalCount.toLocaleString()}`,
    // Checkbox selection text
    checkboxSelectionHeaderName: "\uC120\uD0DD",
    checkboxSelectionSelectAllRows: "\uBAA8\uB4E0 \uD589 \uC120\uD0DD",
    checkboxSelectionUnselectAllRows: "\uBAA8\uB4E0 \uD589 \uC120\uD0DD \uD574\uC81C",
    checkboxSelectionSelectRow: "\uD589 \uC120\uD0DD",
    checkboxSelectionUnselectRow: "\uD589 \uC120\uD0DD \uD574\uC81C",
    // Boolean cell text
    booleanCellTrueLabel: "\uCC38",
    booleanCellFalseLabel: "\uAC70\uC9D3",
    // Actions cell more text
    actionsCellMore: "\uB354\uBCF4\uAE30",
    // Column pinning text
    pinToLeft: "\uC67C\uCABD\uC5D0 \uACE0\uC815",
    pinToRight: "\uC624\uB978\uCABD\uC5D0 \uACE0\uC815",
    unpin: "\uACE0\uC815 \uD574\uC81C",
    // Tree Data
    treeDataGroupingHeaderName: "\uADF8\uB8F9",
    treeDataExpand: "\uD558\uC704\uB178\uB4DC \uD3BC\uCE58\uAE30",
    treeDataCollapse: "\uD558\uC704\uB178\uB4DC \uC811\uAE30",
    // Grouping columns
    groupingColumnHeaderName: "\uADF8\uB8F9",
    groupColumn: (name) => `${name} \uAC12\uC73C\uB85C \uADF8\uB8F9 \uC0DD\uC131`,
    unGroupColumn: (name) => `${name} \uAC12\uC73C\uB85C \uADF8\uB8F9 \uD574\uC81C`,
    // Master/detail
    detailPanelToggle: "\uC0C1\uC138 \uD328\uB110 \uD1A0\uAE00",
    expandDetailPanel: "\uC5F4\uAE30",
    collapseDetailPanel: "\uC811\uAE30",
    // Row reordering text
    rowReorderingHeaderName: "\uD589 \uC7AC\uBC30\uCE58",
    // Aggregation
    aggregationMenuItemHeader: "\uCD1D\uACC4",
    aggregationFunctionLabelSum: "\uD569",
    aggregationFunctionLabelAvg: "\uD3C9\uADE0",
    aggregationFunctionLabelMin: "\uCD5C\uC18C\uAC12",
    aggregationFunctionLabelMax: "\uCD5C\uB300\uAC12",
    aggregationFunctionLabelSize: "\uD06C\uAE30"
  };
  var koKR2 = getGridLocalization(koKRGrid, koKR);

  // node_modules/@mui/x-data-grid/locales/nbNO.js
  var nbNOGrid = {
    // Root
    noRowsLabel: "Ingen rader",
    noResultsOverlayLabel: "Fant ingen resultat.",
    // Density selector toolbar button text
    toolbarDensity: "Tetthet",
    toolbarDensityLabel: "Tetthet",
    toolbarDensityCompact: "Kompakt",
    toolbarDensityStandard: "Standard",
    toolbarDensityComfortable: "Komfortabelt",
    // Columns selector toolbar button text
    toolbarColumns: "Kolonner",
    toolbarColumnsLabel: "Velg kolonner",
    // Filters toolbar button text
    toolbarFilters: "Filter",
    toolbarFiltersLabel: "Vis filter",
    toolbarFiltersTooltipHide: "Skjul fitler",
    toolbarFiltersTooltipShow: "Vis filter",
    toolbarFiltersTooltipActive: (count) => count !== 1 ? `${count} aktive filter` : `${count} aktivt filter`,
    // Quick filter toolbar field
    toolbarQuickFilterPlaceholder: "S\xF8k\u2026",
    toolbarQuickFilterLabel: "S\xF8k",
    toolbarQuickFilterDeleteIconLabel: "Slett",
    // Export selector toolbar button text
    toolbarExport: "Eksporter",
    toolbarExportLabel: "Eksporter",
    toolbarExportCSV: "Last ned som CSV",
    toolbarExportPrint: "Skriv ut",
    toolbarExportExcel: "Last ned som Excel",
    // Columns panel text
    columnsPanelTextFieldLabel: "Finn kolonne",
    columnsPanelTextFieldPlaceholder: "Kolonne tittel",
    columnsPanelDragIconLabel: "Reorganiser kolonne",
    columnsPanelShowAllButton: "Vis alle",
    columnsPanelHideAllButton: "Skjul alle",
    // Filter panel text
    filterPanelAddFilter: "Legg til filter",
    filterPanelRemoveAll: "Fjern alle",
    filterPanelDeleteIconLabel: "Slett",
    filterPanelLogicOperator: "Logisk operator",
    filterPanelOperator: "Operat\xF8rer",
    filterPanelOperatorAnd: "Og",
    filterPanelOperatorOr: "Eller",
    filterPanelColumns: "Kolonner",
    filterPanelInputLabel: "Verdi",
    filterPanelInputPlaceholder: "Filter verdi",
    // Filter operators text
    filterOperatorContains: "inneholder",
    filterOperatorEquals: "er lik",
    filterOperatorStartsWith: "starter med",
    filterOperatorEndsWith: "slutter med",
    filterOperatorIs: "er",
    filterOperatorNot: "er ikke",
    filterOperatorAfter: "er etter",
    filterOperatorOnOrAfter: "er p\xE5 eller etter",
    filterOperatorBefore: "er f\xF8r",
    filterOperatorOnOrBefore: "er p\xE5 eller f\xF8r",
    filterOperatorIsEmpty: "er tom",
    filterOperatorIsNotEmpty: "er ikke tom",
    filterOperatorIsAnyOf: "er en av",
    // 'filterOperator=': '=',
    // 'filterOperator!=': '!=',
    // 'filterOperator>': '>',
    // 'filterOperator>=': '>=',
    // 'filterOperator<': '<',
    // 'filterOperator<=': '<=',
    // Header filter operators text
    // headerFilterOperatorContains: 'Contains',
    // headerFilterOperatorEquals: 'Equals',
    // headerFilterOperatorStartsWith: 'Starts with',
    // headerFilterOperatorEndsWith: 'Ends with',
    // headerFilterOperatorIs: 'Is',
    // headerFilterOperatorNot: 'Is not',
    // headerFilterOperatorAfter: 'Is after',
    // headerFilterOperatorOnOrAfter: 'Is on or after',
    // headerFilterOperatorBefore: 'Is before',
    // headerFilterOperatorOnOrBefore: 'Is on or before',
    // headerFilterOperatorIsEmpty: 'Is empty',
    // headerFilterOperatorIsNotEmpty: 'Is not empty',
    // headerFilterOperatorIsAnyOf: 'Is any of',
    // 'headerFilterOperator=': 'Equals',
    // 'headerFilterOperator!=': 'Not equals',
    // 'headerFilterOperator>': 'Greater than',
    // 'headerFilterOperator>=': 'Greater than or equal to',
    // 'headerFilterOperator<': 'Less than',
    // 'headerFilterOperator<=': 'Less than or equal to',
    // Filter values text
    filterValueAny: "noen",
    filterValueTrue: "sant",
    filterValueFalse: "usant",
    // Column menu text
    columnMenuLabel: "Meny",
    columnMenuShowColumns: "Vis kolonner",
    columnMenuManageColumns: "Administrer kolonner",
    columnMenuFilter: "Filter",
    columnMenuHideColumn: "Skjul",
    columnMenuUnsort: "Usorter",
    columnMenuSortAsc: "Sorter \xD8KENDE",
    columnMenuSortDesc: "Sorter SYNKENDE",
    // Column header text
    columnHeaderFiltersTooltipActive: (count) => count !== 1 ? `${count} aktive filter` : `${count} aktivt filter`,
    columnHeaderFiltersLabel: "Vis filter",
    columnHeaderSortIconLabel: "Sorter",
    // Rows selected footer text
    footerRowSelected: (count) => count !== 1 ? `${count.toLocaleString()} rader valgt` : `${count.toLocaleString()} rad valgt`,
    // Total row amount footer text
    footerTotalRows: "Totalt antall rader:",
    // Total visible row amount footer text
    footerTotalVisibleRows: (visibleCount, totalCount) => `${visibleCount.toLocaleString()} av ${totalCount.toLocaleString()}`,
    // Checkbox selection text
    checkboxSelectionHeaderName: "Avmerkingsboks valgt",
    checkboxSelectionSelectAllRows: "Velg alle rader",
    checkboxSelectionUnselectAllRows: "Velg bort alle rader",
    checkboxSelectionSelectRow: "Velg rad",
    checkboxSelectionUnselectRow: "Velg bort rad",
    // Boolean cell text
    booleanCellTrueLabel: "sant",
    booleanCellFalseLabel: "usant",
    // Actions cell more text
    actionsCellMore: "mer",
    // Column pinning text
    pinToLeft: "Fest til venstre",
    pinToRight: "Fest til h\xF8yre",
    unpin: "L\xF8sne",
    // Tree Data
    treeDataGroupingHeaderName: "Grupper",
    treeDataExpand: "se barn",
    treeDataCollapse: "skjul barn",
    // Grouping columns
    groupingColumnHeaderName: "Grupper",
    groupColumn: (name) => `Grupper p\xE5 ${name}`,
    unGroupColumn: (name) => `Stopp \xE5 grupper p\xE5 ${name}`,
    // Master/detail
    detailPanelToggle: "Utvid/kollaps detalj panel",
    expandDetailPanel: "Utvid",
    collapseDetailPanel: "Kollaps",
    // Row reordering text
    rowReorderingHeaderName: "Rad reorganisering",
    // Aggregation
    aggregationMenuItemHeader: "Aggregering",
    aggregationFunctionLabelSum: "sum",
    aggregationFunctionLabelAvg: "snitt",
    aggregationFunctionLabelMin: "min",
    aggregationFunctionLabelMax: "maks",
    aggregationFunctionLabelSize: "st\xF8rrelse"
  };
  var nbNO2 = getGridLocalization(nbNOGrid, nbNO);

  // node_modules/@mui/x-data-grid/locales/nlNL.js
  var nlNLGrid = {
    // Root
    noRowsLabel: "Geen resultaten.",
    noResultsOverlayLabel: "Geen resultaten gevonden.",
    // Density selector toolbar button text
    toolbarDensity: "Grootte",
    toolbarDensityLabel: "Grootte",
    toolbarDensityCompact: "Compact",
    toolbarDensityStandard: "Normaal",
    toolbarDensityComfortable: "Breed",
    // Columns selector toolbar button text
    toolbarColumns: "Kolommen",
    toolbarColumnsLabel: "Kies kolommen",
    // Filters toolbar button text
    toolbarFilters: "Filters",
    toolbarFiltersLabel: "Toon filters",
    toolbarFiltersTooltipHide: "Verberg filters",
    toolbarFiltersTooltipShow: "Toon filters",
    toolbarFiltersTooltipActive: (count) => count > 1 ? `${count} actieve filters` : `${count} filter actief`,
    // Quick filter toolbar field
    toolbarQuickFilterPlaceholder: "Zoeken\u2026",
    toolbarQuickFilterLabel: "Zoeken",
    toolbarQuickFilterDeleteIconLabel: "Wissen",
    // Export selector toolbar button text
    toolbarExport: "Exporteren",
    toolbarExportLabel: "Exporteren",
    toolbarExportCSV: "Exporteer naar CSV",
    toolbarExportPrint: "Print",
    toolbarExportExcel: "Downloaden als Excel-bestand",
    // Columns panel text
    columnsPanelTextFieldLabel: "Zoek kolom",
    columnsPanelTextFieldPlaceholder: "Kolomtitel",
    columnsPanelDragIconLabel: "Kolom herschikken",
    columnsPanelShowAllButton: "Alles tonen",
    columnsPanelHideAllButton: "Alles verbergen",
    // Filter panel text
    filterPanelAddFilter: "Filter toevoegen",
    filterPanelRemoveAll: "Alles verwijderen",
    filterPanelDeleteIconLabel: "Verwijderen",
    filterPanelLogicOperator: "Logische operator",
    filterPanelOperator: "Operatoren",
    filterPanelOperatorAnd: "En",
    filterPanelOperatorOr: "Of",
    filterPanelColumns: "Kolommen",
    filterPanelInputLabel: "Waarde",
    filterPanelInputPlaceholder: "Filter waarde",
    // Filter operators text
    filterOperatorContains: "bevat",
    filterOperatorEquals: "gelijk aan",
    filterOperatorStartsWith: "begint met",
    filterOperatorEndsWith: "eindigt met",
    filterOperatorIs: "is",
    filterOperatorNot: "is niet",
    filterOperatorAfter: "is na",
    filterOperatorOnOrAfter: "is gelijk of er na",
    filterOperatorBefore: "is voor",
    filterOperatorOnOrBefore: "is gelijk of er voor",
    filterOperatorIsEmpty: "is leeg",
    filterOperatorIsNotEmpty: "is niet leeg",
    filterOperatorIsAnyOf: "is een van",
    "filterOperator=": "=",
    "filterOperator!=": "!=",
    "filterOperator>": ">",
    "filterOperator>=": ">=",
    "filterOperator<": "<",
    "filterOperator<=": "<=",
    // Header filter operators text
    headerFilterOperatorContains: "Bevat",
    headerFilterOperatorEquals: "Gelijk aan",
    headerFilterOperatorStartsWith: "Begint met",
    headerFilterOperatorEndsWith: "Eindigt met",
    headerFilterOperatorIs: "Is",
    headerFilterOperatorNot: "Is niet",
    headerFilterOperatorAfter: "Is na",
    headerFilterOperatorOnOrAfter: "Is op of na",
    headerFilterOperatorBefore: "Is voor",
    headerFilterOperatorOnOrBefore: "Is op of voor",
    headerFilterOperatorIsEmpty: "Is leeg",
    headerFilterOperatorIsNotEmpty: "Is niet leeg",
    headerFilterOperatorIsAnyOf: "Is een van",
    "headerFilterOperator=": "Gelijk aan",
    "headerFilterOperator!=": "Niet gelijk aan",
    "headerFilterOperator>": "Is groter dan",
    "headerFilterOperator>=": "Is groter dan of gelijk aan",
    "headerFilterOperator<": "Is kleiner dan",
    "headerFilterOperator<=": "Is kleiner dan of gelijk aan",
    // Filter values text
    filterValueAny: "alles",
    filterValueTrue: "waar",
    filterValueFalse: "onwaar",
    // Column menu text
    columnMenuLabel: "Menu",
    columnMenuShowColumns: "Toon kolommen",
    columnMenuManageColumns: "Kolommen beheren",
    columnMenuFilter: "Filteren",
    columnMenuHideColumn: "Verbergen",
    columnMenuUnsort: "Annuleer sortering",
    columnMenuSortAsc: "Oplopend sorteren",
    columnMenuSortDesc: "Aflopend sorteren",
    // Column header text
    columnHeaderFiltersTooltipActive: (count) => count > 1 ? `${count} actieve filters` : `${count} filter actief`,
    columnHeaderFiltersLabel: "Toon filters",
    columnHeaderSortIconLabel: "Sorteren",
    // Rows selected footer text
    footerRowSelected: (count) => count > 1 ? `${count.toLocaleString()} rijen geselecteerd` : `${count.toLocaleString()} rij geselecteerd`,
    // Total row amount footer text
    footerTotalRows: "Totaal:",
    // Total visible row amount footer text
    footerTotalVisibleRows: (visibleCount, totalCount) => `${visibleCount.toLocaleString()} van ${totalCount.toLocaleString()}`,
    // Checkbox selection text
    checkboxSelectionHeaderName: "Checkbox selectie",
    checkboxSelectionSelectAllRows: "Alle rijen selecteren",
    checkboxSelectionUnselectAllRows: "Alle rijen de-selecteren",
    checkboxSelectionSelectRow: "Rij selecteren",
    checkboxSelectionUnselectRow: "Rij de-selecteren",
    // Boolean cell text
    booleanCellTrueLabel: "waar",
    booleanCellFalseLabel: "onwaar",
    // Actions cell more text
    actionsCellMore: "meer",
    // Column pinning text
    pinToLeft: "Links vastzetten",
    pinToRight: "Rechts vastzetten",
    unpin: "Losmaken",
    // Tree Data
    treeDataGroupingHeaderName: "Groep",
    treeDataExpand: "Uitvouwen",
    treeDataCollapse: "Inklappen",
    // Grouping columns
    groupingColumnHeaderName: "Groep",
    groupColumn: (name) => `Groepeer op ${name}`,
    unGroupColumn: (name) => `Stop groeperen op ${name}`,
    // Master/detail
    detailPanelToggle: "Detailmenu in- of uitklappen",
    expandDetailPanel: "Uitklappen",
    collapseDetailPanel: "Inklappen",
    // Row reordering text
    rowReorderingHeaderName: "Rijen hersorteren",
    // Aggregation
    aggregationMenuItemHeader: "Aggregatie",
    aggregationFunctionLabelSum: "som",
    aggregationFunctionLabelAvg: "gem",
    aggregationFunctionLabelMin: "min",
    aggregationFunctionLabelMax: "max",
    aggregationFunctionLabelSize: "grootte"
  };
  var nlNL2 = getGridLocalization(nlNLGrid, nlNL);

  // node_modules/@mui/x-data-grid/locales/plPL.js
  var plPLGrid = {
    // Root
    noRowsLabel: "Brak danych",
    noResultsOverlayLabel: "Nie znaleziono wynik\xF3w.",
    // Density selector toolbar button text
    toolbarDensity: "Wysoko\u015B\u0107 rz\u0119du",
    toolbarDensityLabel: "Wysoko\u015B\u0107 rz\u0119du",
    toolbarDensityCompact: "Kompakt",
    toolbarDensityStandard: "Standard",
    toolbarDensityComfortable: "Komfort",
    // Columns selector toolbar button text
    toolbarColumns: "Kolumny",
    toolbarColumnsLabel: "Zaznacz kolumny",
    // Filters toolbar button text
    toolbarFilters: "Filtry",
    toolbarFiltersLabel: "Poka\u017C filtry",
    toolbarFiltersTooltipHide: "Ukryj filtry",
    toolbarFiltersTooltipShow: "Poka\u017C filtry",
    toolbarFiltersTooltipActive: (count) => `Liczba aktywnych filtr\xF3w: ${count}`,
    // Quick filter toolbar field
    toolbarQuickFilterPlaceholder: "Wyszukaj\u2026",
    toolbarQuickFilterLabel: "Szukaj",
    toolbarQuickFilterDeleteIconLabel: "Wyczy\u015B\u0107",
    // Export selector toolbar button text
    toolbarExport: "Eksportuj",
    toolbarExportLabel: "Eksportuj",
    toolbarExportCSV: "Pobierz jako plik CSV",
    toolbarExportPrint: "Drukuj",
    toolbarExportExcel: "Pobierz jako plik Excel",
    // Columns panel text
    columnsPanelTextFieldLabel: "Znajd\u017A kolumn\u0119",
    columnsPanelTextFieldPlaceholder: "Tytu\u0142 kolumny",
    columnsPanelDragIconLabel: "Zmie\u0144 kolejno\u015B\u0107 kolumn",
    columnsPanelShowAllButton: "Poka\u017C wszystko",
    columnsPanelHideAllButton: "Ukryj wszystko",
    // Filter panel text
    filterPanelAddFilter: "Dodaj filtr",
    filterPanelRemoveAll: "Usu\u0144 wszystkie",
    filterPanelDeleteIconLabel: "Usu\u0144",
    filterPanelLogicOperator: "Operator logiczny",
    filterPanelOperator: "Operator",
    filterPanelOperatorAnd: "I",
    filterPanelOperatorOr: "Lub",
    filterPanelColumns: "Kolumny",
    filterPanelInputLabel: "Warto\u015B\u0107",
    filterPanelInputPlaceholder: "Filtrowana warto\u015B\u0107",
    // Filter operators text
    filterOperatorContains: "zawiera",
    filterOperatorEquals: "r\xF3wna si\u0119",
    filterOperatorStartsWith: "zaczyna si\u0119 od",
    filterOperatorEndsWith: "ko\u0144czy si\u0119 na",
    filterOperatorIs: "r\xF3wna si\u0119",
    filterOperatorNot: "r\xF3\u017Cne",
    filterOperatorAfter: "wi\u0119ksze ni\u017C",
    filterOperatorOnOrAfter: "wi\u0119ksze lub r\xF3wne",
    filterOperatorBefore: "mniejsze ni\u017C",
    filterOperatorOnOrBefore: "mniejsze lub r\xF3wne",
    filterOperatorIsEmpty: "jest pusty",
    filterOperatorIsNotEmpty: "nie jest pusty",
    filterOperatorIsAnyOf: "jest jednym z",
    // 'filterOperator=': '=',
    // 'filterOperator!=': '!=',
    // 'filterOperator>': '>',
    // 'filterOperator>=': '>=',
    // 'filterOperator<': '<',
    // 'filterOperator<=': '<=',
    // Header filter operators text
    headerFilterOperatorContains: "Zawiera",
    headerFilterOperatorEquals: "R\xF3wna si\u0119",
    headerFilterOperatorStartsWith: "Zaczyna si\u0119 od",
    headerFilterOperatorEndsWith: "Ko\u0144czy si\u0119 na",
    // headerFilterOperatorIs: 'Is',
    headerFilterOperatorNot: "Niepuste",
    // headerFilterOperatorAfter: 'Is after',
    // headerFilterOperatorOnOrAfter: 'Is on or after',
    // headerFilterOperatorBefore: 'Is before',
    // headerFilterOperatorOnOrBefore: 'Is on or before',
    // headerFilterOperatorIsEmpty: 'Is empty',
    // headerFilterOperatorIsNotEmpty: 'Is not empty',
    // headerFilterOperatorIsAnyOf: 'Is any of',
    // 'headerFilterOperator=': 'Equals',
    // 'headerFilterOperator!=': 'Not equals',
    // 'headerFilterOperator>': 'Greater than',
    // 'headerFilterOperator>=': 'Greater than or equal to',
    // 'headerFilterOperator<': 'Less than',
    // 'headerFilterOperator<=': 'Less than or equal to',
    // Filter values text
    filterValueAny: "dowolny",
    filterValueTrue: "prawda",
    filterValueFalse: "fa\u0142sz",
    // Column menu text
    columnMenuLabel: "Menu",
    columnMenuShowColumns: "Poka\u017C wszystkie kolumny",
    columnMenuManageColumns: "Zarz\u0105dzaj kolumnami",
    columnMenuFilter: "Filtr",
    columnMenuHideColumn: "Ukryj",
    columnMenuUnsort: "Anuluj sortowanie",
    columnMenuSortAsc: "Sortuj rosn\u0105co",
    columnMenuSortDesc: "Sortuj malej\u0105co",
    // Column header text
    columnHeaderFiltersTooltipActive: (count) => `Liczba aktywnych filtr\xF3w: ${count}`,
    columnHeaderFiltersLabel: "Poka\u017C filtry",
    columnHeaderSortIconLabel: "Sortuj",
    // Rows selected footer text
    footerRowSelected: (count) => `Liczba wybranych wierszy: ${count.toLocaleString()}`,
    // Total row amount footer text
    footerTotalRows: "\u0141\u0105czna liczba wierszy:",
    // Total visible row amount footer text
    footerTotalVisibleRows: (visibleCount, totalCount) => `${visibleCount.toLocaleString()} z ${totalCount.toLocaleString()}`,
    // Checkbox selection text
    checkboxSelectionHeaderName: "Pole wyboru",
    checkboxSelectionSelectAllRows: "Zaznacz wszystkie wiersze",
    checkboxSelectionUnselectAllRows: "Odznacz wszystkie wiersze",
    checkboxSelectionSelectRow: "Zaznacz wiersz",
    checkboxSelectionUnselectRow: "Odznacz wiersz",
    // Boolean cell text
    booleanCellTrueLabel: "tak",
    booleanCellFalseLabel: "nie",
    // Actions cell more text
    actionsCellMore: "wi\u0119cej",
    // Column pinning text
    pinToLeft: "Przypnij do lewej",
    pinToRight: "Przypnij do prawej",
    unpin: "Odepnij",
    // Tree Data
    treeDataGroupingHeaderName: "Grupa",
    treeDataExpand: "poka\u017C elementy potomne",
    treeDataCollapse: "ukryj elementy potomne",
    // Grouping columns
    groupingColumnHeaderName: "Grupa",
    groupColumn: (name) => `Grupuj wed\u0142ug ${name}`,
    unGroupColumn: (name) => `Rozgrupuj ${name}`,
    // Master/detail
    // detailPanelToggle: 'Detail panel toggle',
    expandDetailPanel: "Rozwi\u0144",
    collapseDetailPanel: "Zwi\u0144",
    // Row reordering text
    rowReorderingHeaderName: "Porz\u0105dkowanie wierszy"
    // Aggregation
    // aggregationMenuItemHeader: 'Aggregation',
    // aggregationFunctionLabelSum: 'sum',
    // aggregationFunctionLabelAvg: 'avg',
    // aggregationFunctionLabelMin: 'min',
    // aggregationFunctionLabelMax: 'max',
    // aggregationFunctionLabelSize: 'size',
  };
  var plPL2 = getGridLocalization(plPLGrid, plPL);

  // node_modules/@mui/x-data-grid/locales/ptBR.js
  var ptBRGrid = {
    // Root
    noRowsLabel: "Nenhuma linha",
    noResultsOverlayLabel: "Nenhum resultado encontrado.",
    // Density selector toolbar button text
    toolbarDensity: "Densidade",
    toolbarDensityLabel: "Densidade",
    toolbarDensityCompact: "Compacto",
    toolbarDensityStandard: "Padr\xE3o",
    toolbarDensityComfortable: "Confort\xE1vel",
    // Columns selector toolbar button text
    toolbarColumns: "Colunas",
    toolbarColumnsLabel: "Exibir seletor de colunas",
    // Filters toolbar button text
    toolbarFilters: "Filtros",
    toolbarFiltersLabel: "Exibir filtros",
    toolbarFiltersTooltipHide: "Ocultar filtros",
    toolbarFiltersTooltipShow: "Exibir filtros",
    toolbarFiltersTooltipActive: (count) => `${count} ${count !== 1 ? "filtros" : "filtro"} ${count !== 1 ? "ativos" : "ativo"}`,
    // Quick filter toolbar field
    toolbarQuickFilterPlaceholder: "Procurar\u2026",
    toolbarQuickFilterLabel: "Procurar",
    toolbarQuickFilterDeleteIconLabel: "Limpar",
    // Export selector toolbar button text
    toolbarExport: "Exportar",
    toolbarExportLabel: "Exportar",
    toolbarExportCSV: "Baixar como CSV",
    toolbarExportPrint: "Imprimir",
    toolbarExportExcel: "Baixar como Excel",
    // Columns panel text
    columnsPanelTextFieldLabel: "Localizar coluna",
    columnsPanelTextFieldPlaceholder: "T\xEDtulo da coluna",
    columnsPanelDragIconLabel: "Reordenar Coluna",
    columnsPanelShowAllButton: "Mostrar todas",
    columnsPanelHideAllButton: "Ocultar todas",
    // Filter panel text
    filterPanelAddFilter: "Adicionar filtro",
    filterPanelRemoveAll: "Remover todos",
    filterPanelDeleteIconLabel: "Excluir",
    filterPanelLogicOperator: "Operador l\xF3gico",
    filterPanelOperator: "Operador",
    filterPanelOperatorAnd: "E",
    filterPanelOperatorOr: "Ou",
    filterPanelColumns: "Colunas",
    filterPanelInputLabel: "Valor",
    filterPanelInputPlaceholder: "Filtrar valor",
    // Filter operators text
    filterOperatorContains: "cont\xE9m",
    filterOperatorEquals: "\xE9 igual a",
    filterOperatorStartsWith: "come\xE7a com",
    filterOperatorEndsWith: "termina com",
    filterOperatorIs: "\xE9",
    filterOperatorNot: "n\xE3o \xE9",
    filterOperatorAfter: "ap\xF3s",
    filterOperatorOnOrAfter: "em ou ap\xF3s",
    filterOperatorBefore: "antes de",
    filterOperatorOnOrBefore: "em ou antes de",
    filterOperatorIsEmpty: "est\xE1 vazio",
    filterOperatorIsNotEmpty: "n\xE3o est\xE1 vazio",
    filterOperatorIsAnyOf: "\xE9 qualquer um dos",
    "filterOperator=": "igual \xE0",
    "filterOperator!=": "diferente de",
    "filterOperator>": "maior que",
    "filterOperator>=": "maior ou igual que",
    "filterOperator<": "menor que",
    "filterOperator<=": "menor ou igual que",
    // Header filter operators text
    headerFilterOperatorContains: "Cont\xE9m",
    headerFilterOperatorEquals: "Igual",
    headerFilterOperatorStartsWith: "Come\xE7a com",
    headerFilterOperatorEndsWith: "Termina com",
    headerFilterOperatorIs: "\xC9",
    headerFilterOperatorNot: "N\xE3o \xE9",
    headerFilterOperatorAfter: "Depois de",
    headerFilterOperatorOnOrAfter: "Est\xE1 entre ou depois de",
    headerFilterOperatorBefore: "Antes de",
    headerFilterOperatorOnOrBefore: "Est\xE1 entre ou antes de",
    headerFilterOperatorIsEmpty: "\xC9 vazio",
    headerFilterOperatorIsNotEmpty: "N\xE3o \xE9 vazio",
    headerFilterOperatorIsAnyOf: "\xC9 algum",
    "headerFilterOperator=": "Igual",
    "headerFilterOperator!=": "N\xE3o igual",
    "headerFilterOperator>": "Maior que",
    "headerFilterOperator>=": "Maior que ou igual a",
    "headerFilterOperator<": "Menor que",
    "headerFilterOperator<=": "Menor que ou igual a",
    // Filter values text
    filterValueAny: "qualquer",
    filterValueTrue: "verdadeiro",
    filterValueFalse: "falso",
    // Column menu text
    columnMenuLabel: "Menu",
    columnMenuShowColumns: "Exibir colunas",
    columnMenuManageColumns: "Gerir colunas",
    columnMenuFilter: "Filtrar",
    columnMenuHideColumn: "Ocultar",
    columnMenuUnsort: "Desfazer ordena\xE7\xE3o",
    columnMenuSortAsc: "Ordenar do menor para o maior",
    columnMenuSortDesc: "Ordenar do maior para o menor",
    // Column header text
    columnHeaderFiltersTooltipActive: (count) => `${count} ${count !== 1 ? "filtros" : "filtro"} ${count !== 1 ? "ativos" : "ativo"}`,
    columnHeaderFiltersLabel: "Exibir Filtros",
    columnHeaderSortIconLabel: "Ordenar",
    // Rows selected footer text
    footerRowSelected: (count) => count !== 1 ? `${count.toLocaleString()} linhas selecionadas` : `${count.toLocaleString()} linha selecionada`,
    // Total row amount footer text
    footerTotalRows: "Total de linhas:",
    // Total visible row amount footer text
    footerTotalVisibleRows: (visibleCount, totalCount) => `${visibleCount.toLocaleString()} de ${totalCount.toLocaleString()}`,
    // Checkbox selection text
    checkboxSelectionHeaderName: "Sele\xE7\xE3o",
    checkboxSelectionSelectAllRows: "Selecionar todas linhas",
    checkboxSelectionUnselectAllRows: "Deselecionar todas linhas",
    checkboxSelectionSelectRow: "Selecionar linha",
    checkboxSelectionUnselectRow: "Deselecionar linha",
    // Boolean cell text
    booleanCellTrueLabel: "sim",
    booleanCellFalseLabel: "n\xE3o",
    // Actions cell more text
    actionsCellMore: "mais",
    // Column pinning text
    pinToLeft: "Fixar \xE0 esquerda",
    pinToRight: "Fixar \xE0 direita",
    unpin: "Desafixar",
    // Tree Data
    treeDataGroupingHeaderName: "Grupo",
    treeDataExpand: "mostrar filhos",
    treeDataCollapse: "esconder filhos",
    // Grouping columns
    groupingColumnHeaderName: "Grupo",
    groupColumn: (name) => `Agrupar por ${name}`,
    unGroupColumn: (name) => `Parar agrupamento por ${name}`,
    // Master/detail
    detailPanelToggle: "Painel de detalhes",
    expandDetailPanel: "Expandir",
    collapseDetailPanel: "Esconder",
    // Row reordering text
    rowReorderingHeaderName: "Reorganizar linhas",
    // Aggregation
    aggregationMenuItemHeader: "Agrupar",
    aggregationFunctionLabelSum: "soma",
    aggregationFunctionLabelAvg: "m\xE9dia",
    aggregationFunctionLabelMin: "m\xEDn",
    aggregationFunctionLabelMax: "m\xE1x",
    aggregationFunctionLabelSize: "tamanho"
  };
  var ptBR2 = getGridLocalization(ptBRGrid, ptBR);

  // node_modules/@mui/x-data-grid/locales/roRO.js
  var roROGrid = {
    // Root
    noRowsLabel: "Lips\u0103 date",
    noResultsOverlayLabel: "Nu au fost g\u0103site rezultate.",
    // Density selector toolbar button text
    toolbarDensity: "\xCEn\u0103l\u021Bime r\xE2nd",
    toolbarDensityLabel: "\xCEn\u0103l\u021Bime r\xE2nd",
    toolbarDensityCompact: "Compact",
    toolbarDensityStandard: "Standard",
    toolbarDensityComfortable: "Lat",
    // Columns selector toolbar button text
    toolbarColumns: "Coloane",
    toolbarColumnsLabel: "Afi\u0219eaz\u0103 selec\u021Bie coloane",
    // Filters toolbar button text
    toolbarFilters: "Filtru",
    toolbarFiltersLabel: "Afi\u0219eaz\u0103 filtru",
    toolbarFiltersTooltipHide: "Ascunde filtru",
    toolbarFiltersTooltipShow: "Afi\u0219eaz\u0103 filtru",
    toolbarFiltersTooltipActive: (count) => count !== 1 ? `${count} filtru activ` : `${count} filtru activ`,
    // Quick filter toolbar field
    toolbarQuickFilterPlaceholder: "C\u0103utare\u2026",
    toolbarQuickFilterLabel: "C\u0103utare",
    toolbarQuickFilterDeleteIconLabel: "\u0218tergere",
    // Export selector toolbar button text
    toolbarExport: "Export",
    toolbarExportLabel: "Export",
    toolbarExportCSV: "Download \xEEn format CSV",
    toolbarExportPrint: "Printare",
    toolbarExportExcel: "Download \xEEn format Excel",
    // Columns panel text
    columnsPanelTextFieldLabel: "G\u0103se\u0219te coloana",
    columnsPanelTextFieldPlaceholder: "Titlu coloan\u0103",
    columnsPanelDragIconLabel: "Resortare coloan\u0103",
    columnsPanelShowAllButton: "Afi\u0219eaz\u0103 tot",
    columnsPanelHideAllButton: "Ascunde tot",
    // Filter panel text
    filterPanelAddFilter: "Ad\u0103ugare filtru",
    filterPanelRemoveAll: "\u0218terge tot",
    filterPanelDeleteIconLabel: "\u0218tergere",
    filterPanelLogicOperator: "Operatori logici",
    filterPanelOperator: "Operatori",
    filterPanelOperatorAnd: "\u0218i",
    filterPanelOperatorOr: "Sau",
    filterPanelColumns: "Coloane",
    filterPanelInputLabel: "Valoare",
    filterPanelInputPlaceholder: "Filtrare valoare",
    // Filter operators text
    filterOperatorContains: "con\u021Bine",
    filterOperatorEquals: "este egal cu",
    filterOperatorStartsWith: "\xEEncepe cu",
    filterOperatorEndsWith: "se termin\u0103 cu",
    filterOperatorIs: "este",
    filterOperatorNot: "nu este",
    filterOperatorAfter: "este dup\u0103",
    filterOperatorOnOrAfter: "este la sau dup\u0103",
    filterOperatorBefore: "este \xEEnainte de",
    filterOperatorOnOrBefore: "este la sau \xEEnainte de",
    filterOperatorIsEmpty: "este gol",
    filterOperatorIsNotEmpty: "nu este gol",
    filterOperatorIsAnyOf: "este una din valori",
    "filterOperator=": "=",
    "filterOperator!=": "!=",
    "filterOperator>": ">",
    "filterOperator>=": ">=",
    "filterOperator<": "<",
    "filterOperator<=": "<=",
    // Header filter operators text
    headerFilterOperatorContains: "Con\u021Bine",
    headerFilterOperatorEquals: "Egal cu",
    headerFilterOperatorStartsWith: "\xCEncepe cu",
    headerFilterOperatorEndsWith: "Se termin\u0103 cu",
    headerFilterOperatorIs: "Este",
    headerFilterOperatorNot: "Nu este",
    headerFilterOperatorAfter: "Este dup\u0103",
    headerFilterOperatorOnOrAfter: "Este la sau dup\u0103",
    headerFilterOperatorBefore: "Este \xEEnainte de",
    headerFilterOperatorOnOrBefore: "este la sau \xEEnainte de",
    headerFilterOperatorIsEmpty: "Este gol",
    headerFilterOperatorIsNotEmpty: "Nu este gol",
    headerFilterOperatorIsAnyOf: "Este una din valori",
    "headerFilterOperator=": "Egal cu",
    "headerFilterOperator!=": "Nu este egal cu",
    "headerFilterOperator>": "Mai mare dec\xE2t",
    "headerFilterOperator>=": "Mai mare sau egal cu",
    "headerFilterOperator<": "Mai mic dec\xE2t",
    "headerFilterOperator<=": "Mai mic sau egal cu",
    // Filter values text
    filterValueAny: "Aleatoriu",
    filterValueTrue: "Da",
    filterValueFalse: "Nu",
    // Column menu text
    columnMenuLabel: "Meniu",
    columnMenuShowColumns: "Afi\u0219eaz\u0103 toate coloanele",
    columnMenuManageColumns: "Gestioneaz\u0103 coloane",
    columnMenuFilter: "Filtru",
    columnMenuHideColumn: "Ascunde",
    columnMenuUnsort: "Dezactivare sortare",
    columnMenuSortAsc: "Sorteaz\u0103 cresc\u0103tor",
    columnMenuSortDesc: "Sorteaz\u0103 descresc\u0103tor",
    // Column header text
    columnHeaderFiltersTooltipActive: (count) => count !== 1 ? `${count} filtru activ` : `${count} filtru activ`,
    columnHeaderFiltersLabel: "Afi\u0219eaz\u0103 filtru",
    columnHeaderSortIconLabel: "Sortare",
    // Rows selected footer text
    footerRowSelected: (count) => count !== 1 ? `${count.toLocaleString()} \xCEnregistr\u0103ri selectate` : `${count.toLocaleString()} \xCEnregistrare selectat\u0103`,
    // Total row amount footer text
    footerTotalRows: "Total:",
    // Total visible row amount footer text
    footerTotalVisibleRows: (visibleCount, totalCount) => `${visibleCount.toLocaleString()} din ${totalCount.toLocaleString()}`,
    // Checkbox selection text
    checkboxSelectionHeaderName: "Checkbox Selec\u021Bie",
    checkboxSelectionSelectAllRows: "Selectare toate r\xE2ndurile",
    checkboxSelectionUnselectAllRows: "Deselectare toate r\xE2ndurile",
    checkboxSelectionSelectRow: "Selectare r\xE2nd",
    checkboxSelectionUnselectRow: "Deselectare r\xE2nd",
    // Boolean cell text
    booleanCellTrueLabel: "Da",
    booleanCellFalseLabel: "Nu",
    // Actions cell more text
    actionsCellMore: "Mai multe",
    // Column pinning text
    pinToLeft: "Fixare \xEEn st\xE2nga",
    pinToRight: "Fixare \xEEn dreapta",
    unpin: "Anulare fixare",
    // Tree Data
    treeDataGroupingHeaderName: "Grup",
    treeDataExpand: "Afi\u0219are copii",
    treeDataCollapse: "Ascundere copii",
    // Grouping columns
    groupingColumnHeaderName: "Grupare",
    groupColumn: (name) => `Grupare dup\u0103 ${name}`,
    unGroupColumn: (name) => `Anulare Grupare dup\u0103 ${name}`,
    // Master/detail
    detailPanelToggle: "Comutare panou detalii",
    expandDetailPanel: "Extindere",
    collapseDetailPanel: "Restr\xE2ngere",
    // Row reordering text
    rowReorderingHeaderName: "Reordonare r\xE2nduri",
    // Aggregation
    aggregationMenuItemHeader: "Agregare",
    aggregationFunctionLabelSum: "Sum\u0103",
    aggregationFunctionLabelAvg: "Medie",
    aggregationFunctionLabelMin: "Minim",
    aggregationFunctionLabelMax: "Maxim",
    aggregationFunctionLabelSize: "Num\u0103rul elementelor"
  };
  var roRO2 = getGridLocalization(roROGrid, roRO);

  // node_modules/@mui/x-data-grid/locales/ruRU.js
  var ruRUGrid = {
    // Root
    noRowsLabel: "\u041D\u0435\u0442 \u0441\u0442\u0440\u043E\u043A",
    noResultsOverlayLabel: "\u0414\u0430\u043D\u043D\u044B\u0435 \u043D\u0435 \u043D\u0430\u0439\u0434\u0435\u043D\u044B.",
    // Density selector toolbar button text
    toolbarDensity: "\u0412\u044B\u0441\u043E\u0442\u0430 \u0441\u0442\u0440\u043E\u043A\u0438",
    toolbarDensityLabel: "\u0412\u044B\u0441\u043E\u0442\u0430 \u0441\u0442\u0440\u043E\u043A\u0438",
    toolbarDensityCompact: "\u041A\u043E\u043C\u043F\u0430\u043A\u0442\u043D\u0430\u044F",
    toolbarDensityStandard: "\u0421\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u0430\u044F",
    toolbarDensityComfortable: "\u041A\u043E\u043C\u0444\u043E\u0440\u0442\u043D\u0430\u044F",
    // Columns selector toolbar button text
    toolbarColumns: "\u0421\u0442\u043E\u043B\u0431\u0446\u044B",
    toolbarColumnsLabel: "\u0412\u044B\u0434\u0435\u043B\u0438\u0442\u0435 \u0441\u0442\u043E\u043B\u0431\u0446\u044B",
    // Filters toolbar button text
    toolbarFilters: "\u0424\u0438\u043B\u044C\u0442\u0440\u044B",
    toolbarFiltersLabel: "\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u044C \u0444\u0438\u043B\u044C\u0442\u0440\u044B",
    toolbarFiltersTooltipHide: "\u0421\u043A\u0440\u044B\u0442\u044C \u0444\u0438\u043B\u044C\u0442\u0440\u044B",
    toolbarFiltersTooltipShow: "\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u044C \u0444\u0438\u043B\u044C\u0442\u0440\u044B",
    toolbarFiltersTooltipActive: (count) => {
      let pluralForm = "\u0430\u043A\u0442\u0438\u0432\u043D\u044B\u0445 \u0444\u0438\u043B\u044C\u0442\u0440\u043E\u0432";
      const lastDigit = count % 10;
      if (lastDigit > 1 && lastDigit < 5) {
        pluralForm = "\u0430\u043A\u0442\u0438\u0432\u043D\u044B\u0445 \u0444\u0438\u043B\u044C\u0442\u0440\u0430";
      } else if (lastDigit === 1) {
        pluralForm = "\u0430\u043A\u0442\u0438\u0432\u043D\u044B\u0439 \u0444\u0438\u043B\u044C\u0442\u0440";
      }
      return `${count} ${pluralForm}`;
    },
    // Quick filter toolbar field
    toolbarQuickFilterPlaceholder: "\u041F\u043E\u0438\u0441\u043A\u2026",
    toolbarQuickFilterLabel: "\u041F\u043E\u0438\u0441\u043A",
    toolbarQuickFilterDeleteIconLabel: "\u041E\u0447\u0438\u0441\u0442\u0438\u0442\u044C",
    // Export selector toolbar button text
    toolbarExport: "\u042D\u043A\u0441\u043F\u043E\u0440\u0442",
    toolbarExportLabel: "\u042D\u043A\u0441\u043F\u043E\u0440\u0442",
    toolbarExportCSV: "\u0421\u043A\u0430\u0447\u0430\u0442\u044C \u0432 \u0444\u043E\u0440\u043C\u0430\u0442\u0435 CSV",
    toolbarExportPrint: "\u041F\u0435\u0447\u0430\u0442\u044C",
    toolbarExportExcel: "\u0421\u043A\u0430\u0447\u0430\u0442\u044C \u0432 \u0444\u043E\u0440\u043C\u0430\u0442\u0435 Excel",
    // Columns panel text
    columnsPanelTextFieldLabel: "\u041D\u0430\u0439\u0442\u0438 \u0441\u0442\u043E\u043B\u0431\u0435\u0446",
    columnsPanelTextFieldPlaceholder: "\u0417\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A \u0441\u0442\u043E\u043B\u0431\u0446\u0430",
    columnsPanelDragIconLabel: "\u0418\u0437\u043C\u0435\u043D\u0438\u0442\u044C \u043F\u043E\u0440\u044F\u0434\u043E\u043A \u0441\u0442\u043E\u043B\u0431\u0446\u0430",
    columnsPanelShowAllButton: "\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u044C \u0432\u0441\u0435",
    columnsPanelHideAllButton: "\u0421\u043A\u0440\u044B\u0442\u044C \u0432\u0441\u0435",
    // Filter panel text
    filterPanelAddFilter: "\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u0444\u0438\u043B\u044C\u0442\u0440",
    filterPanelRemoveAll: "\u041E\u0447\u0438\u0441\u0442\u0438\u0442\u044C \u0444\u0438\u043B\u044C\u0442\u0440",
    filterPanelDeleteIconLabel: "\u0423\u0434\u0430\u043B\u0438\u0442\u044C",
    filterPanelLogicOperator: "\u041B\u043E\u0433\u0438\u0447\u0435\u0441\u043A\u0438\u0435 \u043E\u043F\u0435\u0440\u0430\u0442\u043E\u0440\u044B",
    filterPanelOperator: "\u041E\u043F\u0435\u0440\u0430\u0442\u043E\u0440\u044B",
    filterPanelOperatorAnd: "\u0418",
    filterPanelOperatorOr: "\u0418\u043B\u0438",
    filterPanelColumns: "\u0421\u0442\u043E\u043B\u0431\u0446\u044B",
    filterPanelInputLabel: "\u0417\u043D\u0430\u0447\u0435\u043D\u0438\u0435",
    filterPanelInputPlaceholder: "\u0417\u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u0444\u0438\u043B\u044C\u0442\u0440\u0430",
    // Filter operators text
    filterOperatorContains: "\u0441\u043E\u0434\u0435\u0440\u0436\u0438\u0442",
    filterOperatorEquals: "\u0440\u0430\u0432\u0435\u043D",
    filterOperatorStartsWith: "\u043D\u0430\u0447\u0438\u043D\u0430\u0435\u0442\u0441\u044F \u0441",
    filterOperatorEndsWith: "\u0437\u0430\u043A\u0430\u043D\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044F \u043D\u0430",
    filterOperatorIs: "\u0440\u0430\u0432\u0435\u043D",
    filterOperatorNot: "\u043D\u0435 \u0440\u0430\u0432\u0435\u043D",
    filterOperatorAfter: "\u0431\u043E\u043B\u044C\u0448\u0435 \u0447\u0435\u043C",
    filterOperatorOnOrAfter: "\u0431\u043E\u043B\u044C\u0448\u0435 \u0438\u043B\u0438 \u0440\u0430\u0432\u043D\u043E",
    filterOperatorBefore: "\u043C\u0435\u043D\u044C\u0448\u0435 \u0447\u0435\u043C",
    filterOperatorOnOrBefore: "\u043C\u0435\u043D\u044C\u0448\u0435 \u0438\u043B\u0438 \u0440\u0430\u0432\u043D\u043E",
    filterOperatorIsEmpty: "\u043F\u0443\u0441\u0442\u043E\u0439",
    filterOperatorIsNotEmpty: "\u043D\u0435 \u043F\u0443\u0441\u0442\u043E\u0439",
    filterOperatorIsAnyOf: "\u043B\u044E\u0431\u043E\u0439 \u0438\u0437",
    "filterOperator=": "=",
    "filterOperator!=": "!=",
    "filterOperator>": ">",
    "filterOperator>=": ">=",
    "filterOperator<": "<",
    "filterOperator<=": "<=",
    // Header filter operators text
    headerFilterOperatorContains: "\u0441\u043E\u0434\u0435\u0440\u0436\u0438\u0442",
    headerFilterOperatorEquals: "\u0440\u0430\u0432\u0435\u043D",
    headerFilterOperatorStartsWith: "\u043D\u0430\u0447\u0438\u043D\u0430\u0435\u0442\u0441\u044F \u0441",
    headerFilterOperatorEndsWith: "\u0437\u0430\u043A\u0430\u043D\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044F \u043D\u0430",
    headerFilterOperatorIs: "\u0440\u0430\u0432\u0435\u043D",
    headerFilterOperatorNot: "\u043D\u0435 \u0440\u0430\u0432\u0435\u043D",
    headerFilterOperatorAfter: "\u0431\u043E\u043B\u044C\u0448\u0435 \u0447\u0435\u043C",
    headerFilterOperatorOnOrAfter: "\u0431\u043E\u043B\u044C\u0448\u0435 \u0438\u043B\u0438 \u0440\u0430\u0432\u043D\u043E",
    headerFilterOperatorBefore: "\u043C\u0435\u043D\u044C\u0448\u0435 \u0447\u0435\u043C",
    headerFilterOperatorOnOrBefore: "\u043C\u0435\u043D\u044C\u0448\u0435 \u0438\u043B\u0438 \u0440\u0430\u0432\u043D\u043E",
    headerFilterOperatorIsEmpty: "\u043F\u0443\u0441\u0442\u043E\u0439",
    headerFilterOperatorIsNotEmpty: "\u043D\u0435 \u043F\u0443\u0441\u0442\u043E\u0439",
    headerFilterOperatorIsAnyOf: "\u043B\u044E\u0431\u043E\u0439 \u0438\u0437",
    "headerFilterOperator=": "\u0441\u043E\u0434\u0435\u0440\u0436\u0438\u0442",
    "headerFilterOperator!=": "\u043D\u0435 \u0441\u043E\u0434\u0435\u0440\u0436\u0438\u0442",
    "headerFilterOperator>": "\u0431\u043E\u043B\u044C\u0448\u0435 \u0447\u0435\u043C",
    "headerFilterOperator>=": "\u0431\u043E\u043B\u044C\u0448\u0435 \u0438\u043B\u0438 \u0440\u0430\u0432\u043D\u043E",
    "headerFilterOperator<": "\u043C\u0435\u043D\u044C\u0448\u0435 \u0447\u0435\u043C",
    "headerFilterOperator<=": "\u043C\u0435\u043D\u044C\u0448\u0435 \u0438\u043B\u0438 \u0440\u0430\u0432\u043D\u043E",
    // Filter values text
    filterValueAny: "\u043B\u044E\u0431\u043E\u0439",
    filterValueTrue: "\u0438\u0441\u0442\u0438\u043D\u0430",
    filterValueFalse: "\u043B\u043E\u0436\u044C",
    // Column menu text
    columnMenuLabel: "\u041C\u0435\u043D\u044E",
    columnMenuShowColumns: "\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u044C \u0441\u0442\u043E\u043B\u0431\u0446\u044B",
    columnMenuManageColumns: "\u0423\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0438\u0435 \u043A\u043E\u043B\u043E\u043D\u043A\u0430\u043C\u0438",
    columnMenuFilter: "\u0424\u0438\u043B\u044C\u0442\u0440",
    columnMenuHideColumn: "\u0421\u043A\u0440\u044B\u0442\u044C",
    columnMenuUnsort: "\u041E\u0442\u043C\u0435\u043D\u0438\u0442\u044C \u0441\u043E\u0440\u0442\u0438\u0440\u043E\u0432\u043A\u0443",
    columnMenuSortAsc: "\u0421\u043E\u0440\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u043F\u043E \u0432\u043E\u0437\u0440\u0430\u0441\u0442\u0430\u043D\u0438\u044E",
    columnMenuSortDesc: "\u0421\u043E\u0440\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u043F\u043E \u0443\u0431\u044B\u0432\u0430\u043D\u0438\u044E",
    // Column header text
    columnHeaderFiltersTooltipActive: (count) => {
      let pluralForm = "\u0430\u043A\u0442\u0438\u0432\u043D\u044B\u0445 \u0444\u0438\u043B\u044C\u0442\u0440\u043E\u0432";
      const lastDigit = count % 10;
      if (lastDigit > 1 && lastDigit < 5) {
        pluralForm = "\u0430\u043A\u0442\u0438\u0432\u043D\u044B\u0445 \u0444\u0438\u043B\u044C\u0442\u0440\u0430";
      } else if (lastDigit === 1) {
        pluralForm = "\u0430\u043A\u0442\u0438\u0432\u043D\u044B\u0439 \u0444\u0438\u043B\u044C\u0442\u0440";
      }
      return `${count} ${pluralForm}`;
    },
    columnHeaderFiltersLabel: "\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u044C \u0444\u0438\u043B\u044C\u0442\u0440\u044B",
    columnHeaderSortIconLabel: "\u0421\u043E\u0440\u0442\u0438\u0440\u043E\u0432\u0430\u0442\u044C",
    // Rows selected footer text
    footerRowSelected: (count) => {
      let pluralForm = "\u0441\u0442\u0440\u043E\u043A \u0432\u044B\u0431\u0440\u0430\u043D\u043E";
      const lastDigit = count % 10;
      if (lastDigit > 1 && lastDigit < 5) {
        pluralForm = "\u0441\u0442\u0440\u043E\u043A\u0438 \u0432\u044B\u0431\u0440\u0430\u043D\u044B";
      } else if (lastDigit === 1) {
        pluralForm = "\u0441\u0442\u0440\u043E\u043A\u0430 \u0432\u044B\u0431\u0440\u0430\u043D\u0430";
      }
      return `${count} ${pluralForm}`;
    },
    // Total row amount footer text
    footerTotalRows: "\u0412\u0441\u0435\u0433\u043E \u0441\u0442\u0440\u043E\u043A:",
    // Total visible row amount footer text
    footerTotalVisibleRows: (visibleCount, totalCount) => `${visibleCount.toLocaleString()} \u0438\u0437 ${totalCount.toLocaleString()}`,
    // Checkbox selection text
    checkboxSelectionHeaderName: "\u0412\u044B\u0431\u043E\u0440 \u0444\u043B\u0430\u0436\u043A\u0430",
    checkboxSelectionSelectAllRows: "\u0412\u044B\u0431\u0440\u0430\u0442\u044C \u0432\u0441\u0435 \u0441\u0442\u0440\u043E\u043A\u0438",
    checkboxSelectionUnselectAllRows: "\u041E\u0442\u043C\u0435\u043D\u0438\u0442\u044C \u0432\u044B\u0431\u043E\u0440 \u0432\u0441\u0435\u0445 \u0441\u0442\u0440\u043E\u043A",
    checkboxSelectionSelectRow: "\u0412\u044B\u0431\u0440\u0430\u0442\u044C \u0441\u0442\u0440\u043E\u043A\u0443",
    checkboxSelectionUnselectRow: "\u041E\u0442\u043C\u0435\u043D\u0438\u0442\u044C \u0432\u044B\u0431\u043E\u0440 \u0441\u0442\u0440\u043E\u043A\u0438",
    // Boolean cell text
    booleanCellTrueLabel: "\u0438\u0441\u0442\u0438\u043D\u0430",
    booleanCellFalseLabel: "\u043B\u043E\u0436\u044C",
    // Actions cell more text
    actionsCellMore: "\u0435\u0449\u0451",
    // Column pinning text
    pinToLeft: "\u0417\u0430\u043A\u0440\u0435\u043F\u0438\u0442\u044C \u0441\u043B\u0435\u0432\u0430",
    pinToRight: "\u0417\u0430\u043A\u0440\u0435\u043F\u0438\u0442\u044C \u0441\u043F\u0440\u0430\u0432\u0430",
    unpin: "\u041E\u0442\u043A\u0440\u0435\u043F\u0438\u0442\u044C",
    // Tree Data
    treeDataGroupingHeaderName: "\u0413\u0440\u0443\u043F\u043F\u0430",
    treeDataExpand: "\u043F\u043E\u043A\u0430\u0437\u0430\u0442\u044C \u0434\u043E\u0447\u0435\u0440\u043D\u0438\u0435 \u044D\u043B\u0435\u043C\u0435\u043D\u0442\u044B",
    treeDataCollapse: "\u0441\u043A\u0440\u044B\u0442\u044C \u0434\u043E\u0447\u0435\u0440\u043D\u0438\u0435 \u044D\u043B\u0435\u043C\u0435\u043D\u0442\u044B",
    // Grouping columns
    groupingColumnHeaderName: "\u0413\u0440\u0443\u043F\u043F\u0430",
    groupColumn: (name) => `\u0421\u0433\u0440\u0443\u043F\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u043F\u043E ${name}`,
    unGroupColumn: (name) => `\u0420\u0430\u0437\u0433\u0440\u0443\u043F\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u043F\u043E ${name}`,
    // Master/detail
    detailPanelToggle: "\u0414\u0435\u0442\u0430\u043B\u0438",
    expandDetailPanel: "\u0420\u0430\u0437\u0432\u0435\u0440\u043D\u0443\u0442\u044C",
    collapseDetailPanel: "\u0421\u0432\u0435\u0440\u043D\u0443\u0442\u044C",
    // Row reordering text
    rowReorderingHeaderName: "\u0418\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u0435 \u043F\u043E\u0440\u044F\u0434\u043A\u0430 \u0441\u0442\u0440\u043E\u043A",
    // Aggregation
    aggregationMenuItemHeader: "\u041E\u0431\u044A\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u0435 \u0434\u0430\u043D\u043D\u044B\u0445",
    aggregationFunctionLabelSum: "\u0441\u0443\u043C\u043C",
    aggregationFunctionLabelAvg: "\u0441\u0440\u0437\u043D\u0430\u0447",
    aggregationFunctionLabelMin: "\u043C\u0438\u043D",
    aggregationFunctionLabelMax: "\u043C\u0430\u043A\u0441",
    aggregationFunctionLabelSize: "\u0441\u0447\u0435\u0442"
  };
  var ruRU2 = getGridLocalization(ruRUGrid, ruRU);

  // node_modules/@mui/x-data-grid/locales/skSK.js
  var skSKGrid = {
    // Root
    noRowsLabel: "\u017Diadne z\xE1znamy",
    noResultsOverlayLabel: "Nena\u0161li sa \u017Eadne v\xFDsledky.",
    // Density selector toolbar button text
    toolbarDensity: "Hustota",
    toolbarDensityLabel: "Hustota",
    toolbarDensityCompact: "Kompaktn\xE1",
    toolbarDensityStandard: "\u0160tandartn\xE1",
    toolbarDensityComfortable: "Komfortn\xE1",
    // Columns selector toolbar button text
    toolbarColumns: "St\u013Apce",
    toolbarColumnsLabel: "Vybra\u0165 st\u013Apce",
    // Filters toolbar button text
    toolbarFilters: "Filtre",
    toolbarFiltersLabel: "Zobrazi\u0165 filtre",
    toolbarFiltersTooltipHide: "Skry\u0165 filtre ",
    toolbarFiltersTooltipShow: "Zobrazi\u0165 filtre",
    toolbarFiltersTooltipActive: (count) => {
      let pluralForm = "akt\xEDvnych filtrov";
      if (count > 1 && count < 5) {
        pluralForm = "akt\xEDvne filtre";
      } else if (count === 1) {
        pluralForm = "akt\xEDvny filter";
      }
      return `${count} ${pluralForm}`;
    },
    // Quick filter toolbar field
    toolbarQuickFilterPlaceholder: "Vyh\u013Eada\u0165\u2026",
    toolbarQuickFilterLabel: "Vyh\u013Eada\u0165",
    toolbarQuickFilterDeleteIconLabel: "Vymaza\u0165",
    // Export selector toolbar button text
    toolbarExport: "Export",
    toolbarExportLabel: "Export",
    toolbarExportCSV: "Stiahnu\u0165 ako CSV",
    toolbarExportPrint: "Vytla\u010Di\u0165",
    toolbarExportExcel: "Stiahnu\u0165 ako Excel",
    // Columns panel text
    columnsPanelTextFieldLabel: "N\xE1js\u0165 st\u013Apec",
    columnsPanelTextFieldPlaceholder: "N\xE1zov st\u013Apca",
    columnsPanelDragIconLabel: "Usporiad\u0165 st\u013Apce",
    columnsPanelShowAllButton: "Zobrazi\u0165 v\u0161etko",
    columnsPanelHideAllButton: "Skry\u0165 v\u0161etko",
    // Filter panel text
    filterPanelAddFilter: "Prida\u0165 filter",
    filterPanelRemoveAll: "Odstr\xE1ni\u0165 v\u0161etky",
    filterPanelDeleteIconLabel: "Odstr\xE1ni\u0165",
    filterPanelLogicOperator: "Logick\xFD oper\xE1tor",
    filterPanelOperator: "Oper\xE1tory",
    filterPanelOperatorAnd: "A",
    filterPanelOperatorOr: "Alebo",
    filterPanelColumns: "St\u013Apce",
    filterPanelInputLabel: "Hodnota",
    filterPanelInputPlaceholder: "Hodnota filtra",
    // Filter operators text
    filterOperatorContains: "obsahuje",
    filterOperatorEquals: "rovn\xE1 sa",
    filterOperatorStartsWith: "za\u010D\xEDna s",
    filterOperatorEndsWith: "kon\u010D\xED na",
    filterOperatorIs: "je",
    filterOperatorNot: "nie je",
    filterOperatorAfter: "je po",
    filterOperatorOnOrAfter: "je na alebo po",
    filterOperatorBefore: "je pred",
    filterOperatorOnOrBefore: "je na alebo sk\xF4r",
    filterOperatorIsEmpty: "je pr\xE1zdny",
    filterOperatorIsNotEmpty: "nie je pr\xE1zdny",
    filterOperatorIsAnyOf: "je jeden z",
    "filterOperator=": "=",
    "filterOperator!=": "!=",
    "filterOperator>": ">",
    "filterOperator>=": ">=",
    "filterOperator<": "<",
    "filterOperator<=": "<=",
    // Header filter operators text
    headerFilterOperatorContains: "Obsahuje",
    headerFilterOperatorEquals: "Rovn\xE1 sa",
    headerFilterOperatorStartsWith: "Za\u010D\xEDna s",
    headerFilterOperatorEndsWith: "Kon\u010D\xED na",
    headerFilterOperatorIs: "Je",
    headerFilterOperatorNot: "Nie je",
    headerFilterOperatorAfter: "Je po",
    headerFilterOperatorOnOrAfter: "Je na alebo po",
    headerFilterOperatorBefore: "Je pred",
    headerFilterOperatorOnOrBefore: "Je na alebo sk\xF4r",
    headerFilterOperatorIsEmpty: "Je pr\xE1zdny",
    headerFilterOperatorIsNotEmpty: "Nie je pr\xE1zdny",
    headerFilterOperatorIsAnyOf: "Je jeden z",
    "headerFilterOperator=": "Rovn\xE1 sa",
    "headerFilterOperator!=": "Nerovn\xE1 sa",
    "headerFilterOperator>": "V\xE4\u010D\u0161\xED ako",
    "headerFilterOperator>=": "V\xE4\u010D\u0161\xED ako alebo rovn\xFD",
    "headerFilterOperator<": "Men\u0161\xED ako",
    "headerFilterOperator<=": "Men\u0161\xED ako alebo rovn\xFD",
    // Filter values text
    filterValueAny: "ak\xFDko\u013Evek",
    filterValueTrue: "\xE1no",
    filterValueFalse: "nie",
    // Column menu text
    columnMenuLabel: "Menu",
    columnMenuShowColumns: "Zobrazi\u0165 st\u013Apce",
    columnMenuManageColumns: "Spravova\u0165 st\u013Apce",
    columnMenuFilter: "Filter",
    columnMenuHideColumn: "Skry\u0165",
    columnMenuUnsort: "Zru\u0161i\u0165 filtre",
    columnMenuSortAsc: "Zoradi\u0165 vzostupne",
    columnMenuSortDesc: "Zoradi\u0165 zostupne",
    // Column header text
    columnHeaderFiltersTooltipActive: (count) => {
      let pluralForm = "akt\xEDvnych filtrov";
      if (count > 1 && count < 5) {
        pluralForm = "akt\xEDvne filtre";
      } else if (count === 1) {
        pluralForm = "akt\xEDvny filter";
      }
      return `${count} ${pluralForm}`;
    },
    columnHeaderFiltersLabel: "Zobrazi\u0165 filtre",
    columnHeaderSortIconLabel: "Filtrova\u0165",
    // Rows selected footer text
    footerRowSelected: (count) => {
      let pluralForm = "vybran\xFDch z\xE1znamov";
      if (count > 1 && count < 5) {
        pluralForm = "vybran\xE9 z\xE1znamy";
      } else if (count === 1) {
        pluralForm = "vybran\xFD z\xE1znam";
      }
      return `${count} ${pluralForm}`;
    },
    // Total row amount footer text
    footerTotalRows: "Riadkov spolu:",
    // Total visible row amount footer text
    footerTotalVisibleRows: (visibleCount, totalCount) => {
      const str = totalCount.toString();
      const firstDigit = str[0];
      const op = ["4", "6", "7"].includes(firstDigit) || firstDigit === "1" && str.length % 3 === 0 ? "zo" : "z";
      return `${visibleCount.toLocaleString()} ${op} ${totalCount.toLocaleString()}`;
    },
    // Checkbox selection text
    checkboxSelectionHeaderName: "V\xFDber riadku",
    checkboxSelectionSelectAllRows: "Vybra\u0165 v\u0161etky riadky",
    checkboxSelectionUnselectAllRows: "Zru\u0161i\u0165 v\xFDber v\u0161etk\xFDch riadkov",
    checkboxSelectionSelectRow: "Vyber riadok",
    checkboxSelectionUnselectRow: "Zru\u0161 v\xFDber riadku",
    // Boolean cell text
    booleanCellTrueLabel: "\xE1no",
    booleanCellFalseLabel: "nie",
    // Actions cell more text
    actionsCellMore: "viac",
    // Column pinning text
    pinToLeft: "Pripn\xFA\u0165 na \u013Eavo",
    pinToRight: "Pripn\xFA\u0165 na pravo",
    unpin: "Odopn\xFA\u0165",
    // Tree Data
    treeDataGroupingHeaderName: "Skupina",
    treeDataExpand: "zobrazi\u0165 potomkov",
    treeDataCollapse: "skry\u0165 potomkov",
    // Grouping columns
    groupingColumnHeaderName: "Skupina",
    groupColumn: (name) => `Zoskupi\u0165 pod\u013Ea ${name}`,
    unGroupColumn: (name) => `Presta\u0165 zoskupova\u0165 pod\u013Ea ${name}`,
    // Master/detail
    detailPanelToggle: "Prepn\xFA\u0165 detail panelu",
    expandDetailPanel: "Rozbali\u0165",
    collapseDetailPanel: "Zbali\u0165",
    // Row reordering text
    rowReorderingHeaderName: "Preusporiad\xE1vanie riadkov",
    // Aggregation
    aggregationMenuItemHeader: "Agreg\xE1cia",
    aggregationFunctionLabelSum: "suma",
    aggregationFunctionLabelAvg: "priemer",
    aggregationFunctionLabelMin: "min",
    aggregationFunctionLabelMax: "max",
    aggregationFunctionLabelSize: "po\u010Det"
  };
  var skSK2 = getGridLocalization(skSKGrid, skSK);

  // node_modules/@mui/x-data-grid/locales/svSE.js
  var svSEGrid = {
    // Root
    noRowsLabel: "Inga rader",
    noResultsOverlayLabel: "Inga resultat funna.",
    // Density selector toolbar button text
    toolbarDensity: "Densitet",
    toolbarDensityLabel: "Densitet",
    toolbarDensityCompact: "Kompakt",
    toolbarDensityStandard: "Standard",
    toolbarDensityComfortable: "Luftig",
    // Columns selector toolbar button text
    toolbarColumns: "Kolumner",
    toolbarColumnsLabel: "V\xE4lj kolumner",
    // Filters toolbar button text
    toolbarFilters: "Filter",
    toolbarFiltersLabel: "Visa filter",
    toolbarFiltersTooltipHide: "D\xF6lj filter",
    toolbarFiltersTooltipShow: "Visa filter",
    toolbarFiltersTooltipActive: (count) => count !== 1 ? `${count} aktiva filter` : `${count} aktivt filter`,
    // Quick filter toolbar field
    toolbarQuickFilterPlaceholder: "S\xF6k\u2026",
    toolbarQuickFilterLabel: "S\xF6k",
    toolbarQuickFilterDeleteIconLabel: "Rensa",
    // Export selector toolbar button text
    toolbarExport: "Exportera",
    toolbarExportLabel: "Exportera",
    toolbarExportCSV: "Ladda ner som CSV",
    toolbarExportPrint: "Skriv ut",
    toolbarExportExcel: "Ladda ner som Excel",
    // Columns panel text
    columnsPanelTextFieldLabel: "Hitta kolumn",
    columnsPanelTextFieldPlaceholder: "Kolumntitel",
    columnsPanelDragIconLabel: "Ordna om kolumnen",
    columnsPanelShowAllButton: "Visa alla",
    columnsPanelHideAllButton: "D\xF6lj alla",
    // Filter panel text
    filterPanelAddFilter: "L\xE4gg till filter",
    filterPanelRemoveAll: "Ta bort alla",
    filterPanelDeleteIconLabel: "Ta bort",
    filterPanelLogicOperator: "Logisk operator",
    filterPanelOperator: "Operator",
    filterPanelOperatorAnd: "Och",
    filterPanelOperatorOr: "Eller",
    filterPanelColumns: "Kolumner",
    filterPanelInputLabel: "V\xE4rde",
    filterPanelInputPlaceholder: "Filterv\xE4rde",
    // Filter operators text
    filterOperatorContains: "inneh\xE5ller",
    filterOperatorEquals: "lika med",
    filterOperatorStartsWith: "b\xF6rjar med",
    filterOperatorEndsWith: "slutar med",
    filterOperatorIs: "\xE4r",
    filterOperatorNot: "\xE4r inte",
    filterOperatorAfter: "\xE4r efter",
    filterOperatorOnOrAfter: "\xE4r p\xE5 eller efter",
    filterOperatorBefore: "\xE4r innan",
    filterOperatorOnOrBefore: "\xE4r p\xE5 eller innan",
    filterOperatorIsEmpty: "\xE4r tom",
    filterOperatorIsNotEmpty: "\xE4r inte tom",
    filterOperatorIsAnyOf: "\xE4r n\xE5gon av",
    "filterOperator=": "=",
    "filterOperator!=": "!=",
    "filterOperator>": ">",
    "filterOperator>=": ">=",
    "filterOperator<": "<",
    "filterOperator<=": "<=",
    // Header filter operators text
    headerFilterOperatorContains: "Inneh\xE5ller",
    headerFilterOperatorEquals: "Lika med",
    headerFilterOperatorStartsWith: "B\xF6rjar med",
    headerFilterOperatorEndsWith: "Slutar med",
    headerFilterOperatorIs: "\xC4r",
    headerFilterOperatorNot: "\xC4r inte",
    headerFilterOperatorAfter: "\xC4r efter",
    headerFilterOperatorOnOrAfter: "\xC4r p\xE5 eller efter",
    headerFilterOperatorBefore: "\xC4r innan",
    headerFilterOperatorOnOrBefore: "\xC4r p\xE5 eller innan",
    headerFilterOperatorIsEmpty: "\xC4r tom",
    headerFilterOperatorIsNotEmpty: "\xC4r inte tom",
    headerFilterOperatorIsAnyOf: "Inneh\xE5ller n\xE5gon av",
    "headerFilterOperator=": "Lika med",
    "headerFilterOperator!=": "Inte lika med",
    "headerFilterOperator>": "St\xF6rre \xE4n",
    "headerFilterOperator>=": "St\xF6rre eller lika med",
    "headerFilterOperator<": "Mindre \xE4n",
    "headerFilterOperator<=": "Mindre eller lika med",
    // Filter values text
    filterValueAny: "n\xE5got",
    filterValueTrue: "sant",
    filterValueFalse: "falskt",
    // Column menu text
    columnMenuLabel: "Meny",
    columnMenuShowColumns: "Visa kolumner",
    columnMenuManageColumns: "Hantera kolumner",
    columnMenuFilter: "Filtrera",
    columnMenuHideColumn: "D\xF6lj",
    columnMenuUnsort: "Ta bort sortering",
    columnMenuSortAsc: "Sortera stigande",
    columnMenuSortDesc: "Sortera fallande",
    // Column header text
    columnHeaderFiltersTooltipActive: (count) => count !== 1 ? `${count} aktiva filter` : `${count} aktivt filter`,
    columnHeaderFiltersLabel: "Visa filter",
    columnHeaderSortIconLabel: "Sortera",
    // Rows selected footer text
    footerRowSelected: (count) => count !== 1 ? `${count.toLocaleString()} rader markerade` : `${count.toLocaleString()} rad markerad`,
    // Total row amount footer text
    footerTotalRows: "Totalt antal rader:",
    // Total visible row amount footer text
    footerTotalVisibleRows: (visibleCount, totalCount) => `${visibleCount.toLocaleString()} av ${totalCount.toLocaleString()}`,
    // Checkbox selection text
    checkboxSelectionHeaderName: "Markering med kryssruta",
    checkboxSelectionSelectAllRows: "Markera alla rader",
    checkboxSelectionUnselectAllRows: "Avmarkera alla rader",
    checkboxSelectionSelectRow: "Markera rad",
    checkboxSelectionUnselectRow: "Avmarkera rad",
    // Boolean cell text
    booleanCellTrueLabel: "ja",
    booleanCellFalseLabel: "nej",
    // Actions cell more text
    actionsCellMore: "mer",
    // Column pinning text
    pinToLeft: "F\xE4st till v\xE4nster",
    pinToRight: "F\xE4st till h\xF6ger",
    unpin: "Ta bort f\xE4stning",
    // Tree Data
    treeDataGroupingHeaderName: "Grupp",
    treeDataExpand: "visa underordnade",
    treeDataCollapse: "d\xF6lj underordnade",
    // Grouping columns
    groupingColumnHeaderName: "Grupp",
    groupColumn: (name) => `Gruppera efter ${name}`,
    unGroupColumn: (name) => `Sluta gruppera efter ${name}`,
    // Master/detail
    detailPanelToggle: "V\xE4xla detaljpanel",
    expandDetailPanel: "Expandera",
    collapseDetailPanel: "Kollapsa",
    // Row reordering text
    rowReorderingHeaderName: "Ordna om rader",
    // Aggregation
    aggregationMenuItemHeader: "Aggregering",
    aggregationFunctionLabelSum: "summa",
    aggregationFunctionLabelAvg: "medel",
    aggregationFunctionLabelMin: "min",
    aggregationFunctionLabelMax: "max",
    aggregationFunctionLabelSize: "antal"
  };
  var svSE2 = getGridLocalization(svSEGrid, svSE);

  // node_modules/@mui/x-data-grid/locales/trTR.js
  var trTRGrid = {
    // Root
    noRowsLabel: "Sat\u0131r yok",
    noResultsOverlayLabel: "Sonu\xE7 bulunamad\u0131.",
    // Density selector toolbar button text
    toolbarDensity: "Yo\u011Funluk",
    toolbarDensityLabel: "Yo\u011Funluk",
    toolbarDensityCompact: "S\u0131k\u0131",
    toolbarDensityStandard: "Standart",
    toolbarDensityComfortable: "Rahat",
    // Columns selector toolbar button text
    toolbarColumns: "S\xFCtunlar",
    toolbarColumnsLabel: "S\xFCtun se\xE7",
    // Filters toolbar button text
    toolbarFilters: "Filtreler",
    toolbarFiltersLabel: "Filtreleri g\xF6ster",
    toolbarFiltersTooltipHide: "Filtreleri gizle",
    toolbarFiltersTooltipShow: "Filtreleri g\xF6ster",
    toolbarFiltersTooltipActive: (count) => `${count} aktif filtre`,
    // Quick filter toolbar field
    toolbarQuickFilterPlaceholder: "Ara\u2026",
    toolbarQuickFilterLabel: "Ara",
    toolbarQuickFilterDeleteIconLabel: "Temizle",
    // Export selector toolbar button text
    toolbarExport: "D\u0131\u015Fa aktar",
    toolbarExportLabel: "D\u0131\u015Fa aktar",
    toolbarExportCSV: "CSV olarak aktar",
    toolbarExportPrint: "Yazd\u0131r",
    toolbarExportExcel: "Excel olarak aktar",
    // Columns panel text
    columnsPanelTextFieldLabel: "S\xFCtun ara",
    columnsPanelTextFieldPlaceholder: "S\xFCtun ad\u0131",
    columnsPanelDragIconLabel: "S\xFCtunlar\u0131 yeniden s\u0131rala",
    columnsPanelShowAllButton: "Hepsini g\xF6ster",
    columnsPanelHideAllButton: "Hepsini gizle",
    // Filter panel text
    filterPanelAddFilter: "Filtre Ekle",
    filterPanelRemoveAll: "Hepsini kald\u0131r",
    filterPanelDeleteIconLabel: "Kald\u0131r",
    filterPanelLogicOperator: "Mant\u0131ksal operat\xF6rler",
    filterPanelOperator: "Operat\xF6r",
    filterPanelOperatorAnd: "Ve",
    filterPanelOperatorOr: "Veya",
    filterPanelColumns: "S\xFCtunlar",
    filterPanelInputLabel: "De\u011Fer",
    filterPanelInputPlaceholder: "Filtre de\u011Feri",
    // Filter operators text
    filterOperatorContains: "i\xE7erir",
    filterOperatorEquals: "e\u015Fittir",
    filterOperatorStartsWith: "ile ba\u015Flar",
    filterOperatorEndsWith: "ile biter",
    filterOperatorIs: "e\u015Fittir",
    filterOperatorNot: "e\u015Fit de\u011Fildir",
    filterOperatorAfter: "b\xFCy\xFCk",
    filterOperatorOnOrAfter: "b\xFCy\xFCk e\u015Fit",
    filterOperatorBefore: "k\xFC\xE7\xFCk",
    filterOperatorOnOrBefore: "k\xFC\xE7\xFCk e\u015Fit",
    filterOperatorIsEmpty: "bo\u015F",
    filterOperatorIsNotEmpty: "dolu",
    filterOperatorIsAnyOf: "herhangi biri",
    "filterOperator=": "=",
    "filterOperator!=": "!=",
    "filterOperator>": ">",
    "filterOperator>=": ">=",
    "filterOperator<": "<",
    "filterOperator<=": "<=",
    // Header filter operators text
    headerFilterOperatorContains: "\u015Eunu i\xE7erir",
    headerFilterOperatorEquals: "\u015Euna e\u015Fittir",
    headerFilterOperatorStartsWith: "\u015Eununla ba\u015Flar",
    headerFilterOperatorEndsWith: "\u015Eununla biter",
    // headerFilterOperatorIs: 'Is',
    // headerFilterOperatorNot: 'Is not',
    // headerFilterOperatorAfter: 'Is after',
    // headerFilterOperatorOnOrAfter: 'Is on or after',
    // headerFilterOperatorBefore: 'Is before',
    // headerFilterOperatorOnOrBefore: 'Is on or before',
    // headerFilterOperatorIsEmpty: 'Is empty',
    // headerFilterOperatorIsNotEmpty: 'Is not empty',
    // headerFilterOperatorIsAnyOf: 'Is any of',
    // 'headerFilterOperator=': 'Equals',
    // 'headerFilterOperator!=': 'Not equals',
    // 'headerFilterOperator>': 'Greater than',
    // 'headerFilterOperator>=': 'Greater than or equal to',
    // 'headerFilterOperator<': 'Less than',
    // 'headerFilterOperator<=': 'Less than or equal to',
    // Filter values text
    filterValueAny: "herhangi",
    filterValueTrue: "do\u011Fru",
    filterValueFalse: "yanl\u0131\u015F",
    // Column menu text
    columnMenuLabel: "Men\xFC",
    columnMenuShowColumns: "S\xFCtunlar\u0131 g\xF6ster",
    columnMenuManageColumns: "S\xFCtunlar\u0131 y\xF6net",
    columnMenuFilter: "Filtre Ekle",
    columnMenuHideColumn: "Gizle",
    columnMenuUnsort: "Varsay\u0131lan S\u0131ralama",
    columnMenuSortAsc: "S\u0131rala - Artan",
    columnMenuSortDesc: "S\u0131rala - Azalan",
    // Column header text
    columnHeaderFiltersTooltipActive: (count) => `${count} filtre aktif`,
    columnHeaderFiltersLabel: "Filtreleri g\xF6ster",
    columnHeaderSortIconLabel: "S\u0131rala",
    // Rows selected footer text
    footerRowSelected: (count) => `${count.toLocaleString()} sat\u0131r se\xE7ildi`,
    // Total row amount footer text
    footerTotalRows: "Toplam Sat\u0131r:",
    // Total visible row amount footer text
    footerTotalVisibleRows: (visibleCount, totalCount) => `${visibleCount.toLocaleString()} / ${totalCount.toLocaleString()}`,
    // Checkbox selection text
    checkboxSelectionHeaderName: "Se\xE7im",
    checkboxSelectionSelectAllRows: "T\xFCm sat\u0131rlar\u0131 se\xE7",
    checkboxSelectionUnselectAllRows: "T\xFCm sat\u0131rlar\u0131n se\xE7imini kald\u0131r",
    checkboxSelectionSelectRow: "Sat\u0131r\u0131 se\xE7",
    checkboxSelectionUnselectRow: "Sat\u0131r se\xE7imini b\u0131rak",
    // Boolean cell text
    booleanCellTrueLabel: "Evet",
    booleanCellFalseLabel: "Hay\u0131r",
    // Actions cell more text
    actionsCellMore: "daha fazla",
    // Column pinning text
    pinToLeft: "Sola sabitle",
    pinToRight: "Sa\u011Fa sabitle",
    unpin: "Sabitlemeyi kald\u0131r",
    // Tree Data
    treeDataGroupingHeaderName: "Grup",
    treeDataExpand: "g\xF6ster",
    treeDataCollapse: "gizle",
    // Grouping columns
    groupingColumnHeaderName: "Grup",
    groupColumn: (name) => `${name} i\xE7in grupla`,
    unGroupColumn: (name) => `${name} i\xE7in gruplamay\u0131 kald\u0131r`,
    // Master/detail
    detailPanelToggle: "Detay g\xF6r\xFCn\xFCm\xFCne ge\xE7i\u015F",
    expandDetailPanel: "Geni\u015Flet",
    collapseDetailPanel: "Gizle",
    // Row reordering text
    rowReorderingHeaderName: "Sat\u0131r\u0131 yeniden s\u0131rala",
    // Aggregation
    aggregationMenuItemHeader: "Toplama",
    aggregationFunctionLabelSum: "top",
    aggregationFunctionLabelAvg: "ort",
    aggregationFunctionLabelMin: "min",
    aggregationFunctionLabelMax: "maks",
    aggregationFunctionLabelSize: "boyut"
  };
  var trTR2 = getGridLocalization(trTRGrid, trTR);

  // node_modules/@mui/x-data-grid/locales/ukUA.js
  var getPluralForm2 = (count, options) => {
    let pluralForm = options.many;
    const lastDigit = count % 10;
    if (lastDigit > 1 && lastDigit < 5) {
      pluralForm = options.few;
    } else if (lastDigit === 1) {
      pluralForm = options.one;
    }
    return `${count} ${pluralForm}`;
  };
  var ukUAGrid = {
    // Root
    noRowsLabel: "\u041D\u0435\u043C\u0430\u0454 \u0440\u044F\u0434\u043A\u0456\u0432",
    noResultsOverlayLabel: "\u0414\u0430\u043D\u0456 \u043D\u0435 \u0437\u043D\u0430\u0439\u0434\u0435\u043D\u043E.",
    // Density selector toolbar button text
    toolbarDensity: "\u0412\u0438\u0441\u043E\u0442\u0430 \u0440\u044F\u0434\u043A\u0430",
    toolbarDensityLabel: "\u0412\u0438\u0441\u043E\u0442\u0430 \u0440\u044F\u0434\u043A\u0430",
    toolbarDensityCompact: "\u041A\u043E\u043C\u043F\u0430\u043A\u0442\u043D\u0438\u0439",
    toolbarDensityStandard: "\u0421\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u0438\u0439",
    toolbarDensityComfortable: "\u041A\u043E\u043C\u0444\u043E\u0440\u0442\u043D\u0438\u0439",
    // Columns selector toolbar button text
    toolbarColumns: "\u0421\u0442\u043E\u0432\u043F\u0446\u0456",
    toolbarColumnsLabel: "\u0412\u0438\u0434\u0456\u043B\u0456\u0442\u044C \u0441\u0442\u043E\u0432\u043F\u0446\u0456",
    // Filters toolbar button text
    toolbarFilters: "\u0424\u0456\u043B\u044C\u0442\u0440\u0438",
    toolbarFiltersLabel: "\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u0438 \u0444\u0456\u043B\u044C\u0442\u0440\u0438",
    toolbarFiltersTooltipHide: "\u041F\u0440\u0438\u0445\u043E\u0432\u0430\u0442\u0438 \u0444\u0456\u043B\u044C\u0442\u0440\u0438",
    toolbarFiltersTooltipShow: "\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u0438 \u0444\u0456\u043B\u044C\u0442\u0440\u0438",
    toolbarFiltersTooltipActive: (count) => getPluralForm2(count, {
      one: "\u0430\u043A\u0442\u0438\u0432\u043D\u0438\u0439 \u0444\u0456\u043B\u044C\u0442\u0440",
      few: "\u0430\u043A\u0442\u0438\u0432\u043D\u0456 \u0444\u0456\u043B\u044C\u0442\u0440\u0438",
      many: "\u0430\u043A\u0442\u0438\u0432\u043D\u0438\u0445 \u0444\u0456\u043B\u044C\u0442\u0440\u0456\u0432"
    }),
    // Quick filter toolbar field
    toolbarQuickFilterPlaceholder: "\u041F\u043E\u0448\u0443\u043A\u2026",
    toolbarQuickFilterLabel: "\u041F\u043E\u0448\u0443\u043A",
    toolbarQuickFilterDeleteIconLabel: "\u041E\u0447\u0438\u0441\u0442\u0438\u0442\u0438",
    // Export selector toolbar button text
    toolbarExport: "\u0415\u043A\u0441\u043F\u043E\u0440\u0442",
    toolbarExportLabel: "\u0415\u043A\u0441\u043F\u043E\u0440\u0442",
    toolbarExportCSV: "\u0417\u0430\u0432\u0430\u043D\u0442\u0430\u0436\u0438\u0442\u0438 \u0443 \u0444\u043E\u0440\u043C\u0430\u0442\u0456 CSV",
    toolbarExportPrint: "\u0414\u0440\u0443\u043A",
    toolbarExportExcel: "\u0417\u0430\u0432\u0430\u043D\u0442\u0430\u0436\u0438\u0442\u0438 \u0443 \u0444\u043E\u0440\u043C\u0430\u0442\u0456 Excel",
    // Columns panel text
    columnsPanelTextFieldLabel: "\u0417\u043D\u0430\u0439\u0442\u0438 \u0441\u0442\u043E\u0432\u043F\u0435\u0446\u044C",
    columnsPanelTextFieldPlaceholder: "\u0417\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A \u0441\u0442\u043E\u0432\u043F\u0446\u044F",
    columnsPanelDragIconLabel: "\u0417\u043C\u0456\u043D\u0438\u0442\u0438 \u043F\u043E\u0440\u044F\u0434\u043E\u043A \u0441\u0442\u043E\u0432\u043F\u0446\u044F",
    columnsPanelShowAllButton: "\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u0438 \u0432\u0441\u0456",
    columnsPanelHideAllButton: "\u041F\u0440\u0438\u0445\u043E\u0432\u0430\u0442\u0438 \u0432\u0441\u0456",
    // Filter panel text
    filterPanelAddFilter: "\u0414\u043E\u0434\u0430\u0442\u0438 \u0444\u0456\u043B\u044C\u0442\u0440",
    filterPanelRemoveAll: "\u0412\u0438\u0434\u0430\u043B\u0438\u0442\u0438 \u0432\u0441\u0456",
    filterPanelDeleteIconLabel: "\u0412\u0438\u0434\u0430\u043B\u0438\u0442\u0438",
    filterPanelLogicOperator: "\u041B\u043E\u0433\u0456\u0447\u043D\u0430 \u0444\u0443\u043D\u043A\u0446\u0456\u044F",
    filterPanelOperator: "\u041E\u043F\u0435\u0440\u0430\u0442\u043E\u0440\u0438",
    filterPanelOperatorAnd: "\u0406",
    filterPanelOperatorOr: "\u0410\u0431\u043E",
    filterPanelColumns: "\u0421\u0442\u043E\u0432\u043F\u0446\u0456",
    filterPanelInputLabel: "\u0417\u043D\u0430\u0447\u0435\u043D\u043D\u044F",
    filterPanelInputPlaceholder: "\u0417\u043D\u0430\u0447\u0435\u043D\u043D\u044F \u0444\u0456\u043B\u044C\u0442\u0440\u0430",
    // Filter operators text
    filterOperatorContains: "\u043C\u0456\u0441\u0442\u0438\u0442\u044C",
    filterOperatorEquals: "\u0434\u043E\u0440\u0456\u0432\u043D\u044E\u0454",
    filterOperatorStartsWith: "\u043F\u043E\u0447\u0438\u043D\u0430\u0454\u0442\u044C\u0441\u044F \u0437",
    filterOperatorEndsWith: "\u0437\u0430\u043A\u0456\u043D\u0447\u0443\u0454\u0442\u044C\u0441\u044F \u043D\u0430",
    filterOperatorIs: "\u0434\u043E\u0440\u0456\u0432\u043D\u044E\u0454",
    filterOperatorNot: "\u043D\u0435 \u0434\u043E\u0440\u0456\u0432\u043D\u044E\u0454",
    filterOperatorAfter: "\u0431\u0456\u043B\u044C\u0448\u0435 \u043D\u0456\u0436",
    filterOperatorOnOrAfter: "\u0431\u0456\u043B\u044C\u0448\u0435 \u0430\u0431\u043E \u0434\u043E\u0440\u0456\u0432\u043D\u044E\u0454",
    filterOperatorBefore: "\u043C\u0435\u043D\u0448\u0435 \u043D\u0456\u0436",
    filterOperatorOnOrBefore: "\u043C\u0435\u043D\u0448\u0435 \u0430\u0431\u043E \u0434\u043E\u0440\u0456\u0432\u043D\u044E\u0454",
    filterOperatorIsEmpty: "\u043F\u043E\u0440\u043E\u0436\u043D\u0456\u0439",
    filterOperatorIsNotEmpty: "\u043D\u0435 \u043F\u043E\u0440\u043E\u0436\u043D\u0456\u0439",
    filterOperatorIsAnyOf: "\u0431\u0443\u0434\u044C-\u0449\u043E \u0456\u0437",
    "filterOperator=": "=",
    "filterOperator!=": "!=",
    "filterOperator>": ">",
    "filterOperator>=": ">=",
    "filterOperator<": "<",
    "filterOperator<=": "<=",
    // Header filter operators text
    headerFilterOperatorContains: "\u041C\u0456\u0441\u0442\u0438\u0442\u044C",
    headerFilterOperatorEquals: "\u0414\u043E\u0440\u0456\u0432\u043D\u044E\u0454",
    headerFilterOperatorStartsWith: "\u041F\u043E\u0447\u0438\u043D\u0430\u0454\u0442\u044C\u0441\u044F \u0437",
    headerFilterOperatorEndsWith: "\u0417\u0430\u043A\u0456\u043D\u0447\u0443\u0454\u0442\u044C\u0441\u044F \u043D\u0430",
    headerFilterOperatorIs: "\u0414\u043E\u0440\u0456\u0432\u043D\u044E\u0454",
    headerFilterOperatorNot: "\u041D\u0435 \u0434\u043E\u0440\u0456\u0432\u043D\u044E\u0454",
    headerFilterOperatorAfter: "\u041F\u0456\u0441\u043B\u044F",
    headerFilterOperatorOnOrAfter: "\u041F\u0456\u0441\u043B\u044F (\u0432\u043A\u043B\u044E\u0447\u0430\u044E\u0447\u0438)",
    headerFilterOperatorBefore: "\u0420\u0430\u043D\u0456\u0448\u0435",
    headerFilterOperatorOnOrBefore: "\u0420\u0430\u043D\u0456\u0448\u0435 (\u0432\u043A\u043B\u044E\u0447\u0430\u044E\u0447\u0438)",
    headerFilterOperatorIsEmpty: "\u041F\u043E\u0440\u043E\u0436\u043D\u0454",
    headerFilterOperatorIsNotEmpty: "\u041D\u0435 \u043F\u043E\u0440\u043E\u0436\u043D\u0454",
    headerFilterOperatorIsAnyOf: "\u0411\u0443\u0434\u044C-\u0449\u043E \u0456\u0437",
    "headerFilterOperator=": "\u0414\u043E\u0440\u0456\u0432\u043D\u044E\u0454",
    "headerFilterOperator!=": "\u041D\u0435 \u0434\u043E\u0440\u0456\u0432\u043D\u044E\u0454",
    "headerFilterOperator>": "\u0411\u0456\u043B\u044C\u0448\u0435 \u043D\u0456\u0436",
    "headerFilterOperator>=": "\u0411\u0456\u043B\u044C\u0448\u0435 \u0430\u0431\u043E \u0434\u043E\u0440\u0456\u0432\u043D\u044E\u0454",
    "headerFilterOperator<": "\u041C\u0435\u043D\u0448\u0435 \u043D\u0456\u0436",
    "headerFilterOperator<=": "\u041C\u0435\u043D\u0448\u0435 \u0430\u0431\u043E \u0434\u043E\u0440\u0456\u0432\u043D\u044E\u0454",
    // Filter values text
    filterValueAny: "\u0431\u0443\u0434\u044C-\u044F\u043A\u0438\u0439",
    filterValueTrue: "\u0442\u0430\u043A",
    filterValueFalse: "\u043D\u0456",
    // Column menu text
    columnMenuLabel: "\u041C\u0435\u043D\u044E",
    columnMenuShowColumns: "\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u0438 \u0441\u0442\u043E\u0432\u043F\u0446\u0456",
    columnMenuManageColumns: "\u041A\u0435\u0440\u0443\u0432\u0430\u043D\u043D\u044F \u0441\u0442\u043E\u0432\u043F\u0446\u044F\u043C\u0438",
    columnMenuFilter: "\u0424\u0456\u043B\u044C\u0442\u0440",
    columnMenuHideColumn: "\u041F\u0440\u0438\u0445\u043E\u0432\u0430\u0442\u0438",
    columnMenuUnsort: "\u0421\u043A\u0430\u0441\u0443\u0432\u0430\u0442\u0438 \u0441\u043E\u0440\u0442\u0443\u0432\u0430\u043D\u043D\u044F",
    columnMenuSortAsc: "\u0421\u043E\u0440\u0442\u0443\u0432\u0430\u0442\u0438 \u0437\u0430 \u0437\u0440\u043E\u0441\u0442\u0430\u043D\u043D\u044F\u043C",
    columnMenuSortDesc: "\u0421\u043E\u0440\u0442\u0443\u0432\u0430\u0442\u0438 \u0437\u0430 \u0441\u043F\u0430\u0434\u0430\u043D\u043D\u044F\u043C",
    // Column header text
    columnHeaderFiltersTooltipActive: (count) => getPluralForm2(count, {
      one: "\u0430\u043A\u0442\u0438\u0432\u043D\u0438\u0439 \u0444\u0456\u043B\u044C\u0442\u0440",
      few: "\u0430\u043A\u0442\u0438\u0432\u043D\u0456 \u0444\u0456\u043B\u044C\u0442\u0440\u0438",
      many: "\u0430\u043A\u0442\u0438\u0432\u043D\u0438\u0445 \u0444\u0456\u043B\u044C\u0442\u0440\u0456\u0432"
    }),
    columnHeaderFiltersLabel: "\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u0438 \u0444\u0456\u043B\u044C\u0442\u0440\u0438",
    columnHeaderSortIconLabel: "\u0421\u043E\u0440\u0442\u0443\u0432\u0430\u0442\u0438",
    // Rows selected footer text
    footerRowSelected: (count) => getPluralForm2(count, {
      one: "\u0432\u0438\u0431\u0440\u0430\u043D\u0438\u0439 \u0440\u044F\u0434\u043E\u043A",
      few: "\u0432\u0438\u0431\u0440\u0430\u043D\u0456 \u0440\u044F\u0434\u043A\u0438",
      many: "\u0432\u0438\u0431\u0440\u0430\u043D\u0438\u0445 \u0440\u044F\u0434\u043A\u0456\u0432"
    }),
    // Total row amount footer text
    footerTotalRows: "\u0423\u0441\u044C\u043E\u0433\u043E \u0440\u044F\u0434\u043A\u0456\u0432:",
    // Total visible row amount footer text
    footerTotalVisibleRows: (visibleCount, totalCount) => `${visibleCount.toLocaleString()} \u0437 ${totalCount.toLocaleString()}`,
    // Checkbox selection text
    checkboxSelectionHeaderName: "\u0412\u0438\u0431\u0456\u0440 \u043F\u0440\u0430\u043F\u043E\u0440\u0446\u044F",
    checkboxSelectionSelectAllRows: "\u0412\u0438\u0431\u0440\u0430\u0442\u0438 \u0432\u0441\u0456 \u0440\u044F\u0434\u043A\u0438",
    checkboxSelectionUnselectAllRows: "\u0421\u043A\u0430\u0441\u0443\u0432\u0430\u0442\u0438 \u0432\u0438\u0431\u0456\u0440 \u0432\u0441\u0456\u0445 \u0440\u044F\u0434\u043A\u0456\u0432",
    checkboxSelectionSelectRow: "\u0412\u0438\u0431\u0440\u0430\u0442\u0438 \u0440\u044F\u0434\u043E\u043A",
    checkboxSelectionUnselectRow: "\u0421\u043A\u0430\u0441\u0443\u0432\u0430\u0442\u0438 \u0432\u0438\u0431\u0456\u0440 \u0440\u044F\u0434\u043A\u0430",
    // Boolean cell text
    booleanCellTrueLabel: "\u0442\u0430\u043A",
    booleanCellFalseLabel: "\u043D\u0456",
    // Actions cell more text
    actionsCellMore: "\u0431\u0456\u043B\u044C\u0448\u0435",
    // Column pinning text
    pinToLeft: "\u0417\u0430\u043A\u0440\u0456\u043F\u0438\u0442\u0438 \u043B\u0456\u0432\u043E\u0440\u0443\u0447",
    pinToRight: "\u0417\u0430\u043A\u0440\u0456\u043F\u0438\u0442\u0438 \u043F\u0440\u0430\u0432\u043E\u0440\u0443\u0447",
    unpin: "\u0412\u0456\u0434\u043A\u0440\u0456\u043F\u0438\u0442\u0438",
    // Tree Data
    treeDataGroupingHeaderName: "\u0413\u0440\u0443\u043F\u0430",
    treeDataExpand: "\u043F\u043E\u043A\u0430\u0437\u0430\u0442\u0438 \u0434\u043E\u0447\u0456\u0440\u043D\u0456 \u0435\u043B\u0435\u043C\u0435\u043D\u0442\u0438",
    treeDataCollapse: "\u043F\u0440\u0438\u0445\u043E\u0432\u0430\u0442\u0438 \u0434\u043E\u0447\u0456\u0440\u043D\u0456 \u0435\u043B\u0435\u043C\u0435\u043D\u0442\u0438",
    // Grouping columns
    groupingColumnHeaderName: "\u0413\u0440\u0443\u043F\u0430",
    groupColumn: (name) => `\u0413\u0440\u0443\u043F\u0443\u0432\u0430\u0442\u0438 \u0437\u0430 ${name}`,
    unGroupColumn: (name) => `\u0412\u0456\u0434\u043C\u0456\u043D\u0438\u0442\u0438 \u0433\u0440\u0443\u043F\u0443\u0432\u0430\u043D\u043D\u044F \u0437\u0430 ${name}`,
    // Master/detail
    detailPanelToggle: "\u041F\u0435\u0440\u0435\u043C\u0438\u043A\u0430\u0447 \u043F\u0430\u043D\u0435\u043B\u0456 \u0434\u0435\u0442\u0430\u043B\u0435\u0439",
    expandDetailPanel: "\u041F\u043E\u043A\u0430\u0437\u0430\u0442\u0438",
    collapseDetailPanel: "\u041F\u0440\u0438\u0445\u043E\u0432\u0430\u0442\u0438",
    // Row reordering text
    rowReorderingHeaderName: "\u041F\u043E\u0440\u044F\u0434\u043E\u043A \u0440\u044F\u0434\u043A\u0456\u0432",
    // Aggregation
    aggregationMenuItemHeader: "\u0410\u0433\u0440\u0435\u0433\u0430\u0446\u0456\u044F",
    aggregationFunctionLabelSum: "\u0441\u0443\u043C\u0430",
    aggregationFunctionLabelAvg: "\u0441\u0435\u0440",
    aggregationFunctionLabelMin: "\u043C\u0456\u043D",
    aggregationFunctionLabelMax: "\u043C\u0430\u043A\u0441",
    aggregationFunctionLabelSize: "\u043A\u0456\u043B\u044C\u043A\u0456\u0441\u0442\u044C"
  };
  var ukUA2 = getGridLocalization(ukUAGrid, ukUA);

  // node_modules/@mui/x-data-grid/locales/urPK.js
  var urPKGrid = {
    // Root
    noRowsLabel: "\u06A9\u0648\u0626\u06CC \u0642\u0637\u0627\u0631\u06CC\u06BA \u0646\u06C1\u06CC\u06BA",
    noResultsOverlayLabel: "\u06A9\u0648\u0626\u06CC \u0646\u062A\u0627\u0626\u062C \u0646\u06C1\u06CC\u06BA",
    // Density selector toolbar button text
    toolbarDensity: "\u06A9\u062B\u0627\u0641\u062A",
    toolbarDensityLabel: "\u06A9\u062B\u0627\u0641\u062A",
    toolbarDensityCompact: "\u062A\u0646\u06AF",
    toolbarDensityStandard: "\u062F\u0631\u0645\u06CC\u0627\u0646\u06C1",
    toolbarDensityComfortable: "\u0645\u0646\u0627\u0633\u0628",
    // Columns selector toolbar button text
    toolbarColumns: "\u06A9\u0627\u0644\u0645\u0632",
    toolbarColumnsLabel: "\u06A9\u0627\u0644\u0645\u0632 \u06A9\u0648 \u0645\u0646\u062A\u062E\u0628 \u06A9\u0631\u06CC\u06BA",
    // Filters toolbar button text
    toolbarFilters: "\u0641\u0644\u0679\u0631\u0632",
    toolbarFiltersLabel: "\u0641\u0644\u0679\u0631\u0632 \u062F\u06A9\u06BE\u0627\u0626\u06CC\u06BA",
    toolbarFiltersTooltipHide: "\u0641\u0644\u0679\u0631\u0632 \u0686\u06BE\u067E\u0627\u0626\u06CC\u06BA",
    toolbarFiltersTooltipShow: "\u0641\u0644\u0679\u0631\u0632 \u062F\u06A9\u06BE\u0627\u0626\u06CC\u06BA",
    toolbarFiltersTooltipActive: (count) => count !== 1 ? `${count} \u0641\u0639\u0627\u0644 \u0641\u0644\u0679\u0631\u0632` : `${count} \u0641\u0644\u0679\u0631\u0632 \u0641\u0639\u0627\u0644`,
    // Quick filter toolbar field
    toolbarQuickFilterPlaceholder: "\u062A\u0644\u0627\u0634 \u06A9\u0631\u06CC\u06BA\u06D4\u06D4\u06D4",
    toolbarQuickFilterLabel: "\u062A\u0644\u0627\u0634 \u06A9\u0631\u06CC\u06BA",
    toolbarQuickFilterDeleteIconLabel: "\u06A9\u0644\u0626\u06CC\u0631 \u06A9\u0631\u06CC\u06BA",
    // Export selector toolbar button text
    toolbarExport: "\u0627\u06CC\u06A9\u0633\u067E\u0648\u0631\u0679",
    toolbarExportLabel: "\u0627\u06CC\u06A9\u0633\u067E\u0648\u0631\u0679",
    toolbarExportCSV: "CSV \u06A9\u06D2 \u0637\u0648\u0631 \u067E\u0631 \u0688\u0627\u0648\u0674\u0646\u0644\u0648\u0688 \u06A9\u0631\u06CC\u06BA",
    toolbarExportPrint: "\u067E\u0631\u0646\u0679 \u06A9\u0631\u06CC\u06BA",
    toolbarExportExcel: "\u0627\u06CC\u06A9\u0633\u0644 \u06A9\u06D2 \u0637\u0648\u0631 \u067E\u0631 \u0688\u0627\u0648\u0674\u0646\u0644\u0648\u0688 \u06A9\u0631\u06CC\u06BA",
    // Columns panel text
    columnsPanelTextFieldLabel: "\u06A9\u0627\u0644\u0645 \u06A9\u0648 \u062A\u0644\u0627\u0634 \u06A9\u0631\u06CC\u06BA",
    columnsPanelTextFieldPlaceholder: "\u06A9\u0627\u0644\u0645 \u06A9\u0627 \u0639\u0646\u0648\u0627\u0646",
    columnsPanelDragIconLabel: "\u06A9\u0627\u0644\u0645 \u06A9\u06CC \u062A\u0631\u062A\u06CC\u0628 \u062A\u0628\u062F\u06CC\u0644 \u06A9\u0631\u06CC\u06BA",
    columnsPanelShowAllButton: "\u0633\u0627\u0631\u06D2 \u062F\u06A9\u06BE\u0627\u0626\u06CC\u06BA",
    columnsPanelHideAllButton: "\u0633\u0627\u0631\u06D2 \u0686\u06BE\u067E\u0627\u0626\u06CC\u06BA",
    // Filter panel text
    filterPanelAddFilter: "\u0646\u06CC\u0627 \u0641\u0644\u0679\u0631",
    filterPanelRemoveAll: "\u0633\u0627\u0631\u06D2 \u062E\u062A\u0645 \u06A9\u0631\u06CC\u06BA",
    filterPanelDeleteIconLabel: "\u062E\u062A\u0645 \u06A9\u0631\u06CC\u06BA",
    filterPanelLogicOperator: "\u0644\u0627\u062C\u06A9 \u0627\u0653\u067E\u0631\u06CC\u0679\u0631",
    filterPanelOperator: "\u0627\u0653\u067E\u0631\u06CC\u0679\u0631",
    filterPanelOperatorAnd: "\u0627\u0648\u0631",
    filterPanelOperatorOr: "\u06CC\u0627",
    filterPanelColumns: "\u06A9\u0627\u0644\u0645\u0632",
    filterPanelInputLabel: "\u0648\u06CC\u0644\u06CC\u0648",
    filterPanelInputPlaceholder: "\u0648\u06CC\u0644\u06CC\u0648 \u06A9\u0648 \u0641\u0644\u0679\u0631 \u06A9\u0631\u06CC\u06BA",
    // Filter operators text
    filterOperatorContains: "\u0634\u0627\u0645\u0644 \u06C1\u06D2",
    filterOperatorEquals: "\u0628\u0631\u0627\u0628\u0631 \u06C1\u06D2",
    filterOperatorStartsWith: "\u0634\u0631\u0648\u0639 \u06C1\u0648\u062A\u0627 \u06C1\u06D2",
    filterOperatorEndsWith: "\u062E\u062A\u0645 \u06C1\u0648\u062A\u0627 \u06C1\u06D2",
    filterOperatorIs: "\u06C1\u06D2",
    filterOperatorNot: "\u0646\u06C1\u06CC\u06BA",
    filterOperatorAfter: "\u0628\u0639\u062F \u0645\u06CC\u06BA \u06C1\u06D2",
    filterOperatorOnOrAfter: "\u067E\u0631 \u06CC\u0627 \u0628\u0639\u062F \u0645\u06CC\u06BA \u06C1\u06D2",
    filterOperatorBefore: "\u067E\u06C1\u0644\u06D2 \u06C1\u06D2",
    filterOperatorOnOrBefore: "\u067E\u0631 \u06CC\u0627 \u067E\u06C1\u0644\u06D2 \u06C1\u06D2",
    filterOperatorIsEmpty: "\u062E\u0627\u0644\u06CC \u06C1\u06D2",
    filterOperatorIsNotEmpty: "\u062E\u0627\u0644\u06CC \u0646\u06C1\u06CC\u06BA \u06C1\u06D2",
    filterOperatorIsAnyOf: "\u0627\u0646 \u0645\u06CC\u06BA \u0633\u06D2 \u06A9\u0648\u0626\u06CC \u06C1\u06D2",
    "filterOperator=": "=",
    "filterOperator!=": "!=",
    "filterOperator>": ">",
    "filterOperator>=": ">=",
    "filterOperator<": "<",
    "filterOperator<=": "<=",
    // Header filter operators text
    headerFilterOperatorContains: "\u0634\u0627\u0645\u0644 \u06C1\u06D2",
    headerFilterOperatorEquals: "\u0628\u0631\u0627\u0628\u0631 \u06C1\u06D2",
    headerFilterOperatorStartsWith: "\u0634\u0631\u0648\u0639 \u06C1\u0648\u062A\u0627 \u06C1\u06D2",
    headerFilterOperatorEndsWith: "\u062E\u062A\u0645 \u06C1\u0648\u062A\u0627 \u06C1\u06D2",
    headerFilterOperatorIs: "\u06C1\u06D2",
    headerFilterOperatorNot: "\u0646\u06C1\u06CC\u06BA \u06C1\u06D2",
    headerFilterOperatorAfter: "\u0628\u0639\u062F \u0645\u06CC\u06BA \u06C1\u06D2",
    headerFilterOperatorOnOrAfter: "\u067E\u0631 \u06CC\u0627 \u0628\u0639\u062F \u0645\u06CC\u06BA \u06C1\u06D2",
    headerFilterOperatorBefore: "\u067E\u06C1\u0644\u06D2 \u06C1\u06D2",
    headerFilterOperatorOnOrBefore: "\u067E\u0631 \u06CC\u0627 \u067E\u06C1\u0644\u06D2 \u06C1\u06D2",
    headerFilterOperatorIsEmpty: "\u062E\u0627\u0644\u06CC \u06C1\u06D2",
    headerFilterOperatorIsNotEmpty: "\u062E\u0627\u0644\u06CC \u0646\u06C1\u06CC\u06BA \u06C1\u06D2",
    headerFilterOperatorIsAnyOf: "\u0627\u0646 \u0645\u06CC\u06BA \u0633\u06D2 \u06A9\u0648\u0626\u06CC \u06C1\u06D2",
    "headerFilterOperator=": "\u0628\u0631\u0627\u0628\u0631 \u06C1\u06D2",
    "headerFilterOperator!=": "\u0628\u0631\u0627\u0628\u0631 \u0646\u06C1\u06CC\u06BA \u06C1\u06D2",
    "headerFilterOperator>": "\u0630\u06CC\u0627\u062F\u06C1 \u06C1\u06D2",
    "headerFilterOperator>=": "\u0630\u06CC\u0627\u062F\u06C1 \u06CC\u0627 \u0628\u0631\u0627\u0628\u0631 \u06C1\u06D2",
    "headerFilterOperator<": "\u06A9\u0645 \u06C1\u06D2",
    "headerFilterOperator<=": "\u06A9\u0645 \u06CC\u0627 \u0628\u0631\u0627\u0628\u0631 \u06C1\u06D2",
    // Filter values text
    filterValueAny: "\u06A9\u0648\u0626\u06CC \u0628\u06BE\u06CC",
    filterValueTrue: "\u0635\u062D\u06CC\u062D",
    filterValueFalse: "\u063A\u0644\u0637",
    // Column menu text
    columnMenuLabel: "\u0645\u06CC\u0646\u06CC\u0648",
    columnMenuShowColumns: "\u06A9\u0627\u0644\u0645 \u062F\u06A9\u06BE\u0627\u0626\u06CC\u06BA",
    columnMenuManageColumns: "\u06A9\u0627\u0644\u0645 \u0645\u06CC\u0646\u062C \u06A9\u0631\u06CC\u06BA",
    columnMenuFilter: "\u0641\u0644\u0679\u0631",
    columnMenuHideColumn: "\u0686\u06BE\u067E\u0627\u0626\u06CC\u06BA",
    columnMenuUnsort: "sort \u062E\u062A\u0645 \u06A9\u0631\u06CC\u06BA",
    columnMenuSortAsc: "\u062A\u0631\u062A\u06CC\u0628 \u0635\u0639\u0648\u062F\u06CC",
    columnMenuSortDesc: "\u062A\u0631\u062A\u06CC\u0628 \u0646\u0632\u0648\u0644\u06CC",
    // Column header text
    columnHeaderFiltersTooltipActive: (count) => count !== 1 ? `${count} \u0641\u0639\u0627\u0644 \u0641\u0644\u0679\u0631\u0632` : `${count} \u0641\u0644\u0679\u0631\u0632 \u0641\u0639\u0627\u0644`,
    columnHeaderFiltersLabel: "\u0641\u0644\u0679\u0631\u0632 \u062F\u06A9\u06BE\u0627\u0626\u06CC\u06BA",
    columnHeaderSortIconLabel: "Sort",
    // Rows selected footer text
    footerRowSelected: (count) => count !== 1 ? `${count.toLocaleString()} \u0645\u0646\u062A\u062E\u0628 \u0642\u0637\u0627\u0631\u06CC\u06BA` : `${count.toLocaleString()} \u0645\u0646\u062A\u062E\u0628 \u0642\u0637\u0627\u0631`,
    // Total row amount footer text
    footerTotalRows: "\u06A9\u0644 \u0642\u0637\u0627\u0631\u06CC\u06BA:",
    // Total visible row amount footer text
    footerTotalVisibleRows: (visibleCount, totalCount) => `${totalCount.toLocaleString()} \u0645\u06CC\u06BA \u0633\u06D2 ${visibleCount.toLocaleString()}`,
    // Checkbox selection text
    checkboxSelectionHeaderName: "\u0686\u06CC\u06A9 \u0628\u0627\u06A9\u0633 \u0645\u0646\u062A\u062E\u0628 \u06A9\u0631\u06CC\u06BA",
    checkboxSelectionSelectAllRows: "\u062A\u0645\u0627\u0645 \u0642\u0637\u0627\u0631\u06CC\u06BA \u0645\u0646\u062A\u062E\u0628 \u06A9\u0631\u06CC\u06BA",
    checkboxSelectionUnselectAllRows: "\u062A\u0645\u0627\u0645 \u0642\u0637\u0627\u0631\u06CC\u06BA \u0646\u0627\u0645\u0646\u062A\u062E\u0628 \u06A9\u0631\u06CC\u06BA ",
    checkboxSelectionSelectRow: "\u0642\u0637\u0627\u0631 \u0645\u0646\u062A\u062E\u0628 \u06A9\u0631\u06CC\u06BA",
    checkboxSelectionUnselectRow: "\u0642\u0637\u0627\u0631 \u0646\u0627\u0645\u0646\u062A\u062E\u0628 \u06A9\u0631\u06CC\u06BA",
    // Boolean cell text
    booleanCellTrueLabel: "\u06C1\u0627\u06BA",
    booleanCellFalseLabel: "\u0646\u06C1\u06CC\u06BA",
    // Actions cell more text
    actionsCellMore: "\u0630\u06CC\u0627\u062F\u06C1",
    // Column pinning text
    pinToLeft: "\u0628\u0627\u0626\u06CC\u06BA \u062C\u0627\u0646\u0628 pin \u06A9\u0631\u06CC\u06BA",
    pinToRight: "\u062F\u0627\u0626\u06CC\u06BA \u062C\u0627\u0646\u0628 pin \u06A9\u0631\u06CC\u06BA",
    unpin: "pin \u062E\u062A\u0645 \u06A9\u0631\u06CC\u06BA",
    // Tree Data
    treeDataGroupingHeaderName: "\u06AF\u0631\u0648\u067E",
    treeDataExpand: "\u0634\u0627\u062E\u06CC\u06BA \u062F\u06CC\u06A9\u06BE\u06CC\u06BA",
    treeDataCollapse: "\u0634\u0627\u062E\u06CC\u06BA \u0686\u06BE\u067E\u0627\u0626\u06CC\u06BA",
    // Grouping columns
    groupingColumnHeaderName: "\u06AF\u0631\u0648\u067E",
    groupColumn: (name) => `${name} \u0633\u06D2 \u06AF\u0631\u0648\u067E \u06A9\u0631\u06CC\u06BA`,
    unGroupColumn: (name) => `${name} \u0633\u06D2 \u06AF\u0631\u0648\u067E \u062E\u062A\u0645 \u06A9\u0631\u06CC\u06BA`,
    // Master/detail
    detailPanelToggle: "\u0688\u06CC\u0679\u06CC\u0644 \u067E\u06CC\u0646\u0644 \u06A9\u06BE\u0648\u0644\u06CC\u06BA / \u0628\u0646\u062F \u06A9\u0631\u06CC\u06BA",
    expandDetailPanel: "\u067E\u06BE\u06CC\u0644\u0627\u0626\u06CC\u06BA",
    collapseDetailPanel: "\u062A\u0646\u06AF \u06A9\u0631\u06CC\u06BA",
    // Row reordering text
    rowReorderingHeaderName: "\u0642\u0637\u0627\u0631\u0648\u06BA \u06A9\u06CC \u062A\u0631\u062A\u06CC\u0628 \u062A\u0628\u062F\u06CC\u0644 \u06A9\u0631\u06CC\u06BA",
    // Aggregation
    aggregationMenuItemHeader: "\u0627\u06CC\u06AF\u0631\u06CC\u06AF\u06CC\u0634\u0646",
    aggregationFunctionLabelSum: "\u06A9\u0644",
    aggregationFunctionLabelAvg: "\u0627\u0648\u0633\u0637",
    aggregationFunctionLabelMin: "\u06A9\u0645 \u0627\u0632 \u06A9\u0645",
    aggregationFunctionLabelMax: "\u0632\u06CC\u0627\u062F\u06C1 \u0633\u06D2 \u0632\u06CC\u0627\u062F\u06C1",
    aggregationFunctionLabelSize: "\u0633\u0627\u0626\u0632"
  };
  var urPK = getGridLocalization(urPKGrid, urPKCore);

  // node_modules/@mui/x-data-grid/locales/viVN.js
  var viVNGrid = {
    // Root
    noRowsLabel: "Kh\xF4ng c\xF3 d\u1EEF li\u1EC7u",
    noResultsOverlayLabel: "Kh\xF4ng t\xECm th\u1EA5y k\u1EBFt qu\u1EA3.",
    // Density selector toolbar button text
    toolbarDensity: "\u0110\u1ED9 gi\xE3n",
    toolbarDensityLabel: "\u0110\u1ED9 gi\xE3n",
    toolbarDensityCompact: "Trung b\xECnh",
    toolbarDensityStandard: "Ti\xEAu chu\u1EA9n",
    toolbarDensityComfortable: "R\u1ED9ng",
    // Columns selector toolbar button text
    toolbarColumns: "C\u1ED9t",
    toolbarColumnsLabel: "Ch\u1ECDn c\u1ED9t",
    // Filters toolbar button text
    toolbarFilters: "B\u1ED9 l\u1ECDc",
    toolbarFiltersLabel: "Hi\u1EC3n th\u1ECB b\u1ED9 l\u1ECDc",
    toolbarFiltersTooltipHide: "\u1EA8n",
    toolbarFiltersTooltipShow: "Hi\u1EC7n",
    toolbarFiltersTooltipActive: (count) => count > 1 ? `${count} b\u1ED9 l\u1ECDc ho\u1EA1t \u0111\u1ED9ng` : `${count} b\u1ED9 l\u1ECDc ho\u1EA1t \u0111\u1ED9ng`,
    // Quick filter toolbar field
    toolbarQuickFilterPlaceholder: "T\xECm ki\u1EBFm\u2026",
    toolbarQuickFilterLabel: "T\xECm ki\u1EBFm",
    toolbarQuickFilterDeleteIconLabel: "X\xF3a t\xECm ki\u1EBFm",
    // Export selector toolbar button text
    toolbarExport: "Xu\u1EA5t",
    toolbarExportLabel: "Xu\u1EA5t",
    toolbarExportCSV: "Xu\u1EA5t CSV",
    toolbarExportPrint: "In",
    toolbarExportExcel: "Xu\u1EA5t Excel",
    // Columns panel text
    columnsPanelTextFieldLabel: "T\xECm ki\u1EBFm",
    columnsPanelTextFieldPlaceholder: "Ti\xEAu \u0111\u1EC1 c\u1ED9t",
    columnsPanelDragIconLabel: "S\u1EAFp x\u1EBFp",
    columnsPanelShowAllButton: "Hi\u1EC7n t\u1EA5t c\u1EA3",
    columnsPanelHideAllButton: "\u1EA8n t\u1EA5t c\u1EA3",
    // Filter panel text
    filterPanelAddFilter: "Th\xEAm b\u1ED9 l\u1ECDc",
    filterPanelRemoveAll: "X\xF3a t\u1EA5t c\u1EA3",
    filterPanelDeleteIconLabel: "X\xF3a",
    filterPanelLogicOperator: "To\xE1n t\u1EED logic",
    filterPanelOperator: "To\xE1n t\u1EED",
    filterPanelOperatorAnd: "V\xE0",
    filterPanelOperatorOr: "Ho\u1EB7c",
    filterPanelColumns: "C\u1ED9t",
    filterPanelInputLabel: "Gi\xE1 tr\u1ECB",
    filterPanelInputPlaceholder: "L\u1ECDc gi\xE1 tr\u1ECB",
    // Filter operators text
    filterOperatorContains: "Ch\u1EE9a",
    filterOperatorEquals: "B\u1EB1ng",
    filterOperatorStartsWith: "B\u1EAFt \u0111\u1EA7u b\u1EB1ng",
    filterOperatorEndsWith: "K\u1EBFt th\xFAc b\u1EB1ng",
    filterOperatorIs: "L\xE0",
    filterOperatorNot: "Kh\xF4ng l\xE0",
    filterOperatorAfter: "Tr\u01B0\u1EDBc",
    filterOperatorOnOrAfter: "b\u1EB1ng ho\u1EB7c sau",
    filterOperatorBefore: "Sau",
    filterOperatorOnOrBefore: "b\u1EB1ng ho\u1EB7c tr\u01B0\u1EDBc",
    filterOperatorIsEmpty: "R\u1ED7ng",
    filterOperatorIsNotEmpty: "Kh\xE1c r\u1ED7ng",
    filterOperatorIsAnyOf: "B\u1EA5t k\u1EF3",
    "filterOperator=": "=",
    "filterOperator!=": "!=",
    "filterOperator>": ">",
    "filterOperator>=": ">=",
    "filterOperator<": "<",
    "filterOperator<=": "<=",
    // Header filter operators text
    headerFilterOperatorContains: "Ch\u1EE9a",
    headerFilterOperatorEquals: "B\u1EB1ng",
    headerFilterOperatorStartsWith: "B\u1EAFt \u0111\u1EA7u v\u1EDBi",
    headerFilterOperatorEndsWith: "K\u1EBFt th\xFAc v\u1EDBi",
    headerFilterOperatorIs: "l\xE0",
    headerFilterOperatorNot: "Kh\xF4ng l\xE0",
    headerFilterOperatorAfter: "Sau",
    headerFilterOperatorOnOrAfter: "\u0110ang ho\u1EB7c sau",
    headerFilterOperatorBefore: "Tr\u01B0\u1EDBc",
    headerFilterOperatorOnOrBefore: "\u0110ang ho\u1EB7c tr\u01B0\u1EDBc",
    headerFilterOperatorIsEmpty: "R\u1ED7ng",
    headerFilterOperatorIsNotEmpty: "Kh\xE1c r\u1ED7ng",
    headerFilterOperatorIsAnyOf: "B\u1EA5t k\u1EF3",
    "headerFilterOperator=": "B\u1EB1ng",
    "headerFilterOperator!=": "Kh\xE1c",
    "headerFilterOperator>": "L\u1EDBn h\u01A1n",
    "headerFilterOperator>=": "L\u1EDBn h\u01A1n ho\u1EB7c b\u1EB1ng",
    "headerFilterOperator<": "Nh\u1ECF h\u01A1n",
    "headerFilterOperator<=": "Nh\u1ECF h\u01A1n ho\u1EB7c b\u1EB1ng",
    // Filter values text
    filterValueAny: "b\u1EA5t k\u1EF3 gi\xE1 tr\u1ECB n\xE0o",
    filterValueTrue: "C\xF3",
    filterValueFalse: "Kh\xF4ng",
    // Column menu text
    columnMenuLabel: "Danh m\u1EE5c",
    columnMenuShowColumns: "Danh s\xE1ch c\u1ED9t",
    columnMenuManageColumns: "Qu\u1EA3n l\xFD c\u1ED9t",
    columnMenuFilter: "B\u1ED9 l\u1ECDc",
    columnMenuHideColumn: "\u1EA8n c\u1ED9t",
    columnMenuUnsort: "B\u1ECF s\u1EAFp x\u1EBFp",
    columnMenuSortAsc: "S\u1EAFp x\u1EBFp t\u0103ng d\u1EA7n",
    columnMenuSortDesc: "S\u1EAFp x\u1EBFp gi\u1EA3m d\u1EA7n",
    // Column header text
    columnHeaderFiltersTooltipActive: (count) => count > 1 ? `${count} b\u1ED9 l\u1ECDc ho\u1EA1t \u0111\u1ED9ng` : `${count} b\u1ED9 l\u1ECDc ho\u1EA1t \u0111\u1ED9ng`,
    columnHeaderFiltersLabel: "B\u1ED9 l\u1ECDc",
    columnHeaderSortIconLabel: "S\u1EAFp x\u1EBFp",
    // Rows selected footer text
    footerRowSelected: (count) => count > 1 ? `${count.toLocaleString()} h\xE0ng \u0111\xE3 ch\u1ECDn` : `${count.toLocaleString()} h\xE0ng \u0111\xE3 ch\u1ECDn`,
    // Total row amount footer text
    footerTotalRows: "T\u1ED5ng:",
    // Total visible row amount footer text
    footerTotalVisibleRows: (visibleCount, totalCount) => `${visibleCount.toLocaleString()} / ${totalCount.toLocaleString()}`,
    // Checkbox selection text
    checkboxSelectionHeaderName: "T\xEDch v\xE0o \xF4 tr\u1ED1ng",
    checkboxSelectionSelectAllRows: "Ch\u1ECDn t\u1EA5t c\u1EA3 h\xE0ng",
    checkboxSelectionUnselectAllRows: "B\u1ECF ch\u1ECDn t\u1EA5t c\u1EA3 h\xE0ng",
    checkboxSelectionSelectRow: "Ch\u1ECDn h\xE0ng",
    checkboxSelectionUnselectRow: "B\u1ECF ch\u1ECDn h\xE0ng",
    // Boolean cell text
    booleanCellTrueLabel: "C\xF3",
    booleanCellFalseLabel: "Kh\xF4ng",
    // Actions cell more text
    actionsCellMore: "Th\xEAm",
    // Column pinning text
    pinToLeft: "Ghim c\u1ED9t b\xEAn tr\xE1i",
    pinToRight: "Ghim c\u1ED9t b\xEAn ph\u1EA3i",
    unpin: "B\u1ECF ghim",
    // Tree Data
    treeDataGroupingHeaderName: "Nh\xF3m",
    treeDataExpand: "m\u1EDF r\u1ED9ng",
    treeDataCollapse: "\u1EA9n \u0111i",
    // Grouping columns
    groupingColumnHeaderName: "Nh\xF3m",
    groupColumn: (name) => `Nh\xF3m theo ${name}`,
    unGroupColumn: (name) => `H\u1EE7y nh\xF3m theo ${name}`,
    // Master/detail
    detailPanelToggle: "\u1EA8n/hi\u1EC7n chi ti\u1EBFt",
    expandDetailPanel: "M\u1EDF r\u1ED9ng",
    collapseDetailPanel: "Thu nh\u1ECF",
    // Row reordering text
    rowReorderingHeaderName: "S\u1EAFp x\u1EBFp h\xE0ng",
    // Aggregation
    aggregationMenuItemHeader: "T\u1ED5ng h\u1EE3p",
    aggregationFunctionLabelSum: "T\u1ED5ng",
    aggregationFunctionLabelAvg: "Trung b\xECnh",
    aggregationFunctionLabelMin: "T\u1ED1i thi\u1EC3u",
    aggregationFunctionLabelMax: "T\u1ED1i \u0111a",
    aggregationFunctionLabelSize: "K\xEDch c\u1EE1"
  };
  var viVN2 = getGridLocalization(viVNGrid, viVN);

  // node_modules/@mui/x-data-grid/locales/zhCN.js
  var zhCNGrid = {
    // Root
    noRowsLabel: "\u6CA1\u6709\u6570\u636E\u3002",
    noResultsOverlayLabel: "\u672A\u627E\u5230\u6570\u636E\u3002",
    // Density selector toolbar button text
    toolbarDensity: "\u8868\u683C\u5BC6\u5EA6",
    toolbarDensityLabel: "\u8868\u683C\u5BC6\u5EA6",
    toolbarDensityCompact: "\u7D27\u5BC6",
    toolbarDensityStandard: "\u6807\u51C6",
    toolbarDensityComfortable: "\u7A00\u758F",
    // Columns selector toolbar button text
    toolbarColumns: "\u5217",
    toolbarColumnsLabel: "\u9009\u62E9\u5217",
    // Filters toolbar button text
    toolbarFilters: "\u7B5B\u9009\u5668",
    toolbarFiltersLabel: "\u663E\u793A\u7B5B\u9009\u5668",
    toolbarFiltersTooltipHide: "\u9690\u85CF\u7B5B\u9009\u5668",
    toolbarFiltersTooltipShow: "\u663E\u793A\u7B5B\u9009\u5668",
    toolbarFiltersTooltipActive: (count) => `${count} \u4E2A\u7B5B\u9009\u5668`,
    // Quick filter toolbar field
    toolbarQuickFilterPlaceholder: "\u641C\u7D22\u2026",
    toolbarQuickFilterLabel: "\u641C\u7D22",
    toolbarQuickFilterDeleteIconLabel: "\u6E05\u9664",
    // Export selector toolbar button text
    toolbarExport: "\u5BFC\u51FA",
    toolbarExportLabel: "\u5BFC\u51FA",
    toolbarExportCSV: "\u5BFC\u51FA\u81F3CSV",
    toolbarExportPrint: "\u6253\u5370",
    toolbarExportExcel: "\u5BFC\u51FA\u81F3Excel",
    // Columns panel text
    columnsPanelTextFieldLabel: "\u641C\u7D22\u5217",
    columnsPanelTextFieldPlaceholder: "\u5217\u540D",
    columnsPanelDragIconLabel: "\u91CD\u6392\u5E8F\u5217",
    columnsPanelShowAllButton: "\u663E\u793A\u6240\u6709",
    columnsPanelHideAllButton: "\u9690\u85CF\u6240\u6709",
    // Filter panel text
    filterPanelAddFilter: "\u6DFB\u52A0\u7B5B\u9009\u5668",
    filterPanelRemoveAll: "\u6E05\u9664\u5168\u90E8",
    filterPanelDeleteIconLabel: "\u5220\u9664",
    filterPanelLogicOperator: "\u903B\u8F91\u64CD\u4F5C\u5668",
    filterPanelOperator: "\u64CD\u4F5C\u5668",
    filterPanelOperatorAnd: "\u4E0E",
    filterPanelOperatorOr: "\u6216",
    filterPanelColumns: "\u5217",
    filterPanelInputLabel: "\u503C",
    filterPanelInputPlaceholder: "\u7B5B\u9009\u503C",
    // Filter operators text
    filterOperatorContains: "\u5305\u542B",
    filterOperatorEquals: "\u7B49\u4E8E",
    filterOperatorStartsWith: "\u5F00\u59CB\u4E8E",
    filterOperatorEndsWith: "\u7ED3\u675F\u4E8E",
    filterOperatorIs: "\u662F",
    filterOperatorNot: "\u4E0D\u662F",
    filterOperatorAfter: "\u5728\u540E\u9762",
    filterOperatorOnOrAfter: "\u6B63\u5728\u540E\u9762",
    filterOperatorBefore: "\u5728\u524D\u9762",
    filterOperatorOnOrBefore: "\u6B63\u5728\u524D\u9762",
    filterOperatorIsEmpty: "\u4E3A\u7A7A",
    filterOperatorIsNotEmpty: "\u4E0D\u4E3A\u7A7A",
    filterOperatorIsAnyOf: "\u5C5E\u4E8E",
    "filterOperator=": "=",
    "filterOperator!=": "!=",
    "filterOperator>": ">",
    "filterOperator>=": ">=",
    "filterOperator<": "<",
    "filterOperator<=": "<=",
    // Header filter operators text
    headerFilterOperatorContains: "\u5305\u542B",
    headerFilterOperatorEquals: "\u7B49\u4E8E",
    headerFilterOperatorStartsWith: "\u5F00\u59CB\u4E8E",
    headerFilterOperatorEndsWith: "\u7ED3\u675F\u4E8E",
    headerFilterOperatorIs: "\u662F",
    headerFilterOperatorNot: "\u4E0D\u662F",
    headerFilterOperatorAfter: "\u5728\u540E\u9762",
    headerFilterOperatorOnOrAfter: "\u5728\u5F53\u524D\u6216\u540E\u9762",
    headerFilterOperatorBefore: "\u5728\u524D\u9762",
    headerFilterOperatorOnOrBefore: "\u5728\u5F53\u524D\u6216\u524D\u9762",
    headerFilterOperatorIsEmpty: "\u4E3A\u7A7A",
    headerFilterOperatorIsNotEmpty: "\u4E0D\u4E3A\u7A7A",
    headerFilterOperatorIsAnyOf: "\u5C5E\u4E8E",
    "headerFilterOperator=": "\u7B49\u4E8E",
    "headerFilterOperator!=": "\u4E0D\u7B49\u4E8E",
    "headerFilterOperator>": "\u5927\u4E8E",
    "headerFilterOperator>=": "\u5927\u4E8E\u6216\u7B49\u4E8E",
    "headerFilterOperator<": "\u5C0F\u96E8",
    "headerFilterOperator<=": "\u5C0F\u4E8E\u6216\u7B49\u4E8E",
    // Filter values text
    filterValueAny: "\u4EFB\u4F55",
    filterValueTrue: "\u771F",
    filterValueFalse: "\u5047",
    // Column menu text
    columnMenuLabel: "\u83DC\u5355",
    columnMenuShowColumns: "\u663E\u793A",
    columnMenuManageColumns: "\u7BA1\u7406\u5217",
    columnMenuFilter: "\u7B5B\u9009\u5668",
    columnMenuHideColumn: "\u9690\u85CF",
    columnMenuUnsort: "\u6062\u590D\u9ED8\u8BA4",
    columnMenuSortAsc: "\u5347\u5E8F",
    columnMenuSortDesc: "\u964D\u5E8F",
    // Column header text
    columnHeaderFiltersTooltipActive: (count) => count !== 1 ? `${count} \u4E2A\u7B5B\u9009\u5668` : `${count} \u4E2A\u7B5B\u9009\u5668`,
    columnHeaderFiltersLabel: "\u663E\u793A\u7B5B\u9009\u5668",
    columnHeaderSortIconLabel: "\u6392\u5E8F",
    // Rows selected footer text
    footerRowSelected: (count) => `\u5171\u9009\u4E2D\u4E86${count.toLocaleString()}\u884C`,
    // Total row amount footer text
    footerTotalRows: "\u6240\u6709\u884C:",
    // Total visible row amount footer text
    footerTotalVisibleRows: (visibleCount, totalCount) => `${visibleCount.toLocaleString()} / ${totalCount.toLocaleString()}`,
    // Checkbox selection text
    checkboxSelectionHeaderName: "\u591A\u9009\u6846",
    checkboxSelectionSelectAllRows: "\u5168\u9009\u884C",
    checkboxSelectionUnselectAllRows: "\u53CD\u9009\u6240\u6709\u884C",
    checkboxSelectionSelectRow: "\u9009\u62E9\u884C",
    checkboxSelectionUnselectRow: "\u53CD\u9009\u884C",
    // Boolean cell text
    booleanCellTrueLabel: "\u771F",
    booleanCellFalseLabel: "\u5047",
    // Actions cell more text
    actionsCellMore: "\u66F4\u591A",
    // Column pinning text
    pinToLeft: "\u56FA\u5B9A\u5230\u5DE6\u4FA7",
    pinToRight: "\u56FA\u5B9A\u5230\u53F3\u4FA7",
    unpin: "\u53D6\u6D88\u56FA\u5B9A",
    // Tree Data
    treeDataGroupingHeaderName: "\u7EC4",
    treeDataExpand: "\u67E5\u770B\u5B50\u9879\u76EE",
    treeDataCollapse: "\u9690\u85CF\u5B50\u9879\u76EE",
    // Grouping columns
    groupingColumnHeaderName: "\u7EC4",
    groupColumn: (name) => `\u7528${name}\u5206\u7EC4`,
    unGroupColumn: (name) => `\u4E0D\u518D\u7528${name}\u5206\u7EC4`,
    // Master/detail
    detailPanelToggle: "\u8BE6\u7EC6\u4FE1\u606F",
    expandDetailPanel: "\u663E\u793A",
    collapseDetailPanel: "\u6298\u53E0",
    // Row reordering text
    rowReorderingHeaderName: "\u91CD\u65B0\u6392\u5217\u884C",
    // Aggregation
    aggregationMenuItemHeader: "\u96C6\u5408",
    aggregationFunctionLabelSum: "\u603B\u6570",
    aggregationFunctionLabelAvg: "\u5E73\u5747",
    aggregationFunctionLabelMin: "\u6700\u5C0F",
    aggregationFunctionLabelMax: "\u6700\u5927",
    aggregationFunctionLabelSize: "\u5927\u5C0F"
  };
  var zhCN2 = getGridLocalization(zhCNGrid, zhCN);

  // node_modules/@mui/x-data-grid/locales/zhTW.js
  var zhTWGrid = {
    // Root
    noRowsLabel: "\u6C92\u6709\u8CC7\u6599",
    noResultsOverlayLabel: "\u6C92\u6709\u7D50\u679C",
    // Density selector toolbar button text
    toolbarDensity: "\u8868\u683C\u5BC6\u5EA6",
    toolbarDensityLabel: "\u8868\u683C\u5BC6\u5EA6",
    toolbarDensityCompact: "\u7DCA\u6E4A",
    toolbarDensityStandard: "\u6A19\u6E96",
    toolbarDensityComfortable: "\u8212\u9069",
    // Columns selector toolbar button text
    toolbarColumns: "\u6B04\u4F4D",
    toolbarColumnsLabel: "\u9078\u64C7\u6B04\u4F4D",
    // Filters toolbar button text
    toolbarFilters: "\u7BE9\u9078\u5668",
    toolbarFiltersLabel: "\u986F\u793A\u7BE9\u9078\u5668",
    toolbarFiltersTooltipHide: "\u96B1\u85CF\u7BE9\u9078\u5668",
    toolbarFiltersTooltipShow: "\u986F\u793A\u7BE9\u9078\u5668",
    toolbarFiltersTooltipActive: (count) => `${count} \u500B\u7BE9\u9078\u5668`,
    // Quick filter toolbar field
    toolbarQuickFilterPlaceholder: "\u641C\u5C0B\u2026",
    toolbarQuickFilterLabel: "\u641C\u5C0B",
    toolbarQuickFilterDeleteIconLabel: "\u6E05\u9664",
    // Export selector toolbar button text
    toolbarExport: "\u532F\u51FA",
    toolbarExportLabel: "\u532F\u51FA",
    toolbarExportCSV: "\u532F\u51FA CSV",
    toolbarExportPrint: "\u5217\u5370",
    toolbarExportExcel: "\u532F\u51FA Excel",
    // Columns panel text
    columnsPanelTextFieldLabel: "\u6B04\u4F4D\u641C\u5C0B",
    columnsPanelTextFieldPlaceholder: "\u6B04\u4F4D\u540D\u7A31",
    columnsPanelDragIconLabel: "\u6392\u5E8F\u6B04\u4F4D",
    columnsPanelShowAllButton: "\u986F\u793A\u6240\u6709",
    columnsPanelHideAllButton: "\u96B1\u85CF\u6240\u6709",
    // Filter panel text
    filterPanelAddFilter: "\u589E\u52A0\u7BE9\u9078\u5668",
    filterPanelRemoveAll: "\u6E05\u9664\u6240\u6709",
    filterPanelDeleteIconLabel: "\u522A\u9664",
    filterPanelLogicOperator: "\u908F\u8F2F\u904B\u7B97\u5B50",
    filterPanelOperator: "\u904B\u7B97\u5B50",
    filterPanelOperatorAnd: "\u4E14",
    filterPanelOperatorOr: "\u6216",
    filterPanelColumns: "\u6B04\u4F4D",
    filterPanelInputLabel: "\u503C",
    filterPanelInputPlaceholder: "\u7BE9\u9078\u503C",
    // Filter operators text
    filterOperatorContains: "\u5305\u542B",
    filterOperatorEquals: "\u7B49\u65BC",
    filterOperatorStartsWith: "\u4EE5...\u958B\u982D",
    filterOperatorEndsWith: "\u4EE5...\u7D50\u675F",
    filterOperatorIs: "\u70BA",
    filterOperatorNot: "\u4E0D\u70BA",
    filterOperatorAfter: "...\u4E4B\u5F8C",
    filterOperatorOnOrAfter: "...(\u542B)\u4E4B\u5F8C",
    filterOperatorBefore: "...\u4E4B\u524D",
    filterOperatorOnOrBefore: "...(\u542B)\u4E4B\u524D",
    filterOperatorIsEmpty: "\u70BA\u7A7A",
    filterOperatorIsNotEmpty: "\u4E0D\u70BA\u7A7A",
    filterOperatorIsAnyOf: "\u662F\u5176\u4E2D\u4E4B\u4E00",
    "filterOperator=": "=",
    "filterOperator!=": "!=",
    "filterOperator>": ">",
    "filterOperator>=": ">=",
    "filterOperator<": "<",
    "filterOperator<=": "<=",
    // Header filter operators text
    headerFilterOperatorContains: "\u5305\u542B",
    headerFilterOperatorEquals: "\u7B49\u65BC",
    headerFilterOperatorStartsWith: "\u4EE5...\u958B\u982D",
    headerFilterOperatorEndsWith: "\u4EE5...\u7D50\u675F",
    headerFilterOperatorIs: "\u70BA",
    headerFilterOperatorNot: "\u4E0D\u70BA",
    headerFilterOperatorAfter: "...\u4E4B\u5F8C",
    headerFilterOperatorOnOrAfter: "...(\u542B)\u4E4B\u5F8C",
    headerFilterOperatorBefore: "...\u4E4B\u524D",
    headerFilterOperatorOnOrBefore: "...(\u542B)\u4E4B\u524D",
    headerFilterOperatorIsEmpty: "\u70BA\u7A7A",
    headerFilterOperatorIsNotEmpty: "\u4E0D\u70BA\u7A7A",
    headerFilterOperatorIsAnyOf: "\u662F\u5176\u4E2D\u4E4B\u4E00",
    "headerFilterOperator=": "\u7B49\u65BC",
    "headerFilterOperator!=": "\u4E0D\u7B49\u65BC",
    "headerFilterOperator>": "\u5927\u65BC",
    "headerFilterOperator>=": "\u5927\u65BC\u6216\u7B49\u65BC",
    "headerFilterOperator<": "\u5C0F\u65BC",
    "headerFilterOperator<=": "\u5C0F\u65BC\u6216\u7B49\u65BC",
    // Filter values text
    filterValueAny: "\u4EFB\u4F55\u503C",
    filterValueTrue: "\u771F",
    filterValueFalse: "\u5047",
    // Column menu text
    columnMenuLabel: "\u9078\u55AE",
    columnMenuShowColumns: "\u986F\u793A\u6B04\u4F4D",
    columnMenuManageColumns: "\u7BA1\u7406\u6B04\u4F4D",
    columnMenuFilter: "\u7BE9\u9078\u5668",
    columnMenuHideColumn: "\u96B1\u85CF",
    columnMenuUnsort: "\u9810\u8A2D\u6392\u5E8F",
    columnMenuSortAsc: "\u5347\u5E8F",
    columnMenuSortDesc: "\u964D\u5E8F",
    // Column header text
    columnHeaderFiltersTooltipActive: (count) => `${count} \u500B\u7BE9\u9078\u5668`,
    columnHeaderFiltersLabel: "\u986F\u793A\u7BE9\u9078\u5668",
    columnHeaderSortIconLabel: "\u6392\u5E8F",
    // Rows selected footer text
    footerRowSelected: (count) => `\u5DF2\u9078\u53D6 ${count.toLocaleString()} \u500B`,
    // Total row amount footer text
    footerTotalRows: "\u7E3D\u6578:",
    // Total visible row amount footer text
    footerTotalVisibleRows: (visibleCount, totalCount) => `${visibleCount.toLocaleString()} / ${totalCount.toLocaleString()}`,
    // Checkbox selection text
    checkboxSelectionHeaderName: "\u6838\u53D6\u65B9\u584A",
    checkboxSelectionSelectAllRows: "\u5168\u9078",
    checkboxSelectionUnselectAllRows: "\u53D6\u6D88\u5168\u9078",
    checkboxSelectionSelectRow: "\u9078\u53D6",
    checkboxSelectionUnselectRow: "\u53D6\u6D88\u9078\u53D6",
    // Boolean cell text
    booleanCellTrueLabel: "\u771F",
    booleanCellFalseLabel: "\u5047",
    // Actions cell more text
    actionsCellMore: "\u67E5\u770B\u66F4\u591A",
    // Column pinning text
    pinToLeft: "\u91D8\u9078\u5728\u5DE6\u5074",
    pinToRight: "\u91D8\u9078\u5728\u53F3\u5074",
    unpin: "\u53D6\u6D88\u91D8\u9078",
    // Tree Data
    treeDataGroupingHeaderName: "\u7FA4\u7D44",
    treeDataExpand: "\u67E5\u770B\u5B50\u9805\u76EE",
    treeDataCollapse: "\u96B1\u85CF\u5B50\u9805\u76EE",
    // Grouping columns
    groupingColumnHeaderName: "\u7FA4\u7D44",
    groupColumn: (name) => `\u4EE5 ${name} \u5206\u7D44`,
    unGroupColumn: (name) => `\u53D6\u6D88\u4EE5 ${name} \u5206\u7D44`,
    // Master/detail
    detailPanelToggle: "\u5207\u63DB\u986F\u793A\u8A73\u7D30\u8CC7\u8A0A",
    expandDetailPanel: "\u5C55\u958B",
    collapseDetailPanel: "\u647A\u758A",
    // Row reordering text
    rowReorderingHeaderName: "\u6392\u5E8F",
    // Aggregation
    aggregationMenuItemHeader: "\u96C6\u5408",
    aggregationFunctionLabelSum: "\u7E3D\u6578",
    aggregationFunctionLabelAvg: "\u5E73\u5747\u6578",
    aggregationFunctionLabelMin: "\u6700\u5C0F",
    aggregationFunctionLabelMax: "\u6700\u5927",
    aggregationFunctionLabelSize: "\u5C3A\u5BF8"
  };
  var zhTW2 = getGridLocalization(zhTWGrid, zhTW);

  // node_modules/@mui/x-data-grid/locales/hrHR.js
  var hrHRGrid = {
    // Root
    noRowsLabel: "Nema redova",
    noResultsOverlayLabel: "Nema rezultata.",
    // Density selector toolbar button text
    toolbarDensity: "Gusto\u0107a",
    toolbarDensityLabel: "Gusto\u0107a",
    toolbarDensityCompact: "Kompaktan",
    toolbarDensityStandard: "Standard",
    toolbarDensityComfortable: "Udobno",
    // Columns selector toolbar button text
    toolbarColumns: "Stupci",
    toolbarColumnsLabel: "Odaberite stupce",
    // Filters toolbar button text
    toolbarFilters: "Filteri",
    toolbarFiltersLabel: "Prika\u017Ei filtre",
    toolbarFiltersTooltipHide: "Sakrij filtre",
    toolbarFiltersTooltipShow: "Prika\u017Ei filtre",
    toolbarFiltersTooltipActive: (count) => count !== 1 ? `${count} aktivnih filtara` : `${count} aktivni filter`,
    // Quick filter toolbar field
    toolbarQuickFilterPlaceholder: "Tra\u017Ei\u2026",
    toolbarQuickFilterLabel: "tra\u017Ei",
    toolbarQuickFilterDeleteIconLabel: "\u010Cisto",
    // Export selector toolbar button text
    toolbarExport: "Izvoz",
    toolbarExportLabel: "Izvoz",
    toolbarExportCSV: "Preuzmi kao CSV",
    toolbarExportPrint: "Ispis",
    toolbarExportExcel: "Preuzmite kao Excel",
    // Columns panel text
    columnsPanelTextFieldLabel: "Prona\u0111i stupac",
    columnsPanelTextFieldPlaceholder: "Naslov stupca",
    columnsPanelDragIconLabel: "Promijeni redoslijed stupca",
    columnsPanelShowAllButton: "Poka\u017Ei sve",
    columnsPanelHideAllButton: "Sakrij sve",
    // Filter panel text
    filterPanelAddFilter: "Dodajte filter",
    filterPanelRemoveAll: "Ukloniti sve",
    filterPanelDeleteIconLabel: "Izbrisati",
    filterPanelLogicOperator: "Logi\u010Dki operator",
    filterPanelOperator: "Operater",
    filterPanelOperatorAnd: "I",
    filterPanelOperatorOr: "Ili",
    filterPanelColumns: "Stupci",
    filterPanelInputLabel: "Vrijednost",
    filterPanelInputPlaceholder: "Vrijednost filtra",
    // Filter operators text
    filterOperatorContains: "sadr\u017Ei",
    filterOperatorEquals: "jednaki",
    filterOperatorStartsWith: "po\u010Dinje sa",
    filterOperatorEndsWith: "zavr\u0161ava sa",
    filterOperatorIs: "je",
    filterOperatorNot: "nije",
    filterOperatorAfter: "je poslije",
    filterOperatorOnOrAfter: "je na ili poslije",
    filterOperatorBefore: "je prije",
    filterOperatorOnOrBefore: "je na ili prije",
    filterOperatorIsEmpty: "prazno je",
    filterOperatorIsNotEmpty: "nije prazna",
    filterOperatorIsAnyOf: "je bilo koji od",
    "filterOperator=": "=",
    "filterOperator!=": "!=",
    "filterOperator>": ">",
    "filterOperator>=": ">=",
    "filterOperator<": "<",
    "filterOperator<=": "<=",
    // Header filter operators text
    headerFilterOperatorContains: "Sadr\u017Ei",
    headerFilterOperatorEquals: "Jednako",
    headerFilterOperatorStartsWith: "Po\u010Dinje sa",
    headerFilterOperatorEndsWith: "Zavr\u0161ava s",
    headerFilterOperatorIs: "Je",
    headerFilterOperatorNot: "Nije",
    headerFilterOperatorAfter: "Je poslije",
    headerFilterOperatorOnOrAfter: "Je uklju\u010Deno ili poslije",
    headerFilterOperatorBefore: "Je li prije",
    headerFilterOperatorOnOrBefore: "Uklju\u010Deno je ili prije",
    headerFilterOperatorIsEmpty: "Prazno je",
    headerFilterOperatorIsNotEmpty: "Nije prazna",
    headerFilterOperatorIsAnyOf: "Je li bilo koji od",
    "headerFilterOperator=": "Jednako",
    "headerFilterOperator!=": "Nije jednako",
    "headerFilterOperator>": "Ve\u0107i od",
    "headerFilterOperator>=": "Ve\u0107e ili jednako",
    "headerFilterOperator<": "Manje od",
    "headerFilterOperator<=": "Manje od ili jednako",
    // Filter values text
    filterValueAny: "bilo koji",
    filterValueTrue: "pravi",
    filterValueFalse: "la\u017Eno",
    // Column menu text
    columnMenuLabel: "Jelovnik ",
    columnMenuShowColumns: "Prika\u017Ei stupce",
    columnMenuManageColumns: "Upravljanje stupcima",
    columnMenuFilter: "filtar",
    columnMenuHideColumn: "Sakrij stupac",
    columnMenuUnsort: "Poni\u0161ti sortiranje",
    columnMenuSortAsc: "Poredaj uzlazno",
    columnMenuSortDesc: "Poredaj silaznim redom",
    // Column header text
    columnHeaderFiltersTooltipActive: (count) => count !== 1 ? `${count} aktivnih filtara` : `${count} aktivni filter`,
    columnHeaderFiltersLabel: "Prika\u017Ei filtre",
    columnHeaderSortIconLabel: "Vrsta",
    // Rows selected footer text
    footerRowSelected: (count) => count !== 1 ? `Odabrano je ${count.toLocaleString()} redaka` : `${count.toLocaleString()} redak odabran`,
    // Total row amount footer text
    footerTotalRows: "Ukupno redaka:",
    // Total visible row amount footer text
    footerTotalVisibleRows: (visibleCount, totalCount) => `${visibleCount.toLocaleString()} od ${totalCount.toLocaleString()}`,
    // Checkbox selection text
    checkboxSelectionHeaderName: "Odabir potvrdnog okvira",
    checkboxSelectionSelectAllRows: "Odaberite sve retke",
    checkboxSelectionUnselectAllRows: "Poni\u0161ti odabir svih redaka",
    checkboxSelectionSelectRow: "Odaberite red",
    checkboxSelectionUnselectRow: "Poni\u0161ti odabir retka",
    // Boolean cell text
    booleanCellTrueLabel: "Da",
    booleanCellFalseLabel: "Ne",
    // Actions cell more text
    actionsCellMore: "vi\u0161e",
    // Column pinning text
    pinToLeft: "Prikva\u010Di lijevo",
    pinToRight: "Prikva\u010Di desno",
    unpin: "Otkva\u010Di",
    // Tree Data
    treeDataGroupingHeaderName: "Group",
    treeDataExpand: "vidjeti djecu",
    treeDataCollapse: "sakriti djecu",
    // Grouping columns
    groupingColumnHeaderName: "Skupina",
    groupColumn: (name) => `Grupiraj prema ${name}`,
    unGroupColumn: (name) => `Zaustavi grupiranje prema ${name}`,
    // Master/detail
    detailPanelToggle: "Prebacivanje plo\u010De s detaljima",
    expandDetailPanel: "Pro\u0161iriti",
    collapseDetailPanel: "Kolaps",
    // Row reordering text
    rowReorderingHeaderName: "Promjena redoslijeda",
    // Aggregation
    aggregationMenuItemHeader: "Agregacija",
    aggregationFunctionLabelSum: "iznos",
    aggregationFunctionLabelAvg: "prosj",
    aggregationFunctionLabelMin: "min",
    aggregationFunctionLabelMax: "max",
    aggregationFunctionLabelSize: "veli\u010Dina"
  };
  var hrHR2 = getGridLocalization(hrHRGrid, hrHR);

  // node_modules/@mui/x-data-grid/locales/ptPT.js
  var ptPTGrid = {
    // Root
    noRowsLabel: "Nenhuma linha",
    noResultsOverlayLabel: "Nenhum resultado encontrado.",
    // Density selector toolbar button text
    toolbarDensity: "Densidade",
    toolbarDensityLabel: "Densidade",
    toolbarDensityCompact: "Compactar",
    toolbarDensityStandard: "Padr\xE3o",
    toolbarDensityComfortable: "Confort\xE1vel",
    // Columns selector toolbar button text
    toolbarColumns: "Colunas",
    toolbarColumnsLabel: "Selecione colunas",
    // Filters toolbar button text
    toolbarFilters: "Filtros",
    toolbarFiltersLabel: "Mostrar filtros",
    toolbarFiltersTooltipHide: "Ocultar filtros",
    toolbarFiltersTooltipShow: "Mostrar filtros",
    toolbarFiltersTooltipActive: (count) => count !== 1 ? `${count} filtros ativos` : `${count} filtro ativo`,
    // Quick filter toolbar field
    toolbarQuickFilterPlaceholder: "Procurar\u2026",
    toolbarQuickFilterLabel: "Procurar",
    toolbarQuickFilterDeleteIconLabel: "Claro",
    // Export selector toolbar button text
    toolbarExport: "Exportar",
    toolbarExportLabel: "Exportar",
    toolbarExportCSV: "Baixar como CSV",
    toolbarExportPrint: "Imprimir",
    toolbarExportExcel: "Baixe como Excel",
    // Columns panel text
    columnsPanelTextFieldLabel: "Encontrar coluna",
    columnsPanelTextFieldPlaceholder: "T\xEDtulo da coluna",
    columnsPanelDragIconLabel: "Reordenar coluna",
    columnsPanelShowAllButton: "Mostre tudo",
    columnsPanelHideAllButton: "Esconda tudo",
    // Filter panel text
    filterPanelAddFilter: "Adicionar filtro",
    filterPanelRemoveAll: "Deletar tudo",
    filterPanelDeleteIconLabel: "Excluir",
    filterPanelLogicOperator: "Operador l\xF3gico",
    filterPanelOperator: "Operador",
    filterPanelOperatorAnd: "E",
    filterPanelOperatorOr: "Ou",
    filterPanelColumns: "Colunas",
    filterPanelInputLabel: "Valor",
    filterPanelInputPlaceholder: "Valor do filtro",
    // Filter operators text
    filterOperatorContains: "cont\xE9m",
    filterOperatorEquals: "\xE9 igual a",
    filterOperatorStartsWith: "come\xE7a com",
    filterOperatorEndsWith: "termina com",
    filterOperatorIs: "\xE9",
    filterOperatorNot: "n\xE3o \xE9",
    filterOperatorAfter: "est\xE1 depois",
    filterOperatorOnOrAfter: "est\xE1 ligado ou depois",
    filterOperatorBefore: "\xE9 antes",
    filterOperatorOnOrBefore: "est\xE1 ligado ou antes",
    filterOperatorIsEmpty: "est\xE1 vazia",
    filterOperatorIsNotEmpty: "n\xE3o est\xE1 vazio",
    filterOperatorIsAnyOf: "\xE9 qualquer um",
    "filterOperator=": "=",
    "filterOperator!=": "!=",
    "filterOperator>": ">",
    "filterOperator>=": ">=",
    "filterOperator<": "<",
    "filterOperator<=": "<=",
    // Header filter operators text
    headerFilterOperatorContains: "Cont\xE9m",
    headerFilterOperatorEquals: "\xC9 igual a",
    headerFilterOperatorStartsWith: "Come\xE7a com",
    headerFilterOperatorEndsWith: "Termina com",
    headerFilterOperatorIs: "\xC9",
    headerFilterOperatorNot: "N\xE3o \xE9",
    headerFilterOperatorAfter: "Est\xE1 depois",
    headerFilterOperatorOnOrAfter: "Est\xE1 ligado ou depois",
    headerFilterOperatorBefore: "\xC9 antes",
    headerFilterOperatorOnOrBefore: "Est\xE1 ligado ou antes",
    headerFilterOperatorIsEmpty: "Est\xE1 vazia",
    headerFilterOperatorIsNotEmpty: "N\xE3o est\xE1 vazio",
    headerFilterOperatorIsAnyOf: "Algum",
    "headerFilterOperator=": "\xC9 igual a",
    "headerFilterOperator!=": "N\xE3o \xE9 igual",
    "headerFilterOperator>": "Maior que",
    "headerFilterOperator>=": "Melhor que ou igual a",
    "headerFilterOperator<": "Menor que",
    "headerFilterOperator<=": "Menos que ou igual a",
    // Filter values text
    filterValueAny: "qualquer",
    filterValueTrue: "verdadeiro",
    filterValueFalse: "falso",
    // Column menu text
    columnMenuLabel: "Card\xE1pio",
    columnMenuShowColumns: "Mostrar colunas",
    columnMenuManageColumns: "Gerenciar colunas",
    columnMenuFilter: "Filtro",
    columnMenuHideColumn: "Ocultar coluna",
    columnMenuUnsort: "Desclassificar",
    columnMenuSortAsc: "Classificar por ordem crescente",
    columnMenuSortDesc: "Classificar por ordem decrescente",
    // Column header text
    columnHeaderFiltersTooltipActive: (count) => count !== 1 ? `${count} filtros ativos` : `${count} filtro ativo`,
    columnHeaderFiltersLabel: "Mostrar filtros",
    columnHeaderSortIconLabel: "Organizar",
    // Rows selected footer text
    footerRowSelected: (count) => count !== 1 ? `${count.toLocaleString()} linhas selecionadas` : `${count.toLocaleString()} linha selecionada`,
    // Total row amount footer text
    footerTotalRows: "Total de linhas:",
    // Total visible row amount footer text
    footerTotalVisibleRows: (visibleCount, totalCount) => `${visibleCount.toLocaleString()} de ${totalCount.toLocaleString()}`,
    // Checkbox selection text
    checkboxSelectionHeaderName: "Sele\xE7\xE3o de caixa de sele\xE7\xE3o",
    checkboxSelectionSelectAllRows: "Selecione todas as linhas",
    checkboxSelectionUnselectAllRows: "Desmarque todas as linhas",
    checkboxSelectionSelectRow: "Selecione a linha",
    checkboxSelectionUnselectRow: "Desmarcar linha",
    // Boolean cell text
    booleanCellTrueLabel: "sim",
    booleanCellFalseLabel: "n\xE3o",
    // Actions cell more text
    actionsCellMore: "mais",
    // Column pinning text
    pinToLeft: "Fixar \xE0 esquerda",
    pinToRight: "Fixar \xE0 direita",
    unpin: "Liberar",
    // Tree Data
    treeDataGroupingHeaderName: "Group",
    treeDataExpand: "veja crian\xE7as",
    treeDataCollapse: "esconder crian\xE7as",
    // Grouping columns
    groupingColumnHeaderName: "Grupo",
    groupColumn: (name) => `Agrupar por ${name}`,
    unGroupColumn: (name) => `Pare de agrupar por ${name}`,
    // Master/detail
    detailPanelToggle: "Alternar painel de detalhes",
    expandDetailPanel: "Expandir",
    collapseDetailPanel: "Colapso",
    // Row reordering text
    rowReorderingHeaderName: "Reordena\xE7\xE3o de linhas",
    // Aggregation
    aggregationMenuItemHeader: "Agrega\xE7\xE3o",
    aggregationFunctionLabelSum: "soma",
    aggregationFunctionLabelAvg: "m\xE9dia",
    aggregationFunctionLabelMin: "min",
    aggregationFunctionLabelMax: "m\xE1x.",
    aggregationFunctionLabelSize: "tamanho"
  };
  var ptPT2 = getGridLocalization(ptPTGrid, ptPT);

  // node_modules/@mui/x-data-grid/locales/zhHK.js
  var zhHKGrid = {
    // Root
    noRowsLabel: "\u6C92\u6709\u884C",
    noResultsOverlayLabel: "\u672A\u627E\u5230\u7D50\u679C\u3002",
    // Density selector toolbar button text
    toolbarDensity: "\u5BC6\u5EA6",
    toolbarDensityLabel: "\u5BC6\u5EA6",
    toolbarDensityCompact: "\u8896\u73CD\u7684",
    toolbarDensityStandard: "\u6A19\u6E96",
    toolbarDensityComfortable: "\u8212\u670D\u7684",
    // Columns selector toolbar button text
    toolbarColumns: "\u5217",
    toolbarColumnsLabel: "\u9078\u64C7\u5217",
    // Filters toolbar button text
    toolbarFilters: "\u904E\u6FFE\u5668",
    toolbarFiltersLabel: "\u986F\u793A\u904E\u6FFE\u5668",
    toolbarFiltersTooltipHide: "\u96B1\u85CF\u904E\u6FFE\u5668",
    toolbarFiltersTooltipShow: "\u986F\u793A\u904E\u6FFE\u5668",
    toolbarFiltersTooltipActive: (count) => count !== 1 ? `${count} \u500B\u6709\u6548\u904E\u6FFE\u5668` : `${count} \u500B\u6D3B\u52D5\u904E\u6FFE\u5668`,
    // Quick filter toolbar field
    toolbarQuickFilterPlaceholder: "\u641C\u5C0B\u2026",
    toolbarQuickFilterLabel: "\u641C\u5C0B",
    toolbarQuickFilterDeleteIconLabel: "\u6E05\u9664",
    // Export selector toolbar button text
    toolbarExport: "\u51FA\u53E3",
    toolbarExportLabel: "\u51FA\u53E3",
    toolbarExportCSV: "\u4E0B\u8F09\u70BA CSV",
    toolbarExportPrint: "\u5217\u5370",
    toolbarExportExcel: "\u4E0B\u8F09\u70BA Excel",
    // Columns panel text
    columnsPanelTextFieldLabel: "\u67E5\u627E\u6B04\u76EE",
    columnsPanelTextFieldPlaceholder: "\u6B04\u76EE\u6A19\u984C",
    columnsPanelDragIconLabel: "\u91CD\u65B0\u6392\u5E8F\u5217",
    columnsPanelShowAllButton: "\u986F\u793A\u6240\u6709",
    columnsPanelHideAllButton: "\u5168\u90E8\u85CF\u8D77\u4F86",
    // Filter panel text
    filterPanelAddFilter: "\u65B0\u589E\u904E\u6FFE\u5668",
    filterPanelRemoveAll: "\u79FB\u9664\u6240\u6709",
    filterPanelDeleteIconLabel: "\u522A\u9664",
    filterPanelLogicOperator: "\u908F\u8F2F\u904B\u7B97\u7B26",
    filterPanelOperator: "\u64CD\u4F5C\u54E1",
    filterPanelOperatorAnd: "\u548C",
    filterPanelOperatorOr: "\u6216\u8005",
    filterPanelColumns: "\u5217",
    filterPanelInputLabel: "\u50F9\u503C",
    filterPanelInputPlaceholder: "\u904E\u6FFE\u503C",
    // Filter operators text
    filterOperatorContains: "\u5305\u542B",
    filterOperatorEquals: "\u7B49\u65BC",
    filterOperatorStartsWith: "\u4EE5\u3002\u3002\u958B\u59CB",
    filterOperatorEndsWith: "\u4EE5\u3002\u3002\u7D50\u675F",
    filterOperatorIs: "\u662F",
    filterOperatorNot: "\u4E0D\u662F",
    filterOperatorAfter: "\u662F\u5728\u4E4B\u5F8C",
    filterOperatorOnOrAfter: "\u662F\u5728\u6216\u4E4B\u5F8C",
    filterOperatorBefore: "\u662F\u5728\u4E4B\u524D",
    filterOperatorOnOrBefore: "\u662F\u5728\u6216\u4E4B\u524D",
    filterOperatorIsEmpty: "\u662F\u7A7A\u7684",
    filterOperatorIsNotEmpty: "\u4E0D\u70BA\u7A7A",
    filterOperatorIsAnyOf: "\u662F\u4EE5\u4E0B\u4EFB\u4E00\u500B",
    "filterOperator=": "=",
    "filterOperator!=": "!=",
    "filterOperator>": ">",
    "filterOperator>=": ">=",
    "filterOperator<": "<",
    "filterOperator<=": "<=",
    // Header filter operators text
    headerFilterOperatorContains: "\u5305\u542B",
    headerFilterOperatorEquals: "\u7B49\u65BC",
    headerFilterOperatorStartsWith: "\u4EE5\u3002\u3002\u958B\u59CB",
    headerFilterOperatorEndsWith: "\u4EE5\u3002\u3002\u7D50\u675F",
    headerFilterOperatorIs: "\u662F",
    headerFilterOperatorNot: "\u4E0D\u662F",
    headerFilterOperatorAfter: "\u662F\u5728\u4E4B\u5F8C",
    headerFilterOperatorOnOrAfter: "\u662F\u5728\u6216\u4E4B\u5F8C",
    headerFilterOperatorBefore: "\u662F\u4E4B\u524D",
    headerFilterOperatorOnOrBefore: "\u662F\u5728\u6216\u4E4B\u524D",
    headerFilterOperatorIsEmpty: "\u662F\u7A7A\u7684",
    headerFilterOperatorIsNotEmpty: "\u4E0D\u70BA\u7A7A",
    headerFilterOperatorIsAnyOf: "\u662F\u4EE5\u4E0B\u4EFB\u4E00\u500B",
    "headerFilterOperator=": "\u7B49\u65BC",
    "headerFilterOperator!=": "\u4E0D\u7B49\u65BC",
    "headerFilterOperator>": "\u6BD4...\u66F4\u68D2",
    "headerFilterOperator>=": "\u5927\u65BC\u6216\u7B49\u65BC",
    "headerFilterOperator<": "\u5C11\u65BC",
    "headerFilterOperator<=": "\u5C0F\u65BC\u6216\u7B49\u65BC",
    // Filter values text
    filterValueAny: "\u4EFB\u4F55",
    filterValueTrue: "\u771F\u7684",
    filterValueFalse: "\u932F\u8AA4\u7684",
    // Column menu text
    columnMenuLabel: "\u9078\u55AE",
    columnMenuShowColumns: "\u986F\u793A\u6B04\u76EE",
    columnMenuManageColumns: "\u7BA1\u7406\u6B04\u76EE",
    columnMenuFilter: "\u7BE9\u9078",
    columnMenuHideColumn: "\u96B1\u85CF\u5217",
    columnMenuUnsort: "\u53D6\u6D88\u6392\u5E8F",
    columnMenuSortAsc: "\u6309\u5347\u5E8F\u6392\u5E8F",
    columnMenuSortDesc: "\u6309\u964D\u5E8F\u6392\u5E8F",
    // Column header text
    columnHeaderFiltersTooltipActive: (count) => count !== 1 ? `${count} \u500B\u6709\u6548\u904E\u6FFE\u5668` : `${count} \u500B\u6D3B\u52D5\u904E\u6FFE\u5668`,
    columnHeaderFiltersLabel: "\u986F\u793A\u904E\u6FFE\u5668",
    columnHeaderSortIconLabel: "\u7A2E\u985E",
    // Rows selected footer text
    footerRowSelected: (count) => count !== 1 ? `\u5DF2\u9078\u64C7 ${count.toLocaleString()} \u884C` : `\u5DF2\u9078\u64C7 ${count.toLocaleString()} \u884C`,
    // Total row amount footer text
    footerTotalRows: "\u7E3D\u884C\u6578\uFF1A",
    // Total visible row amount footer text
    footerTotalVisibleRows: (visibleCount, totalCount) => `${totalCount.toLocaleString()} \u7684 ${visibleCount.toLocaleString()}`,
    // Checkbox selection text
    checkboxSelectionHeaderName: "\u8907\u9078\u6846\u9078\u64C7",
    checkboxSelectionSelectAllRows: "\u9078\u64C7\u6240\u6709\u884C",
    checkboxSelectionUnselectAllRows: "\u53D6\u6D88\u9078\u64C7\u6240\u6709\u884C",
    checkboxSelectionSelectRow: "\u9078\u64C7\u884C",
    checkboxSelectionUnselectRow: "\u53D6\u6D88\u9078\u64C7\u884C",
    // Boolean cell text
    booleanCellTrueLabel: "\u662F\u7684",
    booleanCellFalseLabel: "\u4E0D",
    // Actions cell more text
    actionsCellMore: "\u66F4\u591A\u7684",
    // Column pinning text
    pinToLeft: "\u56FA\u5B9A\u5230\u5DE6\u5074",
    pinToRight: "\u56FA\u5B9A\u5230\u53F3\u5074",
    unpin: "\u53D6\u6D88\u56FA\u5B9A",
    // Tree Data
    treeDataGroupingHeaderName: "Group",
    treeDataExpand: "\u770B\u770B\u5B69\u5B50\u5011",
    treeDataCollapse: "\u96B1\u85CF\u5B69\u5B50",
    // Grouping columns
    groupingColumnHeaderName: "\u5718\u9AD4",
    groupColumn: (name) => `\u6309 ${name} \u5206\u7D44`,
    unGroupColumn: (name) => `\u505C\u6B62\u4EE5 ${name} \u5206\u7D44`,
    // Master/detail
    detailPanelToggle: "\u8A73\u7D30\u8CC7\u8A0A\u9762\u677F\u5207\u63DB",
    expandDetailPanel: "\u64F4\u5F35",
    collapseDetailPanel: "\u574D\u584C",
    // Row reordering text
    rowReorderingHeaderName: "\u884C\u91CD\u65B0\u6392\u5E8F",
    // Aggregation
    aggregationMenuItemHeader: "\u805A\u5408",
    aggregationFunctionLabelSum: "\u548C",
    aggregationFunctionLabelAvg: "\u5E73\u5747",
    aggregationFunctionLabelMin: "\u5206\u5206\u9418",
    aggregationFunctionLabelMax: "\u6700\u5927\u9650\u5EA6",
    aggregationFunctionLabelSize: "\u5C3A\u5BF8"
  };
  var zhHK2 = getGridLocalization(zhHKGrid, zhHK);
  return __toCommonJS(index_exports);
})();
/*! Bundled license information:

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-is/cjs/react-is.development.js:
react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

react-is/cjs/react-is.development.js:
  (**
   * @license React
   * react-is.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react/cjs/react-jsx-runtime.development.js:
  (**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/styled-engine/node/index.js:
  (**
   * @mui/styled-engine v5.18.0
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

@mui/x-data-grid/index.js:
  (**
   * @mui/x-data-grid v6.20.4
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
